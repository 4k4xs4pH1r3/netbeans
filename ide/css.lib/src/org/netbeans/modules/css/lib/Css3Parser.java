// $ANTLR 3.5.2 /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g 2023-09-14 17:57:00

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// DO NOT EDIT THIS FILE MANUALLY!
// SEE Css3.g FOR INSTRUCTIONS

package org.netbeans.modules.css.lib;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.debug.*;
import java.io.IOException;
@SuppressWarnings("all")
public class Css3Parser extends DebugParser {
	public static final String[] tokenNames = new String[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "ANGLE", "AT_IDENT", "AT_SIGN", 
		"B", "BEGINS", "BOTTOMCENTER_SYM", "BOTTOMLEFTCORNER_SYM", "BOTTOMLEFT_SYM", 
		"BOTTOMRIGHTCORNER_SYM", "BOTTOMRIGHT_SYM", "C", "CDC", "CDO", "CHARSET_SYM", 
		"COLON", "COMMA", "COMMENT", "CONTAINS", "COUNTER_STYLE_SYM", "CP_DOTS", 
		"CP_EQ", "CP_NOT_EQ", "D", "DASHMATCH", "DCOLON", "DIMENSION", "DOT", 
		"E", "EMS", "ENDS", "ESCAPE", "EXCLAMATION_MARK", "EXS", "F", "FONT_FACE_SYM", 
		"FREQ", "G", "GEN", "GREATER", "GREATER_OR_EQ", "H", "HASH", "HASH_SYMBOL", 
		"HEXCHAR", "HEXCHAR_WILDCARD", "I", "IDENT", "IMPORTANT_SYM", "IMPORT_SYM", 
		"INCLUDES", "INVALID", "J", "K", "L", "LAYER_SYM", "LBRACE", "LBRACKET", 
		"LEFTBOTTOM_SYM", "LEFTMIDDLE_SYM", "LEFTTOP_SYM", "LENGTH", "LESS", "LESS_AND", 
		"LESS_JS_STRING", "LESS_OR_EQ", "LESS_REST", "LINE_COMMENT", "LPAREN", 
		"M", "MEDIA_SYM", "MINUS", "MOZ_DOCUMENT_SYM", "MOZ_DOMAIN", "MOZ_REGEXP", 
		"MOZ_URL_PREFIX", "N", "NAME", "NAMESPACE_SYM", "NL", "NMCHAR", "NMSTART", 
		"NONASCII", "NOT", "NUMBER", "O", "OPEQ", "P", "PAGE_SYM", "PERCENTAGE", 
		"PERCENTAGE_SYMBOL", "PIPE", "PLUS", "Q", "R", "RBRACE", "RBRACKET", "REM", 
		"RESOLUTION", "RIGHTBOTTOM_SYM", "RIGHTMIDDLE_SYM", "RIGHTTOP_SYM", "RPAREN", 
		"S", "SASS_AT_ROOT", "SASS_CONTENT", "SASS_DEBUG", "SASS_DEFAULT", "SASS_EACH", 
		"SASS_ELSE", "SASS_ELSEIF", "SASS_ERROR", "SASS_EXTEND", "SASS_EXTEND_ONLY_SELECTOR", 
		"SASS_FOR", "SASS_FORWARD", "SASS_FUNCTION", "SASS_GLOBAL", "SASS_IF", 
		"SASS_INCLUDE", "SASS_MIXIN", "SASS_OPTIONAL", "SASS_RETURN", "SASS_USE", 
		"SASS_VAR", "SASS_WARN", "SASS_WHILE", "SEMI", "SOLIDUS", "STAR", "STRING", 
		"SUPPORTS_SYM", "T", "TILDE", "TIME", "TOPCENTER_SYM", "TOPLEFTCORNER_SYM", 
		"TOPLEFT_SYM", "TOPRIGHTCORNER_SYM", "TOPRIGHT_SYM", "U", "UNICODE", "URANGE", 
		"URI", "URL", "V", "VARIABLE", "W", "WEBKIT_KEYFRAMES_SYM", "WS", "X", 
		"Y", "Z"
	};
	public static final int EOF=-1;
	public static final int A=4;
	public static final int ANGLE=5;
	public static final int AT_IDENT=6;
	public static final int AT_SIGN=7;
	public static final int B=8;
	public static final int BEGINS=9;
	public static final int BOTTOMCENTER_SYM=10;
	public static final int BOTTOMLEFTCORNER_SYM=11;
	public static final int BOTTOMLEFT_SYM=12;
	public static final int BOTTOMRIGHTCORNER_SYM=13;
	public static final int BOTTOMRIGHT_SYM=14;
	public static final int C=15;
	public static final int CDC=16;
	public static final int CDO=17;
	public static final int CHARSET_SYM=18;
	public static final int COLON=19;
	public static final int COMMA=20;
	public static final int COMMENT=21;
	public static final int CONTAINS=22;
	public static final int COUNTER_STYLE_SYM=23;
	public static final int CP_DOTS=24;
	public static final int CP_EQ=25;
	public static final int CP_NOT_EQ=26;
	public static final int D=27;
	public static final int DASHMATCH=28;
	public static final int DCOLON=29;
	public static final int DIMENSION=30;
	public static final int DOT=31;
	public static final int E=32;
	public static final int EMS=33;
	public static final int ENDS=34;
	public static final int ESCAPE=35;
	public static final int EXCLAMATION_MARK=36;
	public static final int EXS=37;
	public static final int F=38;
	public static final int FONT_FACE_SYM=39;
	public static final int FREQ=40;
	public static final int G=41;
	public static final int GEN=42;
	public static final int GREATER=43;
	public static final int GREATER_OR_EQ=44;
	public static final int H=45;
	public static final int HASH=46;
	public static final int HASH_SYMBOL=47;
	public static final int HEXCHAR=48;
	public static final int HEXCHAR_WILDCARD=49;
	public static final int I=50;
	public static final int IDENT=51;
	public static final int IMPORTANT_SYM=52;
	public static final int IMPORT_SYM=53;
	public static final int INCLUDES=54;
	public static final int INVALID=55;
	public static final int J=56;
	public static final int K=57;
	public static final int L=58;
	public static final int LAYER_SYM=59;
	public static final int LBRACE=60;
	public static final int LBRACKET=61;
	public static final int LEFTBOTTOM_SYM=62;
	public static final int LEFTMIDDLE_SYM=63;
	public static final int LEFTTOP_SYM=64;
	public static final int LENGTH=65;
	public static final int LESS=66;
	public static final int LESS_AND=67;
	public static final int LESS_JS_STRING=68;
	public static final int LESS_OR_EQ=69;
	public static final int LESS_REST=70;
	public static final int LINE_COMMENT=71;
	public static final int LPAREN=72;
	public static final int M=73;
	public static final int MEDIA_SYM=74;
	public static final int MINUS=75;
	public static final int MOZ_DOCUMENT_SYM=76;
	public static final int MOZ_DOMAIN=77;
	public static final int MOZ_REGEXP=78;
	public static final int MOZ_URL_PREFIX=79;
	public static final int N=80;
	public static final int NAME=81;
	public static final int NAMESPACE_SYM=82;
	public static final int NL=83;
	public static final int NMCHAR=84;
	public static final int NMSTART=85;
	public static final int NONASCII=86;
	public static final int NOT=87;
	public static final int NUMBER=88;
	public static final int O=89;
	public static final int OPEQ=90;
	public static final int P=91;
	public static final int PAGE_SYM=92;
	public static final int PERCENTAGE=93;
	public static final int PERCENTAGE_SYMBOL=94;
	public static final int PIPE=95;
	public static final int PLUS=96;
	public static final int Q=97;
	public static final int R=98;
	public static final int RBRACE=99;
	public static final int RBRACKET=100;
	public static final int REM=101;
	public static final int RESOLUTION=102;
	public static final int RIGHTBOTTOM_SYM=103;
	public static final int RIGHTMIDDLE_SYM=104;
	public static final int RIGHTTOP_SYM=105;
	public static final int RPAREN=106;
	public static final int S=107;
	public static final int SASS_AT_ROOT=108;
	public static final int SASS_CONTENT=109;
	public static final int SASS_DEBUG=110;
	public static final int SASS_DEFAULT=111;
	public static final int SASS_EACH=112;
	public static final int SASS_ELSE=113;
	public static final int SASS_ELSEIF=114;
	public static final int SASS_ERROR=115;
	public static final int SASS_EXTEND=116;
	public static final int SASS_EXTEND_ONLY_SELECTOR=117;
	public static final int SASS_FOR=118;
	public static final int SASS_FORWARD=119;
	public static final int SASS_FUNCTION=120;
	public static final int SASS_GLOBAL=121;
	public static final int SASS_IF=122;
	public static final int SASS_INCLUDE=123;
	public static final int SASS_MIXIN=124;
	public static final int SASS_OPTIONAL=125;
	public static final int SASS_RETURN=126;
	public static final int SASS_USE=127;
	public static final int SASS_VAR=128;
	public static final int SASS_WARN=129;
	public static final int SASS_WHILE=130;
	public static final int SEMI=131;
	public static final int SOLIDUS=132;
	public static final int STAR=133;
	public static final int STRING=134;
	public static final int SUPPORTS_SYM=135;
	public static final int T=136;
	public static final int TILDE=137;
	public static final int TIME=138;
	public static final int TOPCENTER_SYM=139;
	public static final int TOPLEFTCORNER_SYM=140;
	public static final int TOPLEFT_SYM=141;
	public static final int TOPRIGHTCORNER_SYM=142;
	public static final int TOPRIGHT_SYM=143;
	public static final int U=144;
	public static final int UNICODE=145;
	public static final int URANGE=146;
	public static final int URI=147;
	public static final int URL=148;
	public static final int V=149;
	public static final int VARIABLE=150;
	public static final int W=151;
	public static final int WEBKIT_KEYFRAMES_SYM=152;
	public static final int WS=153;
	public static final int X=154;
	public static final int Y=155;
	public static final int Z=156;

	// delegates
	public Parser[] getDelegates() {
		return new Parser[] {};
	}

	// delegators


	public static final String[] ruleNames = new String[] {
		"invalidRule", "less_fn_name", "synpred39_Css3", "synpred23_Css3", "webkitKeyframeSelectors", 
		"cp_mixin_declaration", "functionName", "sass_map_name", "syncTo_SEMI", 
		"cp_math_expressions", "less_function_in_condition", "synpred34_Css3", 
		"cp_propertyValue", "syncTo_RBRACE", "cp_mixin_name", "page", "slAttributeValue", 
		"synpred20_Css3", "styleSheet", "supportsDecl", "synpred22_Css3", "supportsWithOperator", 
		"sass_if", "expression", "cp_expression", "synpred50_Css3", "less_selector_interpolation", 
		"synpred17_Css3", "cp_arg", "synpred19_Css3", "synpred5_Css3", "cp_term_symbol", 
		"synpred31_Css3", "sass_selector_interpolation_exp", "synpred42_Css3", 
		"mediaExpression", "synpred16_Css3", "charSet", "imports", "synpred11_Css3", 
		"synpred44_Css3", "sass_control_expression", "less_import_types", "preservedTokenTopLevel", 
		"cp_math_expression_atom", "less_condition_operator", "synpred6_Css3", 
		"synpred24_Css3", "cp_expression_atom", "sass_forward_as", "declarations", 
		"sass_forward_with", "at_rule", "cp_math_expression", "synpred38_Css3", 
		"namespacePrefixName", "importItem", "importLayer", "mediaFeature", "cp_mixin_call", 
		"synpred43_Css3", "supportsFeature", "margin", "synpred40_Css3", "synpred55_Css3", 
		"namespace", "synpred29_Css3", "cssClass", "sass_else", "synpred54_Css3", 
		"syncToDeclarationsRule", "mediaQueryOperator", "counterStyle", "synpred3_Css3", 
		"rule", "synpred45_Css3", "typeSelector", "synpred26_Css3", "preservedToken", 
		"sass_map", "mediaFeatureValue", "sass_nested_properties", "componentValue", 
		"fnAttributes", "less_mixin_guarded", "charSetValue", "margin_sym", "synpred51_Css3", 
		"supportsConjunction", "cp_expression_operator", "synpred12_Css3", "synpred46_Css3", 
		"synpred41_Css3", "sass_use_as", "webkitKeyframesBlock", "cp_expression_list", 
		"sass_debug", "synpred7_Css3", "synpred14_Css3", "cp_mixin_call_args", 
		"bracketBlock", "sass_while", "synpred25_Css3", "cp_args_list", "less_condition", 
		"sass_control_block", "synpred53_Css3", "operator", "namespaces", "synpred37_Css3", 
		"media", "sass_use_with", "moz_document", "sass_content", "sass_use_with_declaration", 
		"less_when", "unaryOperator", "synpred49_Css3", "webkitKeyframes", "synpred56_Css3", 
		"synpred9_Css3", "mediaType", "pseudo", "mediaQueryList", "syncToFollow", 
		"synpred33_Css3", "property", "synpred28_Css3", "layerStatement", "supportsInParens", 
		"synpred2_Css3", "synpred21_Css3", "selector", "elementSubsequent", "sass_error", 
		"layerAtRule", "synpred32_Css3", "layerName", "vendorAtRule", "cp_mixin_block", 
		"simpleSelectorSequence", "moz_document_function", "sass_map_pair", "key_and", 
		"fnAttribute", "sass_extend_only_selector", "sass_interpolation_expression_var", 
		"synpred52_Css3", "declaration", "braceBlock", "esPred", "supportsDisjunction", 
		"synpred1_Css3", "sass_map_pairs", "synpred15_Css3", "resourceIdentifier", 
		"term", "layerBlock", "cssId", "fnAttributeName", "sass_use", "synpred47_Css3", 
		"prio", "sass_forward_show", "supportsAtRule", "fnAttributeValue", "slAttributeName", 
		"hexColor", "synpred30_Css3", "sass_forward_hide", "elementName", "synpred18_Css3", 
		"generic_at_rule", "sass_function_declaration", "sass_function_name", 
		"combinator", "propertyDeclaration", "componentValueOuter", "fontFace", 
		"parenBlock", "mediaQuery", "sass_function_return", "sass_for", "synpred27_Css3", 
		"layerBody", "mediaBody", "atRuleId", "bodyItem", "synpred13_Css3", "expressionPredicate", 
		"cp_variable_declaration", "sass_control", "key_or", "synpred35_Css3", 
		"synpred48_Css3", "sass_forward_with_declaration", "ws", "mediaBodyItem", 
		"selectorsGroup", "less_selector_interpolation_exp", "cp_variable", "sass_each_variables", 
		"sass_each", "synpred10_Css3", "body", "sass_extend", "slAttribute", "propertyValue", 
		"cp_mixin_call_arg", "synpred4_Css3", "supportsCondition", "namespacePrefix", 
		"synpred36_Css3", "key_only", "synpred8_Css3", "pseudoPage", "function", 
		"sass_forward"
	};

	public static final boolean[] decisionCanBacktrack = new boolean[] {
		false, // invalid decision
		false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, true, false, false, 
		    false, false, false, false, false, true, false, false, false, false, 
		    false, false, true, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    true, false, false, false, false, false, false, false, false, true, 
		    false, false, false, false, false, false, false, true, false, false, 
		    true, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, true, false, false, false, true, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    true, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, true, false, false, false, false, false, 
		    true, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, true, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, true, false, 
		    false, true, true, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, true, true, false, false, false, false, true, 
		    false, false, false, false, false, true, false, false, false, false, 
		    false, false, false, false, false, false, false, false, true, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, true, 
		    false, false, false, false, false, true, false, false, true, false, 
		    false, false, false, false, false, true, false, false, false, true, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, true, false, false, false, true, false, false, false, 
		    false, false, false, false, false, false, false, true, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false
	};

 
	public int ruleLevel = 0;
	public int getRuleLevel() { return ruleLevel; }
	public void incRuleLevel() { ruleLevel++; }
	public void decRuleLevel() { ruleLevel--; }
	public Css3Parser(TokenStream input) {
		this(input, DebugEventSocketProxy.DEFAULT_DEBUGGER_PORT, new RecognizerSharedState());
	}
	public Css3Parser(TokenStream input, int port, RecognizerSharedState state) {
		super(input, state);
		DebugEventSocketProxy proxy =
			new DebugEventSocketProxy(this, port, null);

		setDebugListener(proxy);
		try {
			proxy.handshake();
		}
		catch (IOException ioe) {
			reportError(ioe);
		}
	}

	public Css3Parser(TokenStream input, DebugEventListener dbg) {
		super(input, dbg, new RecognizerSharedState());
	}

	protected boolean evalPredicate(boolean result, String predicate) {
		dbg.semanticPredicate(result, predicate);
		return result;
	}

	@Override public String[] getTokenNames() { return Css3Parser.tokenNames; }
	@Override public String getGrammarFileName() { return "/home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g"; }



	    protected boolean isLessSource() {
	        return false;
	    }

	    protected boolean isScssSource() {
	        return false;
	    }

	    private boolean isCssPreprocessorSource() {
	        return isLessSource() || isScssSource();
	    }

	    private boolean tokenNameEquals(String tokenImage) {
	        return tokenImage.equalsIgnoreCase(input.LT(1).getText());
	    }
	    
	    private boolean tokenNameEquals2(String tokenImage) {
	        return tokenImage.equalsIgnoreCase(input.LT(2).getText());
	    }

	    private boolean tokenNameIs(String[] tokens) {
	        for(String tokenImage : tokens) {
	            if(tokenImage.equalsIgnoreCase(input.LT(1).getText())) {
	                return true;
	            }
	        }
	        return false;
	    }

	    private boolean tokenNameStartsWith(String prefix) {
	        return input.LT(1).getText() != null
	            && input.LT(1).getText().startsWith(prefix);
	    }

	    /**
	     * Use the current stacked followset to work out the valid tokens that
	     * can follow on from the current point in the parse, then recover by
	     * eating tokens that are not a member of the follow set we compute.
	     *
	     * This method is used whenever we wish to force a sync, even though
	     * the parser has not yet checked LA(1) for alt selection. This is useful
	     * in situations where only a subset of tokens can begin a new construct
	     * (such as the start of a new statement in a block) and we want to
	     * proactively detect garbage so that the current rule does not exit on
	     * on an exception.
	     *
	     * We could override recover() to make this the default behavior but that
	     * is too much like using a sledge hammer to crack a nut. We want finer
	     * grained control of the recovery and error mechanisms.
	     */
	    protected void syncToSet()
	    {
	        // Compute the followset that is in context wherever we are in the
	        // rule chain/stack
	        //
	         BitSet follow = state.following[state._fsp]; //computeContextSensitiveRuleFOLLOW();

	         syncToSet(follow);
	    }

	    protected void syncToSet(BitSet follow)
	    {
	        int mark = -1;

	        //create error-recovery node
	        dbg.enterRule(getGrammarFileName(), "recovery");

	        try {

	            mark = input.mark();

	            // Consume all tokens in the stream until we find a member of the follow
	            // set, which means the next production should be guaranteed to be happy.
	            //
	            while (! follow.member(input.LA(1)) ) {

	                if  (input.LA(1) == Token.EOF) {

	                    // Looks like we didn't find anything at all that can help us here
	                    // so we need to rewind to where we were and let normal error handling
	                    // bail out.
	                    //
	                    input.rewind();
	                    mark = -1;
	                    return;
	                }
	                input.consume();

	                // Now here, because you are consuming some tokens, yu will probably want
	                // to raise an error message such as "Spurious elements after the class member were discarded"
	                // using whatever your override of displayRecognitionError() routine does to record
	                // error messages. The exact error my depend on context etc.
	                //
	            }
	        } catch (Exception e) {

	          // Just ignore any errors here, we will just let the recognizer
	          // try to resync as normal - something must be very screwed.
	          //
	        }
	        finally {
	            dbg.exitRule(getGrammarFileName(), "recovery");

	            // Always release the mark we took
	            //
	            if  (mark != -1) {
	                input.release(mark);
	            }
	        }
	    }

	        /**
	         * synces to next RBRACE "}" taking nesting into account
	         */
	        protected void syncToRBRACE(int nest)
	            {

	                int mark = -1;
	                //create error-recovery node
	                //dbg.enterRule(getGrammarFileName(), "recovery");

	                try {
	                    mark = input.mark();
	                    for(;;) {
	                        //read char
	                        int c = input.LA(1);

	                        switch(c) {
	                            case Token.EOF:
	                                input.rewind();
	                                mark = -1;
	                                return ;
	                            case Css3Lexer.LBRACE:
	                                nest++;
	                                break;
	                            case Css3Lexer.RBRACE:
	                                nest--;
	                                if(nest == 0) {
	                                    //do not eat the final RBRACE
	                                    return ;
	                                }
	                        }

	                        input.consume();

	                    }

	                } catch (Exception e) {

	                  // Just ignore any errors here, we will just let the recognizer
	                  // try to resync as normal - something must be very screwed.
	                  //
	                }
	                finally {
	                    if  (mark != -1) {
	                        input.release(mark);
	                    }
	                    //dbg.exitRule(getGrammarFileName(), "recovery");
	                }
	            }




	// $ANTLR start "styleSheet"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:284:1: styleSheet : ( ws )? ( charSet ( ws )? )? ( layerStatement ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF ;
	public final void styleSheet() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "styleSheet");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(284, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:285:5: ( ( ws )? ( charSet ( ws )? )? ( layerStatement ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:286:6: ( ws )? ( charSet ( ws )? )? ( layerStatement ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF
			{
			dbg.location(286,6);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:286:6: ( ws )?
			int alt1=2;
			try { dbg.enterSubRule(1);
			try { dbg.enterDecision(1, decisionCanBacktrack[1]);

			int LA1_0 = input.LA(1);
			if ( (LA1_0==COMMENT||LA1_0==NL||LA1_0==WS) ) {
				alt1=1;
			}
			} finally {dbg.exitDecision(1);}

			switch (alt1) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:286:6: ws
					{
					dbg.location(286,6);
					pushFollow(FOLLOW_ws_in_styleSheet102);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(1);}
			dbg.location(287,6);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:287:6: ( charSet ( ws )? )?
			int alt3=2;
			try { dbg.enterSubRule(3);
			try { dbg.enterDecision(3, decisionCanBacktrack[3]);

			try {
				isCyclicDecision = true;
				alt3 = dfa3.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(3);}

			switch (alt3) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:287:8: charSet ( ws )?
					{
					dbg.location(287,8);
					pushFollow(FOLLOW_charSet_in_styleSheet112);
					charSet();
					state._fsp--;
					if (state.failed) return;dbg.location(287,16);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:287:16: ( ws )?
					int alt2=2;
					try { dbg.enterSubRule(2);
					try { dbg.enterDecision(2, decisionCanBacktrack[2]);

					int LA2_0 = input.LA(1);
					if ( (LA2_0==COMMENT||LA2_0==NL||LA2_0==WS) ) {
						alt2=1;
					}
					} finally {dbg.exitDecision(2);}

					switch (alt2) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:287:16: ws
							{
							dbg.location(287,16);
							pushFollow(FOLLOW_ws_in_styleSheet114);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(2);}

					}
					break;

			}
			} finally {dbg.exitSubRule(3);}
			dbg.location(288,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:288:9: ( layerStatement ( ws )? )?
			int alt5=2;
			try { dbg.enterSubRule(5);
			try { dbg.enterDecision(5, decisionCanBacktrack[5]);

			try {
				isCyclicDecision = true;
				alt5 = dfa5.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(5);}

			switch (alt5) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:288:11: layerStatement ( ws )?
					{
					dbg.location(288,11);
					pushFollow(FOLLOW_layerStatement_in_styleSheet130);
					layerStatement();
					state._fsp--;
					if (state.failed) return;dbg.location(288,26);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:288:26: ( ws )?
					int alt4=2;
					try { dbg.enterSubRule(4);
					try { dbg.enterDecision(4, decisionCanBacktrack[4]);

					int LA4_0 = input.LA(1);
					if ( (LA4_0==COMMENT||LA4_0==NL||LA4_0==WS) ) {
						alt4=1;
					}
					} finally {dbg.exitDecision(4);}

					switch (alt4) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:288:26: ws
							{
							dbg.location(288,26);
							pushFollow(FOLLOW_ws_in_styleSheet132);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(4);}

					}
					break;

			}
			} finally {dbg.exitSubRule(5);}
			dbg.location(289,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:289:9: ( imports )?
			int alt6=2;
			try { dbg.enterSubRule(6);
			try { dbg.enterDecision(6, decisionCanBacktrack[6]);

			switch ( input.LA(1) ) {
				case IMPORT_SYM:
					{
					int LA6_1 = input.LA(2);
					if ( (!(evalPredicate(((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))),""))) ) {
						alt6=1;
					}
					}
					break;
				case SASS_USE:
					{
					int LA6_2 = input.LA(2);
					if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
						alt6=1;
					}
					}
					break;
				case SASS_FORWARD:
					{
					int LA6_3 = input.LA(2);
					if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
						alt6=1;
					}
					}
					break;
			}
			} finally {dbg.exitDecision(6);}

			switch (alt6) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:289:9: imports
					{
					dbg.location(289,9);
					pushFollow(FOLLOW_imports_in_styleSheet146);
					imports();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(6);}
			dbg.location(290,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:290:9: ( namespaces )?
			int alt7=2;
			try { dbg.enterSubRule(7);
			try { dbg.enterDecision(7, decisionCanBacktrack[7]);

			try {
				isCyclicDecision = true;
				alt7 = dfa7.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(7);}

			switch (alt7) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:290:9: namespaces
					{
					dbg.location(290,9);
					pushFollow(FOLLOW_namespaces_in_styleSheet157);
					namespaces();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(7);}
			dbg.location(291,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:291:9: ( body )?
			int alt8=2;
			try { dbg.enterSubRule(8);
			try { dbg.enterDecision(8, decisionCanBacktrack[8]);

			int LA8_0 = input.LA(1);
			if ( ((LA8_0 >= AT_IDENT && LA8_0 <= AT_SIGN)||(LA8_0 >= BOTTOMCENTER_SYM && LA8_0 <= BOTTOMRIGHT_SYM)||(LA8_0 >= CHARSET_SYM && LA8_0 <= COLON)||LA8_0==COUNTER_STYLE_SYM||(LA8_0 >= DCOLON && LA8_0 <= DOT)||LA8_0==FONT_FACE_SYM||(LA8_0 >= GEN && LA8_0 <= GREATER)||(LA8_0 >= HASH && LA8_0 <= HASH_SYMBOL)||LA8_0==IDENT||LA8_0==IMPORT_SYM||LA8_0==LAYER_SYM||(LA8_0 >= LBRACKET && LA8_0 <= LEFTTOP_SYM)||LA8_0==LESS_AND||(LA8_0 >= MEDIA_SYM && LA8_0 <= MOZ_DOCUMENT_SYM)||LA8_0==NAMESPACE_SYM||LA8_0==PAGE_SYM||(LA8_0 >= PIPE && LA8_0 <= PLUS)||(LA8_0 >= RIGHTBOTTOM_SYM && LA8_0 <= RIGHTTOP_SYM)||(LA8_0 >= SASS_AT_ROOT && LA8_0 <= SASS_DEBUG)||(LA8_0 >= SASS_EACH && LA8_0 <= SASS_ELSE)||(LA8_0 >= SASS_EXTEND && LA8_0 <= SASS_FUNCTION)||(LA8_0 >= SASS_IF && LA8_0 <= SASS_MIXIN)||(LA8_0 >= SASS_RETURN && LA8_0 <= SEMI)||LA8_0==STAR||LA8_0==SUPPORTS_SYM||LA8_0==TILDE||(LA8_0 >= TOPCENTER_SYM && LA8_0 <= TOPRIGHT_SYM)||LA8_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt8=1;
			}
			} finally {dbg.exitDecision(8);}

			switch (alt8) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:291:9: body
					{
					dbg.location(291,9);
					pushFollow(FOLLOW_body_in_styleSheet168);
					body();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(8);}
			dbg.location(292,6);
			match(input,EOF,FOLLOW_EOF_in_styleSheet176); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(293, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "styleSheet");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "styleSheet"



	// $ANTLR start "namespaces"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:295:1: namespaces : ( namespace ( ws )? )+ ;
	public final void namespaces() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "namespaces");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(295, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:296:2: ( ( namespace ( ws )? )+ )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:297:2: ( namespace ( ws )? )+
			{
			dbg.location(297,2);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:297:2: ( namespace ( ws )? )+
			int cnt10=0;
			try { dbg.enterSubRule(10);

			loop10:
			while (true) {
				int alt10=2;
				try { dbg.enterDecision(10, decisionCanBacktrack[10]);

				try {
					isCyclicDecision = true;
					alt10 = dfa10.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(10);}

				switch (alt10) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:297:4: namespace ( ws )?
					{
					dbg.location(297,4);
					pushFollow(FOLLOW_namespace_in_namespaces193);
					namespace();
					state._fsp--;
					if (state.failed) return;dbg.location(297,14);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:297:14: ( ws )?
					int alt9=2;
					try { dbg.enterSubRule(9);
					try { dbg.enterDecision(9, decisionCanBacktrack[9]);

					int LA9_0 = input.LA(1);
					if ( (LA9_0==COMMENT||LA9_0==NL||LA9_0==WS) ) {
						alt9=1;
					}
					} finally {dbg.exitDecision(9);}

					switch (alt9) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:297:14: ws
							{
							dbg.location(297,14);
							pushFollow(FOLLOW_ws_in_namespaces195);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(9);}

					}
					break;

				default :
					if ( cnt10 >= 1 ) break loop10;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(10, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt10++;
			}
			} finally {dbg.exitSubRule(10);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(298, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "namespaces");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "namespaces"



	// $ANTLR start "namespace"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:300:1: namespace : NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI ;
	public final void namespace() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "namespace");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(300, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:301:3: ( NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:301:5: NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI
			{
			dbg.location(301,5);
			match(input,NAMESPACE_SYM,FOLLOW_NAMESPACE_SYM_in_namespace211); if (state.failed) return;dbg.location(301,19);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:301:19: ( ws )?
			int alt11=2;
			try { dbg.enterSubRule(11);
			try { dbg.enterDecision(11, decisionCanBacktrack[11]);

			int LA11_0 = input.LA(1);
			if ( (LA11_0==COMMENT||LA11_0==NL||LA11_0==WS) ) {
				alt11=1;
			}
			} finally {dbg.exitDecision(11);}

			switch (alt11) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:301:19: ws
					{
					dbg.location(301,19);
					pushFollow(FOLLOW_ws_in_namespace213);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(11);}
			dbg.location(301,23);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:301:23: ( namespacePrefixName ( ws )? )?
			int alt13=2;
			try { dbg.enterSubRule(13);
			try { dbg.enterDecision(13, decisionCanBacktrack[13]);

			int LA13_0 = input.LA(1);
			if ( (LA13_0==IDENT) ) {
				alt13=1;
			}
			} finally {dbg.exitDecision(13);}

			switch (alt13) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:301:24: namespacePrefixName ( ws )?
					{
					dbg.location(301,24);
					pushFollow(FOLLOW_namespacePrefixName_in_namespace217);
					namespacePrefixName();
					state._fsp--;
					if (state.failed) return;dbg.location(301,44);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:301:44: ( ws )?
					int alt12=2;
					try { dbg.enterSubRule(12);
					try { dbg.enterDecision(12, decisionCanBacktrack[12]);

					int LA12_0 = input.LA(1);
					if ( (LA12_0==COMMENT||LA12_0==NL||LA12_0==WS) ) {
						alt12=1;
					}
					} finally {dbg.exitDecision(12);}

					switch (alt12) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:301:44: ws
							{
							dbg.location(301,44);
							pushFollow(FOLLOW_ws_in_namespace219);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(12);}

					}
					break;

			}
			} finally {dbg.exitSubRule(13);}
			dbg.location(301,50);
			pushFollow(FOLLOW_resourceIdentifier_in_namespace224);
			resourceIdentifier();
			state._fsp--;
			if (state.failed) return;dbg.location(301,69);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:301:69: ( ws )?
			int alt14=2;
			try { dbg.enterSubRule(14);
			try { dbg.enterDecision(14, decisionCanBacktrack[14]);

			int LA14_0 = input.LA(1);
			if ( (LA14_0==COMMENT||LA14_0==NL||LA14_0==WS) ) {
				alt14=1;
			}
			} finally {dbg.exitDecision(14);}

			switch (alt14) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:301:69: ws
					{
					dbg.location(301,69);
					pushFollow(FOLLOW_ws_in_namespace226);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(14);}
			dbg.location(301,73);
			match(input,SEMI,FOLLOW_SEMI_in_namespace229); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(302, 2);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "namespace");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "namespace"



	// $ANTLR start "namespacePrefixName"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:304:1: namespacePrefixName : IDENT ;
	public final void namespacePrefixName() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "namespacePrefixName");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(304, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:305:3: ( IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:305:5: IDENT
			{
			dbg.location(305,5);
			match(input,IDENT,FOLLOW_IDENT_in_namespacePrefixName242); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(306, 2);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "namespacePrefixName");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "namespacePrefixName"



	// $ANTLR start "resourceIdentifier"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:308:1: resourceIdentifier : ( STRING | URI );
	public final void resourceIdentifier() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "resourceIdentifier");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(308, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:309:3: ( STRING | URI )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(309,3);
			if ( input.LA(1)==STRING||input.LA(1)==URI ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(310, 2);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "resourceIdentifier");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "resourceIdentifier"



	// $ANTLR start "charSet"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:312:1: charSet : CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI ;
	public final void charSet() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "charSet");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(312, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:313:5: ( CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:313:9: CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI
			{
			dbg.location(313,9);
			match(input,CHARSET_SYM,FOLLOW_CHARSET_SYM_in_charSet276); if (state.failed) return;dbg.location(313,21);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:313:21: ( ws )?
			int alt15=2;
			try { dbg.enterSubRule(15);
			try { dbg.enterDecision(15, decisionCanBacktrack[15]);

			int LA15_0 = input.LA(1);
			if ( (LA15_0==COMMENT||LA15_0==NL||LA15_0==WS) ) {
				alt15=1;
			}
			} finally {dbg.exitDecision(15);}

			switch (alt15) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:313:21: ws
					{
					dbg.location(313,21);
					pushFollow(FOLLOW_ws_in_charSet278);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(15);}
			dbg.location(313,25);
			pushFollow(FOLLOW_charSetValue_in_charSet281);
			charSetValue();
			state._fsp--;
			if (state.failed) return;dbg.location(313,38);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:313:38: ( ws )?
			int alt16=2;
			try { dbg.enterSubRule(16);
			try { dbg.enterDecision(16, decisionCanBacktrack[16]);

			int LA16_0 = input.LA(1);
			if ( (LA16_0==COMMENT||LA16_0==NL||LA16_0==WS) ) {
				alt16=1;
			}
			} finally {dbg.exitDecision(16);}

			switch (alt16) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:313:38: ws
					{
					dbg.location(313,38);
					pushFollow(FOLLOW_ws_in_charSet283);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(16);}
			dbg.location(313,42);
			match(input,SEMI,FOLLOW_SEMI_in_charSet286); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(314, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "charSet");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "charSet"



	// $ANTLR start "charSetValue"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:316:1: charSetValue : STRING ;
	public final void charSetValue() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "charSetValue");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(316, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:317:2: ( STRING )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:317:4: STRING
			{
			dbg.location(317,4);
			match(input,STRING,FOLLOW_STRING_in_charSetValue300); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(318, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "charSetValue");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "charSetValue"



	// $ANTLR start "imports"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:320:1: imports : ( ( importItem ( ws )? SEMI ( ws )? ) |{...}? ( sass_use ( ws )? SEMI ( ws )? ) |{...}? ( sass_forward ( ws )? SEMI ( ws )? ) )+ ;
	public final void imports() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "imports");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(320, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:321:2: ( ( ( importItem ( ws )? SEMI ( ws )? ) |{...}? ( sass_use ( ws )? SEMI ( ws )? ) |{...}? ( sass_forward ( ws )? SEMI ( ws )? ) )+ )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:322:2: ( ( importItem ( ws )? SEMI ( ws )? ) |{...}? ( sass_use ( ws )? SEMI ( ws )? ) |{...}? ( sass_forward ( ws )? SEMI ( ws )? ) )+
			{
			dbg.location(322,2);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:322:2: ( ( importItem ( ws )? SEMI ( ws )? ) |{...}? ( sass_use ( ws )? SEMI ( ws )? ) |{...}? ( sass_forward ( ws )? SEMI ( ws )? ) )+
			int cnt23=0;
			try { dbg.enterSubRule(23);

			loop23:
			while (true) {
				int alt23=4;
				try { dbg.enterDecision(23, decisionCanBacktrack[23]);

				switch ( input.LA(1) ) {
				case IMPORT_SYM:
					{
					int LA23_29 = input.LA(2);
					if ( (!(evalPredicate(((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))),""))) ) {
						alt23=1;
					}

					}
					break;
				case SASS_USE:
					{
					int LA23_37 = input.LA(2);
					if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
						alt23=2;
					}

					}
					break;
				case SASS_FORWARD:
					{
					int LA23_40 = input.LA(2);
					if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
						alt23=3;
					}

					}
					break;
				}
				} finally {dbg.exitDecision(23);}

				switch (alt23) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:323:13: ( importItem ( ws )? SEMI ( ws )? )
					{
					dbg.location(323,13);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:323:13: ( importItem ( ws )? SEMI ( ws )? )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:323:15: importItem ( ws )? SEMI ( ws )?
					{
					dbg.location(323,15);
					pushFollow(FOLLOW_importItem_in_imports328);
					importItem();
					state._fsp--;
					if (state.failed) return;dbg.location(323,26);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:323:26: ( ws )?
					int alt17=2;
					try { dbg.enterSubRule(17);
					try { dbg.enterDecision(17, decisionCanBacktrack[17]);

					int LA17_0 = input.LA(1);
					if ( (LA17_0==COMMENT||LA17_0==NL||LA17_0==WS) ) {
						alt17=1;
					}
					} finally {dbg.exitDecision(17);}

					switch (alt17) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:323:26: ws
							{
							dbg.location(323,26);
							pushFollow(FOLLOW_ws_in_imports330);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(17);}
					dbg.location(323,30);
					match(input,SEMI,FOLLOW_SEMI_in_imports333); if (state.failed) return;dbg.location(323,35);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:323:35: ( ws )?
					int alt18=2;
					try { dbg.enterSubRule(18);
					try { dbg.enterDecision(18, decisionCanBacktrack[18]);

					int LA18_0 = input.LA(1);
					if ( (LA18_0==COMMENT||LA18_0==NL||LA18_0==WS) ) {
						alt18=1;
					}
					} finally {dbg.exitDecision(18);}

					switch (alt18) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:323:35: ws
							{
							dbg.location(323,35);
							pushFollow(FOLLOW_ws_in_imports335);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(18);}

					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:325:13: {...}? ( sass_use ( ws )? SEMI ( ws )? )
					{
					dbg.location(325,13);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "imports", "isScssSource()");
					}dbg.location(325,31);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:325:31: ( sass_use ( ws )? SEMI ( ws )? )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:325:33: sass_use ( ws )? SEMI ( ws )?
					{
					dbg.location(325,33);
					pushFollow(FOLLOW_sass_use_in_imports370);
					sass_use();
					state._fsp--;
					if (state.failed) return;dbg.location(325,42);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:325:42: ( ws )?
					int alt19=2;
					try { dbg.enterSubRule(19);
					try { dbg.enterDecision(19, decisionCanBacktrack[19]);

					int LA19_0 = input.LA(1);
					if ( (LA19_0==COMMENT||LA19_0==NL||LA19_0==WS) ) {
						alt19=1;
					}
					} finally {dbg.exitDecision(19);}

					switch (alt19) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:325:42: ws
							{
							dbg.location(325,42);
							pushFollow(FOLLOW_ws_in_imports372);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(19);}
					dbg.location(325,46);
					match(input,SEMI,FOLLOW_SEMI_in_imports375); if (state.failed) return;dbg.location(325,51);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:325:51: ( ws )?
					int alt20=2;
					try { dbg.enterSubRule(20);
					try { dbg.enterDecision(20, decisionCanBacktrack[20]);

					int LA20_0 = input.LA(1);
					if ( (LA20_0==COMMENT||LA20_0==NL||LA20_0==WS) ) {
						alt20=1;
					}
					} finally {dbg.exitDecision(20);}

					switch (alt20) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:325:51: ws
							{
							dbg.location(325,51);
							pushFollow(FOLLOW_ws_in_imports377);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(20);}

					}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:327:13: {...}? ( sass_forward ( ws )? SEMI ( ws )? )
					{
					dbg.location(327,13);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "imports", "isScssSource()");
					}dbg.location(327,31);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:327:31: ( sass_forward ( ws )? SEMI ( ws )? )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:327:33: sass_forward ( ws )? SEMI ( ws )?
					{
					dbg.location(327,33);
					pushFollow(FOLLOW_sass_forward_in_imports412);
					sass_forward();
					state._fsp--;
					if (state.failed) return;dbg.location(327,46);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:327:46: ( ws )?
					int alt21=2;
					try { dbg.enterSubRule(21);
					try { dbg.enterDecision(21, decisionCanBacktrack[21]);

					int LA21_0 = input.LA(1);
					if ( (LA21_0==COMMENT||LA21_0==NL||LA21_0==WS) ) {
						alt21=1;
					}
					} finally {dbg.exitDecision(21);}

					switch (alt21) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:327:46: ws
							{
							dbg.location(327,46);
							pushFollow(FOLLOW_ws_in_imports414);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(21);}
					dbg.location(327,50);
					match(input,SEMI,FOLLOW_SEMI_in_imports417); if (state.failed) return;dbg.location(327,55);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:327:55: ( ws )?
					int alt22=2;
					try { dbg.enterSubRule(22);
					try { dbg.enterDecision(22, decisionCanBacktrack[22]);

					int LA22_0 = input.LA(1);
					if ( (LA22_0==COMMENT||LA22_0==NL||LA22_0==WS) ) {
						alt22=1;
					}
					} finally {dbg.exitDecision(22);}

					switch (alt22) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:327:55: ws
							{
							dbg.location(327,55);
							pushFollow(FOLLOW_ws_in_imports419);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(22);}

					}

					}
					break;

				default :
					if ( cnt23 >= 1 ) break loop23;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(23, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt23++;
			}
			} finally {dbg.exitSubRule(23);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(329, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "imports");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "imports"



	// $ANTLR start "importItem"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:331:1: importItem : ( IMPORT_SYM ( ws )? resourceIdentifier ( ws )? ( importLayer )? ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? |{...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ws )? ( importLayer )? ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? |{...}? IMPORT_SYM ( ws )? ( LPAREN less_import_types RPAREN ( ws )? )? resourceIdentifier ( ws )? ( importLayer )? ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? );
	public final void importItem() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "importItem");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(331, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:332:5: ( IMPORT_SYM ( ws )? resourceIdentifier ( ws )? ( importLayer )? ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? |{...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ws )? ( importLayer )? ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? |{...}? IMPORT_SYM ( ws )? ( LPAREN less_import_types RPAREN ( ws )? )? resourceIdentifier ( ws )? ( importLayer )? ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? )
			int alt44=3;
			try { dbg.enterDecision(44, decisionCanBacktrack[44]);

			try {
				isCyclicDecision = true;
				alt44 = dfa44.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(44);}

			switch (alt44) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:9: IMPORT_SYM ( ws )? resourceIdentifier ( ws )? ( importLayer )? ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
					{
					dbg.location(333,9);
					match(input,IMPORT_SYM,FOLLOW_IMPORT_SYM_in_importItem455); if (state.failed) return;dbg.location(333,20);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:20: ( ws )?
					int alt24=2;
					try { dbg.enterSubRule(24);
					try { dbg.enterDecision(24, decisionCanBacktrack[24]);

					int LA24_0 = input.LA(1);
					if ( (LA24_0==COMMENT||LA24_0==NL||LA24_0==WS) ) {
						alt24=1;
					}
					} finally {dbg.exitDecision(24);}

					switch (alt24) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:20: ws
							{
							dbg.location(333,20);
							pushFollow(FOLLOW_ws_in_importItem457);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(24);}
					dbg.location(333,24);
					pushFollow(FOLLOW_resourceIdentifier_in_importItem460);
					resourceIdentifier();
					state._fsp--;
					if (state.failed) return;dbg.location(333,43);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:43: ( ws )?
					int alt25=2;
					try { dbg.enterSubRule(25);
					try { dbg.enterDecision(25, decisionCanBacktrack[25]);

					int LA25_0 = input.LA(1);
					if ( (LA25_0==COMMENT||LA25_0==NL||LA25_0==WS) ) {
						alt25=1;
					}
					} finally {dbg.exitDecision(25);}

					switch (alt25) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:43: ws
							{
							dbg.location(333,43);
							pushFollow(FOLLOW_ws_in_importItem462);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(25);}
					dbg.location(333,47);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:47: ( importLayer )?
					int alt26=2;
					try { dbg.enterSubRule(26);
					try { dbg.enterDecision(26, decisionCanBacktrack[26]);

					int LA26_0 = input.LA(1);
					if ( (LA26_0==IDENT) ) {
						int LA26_1 = input.LA(2);
						if ( (evalPredicate(tokenNameEquals("layer"),"tokenNameEquals(\"layer\")")) ) {
							alt26=1;
						}
					}
					} finally {dbg.exitDecision(26);}

					switch (alt26) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:47: importLayer
							{
							dbg.location(333,47);
							pushFollow(FOLLOW_importLayer_in_importItem465);
							importLayer();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(26);}
					dbg.location(333,60);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:60: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
					int alt28=2;
					try { dbg.enterSubRule(28);
					try { dbg.enterDecision(28, decisionCanBacktrack[28]);

					int LA28_0 = input.LA(1);
					if ( (LA28_0==COMMENT||LA28_0==NL||LA28_0==WS) ) {
						int LA28_1 = input.LA(2);
						if ( (synpred1_Css3()) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==IDENT) ) {
						int LA28_2 = input.LA(2);
						if ( (synpred1_Css3()) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==NOT) && (synpred1_Css3())) {
						alt28=1;
					}
					else if ( (LA28_0==GEN) ) {
						int LA28_4 = input.LA(2);
						if ( (synpred1_Css3()) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==HASH_SYMBOL) ) {
						int LA28_5 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==LPAREN) && (synpred1_Css3())) {
						alt28=1;
					}
					else if ( (LA28_0==SASS_MIXIN) ) {
						int LA28_7 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==SASS_VAR) ) {
						int LA28_8 = input.LA(2);
						if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==AT_IDENT) ) {
						int LA28_14 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==SASS_INCLUDE) ) {
						int LA28_15 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==SASS_AT_ROOT) ) {
						int LA28_16 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==SASS_DEBUG||LA28_0==SASS_WARN) ) {
						int LA28_17 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==SASS_IF) ) {
						int LA28_28 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==SASS_FOR) ) {
						int LA28_29 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==SASS_EACH) ) {
						int LA28_30 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==SASS_WHILE) ) {
						int LA28_31 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==SASS_CONTENT) ) {
						int LA28_32 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==IMPORT_SYM) ) {
						int LA28_33 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==PAGE_SYM) ) {
						int LA28_34 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==FONT_FACE_SYM) ) {
						int LA28_35 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==MOZ_DOCUMENT_SYM) ) {
						int LA28_36 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==WEBKIT_KEYFRAMES_SYM) ) {
						int LA28_37 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==MEDIA_SYM) ) {
						int LA28_38 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==SASS_EXTEND) ) {
						int LA28_39 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==COUNTER_STYLE_SYM) ) {
						int LA28_41 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==SASS_FUNCTION) ) {
						int LA28_43 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					else if ( ((LA28_0 >= BOTTOMCENTER_SYM && LA28_0 <= BOTTOMRIGHT_SYM)||LA28_0==CHARSET_SYM||(LA28_0 >= LEFTBOTTOM_SYM && LA28_0 <= LEFTTOP_SYM)||LA28_0==NAMESPACE_SYM||(LA28_0 >= RIGHTBOTTOM_SYM && LA28_0 <= RIGHTTOP_SYM)||LA28_0==SASS_ELSE||LA28_0==SASS_FORWARD||(LA28_0 >= SASS_RETURN && LA28_0 <= SASS_USE)||(LA28_0 >= TOPCENTER_SYM && LA28_0 <= TOPRIGHT_SYM)) ) {
						int LA28_45 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					} finally {dbg.exitDecision(28);}

					switch (alt28) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:61: ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList
							{
							dbg.location(333,83);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:83: ( ws )?
							int alt27=2;
							try { dbg.enterSubRule(27);
							try { dbg.enterDecision(27, decisionCanBacktrack[27]);

							int LA27_0 = input.LA(1);
							if ( (LA27_0==COMMENT||LA27_0==NL||LA27_0==WS) ) {
								alt27=1;
							}
							} finally {dbg.exitDecision(27);}

							switch (alt27) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:83: ws
									{
									dbg.location(333,83);
									pushFollow(FOLLOW_ws_in_importItem476);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(27);}
							dbg.location(333,87);
							pushFollow(FOLLOW_mediaQueryList_in_importItem479);
							mediaQueryList();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(28);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:9: {...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ws )? ( importLayer )? ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
					{
					dbg.location(336,9);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "importItem", "isScssSource()");
					}dbg.location(336,27);
					match(input,IMPORT_SYM,FOLLOW_IMPORT_SYM_in_importItem512); if (state.failed) return;dbg.location(336,38);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:38: ( ws )?
					int alt29=2;
					try { dbg.enterSubRule(29);
					try { dbg.enterDecision(29, decisionCanBacktrack[29]);

					int LA29_0 = input.LA(1);
					if ( (LA29_0==COMMENT||LA29_0==NL||LA29_0==WS) ) {
						alt29=1;
					}
					} finally {dbg.exitDecision(29);}

					switch (alt29) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:38: ws
							{
							dbg.location(336,38);
							pushFollow(FOLLOW_ws_in_importItem514);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(29);}
					dbg.location(336,42);
					pushFollow(FOLLOW_resourceIdentifier_in_importItem517);
					resourceIdentifier();
					state._fsp--;
					if (state.failed) return;dbg.location(336,61);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:61: ( ( ws )? COMMA ( ws )? resourceIdentifier )*
					try { dbg.enterSubRule(32);

					loop32:
					while (true) {
						int alt32=2;
						try { dbg.enterDecision(32, decisionCanBacktrack[32]);

						try {
							isCyclicDecision = true;
							alt32 = dfa32.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(32);}

						switch (alt32) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:62: ( ws )? COMMA ( ws )? resourceIdentifier
							{
							dbg.location(336,62);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:62: ( ws )?
							int alt30=2;
							try { dbg.enterSubRule(30);
							try { dbg.enterDecision(30, decisionCanBacktrack[30]);

							int LA30_0 = input.LA(1);
							if ( (LA30_0==COMMENT||LA30_0==NL||LA30_0==WS) ) {
								alt30=1;
							}
							} finally {dbg.exitDecision(30);}

							switch (alt30) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:62: ws
									{
									dbg.location(336,62);
									pushFollow(FOLLOW_ws_in_importItem520);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(30);}
							dbg.location(336,66);
							match(input,COMMA,FOLLOW_COMMA_in_importItem523); if (state.failed) return;dbg.location(336,72);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:72: ( ws )?
							int alt31=2;
							try { dbg.enterSubRule(31);
							try { dbg.enterDecision(31, decisionCanBacktrack[31]);

							int LA31_0 = input.LA(1);
							if ( (LA31_0==COMMENT||LA31_0==NL||LA31_0==WS) ) {
								alt31=1;
							}
							} finally {dbg.exitDecision(31);}

							switch (alt31) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:72: ws
									{
									dbg.location(336,72);
									pushFollow(FOLLOW_ws_in_importItem525);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(31);}
							dbg.location(336,76);
							pushFollow(FOLLOW_resourceIdentifier_in_importItem528);
							resourceIdentifier();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop32;
						}
					}
					} finally {dbg.exitSubRule(32);}
					dbg.location(336,97);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:97: ( ws )?
					int alt33=2;
					try { dbg.enterSubRule(33);
					try { dbg.enterDecision(33, decisionCanBacktrack[33]);

					int LA33_0 = input.LA(1);
					if ( (LA33_0==COMMENT||LA33_0==NL||LA33_0==WS) ) {
						alt33=1;
					}
					} finally {dbg.exitDecision(33);}

					switch (alt33) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:97: ws
							{
							dbg.location(336,97);
							pushFollow(FOLLOW_ws_in_importItem532);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(33);}
					dbg.location(336,101);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:101: ( importLayer )?
					int alt34=2;
					try { dbg.enterSubRule(34);
					try { dbg.enterDecision(34, decisionCanBacktrack[34]);

					int LA34_0 = input.LA(1);
					if ( (LA34_0==IDENT) ) {
						int LA34_1 = input.LA(2);
						if ( (evalPredicate(tokenNameEquals("layer"),"tokenNameEquals(\"layer\")")) ) {
							alt34=1;
						}
					}
					} finally {dbg.exitDecision(34);}

					switch (alt34) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:101: importLayer
							{
							dbg.location(336,101);
							pushFollow(FOLLOW_importLayer_in_importItem535);
							importLayer();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(34);}
					dbg.location(336,114);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:114: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
					int alt36=2;
					try { dbg.enterSubRule(36);
					try { dbg.enterDecision(36, decisionCanBacktrack[36]);

					int LA36_0 = input.LA(1);
					if ( (LA36_0==COMMENT||LA36_0==NL||LA36_0==WS) ) {
						int LA36_1 = input.LA(2);
						if ( (synpred2_Css3()) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==IDENT) ) {
						int LA36_2 = input.LA(2);
						if ( (synpred2_Css3()) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==NOT) && (synpred2_Css3())) {
						alt36=1;
					}
					else if ( (LA36_0==GEN) ) {
						int LA36_4 = input.LA(2);
						if ( (synpred2_Css3()) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==HASH_SYMBOL) ) {
						int LA36_5 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==LPAREN) && (synpred2_Css3())) {
						alt36=1;
					}
					else if ( (LA36_0==SASS_MIXIN) ) {
						int LA36_7 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==SASS_VAR) ) {
						int LA36_8 = input.LA(2);
						if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==AT_IDENT) ) {
						int LA36_14 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==SASS_INCLUDE) ) {
						int LA36_15 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==SASS_AT_ROOT) ) {
						int LA36_16 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==SASS_DEBUG||LA36_0==SASS_WARN) ) {
						int LA36_17 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==SASS_IF) ) {
						int LA36_28 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==SASS_FOR) ) {
						int LA36_29 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==SASS_EACH) ) {
						int LA36_30 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==SASS_WHILE) ) {
						int LA36_31 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==SASS_CONTENT) ) {
						int LA36_32 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==IMPORT_SYM) ) {
						int LA36_33 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==PAGE_SYM) ) {
						int LA36_34 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==FONT_FACE_SYM) ) {
						int LA36_35 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==MOZ_DOCUMENT_SYM) ) {
						int LA36_36 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==WEBKIT_KEYFRAMES_SYM) ) {
						int LA36_37 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==MEDIA_SYM) ) {
						int LA36_38 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==SASS_EXTEND) ) {
						int LA36_39 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==COUNTER_STYLE_SYM) ) {
						int LA36_41 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==SASS_FUNCTION) ) {
						int LA36_43 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					else if ( ((LA36_0 >= BOTTOMCENTER_SYM && LA36_0 <= BOTTOMRIGHT_SYM)||LA36_0==CHARSET_SYM||(LA36_0 >= LEFTBOTTOM_SYM && LA36_0 <= LEFTTOP_SYM)||LA36_0==NAMESPACE_SYM||(LA36_0 >= RIGHTBOTTOM_SYM && LA36_0 <= RIGHTTOP_SYM)||LA36_0==SASS_ELSE||LA36_0==SASS_FORWARD||(LA36_0 >= SASS_RETURN && LA36_0 <= SASS_USE)||(LA36_0 >= TOPCENTER_SYM && LA36_0 <= TOPRIGHT_SYM)) ) {
						int LA36_45 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					} finally {dbg.exitDecision(36);}

					switch (alt36) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:115: ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList
							{
							dbg.location(336,137);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:137: ( ws )?
							int alt35=2;
							try { dbg.enterSubRule(35);
							try { dbg.enterDecision(35, decisionCanBacktrack[35]);

							int LA35_0 = input.LA(1);
							if ( (LA35_0==COMMENT||LA35_0==NL||LA35_0==WS) ) {
								alt35=1;
							}
							} finally {dbg.exitDecision(35);}

							switch (alt35) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:137: ws
									{
									dbg.location(336,137);
									pushFollow(FOLLOW_ws_in_importItem546);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(35);}
							dbg.location(336,141);
							pushFollow(FOLLOW_mediaQueryList_in_importItem549);
							mediaQueryList();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(36);}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:9: {...}? IMPORT_SYM ( ws )? ( LPAREN less_import_types RPAREN ( ws )? )? resourceIdentifier ( ws )? ( importLayer )? ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
					{
					dbg.location(338,9);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "importItem", "isLessSource()");
					}dbg.location(338,27);
					match(input,IMPORT_SYM,FOLLOW_IMPORT_SYM_in_importItem573); if (state.failed) return;dbg.location(338,38);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:38: ( ws )?
					int alt37=2;
					try { dbg.enterSubRule(37);
					try { dbg.enterDecision(37, decisionCanBacktrack[37]);

					int LA37_0 = input.LA(1);
					if ( (LA37_0==COMMENT||LA37_0==NL||LA37_0==WS) ) {
						alt37=1;
					}
					} finally {dbg.exitDecision(37);}

					switch (alt37) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:38: ws
							{
							dbg.location(338,38);
							pushFollow(FOLLOW_ws_in_importItem575);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(37);}
					dbg.location(338,42);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:42: ( LPAREN less_import_types RPAREN ( ws )? )?
					int alt39=2;
					try { dbg.enterSubRule(39);
					try { dbg.enterDecision(39, decisionCanBacktrack[39]);

					int LA39_0 = input.LA(1);
					if ( (LA39_0==LPAREN) ) {
						alt39=1;
					}
					} finally {dbg.exitDecision(39);}

					switch (alt39) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:43: LPAREN less_import_types RPAREN ( ws )?
							{
							dbg.location(338,43);
							match(input,LPAREN,FOLLOW_LPAREN_in_importItem579); if (state.failed) return;dbg.location(338,50);
							pushFollow(FOLLOW_less_import_types_in_importItem581);
							less_import_types();
							state._fsp--;
							if (state.failed) return;dbg.location(338,68);
							match(input,RPAREN,FOLLOW_RPAREN_in_importItem583); if (state.failed) return;dbg.location(338,75);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:75: ( ws )?
							int alt38=2;
							try { dbg.enterSubRule(38);
							try { dbg.enterDecision(38, decisionCanBacktrack[38]);

							int LA38_0 = input.LA(1);
							if ( (LA38_0==COMMENT||LA38_0==NL||LA38_0==WS) ) {
								alt38=1;
							}
							} finally {dbg.exitDecision(38);}

							switch (alt38) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:75: ws
									{
									dbg.location(338,75);
									pushFollow(FOLLOW_ws_in_importItem585);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(38);}

							}
							break;

					}
					} finally {dbg.exitSubRule(39);}
					dbg.location(338,81);
					pushFollow(FOLLOW_resourceIdentifier_in_importItem590);
					resourceIdentifier();
					state._fsp--;
					if (state.failed) return;dbg.location(338,100);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:100: ( ws )?
					int alt40=2;
					try { dbg.enterSubRule(40);
					try { dbg.enterDecision(40, decisionCanBacktrack[40]);

					int LA40_0 = input.LA(1);
					if ( (LA40_0==COMMENT||LA40_0==NL||LA40_0==WS) ) {
						alt40=1;
					}
					} finally {dbg.exitDecision(40);}

					switch (alt40) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:100: ws
							{
							dbg.location(338,100);
							pushFollow(FOLLOW_ws_in_importItem592);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(40);}
					dbg.location(338,104);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:104: ( importLayer )?
					int alt41=2;
					try { dbg.enterSubRule(41);
					try { dbg.enterDecision(41, decisionCanBacktrack[41]);

					int LA41_0 = input.LA(1);
					if ( (LA41_0==IDENT) ) {
						int LA41_1 = input.LA(2);
						if ( (evalPredicate(tokenNameEquals("layer"),"tokenNameEquals(\"layer\")")) ) {
							alt41=1;
						}
					}
					} finally {dbg.exitDecision(41);}

					switch (alt41) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:104: importLayer
							{
							dbg.location(338,104);
							pushFollow(FOLLOW_importLayer_in_importItem595);
							importLayer();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(41);}
					dbg.location(338,117);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:117: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
					int alt43=2;
					try { dbg.enterSubRule(43);
					try { dbg.enterDecision(43, decisionCanBacktrack[43]);

					int LA43_0 = input.LA(1);
					if ( (LA43_0==COMMENT||LA43_0==NL||LA43_0==WS) ) {
						int LA43_1 = input.LA(2);
						if ( (synpred3_Css3()) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==IDENT) ) {
						int LA43_2 = input.LA(2);
						if ( (synpred3_Css3()) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==NOT) && (synpred3_Css3())) {
						alt43=1;
					}
					else if ( (LA43_0==GEN) ) {
						int LA43_4 = input.LA(2);
						if ( (synpred3_Css3()) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==HASH_SYMBOL) ) {
						int LA43_5 = input.LA(2);
						if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==LPAREN) && (synpred3_Css3())) {
						alt43=1;
					}
					else if ( (LA43_0==SASS_MIXIN) ) {
						int LA43_7 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==SASS_VAR) ) {
						int LA43_8 = input.LA(2);
						if ( (((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==AT_IDENT) ) {
						int LA43_14 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==SASS_INCLUDE) ) {
						int LA43_15 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==SASS_AT_ROOT) ) {
						int LA43_16 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==SASS_DEBUG||LA43_0==SASS_WARN) ) {
						int LA43_17 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==SASS_IF) ) {
						int LA43_28 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==SASS_FOR) ) {
						int LA43_29 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==SASS_EACH) ) {
						int LA43_30 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==SASS_WHILE) ) {
						int LA43_31 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==SASS_CONTENT) ) {
						int LA43_32 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==IMPORT_SYM) ) {
						int LA43_33 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==PAGE_SYM) ) {
						int LA43_34 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==FONT_FACE_SYM) ) {
						int LA43_35 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==MOZ_DOCUMENT_SYM) ) {
						int LA43_36 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==WEBKIT_KEYFRAMES_SYM) ) {
						int LA43_37 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==MEDIA_SYM) ) {
						int LA43_38 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==SASS_EXTEND) ) {
						int LA43_39 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==COUNTER_STYLE_SYM) ) {
						int LA43_41 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==SASS_FUNCTION) ) {
						int LA43_43 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( ((LA43_0 >= BOTTOMCENTER_SYM && LA43_0 <= BOTTOMRIGHT_SYM)||LA43_0==CHARSET_SYM||(LA43_0 >= LEFTBOTTOM_SYM && LA43_0 <= LEFTTOP_SYM)||LA43_0==NAMESPACE_SYM||(LA43_0 >= RIGHTBOTTOM_SYM && LA43_0 <= RIGHTTOP_SYM)||LA43_0==SASS_ELSE||LA43_0==SASS_FORWARD||(LA43_0 >= SASS_RETURN && LA43_0 <= SASS_USE)||(LA43_0 >= TOPCENTER_SYM && LA43_0 <= TOPRIGHT_SYM)) ) {
						int LA43_45 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					} finally {dbg.exitDecision(43);}

					switch (alt43) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:118: ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList
							{
							dbg.location(338,140);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:140: ( ws )?
							int alt42=2;
							try { dbg.enterSubRule(42);
							try { dbg.enterDecision(42, decisionCanBacktrack[42]);

							int LA42_0 = input.LA(1);
							if ( (LA42_0==COMMENT||LA42_0==NL||LA42_0==WS) ) {
								alt42=1;
							}
							} finally {dbg.exitDecision(42);}

							switch (alt42) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:140: ws
									{
									dbg.location(338,140);
									pushFollow(FOLLOW_ws_in_importItem606);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(42);}
							dbg.location(338,144);
							pushFollow(FOLLOW_mediaQueryList_in_importItem609);
							mediaQueryList();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(43);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(339, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "importItem");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "importItem"



	// $ANTLR start "importLayer"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:341:1: importLayer :{...}? IDENT ( LPAREN ( ws )? layerName ( ws )? RPAREN )? ;
	public final void importLayer() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "importLayer");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(341, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:342:5: ({...}? IDENT ( LPAREN ( ws )? layerName ( ws )? RPAREN )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:343:5: {...}? IDENT ( LPAREN ( ws )? layerName ( ws )? RPAREN )?
			{
			dbg.location(343,5);
			if ( !(evalPredicate(tokenNameEquals("layer"),"tokenNameEquals(\"layer\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "importLayer", "tokenNameEquals(\"layer\")");
			}dbg.location(343,33);
			match(input,IDENT,FOLLOW_IDENT_in_importLayer634); if (state.failed) return;dbg.location(343,39);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:343:39: ( LPAREN ( ws )? layerName ( ws )? RPAREN )?
			int alt47=2;
			try { dbg.enterSubRule(47);
			try { dbg.enterDecision(47, decisionCanBacktrack[47]);

			try {
				isCyclicDecision = true;
				alt47 = dfa47.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(47);}

			switch (alt47) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:343:40: LPAREN ( ws )? layerName ( ws )? RPAREN
					{
					dbg.location(343,40);
					match(input,LPAREN,FOLLOW_LPAREN_in_importLayer637); if (state.failed) return;dbg.location(343,47);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:343:47: ( ws )?
					int alt45=2;
					try { dbg.enterSubRule(45);
					try { dbg.enterDecision(45, decisionCanBacktrack[45]);

					int LA45_0 = input.LA(1);
					if ( (LA45_0==COMMENT||LA45_0==NL||LA45_0==WS) ) {
						alt45=1;
					}
					} finally {dbg.exitDecision(45);}

					switch (alt45) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:343:47: ws
							{
							dbg.location(343,47);
							pushFollow(FOLLOW_ws_in_importLayer639);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(45);}
					dbg.location(343,51);
					pushFollow(FOLLOW_layerName_in_importLayer642);
					layerName();
					state._fsp--;
					if (state.failed) return;dbg.location(343,61);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:343:61: ( ws )?
					int alt46=2;
					try { dbg.enterSubRule(46);
					try { dbg.enterDecision(46, decisionCanBacktrack[46]);

					int LA46_0 = input.LA(1);
					if ( (LA46_0==COMMENT||LA46_0==NL||LA46_0==WS) ) {
						alt46=1;
					}
					} finally {dbg.exitDecision(46);}

					switch (alt46) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:343:61: ws
							{
							dbg.location(343,61);
							pushFollow(FOLLOW_ws_in_importLayer644);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(46);}
					dbg.location(343,65);
					match(input,RPAREN,FOLLOW_RPAREN_in_importLayer647); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(47);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(344, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "importLayer");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "importLayer"



	// $ANTLR start "sass_use"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:346:1: sass_use : SASS_USE ws resourceIdentifier ( ws sass_use_as )? ( ws sass_use_with )? ;
	public final void sass_use() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_use");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(346, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:347:5: ( SASS_USE ws resourceIdentifier ( ws sass_use_as )? ( ws sass_use_with )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:348:9: SASS_USE ws resourceIdentifier ( ws sass_use_as )? ( ws sass_use_with )?
			{
			dbg.location(348,9);
			match(input,SASS_USE,FOLLOW_SASS_USE_in_sass_use674); if (state.failed) return;dbg.location(348,18);
			pushFollow(FOLLOW_ws_in_sass_use676);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(348,21);
			pushFollow(FOLLOW_resourceIdentifier_in_sass_use678);
			resourceIdentifier();
			state._fsp--;
			if (state.failed) return;dbg.location(348,40);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:348:40: ( ws sass_use_as )?
			int alt48=2;
			try { dbg.enterSubRule(48);
			try { dbg.enterDecision(48, decisionCanBacktrack[48]);

			try {
				isCyclicDecision = true;
				alt48 = dfa48.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(48);}

			switch (alt48) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:348:41: ws sass_use_as
					{
					dbg.location(348,41);
					pushFollow(FOLLOW_ws_in_sass_use681);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(348,44);
					pushFollow(FOLLOW_sass_use_as_in_sass_use683);
					sass_use_as();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(48);}
			dbg.location(348,58);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:348:58: ( ws sass_use_with )?
			int alt49=2;
			try { dbg.enterSubRule(49);
			try { dbg.enterDecision(49, decisionCanBacktrack[49]);

			try {
				isCyclicDecision = true;
				alt49 = dfa49.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(49);}

			switch (alt49) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:348:59: ws sass_use_with
					{
					dbg.location(348,59);
					pushFollow(FOLLOW_ws_in_sass_use688);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(348,62);
					pushFollow(FOLLOW_sass_use_with_in_sass_use690);
					sass_use_with();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(49);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(349, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_use");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_use"



	// $ANTLR start "sass_use_as"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:351:1: sass_use_as :{...}? IDENT ws IDENT ;
	public final void sass_use_as() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_use_as");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(351, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:352:5: ({...}? IDENT ws IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:353:5: {...}? IDENT ws IDENT
			{
			dbg.location(353,5);
			if ( !(evalPredicate(tokenNameEquals("as"),"tokenNameEquals(\"as\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "sass_use_as", "tokenNameEquals(\"as\")");
			}dbg.location(353,30);
			match(input,IDENT,FOLLOW_IDENT_in_sass_use_as715); if (state.failed) return;dbg.location(353,36);
			pushFollow(FOLLOW_ws_in_sass_use_as717);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(353,39);
			match(input,IDENT,FOLLOW_IDENT_in_sass_use_as719); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(354, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_use_as");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_use_as"



	// $ANTLR start "sass_use_with"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:356:1: sass_use_with :{...}? IDENT ( ws )? LPAREN ( ws )? sass_use_with_declaration ( ( ws )? COMMA ( ws )? sass_use_with_declaration )* ( ws )? RPAREN ;
	public final void sass_use_with() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_use_with");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(356, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:357:5: ({...}? IDENT ( ws )? LPAREN ( ws )? sass_use_with_declaration ( ( ws )? COMMA ( ws )? sass_use_with_declaration )* ( ws )? RPAREN )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:5: {...}? IDENT ( ws )? LPAREN ( ws )? sass_use_with_declaration ( ( ws )? COMMA ( ws )? sass_use_with_declaration )* ( ws )? RPAREN
			{
			dbg.location(358,5);
			if ( !(evalPredicate(tokenNameEquals("with"),"tokenNameEquals(\"with\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "sass_use_with", "tokenNameEquals(\"with\")");
			}dbg.location(358,32);
			match(input,IDENT,FOLLOW_IDENT_in_sass_use_with742); if (state.failed) return;dbg.location(358,38);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:38: ( ws )?
			int alt50=2;
			try { dbg.enterSubRule(50);
			try { dbg.enterDecision(50, decisionCanBacktrack[50]);

			int LA50_0 = input.LA(1);
			if ( (LA50_0==COMMENT||LA50_0==NL||LA50_0==WS) ) {
				alt50=1;
			}
			} finally {dbg.exitDecision(50);}

			switch (alt50) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:38: ws
					{
					dbg.location(358,38);
					pushFollow(FOLLOW_ws_in_sass_use_with744);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(50);}
			dbg.location(358,42);
			match(input,LPAREN,FOLLOW_LPAREN_in_sass_use_with747); if (state.failed) return;dbg.location(358,49);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:49: ( ws )?
			int alt51=2;
			try { dbg.enterSubRule(51);
			try { dbg.enterDecision(51, decisionCanBacktrack[51]);

			int LA51_0 = input.LA(1);
			if ( (LA51_0==COMMENT||LA51_0==NL||LA51_0==WS) ) {
				alt51=1;
			}
			} finally {dbg.exitDecision(51);}

			switch (alt51) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:49: ws
					{
					dbg.location(358,49);
					pushFollow(FOLLOW_ws_in_sass_use_with749);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(51);}
			dbg.location(358,53);
			pushFollow(FOLLOW_sass_use_with_declaration_in_sass_use_with752);
			sass_use_with_declaration();
			state._fsp--;
			if (state.failed) return;dbg.location(358,80);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:80: ( ( ws )? COMMA ( ws )? sass_use_with_declaration )*
			try { dbg.enterSubRule(54);

			loop54:
			while (true) {
				int alt54=2;
				try { dbg.enterDecision(54, decisionCanBacktrack[54]);

				try {
					isCyclicDecision = true;
					alt54 = dfa54.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(54);}

				switch (alt54) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:81: ( ws )? COMMA ( ws )? sass_use_with_declaration
					{
					dbg.location(358,81);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:81: ( ws )?
					int alt52=2;
					try { dbg.enterSubRule(52);
					try { dbg.enterDecision(52, decisionCanBacktrack[52]);

					int LA52_0 = input.LA(1);
					if ( (LA52_0==COMMENT||LA52_0==NL||LA52_0==WS) ) {
						alt52=1;
					}
					} finally {dbg.exitDecision(52);}

					switch (alt52) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:81: ws
							{
							dbg.location(358,81);
							pushFollow(FOLLOW_ws_in_sass_use_with756);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(52);}
					dbg.location(358,85);
					match(input,COMMA,FOLLOW_COMMA_in_sass_use_with759); if (state.failed) return;dbg.location(358,91);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:91: ( ws )?
					int alt53=2;
					try { dbg.enterSubRule(53);
					try { dbg.enterDecision(53, decisionCanBacktrack[53]);

					int LA53_0 = input.LA(1);
					if ( (LA53_0==COMMENT||LA53_0==NL||LA53_0==WS) ) {
						alt53=1;
					}
					} finally {dbg.exitDecision(53);}

					switch (alt53) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:91: ws
							{
							dbg.location(358,91);
							pushFollow(FOLLOW_ws_in_sass_use_with761);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(53);}
					dbg.location(358,95);
					pushFollow(FOLLOW_sass_use_with_declaration_in_sass_use_with764);
					sass_use_with_declaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop54;
				}
			}
			} finally {dbg.exitSubRule(54);}
			dbg.location(358,124);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:124: ( ws )?
			int alt55=2;
			try { dbg.enterSubRule(55);
			try { dbg.enterDecision(55, decisionCanBacktrack[55]);

			int LA55_0 = input.LA(1);
			if ( (LA55_0==COMMENT||LA55_0==NL||LA55_0==WS) ) {
				alt55=1;
			}
			} finally {dbg.exitDecision(55);}

			switch (alt55) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:124: ws
					{
					dbg.location(358,124);
					pushFollow(FOLLOW_ws_in_sass_use_with769);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(55);}
			dbg.location(358,128);
			match(input,RPAREN,FOLLOW_RPAREN_in_sass_use_with772); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(359, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_use_with");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_use_with"



	// $ANTLR start "sass_use_with_declaration"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:361:1: sass_use_with_declaration : cp_variable ( ws )? COLON ( ws )? cp_expression ;
	public final void sass_use_with_declaration() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_use_with_declaration");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(361, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:362:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:5: cp_variable ( ws )? COLON ( ws )? cp_expression
			{
			dbg.location(363,5);
			pushFollow(FOLLOW_cp_variable_in_sass_use_with_declaration793);
			cp_variable();
			state._fsp--;
			if (state.failed) return;dbg.location(363,17);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:17: ( ws )?
			int alt56=2;
			try { dbg.enterSubRule(56);
			try { dbg.enterDecision(56, decisionCanBacktrack[56]);

			int LA56_0 = input.LA(1);
			if ( (LA56_0==COMMENT||LA56_0==NL||LA56_0==WS) ) {
				alt56=1;
			}
			} finally {dbg.exitDecision(56);}

			switch (alt56) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:17: ws
					{
					dbg.location(363,17);
					pushFollow(FOLLOW_ws_in_sass_use_with_declaration795);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(56);}
			dbg.location(363,21);
			match(input,COLON,FOLLOW_COLON_in_sass_use_with_declaration798); if (state.failed) return;dbg.location(363,27);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:27: ( ws )?
			int alt57=2;
			try { dbg.enterSubRule(57);
			try { dbg.enterDecision(57, decisionCanBacktrack[57]);

			int LA57_0 = input.LA(1);
			if ( (LA57_0==COMMENT||LA57_0==NL||LA57_0==WS) ) {
				alt57=1;
			}
			} finally {dbg.exitDecision(57);}

			switch (alt57) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:27: ws
					{
					dbg.location(363,27);
					pushFollow(FOLLOW_ws_in_sass_use_with_declaration800);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(57);}
			dbg.location(363,31);
			pushFollow(FOLLOW_cp_expression_in_sass_use_with_declaration803);
			cp_expression();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(364, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_use_with_declaration");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_use_with_declaration"



	// $ANTLR start "sass_forward"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:367:1: sass_forward : SASS_FORWARD ws resourceIdentifier ( ws ( sass_forward_hide | sass_forward_show ) )? ({...}? ws sass_forward_as )? ({...}? ws sass_forward_with )? ;
	public final void sass_forward() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_forward");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(367, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:5: ( SASS_FORWARD ws resourceIdentifier ( ws ( sass_forward_hide | sass_forward_show ) )? ({...}? ws sass_forward_as )? ({...}? ws sass_forward_with )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:9: SASS_FORWARD ws resourceIdentifier ( ws ( sass_forward_hide | sass_forward_show ) )? ({...}? ws sass_forward_as )? ({...}? ws sass_forward_with )?
			{
			dbg.location(369,9);
			match(input,SASS_FORWARD,FOLLOW_SASS_FORWARD_in_sass_forward829); if (state.failed) return;dbg.location(369,22);
			pushFollow(FOLLOW_ws_in_sass_forward831);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(369,25);
			pushFollow(FOLLOW_resourceIdentifier_in_sass_forward833);
			resourceIdentifier();
			state._fsp--;
			if (state.failed) return;dbg.location(369,44);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:44: ( ws ( sass_forward_hide | sass_forward_show ) )?
			int alt59=2;
			try { dbg.enterSubRule(59);
			try { dbg.enterDecision(59, decisionCanBacktrack[59]);

			try {
				isCyclicDecision = true;
				alt59 = dfa59.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(59);}

			switch (alt59) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:46: ws ( sass_forward_hide | sass_forward_show )
					{
					dbg.location(369,46);
					pushFollow(FOLLOW_ws_in_sass_forward837);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(369,49);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:49: ( sass_forward_hide | sass_forward_show )
					int alt58=2;
					try { dbg.enterSubRule(58);
					try { dbg.enterDecision(58, decisionCanBacktrack[58]);

					try {
						isCyclicDecision = true;
						alt58 = dfa58.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(58);}

					switch (alt58) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:51: sass_forward_hide
							{
							dbg.location(369,51);
							pushFollow(FOLLOW_sass_forward_hide_in_sass_forward841);
							sass_forward_hide();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:72: sass_forward_show
							{
							dbg.location(369,72);
							pushFollow(FOLLOW_sass_forward_show_in_sass_forward846);
							sass_forward_show();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(58);}

					}
					break;

			}
			} finally {dbg.exitSubRule(59);}
			dbg.location(369,93);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:93: ({...}? ws sass_forward_as )?
			int alt60=2;
			try { dbg.enterSubRule(60);
			try { dbg.enterDecision(60, decisionCanBacktrack[60]);

			try {
				isCyclicDecision = true;
				alt60 = dfa60.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(60);}

			switch (alt60) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:94: {...}? ws sass_forward_as
					{
					dbg.location(369,94);
					if ( !(evalPredicate(tokenNameEquals2("as"),"tokenNameEquals2(\"as\")")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "sass_forward", "tokenNameEquals2(\"as\")");
					}dbg.location(369,120);
					pushFollow(FOLLOW_ws_in_sass_forward854);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(369,123);
					pushFollow(FOLLOW_sass_forward_as_in_sass_forward856);
					sass_forward_as();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(60);}
			dbg.location(369,141);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:141: ({...}? ws sass_forward_with )?
			int alt61=2;
			try { dbg.enterSubRule(61);
			try { dbg.enterDecision(61, decisionCanBacktrack[61]);

			try {
				isCyclicDecision = true;
				alt61 = dfa61.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(61);}

			switch (alt61) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:142: {...}? ws sass_forward_with
					{
					dbg.location(369,142);
					if ( !(evalPredicate(tokenNameEquals2("with"),"tokenNameEquals2(\"with\")")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "sass_forward", "tokenNameEquals2(\"with\")");
					}dbg.location(369,170);
					pushFollow(FOLLOW_ws_in_sass_forward863);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(369,173);
					pushFollow(FOLLOW_sass_forward_with_in_sass_forward865);
					sass_forward_with();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(61);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(370, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_forward");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_forward"



	// $ANTLR start "sass_forward_as"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:372:1: sass_forward_as :{...}? IDENT ws IDENT ;
	public final void sass_forward_as() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_forward_as");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(372, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:373:5: ({...}? IDENT ws IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:374:5: {...}? IDENT ws IDENT
			{
			dbg.location(374,5);
			if ( !(evalPredicate(tokenNameEquals("as"),"tokenNameEquals(\"as\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "sass_forward_as", "tokenNameEquals(\"as\")");
			}dbg.location(374,30);
			match(input,IDENT,FOLLOW_IDENT_in_sass_forward_as890); if (state.failed) return;dbg.location(374,36);
			pushFollow(FOLLOW_ws_in_sass_forward_as892);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(374,39);
			match(input,IDENT,FOLLOW_IDENT_in_sass_forward_as894); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(375, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_forward_as");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_forward_as"



	// $ANTLR start "sass_forward_with"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:377:1: sass_forward_with :{...}? IDENT ( ws )? LPAREN ( ws )? sass_forward_with_declaration ( ( ws )? COMMA ( ws )? sass_forward_with_declaration )* ( ws )? RPAREN ;
	public final void sass_forward_with() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_forward_with");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(377, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:378:5: ({...}? IDENT ( ws )? LPAREN ( ws )? sass_forward_with_declaration ( ( ws )? COMMA ( ws )? sass_forward_with_declaration )* ( ws )? RPAREN )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:379:5: {...}? IDENT ( ws )? LPAREN ( ws )? sass_forward_with_declaration ( ( ws )? COMMA ( ws )? sass_forward_with_declaration )* ( ws )? RPAREN
			{
			dbg.location(379,5);
			if ( !(evalPredicate(tokenNameEquals("with"),"tokenNameEquals(\"with\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "sass_forward_with", "tokenNameEquals(\"with\")");
			}dbg.location(379,32);
			match(input,IDENT,FOLLOW_IDENT_in_sass_forward_with917); if (state.failed) return;dbg.location(379,38);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:379:38: ( ws )?
			int alt62=2;
			try { dbg.enterSubRule(62);
			try { dbg.enterDecision(62, decisionCanBacktrack[62]);

			int LA62_0 = input.LA(1);
			if ( (LA62_0==COMMENT||LA62_0==NL||LA62_0==WS) ) {
				alt62=1;
			}
			} finally {dbg.exitDecision(62);}

			switch (alt62) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:379:38: ws
					{
					dbg.location(379,38);
					pushFollow(FOLLOW_ws_in_sass_forward_with919);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(62);}
			dbg.location(379,42);
			match(input,LPAREN,FOLLOW_LPAREN_in_sass_forward_with922); if (state.failed) return;dbg.location(379,49);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:379:49: ( ws )?
			int alt63=2;
			try { dbg.enterSubRule(63);
			try { dbg.enterDecision(63, decisionCanBacktrack[63]);

			int LA63_0 = input.LA(1);
			if ( (LA63_0==COMMENT||LA63_0==NL||LA63_0==WS) ) {
				alt63=1;
			}
			} finally {dbg.exitDecision(63);}

			switch (alt63) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:379:49: ws
					{
					dbg.location(379,49);
					pushFollow(FOLLOW_ws_in_sass_forward_with924);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(63);}
			dbg.location(379,53);
			pushFollow(FOLLOW_sass_forward_with_declaration_in_sass_forward_with927);
			sass_forward_with_declaration();
			state._fsp--;
			if (state.failed) return;dbg.location(379,84);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:379:84: ( ( ws )? COMMA ( ws )? sass_forward_with_declaration )*
			try { dbg.enterSubRule(66);

			loop66:
			while (true) {
				int alt66=2;
				try { dbg.enterDecision(66, decisionCanBacktrack[66]);

				try {
					isCyclicDecision = true;
					alt66 = dfa66.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(66);}

				switch (alt66) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:379:85: ( ws )? COMMA ( ws )? sass_forward_with_declaration
					{
					dbg.location(379,85);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:379:85: ( ws )?
					int alt64=2;
					try { dbg.enterSubRule(64);
					try { dbg.enterDecision(64, decisionCanBacktrack[64]);

					int LA64_0 = input.LA(1);
					if ( (LA64_0==COMMENT||LA64_0==NL||LA64_0==WS) ) {
						alt64=1;
					}
					} finally {dbg.exitDecision(64);}

					switch (alt64) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:379:85: ws
							{
							dbg.location(379,85);
							pushFollow(FOLLOW_ws_in_sass_forward_with931);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(64);}
					dbg.location(379,89);
					match(input,COMMA,FOLLOW_COMMA_in_sass_forward_with934); if (state.failed) return;dbg.location(379,95);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:379:95: ( ws )?
					int alt65=2;
					try { dbg.enterSubRule(65);
					try { dbg.enterDecision(65, decisionCanBacktrack[65]);

					int LA65_0 = input.LA(1);
					if ( (LA65_0==COMMENT||LA65_0==NL||LA65_0==WS) ) {
						alt65=1;
					}
					} finally {dbg.exitDecision(65);}

					switch (alt65) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:379:95: ws
							{
							dbg.location(379,95);
							pushFollow(FOLLOW_ws_in_sass_forward_with936);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(65);}
					dbg.location(379,99);
					pushFollow(FOLLOW_sass_forward_with_declaration_in_sass_forward_with939);
					sass_forward_with_declaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop66;
				}
			}
			} finally {dbg.exitSubRule(66);}
			dbg.location(379,132);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:379:132: ( ws )?
			int alt67=2;
			try { dbg.enterSubRule(67);
			try { dbg.enterDecision(67, decisionCanBacktrack[67]);

			int LA67_0 = input.LA(1);
			if ( (LA67_0==COMMENT||LA67_0==NL||LA67_0==WS) ) {
				alt67=1;
			}
			} finally {dbg.exitDecision(67);}

			switch (alt67) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:379:132: ws
					{
					dbg.location(379,132);
					pushFollow(FOLLOW_ws_in_sass_forward_with944);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(67);}
			dbg.location(379,136);
			match(input,RPAREN,FOLLOW_RPAREN_in_sass_forward_with947); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(380, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_forward_with");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_forward_with"



	// $ANTLR start "sass_forward_with_declaration"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:382:1: sass_forward_with_declaration : cp_variable ( ws )? COLON ( ws )? cp_expression ;
	public final void sass_forward_with_declaration() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_forward_with_declaration");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(382, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:384:5: cp_variable ( ws )? COLON ( ws )? cp_expression
			{
			dbg.location(384,5);
			pushFollow(FOLLOW_cp_variable_in_sass_forward_with_declaration968);
			cp_variable();
			state._fsp--;
			if (state.failed) return;dbg.location(384,17);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:384:17: ( ws )?
			int alt68=2;
			try { dbg.enterSubRule(68);
			try { dbg.enterDecision(68, decisionCanBacktrack[68]);

			int LA68_0 = input.LA(1);
			if ( (LA68_0==COMMENT||LA68_0==NL||LA68_0==WS) ) {
				alt68=1;
			}
			} finally {dbg.exitDecision(68);}

			switch (alt68) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:384:17: ws
					{
					dbg.location(384,17);
					pushFollow(FOLLOW_ws_in_sass_forward_with_declaration970);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(68);}
			dbg.location(384,21);
			match(input,COLON,FOLLOW_COLON_in_sass_forward_with_declaration973); if (state.failed) return;dbg.location(384,27);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:384:27: ( ws )?
			int alt69=2;
			try { dbg.enterSubRule(69);
			try { dbg.enterDecision(69, decisionCanBacktrack[69]);

			int LA69_0 = input.LA(1);
			if ( (LA69_0==COMMENT||LA69_0==NL||LA69_0==WS) ) {
				alt69=1;
			}
			} finally {dbg.exitDecision(69);}

			switch (alt69) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:384:27: ws
					{
					dbg.location(384,27);
					pushFollow(FOLLOW_ws_in_sass_forward_with_declaration975);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(69);}
			dbg.location(384,31);
			pushFollow(FOLLOW_cp_expression_in_sass_forward_with_declaration978);
			cp_expression();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(385, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_forward_with_declaration");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_forward_with_declaration"



	// $ANTLR start "sass_forward_hide"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:387:1: sass_forward_hide :{...}? IDENT ws IDENT ( ( ws )? COMMA ( ws )? IDENT )* ;
	public final void sass_forward_hide() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_forward_hide");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(387, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:388:5: ({...}? IDENT ws IDENT ( ( ws )? COMMA ( ws )? IDENT )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:5: {...}? IDENT ws IDENT ( ( ws )? COMMA ( ws )? IDENT )*
			{
			dbg.location(389,5);
			if ( !(evalPredicate(tokenNameEquals("hide"),"tokenNameEquals(\"hide\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "sass_forward_hide", "tokenNameEquals(\"hide\")");
			}dbg.location(389,32);
			match(input,IDENT,FOLLOW_IDENT_in_sass_forward_hide1001); if (state.failed) return;dbg.location(389,38);
			pushFollow(FOLLOW_ws_in_sass_forward_hide1003);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(389,41);
			match(input,IDENT,FOLLOW_IDENT_in_sass_forward_hide1005); if (state.failed) return;dbg.location(389,47);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:47: ( ( ws )? COMMA ( ws )? IDENT )*
			try { dbg.enterSubRule(72);

			loop72:
			while (true) {
				int alt72=2;
				try { dbg.enterDecision(72, decisionCanBacktrack[72]);

				try {
					isCyclicDecision = true;
					alt72 = dfa72.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(72);}

				switch (alt72) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:48: ( ws )? COMMA ( ws )? IDENT
					{
					dbg.location(389,48);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:48: ( ws )?
					int alt70=2;
					try { dbg.enterSubRule(70);
					try { dbg.enterDecision(70, decisionCanBacktrack[70]);

					int LA70_0 = input.LA(1);
					if ( (LA70_0==COMMENT||LA70_0==NL||LA70_0==WS) ) {
						alt70=1;
					}
					} finally {dbg.exitDecision(70);}

					switch (alt70) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:48: ws
							{
							dbg.location(389,48);
							pushFollow(FOLLOW_ws_in_sass_forward_hide1008);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(70);}
					dbg.location(389,52);
					match(input,COMMA,FOLLOW_COMMA_in_sass_forward_hide1011); if (state.failed) return;dbg.location(389,58);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:58: ( ws )?
					int alt71=2;
					try { dbg.enterSubRule(71);
					try { dbg.enterDecision(71, decisionCanBacktrack[71]);

					int LA71_0 = input.LA(1);
					if ( (LA71_0==COMMENT||LA71_0==NL||LA71_0==WS) ) {
						alt71=1;
					}
					} finally {dbg.exitDecision(71);}

					switch (alt71) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:58: ws
							{
							dbg.location(389,58);
							pushFollow(FOLLOW_ws_in_sass_forward_hide1013);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(71);}
					dbg.location(389,62);
					match(input,IDENT,FOLLOW_IDENT_in_sass_forward_hide1016); if (state.failed) return;
					}
					break;

				default :
					break loop72;
				}
			}
			} finally {dbg.exitSubRule(72);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(390, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_forward_hide");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_forward_hide"



	// $ANTLR start "sass_forward_show"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:392:1: sass_forward_show :{...}? IDENT ws IDENT ( ( ws )? COMMA ( ws )? IDENT )* ;
	public final void sass_forward_show() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_forward_show");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(392, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:5: ({...}? IDENT ws IDENT ( ( ws )? COMMA ( ws )? IDENT )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:5: {...}? IDENT ws IDENT ( ( ws )? COMMA ( ws )? IDENT )*
			{
			dbg.location(394,5);
			if ( !(evalPredicate(tokenNameEquals("show"),"tokenNameEquals(\"show\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "sass_forward_show", "tokenNameEquals(\"show\")");
			}dbg.location(394,32);
			match(input,IDENT,FOLLOW_IDENT_in_sass_forward_show1041); if (state.failed) return;dbg.location(394,38);
			pushFollow(FOLLOW_ws_in_sass_forward_show1043);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(394,41);
			match(input,IDENT,FOLLOW_IDENT_in_sass_forward_show1045); if (state.failed) return;dbg.location(394,47);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:47: ( ( ws )? COMMA ( ws )? IDENT )*
			try { dbg.enterSubRule(75);

			loop75:
			while (true) {
				int alt75=2;
				try { dbg.enterDecision(75, decisionCanBacktrack[75]);

				try {
					isCyclicDecision = true;
					alt75 = dfa75.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(75);}

				switch (alt75) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:48: ( ws )? COMMA ( ws )? IDENT
					{
					dbg.location(394,48);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:48: ( ws )?
					int alt73=2;
					try { dbg.enterSubRule(73);
					try { dbg.enterDecision(73, decisionCanBacktrack[73]);

					int LA73_0 = input.LA(1);
					if ( (LA73_0==COMMENT||LA73_0==NL||LA73_0==WS) ) {
						alt73=1;
					}
					} finally {dbg.exitDecision(73);}

					switch (alt73) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:48: ws
							{
							dbg.location(394,48);
							pushFollow(FOLLOW_ws_in_sass_forward_show1048);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(73);}
					dbg.location(394,52);
					match(input,COMMA,FOLLOW_COMMA_in_sass_forward_show1051); if (state.failed) return;dbg.location(394,58);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:58: ( ws )?
					int alt74=2;
					try { dbg.enterSubRule(74);
					try { dbg.enterDecision(74, decisionCanBacktrack[74]);

					int LA74_0 = input.LA(1);
					if ( (LA74_0==COMMENT||LA74_0==NL||LA74_0==WS) ) {
						alt74=1;
					}
					} finally {dbg.exitDecision(74);}

					switch (alt74) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:58: ws
							{
							dbg.location(394,58);
							pushFollow(FOLLOW_ws_in_sass_forward_show1053);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(74);}
					dbg.location(394,62);
					match(input,IDENT,FOLLOW_IDENT_in_sass_forward_show1056); if (state.failed) return;
					}
					break;

				default :
					break loop75;
				}
			}
			} finally {dbg.exitSubRule(75);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(395, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_forward_show");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_forward_show"



	// $ANTLR start "media"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:397:1: media : MEDIA_SYM ( ws )? ( mediaQueryList ) ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE ;
	public final void media() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "media");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(397, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:398:5: ( MEDIA_SYM ( ws )? ( mediaQueryList ) ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:398:7: MEDIA_SYM ( ws )? ( mediaQueryList ) ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE
			{
			dbg.location(398,7);
			match(input,MEDIA_SYM,FOLLOW_MEDIA_SYM_in_media1075); if (state.failed) return;dbg.location(398,17);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:398:17: ( ws )?
			int alt76=2;
			try { dbg.enterSubRule(76);
			try { dbg.enterDecision(76, decisionCanBacktrack[76]);

			int LA76_0 = input.LA(1);
			if ( (LA76_0==COMMENT||LA76_0==NL||LA76_0==WS) ) {
				alt76=1;
			}
			} finally {dbg.exitDecision(76);}

			switch (alt76) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:398:17: ws
					{
					dbg.location(398,17);
					pushFollow(FOLLOW_ws_in_media1077);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(76);}
			dbg.location(399,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:399:5: ( mediaQueryList )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:400:10: mediaQueryList
			{
			dbg.location(400,10);
			pushFollow(FOLLOW_mediaQueryList_in_media1095);
			mediaQueryList();
			state._fsp--;
			if (state.failed) return;
			}
			dbg.location(401,7);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:401:7: ( ws )?
			int alt77=2;
			try { dbg.enterSubRule(77);
			try { dbg.enterDecision(77, decisionCanBacktrack[77]);

			int LA77_0 = input.LA(1);
			if ( (LA77_0==COMMENT||LA77_0==NL||LA77_0==WS) ) {
				alt77=1;
			}
			} finally {dbg.exitDecision(77);}

			switch (alt77) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:401:7: ws
					{
					dbg.location(401,7);
					pushFollow(FOLLOW_ws_in_media1103);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(77);}
			dbg.location(402,5);
			match(input,LBRACE,FOLLOW_LBRACE_in_media1110); if (state.failed) return;dbg.location(402,12);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:402:12: ( ws )?
			int alt78=2;
			try { dbg.enterSubRule(78);
			try { dbg.enterDecision(78, decisionCanBacktrack[78]);

			int LA78_0 = input.LA(1);
			if ( (LA78_0==COMMENT||LA78_0==NL||LA78_0==WS) ) {
				alt78=1;
			}
			} finally {dbg.exitDecision(78);}

			switch (alt78) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:402:12: ws
					{
					dbg.location(402,12);
					pushFollow(FOLLOW_ws_in_media1112);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(78);}
			dbg.location(402,16);
			pushFollow(FOLLOW_syncToFollow_in_media1115);
			syncToFollow();
			state._fsp--;
			if (state.failed) return;dbg.location(403,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:403:9: ( mediaBody )?
			int alt79=2;
			try { dbg.enterSubRule(79);
			try { dbg.enterDecision(79, decisionCanBacktrack[79]);

			int LA79_0 = input.LA(1);
			if ( ((LA79_0 >= AT_IDENT && LA79_0 <= AT_SIGN)||(LA79_0 >= BOTTOMCENTER_SYM && LA79_0 <= BOTTOMRIGHT_SYM)||(LA79_0 >= CHARSET_SYM && LA79_0 <= COLON)||LA79_0==COUNTER_STYLE_SYM||(LA79_0 >= DCOLON && LA79_0 <= DOT)||LA79_0==FONT_FACE_SYM||(LA79_0 >= GEN && LA79_0 <= GREATER)||(LA79_0 >= HASH && LA79_0 <= HASH_SYMBOL)||LA79_0==IDENT||LA79_0==IMPORT_SYM||(LA79_0 >= LBRACKET && LA79_0 <= LEFTTOP_SYM)||LA79_0==LESS_AND||(LA79_0 >= MEDIA_SYM && LA79_0 <= MOZ_DOCUMENT_SYM)||LA79_0==NAMESPACE_SYM||LA79_0==PAGE_SYM||(LA79_0 >= PIPE && LA79_0 <= PLUS)||(LA79_0 >= RIGHTBOTTOM_SYM && LA79_0 <= RIGHTTOP_SYM)||(LA79_0 >= SASS_AT_ROOT && LA79_0 <= SASS_DEBUG)||(LA79_0 >= SASS_EACH && LA79_0 <= SASS_ELSE)||(LA79_0 >= SASS_EXTEND && LA79_0 <= SASS_FUNCTION)||(LA79_0 >= SASS_IF && LA79_0 <= SASS_MIXIN)||(LA79_0 >= SASS_RETURN && LA79_0 <= SEMI)||LA79_0==STAR||LA79_0==SUPPORTS_SYM||LA79_0==TILDE||(LA79_0 >= TOPCENTER_SYM && LA79_0 <= TOPRIGHT_SYM)||LA79_0==VARIABLE||LA79_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt79=1;
			}
			} finally {dbg.exitDecision(79);}

			switch (alt79) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:403:9: mediaBody
					{
					dbg.location(403,9);
					pushFollow(FOLLOW_mediaBody_in_media1125);
					mediaBody();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(79);}
			dbg.location(404,5);
			match(input,RBRACE,FOLLOW_RBRACE_in_media1132); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(405, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "media");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "media"



	// $ANTLR start "mediaBody"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:407:1: mediaBody : ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) | ({...}? sass_extend ( ws | ( SEMI ) ) ) )+ ;
	public final void mediaBody() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaBody");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(407, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:408:5: ( ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) | ({...}? sass_extend ( ws | ( SEMI ) ) ) )+ )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:409:5: ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) | ({...}? sass_extend ( ws | ( SEMI ) ) ) )+
			{
			dbg.location(409,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:409:5: ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) | ({...}? sass_extend ( ws | ( SEMI ) ) ) )+
			int cnt85=0;
			try { dbg.enterSubRule(85);

			loop85:
			while (true) {
				int alt85=4;
				try { dbg.enterDecision(85, decisionCanBacktrack[85]);

				switch ( input.LA(1) ) {
				case AT_IDENT:
				case AT_SIGN:
				case BOTTOMCENTER_SYM:
				case BOTTOMLEFTCORNER_SYM:
				case BOTTOMLEFT_SYM:
				case BOTTOMRIGHTCORNER_SYM:
				case BOTTOMRIGHT_SYM:
				case CHARSET_SYM:
				case COLON:
				case COUNTER_STYLE_SYM:
				case DCOLON:
				case DIMENSION:
				case DOT:
				case FONT_FACE_SYM:
				case GEN:
				case GREATER:
				case HASH:
				case HASH_SYMBOL:
				case IDENT:
				case IMPORT_SYM:
				case LBRACKET:
				case LEFTBOTTOM_SYM:
				case LEFTMIDDLE_SYM:
				case LEFTTOP_SYM:
				case LESS_AND:
				case MEDIA_SYM:
				case MINUS:
				case MOZ_DOCUMENT_SYM:
				case NAMESPACE_SYM:
				case PAGE_SYM:
				case PIPE:
				case PLUS:
				case RIGHTBOTTOM_SYM:
				case RIGHTMIDDLE_SYM:
				case RIGHTTOP_SYM:
				case SASS_AT_ROOT:
				case SASS_CONTENT:
				case SASS_DEBUG:
				case SASS_EACH:
				case SASS_ELSE:
				case SASS_EXTEND_ONLY_SELECTOR:
				case SASS_FOR:
				case SASS_FORWARD:
				case SASS_FUNCTION:
				case SASS_IF:
				case SASS_INCLUDE:
				case SASS_MIXIN:
				case SASS_RETURN:
				case SASS_USE:
				case SASS_VAR:
				case SASS_WARN:
				case SASS_WHILE:
				case STAR:
				case SUPPORTS_SYM:
				case TILDE:
				case TOPCENTER_SYM:
				case TOPLEFTCORNER_SYM:
				case TOPLEFT_SYM:
				case TOPRIGHTCORNER_SYM:
				case TOPRIGHT_SYM:
				case VARIABLE:
				case WEBKIT_KEYFRAMES_SYM:
					{
					alt85=1;
					}
					break;
				case SASS_EXTEND:
					{
					int LA85_35 = input.LA(2);
					if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
						alt85=1;
					}
					else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
						alt85=3;
					}

					}
					break;
				case SEMI:
					{
					alt85=2;
					}
					break;
				}
				} finally {dbg.exitDecision(85);}

				switch (alt85) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:10: ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
					{
					dbg.location(410,10);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:10: ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:12: mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )?
					{
					dbg.location(410,12);
					pushFollow(FOLLOW_mediaBodyItem_in_mediaBody1166);
					mediaBodyItem();
					state._fsp--;
					if (state.failed) return;dbg.location(410,26);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:26: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?
					int alt81=2;
					try { dbg.enterSubRule(81);
					try { dbg.enterDecision(81, decisionCanBacktrack[81]);

					try {
						isCyclicDecision = true;
						alt81 = dfa81.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(81);}

					switch (alt81) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:27: ( ( ws )? SEMI )=> ( ws )? SEMI
							{
							dbg.location(410,39);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:39: ( ws )?
							int alt80=2;
							try { dbg.enterSubRule(80);
							try { dbg.enterDecision(80, decisionCanBacktrack[80]);

							int LA80_0 = input.LA(1);
							if ( (LA80_0==COMMENT||LA80_0==NL||LA80_0==WS) ) {
								alt80=1;
							}
							} finally {dbg.exitDecision(80);}

							switch (alt80) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:39: ws
									{
									dbg.location(410,39);
									pushFollow(FOLLOW_ws_in_mediaBody1176);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(80);}
							dbg.location(410,43);
							match(input,SEMI,FOLLOW_SEMI_in_mediaBody1179); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(81);}
					dbg.location(410,50);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:50: ( ws )?
					int alt82=2;
					try { dbg.enterSubRule(82);
					try { dbg.enterDecision(82, decisionCanBacktrack[82]);

					int LA82_0 = input.LA(1);
					if ( (LA82_0==COMMENT||LA82_0==NL||LA82_0==WS) ) {
						alt82=1;
					}
					} finally {dbg.exitDecision(82);}

					switch (alt82) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:50: ws
							{
							dbg.location(410,50);
							pushFollow(FOLLOW_ws_in_mediaBody1183);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(82);}

					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:412:10: ( SEMI ( ws )? )
					{
					dbg.location(412,10);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:412:10: ( SEMI ( ws )? )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:412:12: SEMI ( ws )?
					{
					dbg.location(412,12);
					match(input,SEMI,FOLLOW_SEMI_in_mediaBody1210); if (state.failed) return;dbg.location(412,17);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:412:17: ( ws )?
					int alt83=2;
					try { dbg.enterSubRule(83);
					try { dbg.enterDecision(83, decisionCanBacktrack[83]);

					int LA83_0 = input.LA(1);
					if ( (LA83_0==COMMENT||LA83_0==NL||LA83_0==WS) ) {
						alt83=1;
					}
					} finally {dbg.exitDecision(83);}

					switch (alt83) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:412:17: ws
							{
							dbg.location(412,17);
							pushFollow(FOLLOW_ws_in_mediaBody1212);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(83);}

					}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:12: ({...}? sass_extend ( ws | ( SEMI ) ) )
					{
					dbg.location(413,12);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:12: ({...}? sass_extend ( ws | ( SEMI ) ) )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:13: {...}? sass_extend ( ws | ( SEMI ) )
					{
					dbg.location(413,13);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaBody", "isScssSource()");
					}dbg.location(413,31);
					pushFollow(FOLLOW_sass_extend_in_mediaBody1231);
					sass_extend();
					state._fsp--;
					if (state.failed) return;dbg.location(413,43);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:43: ( ws | ( SEMI ) )
					int alt84=2;
					try { dbg.enterSubRule(84);
					try { dbg.enterDecision(84, decisionCanBacktrack[84]);

					int LA84_0 = input.LA(1);
					if ( (LA84_0==COMMENT||LA84_0==NL||LA84_0==WS) ) {
						alt84=1;
					}
					else if ( (LA84_0==SEMI) ) {
						alt84=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 84, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(84);}

					switch (alt84) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:44: ws
							{
							dbg.location(413,44);
							pushFollow(FOLLOW_ws_in_mediaBody1234);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:49: ( SEMI )
							{
							dbg.location(413,49);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:49: ( SEMI )
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:50: SEMI
							{
							dbg.location(413,50);
							match(input,SEMI,FOLLOW_SEMI_in_mediaBody1239); if (state.failed) return;
							}

							}
							break;

					}
					} finally {dbg.exitSubRule(84);}

					}

					}
					break;

				default :
					if ( cnt85 >= 1 ) break loop85;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(85, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt85++;
			}
			} finally {dbg.exitSubRule(85);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(415, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaBody");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaBody"



	// $ANTLR start "mediaBodyItem"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:1: mediaBodyItem : ( ( SASS_MIXIN | ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE )=> rule | ( propertyDeclaration )=> propertyDeclaration |{...}? sass_debug |{...}? sass_control |{...}? sass_content |{...}? importItem | rule | page | fontFace | vendorAtRule | media | supportsAtRule );
	public final void mediaBodyItem() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaBodyItem");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(417, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:418:5: ( ( SASS_MIXIN | ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE )=> rule | ( propertyDeclaration )=> propertyDeclaration |{...}? sass_debug |{...}? sass_control |{...}? sass_content |{...}? importItem | rule | page | fontFace | vendorAtRule | media | supportsAtRule )
			int alt90=15;
			try { dbg.enterDecision(90, decisionCanBacktrack[90]);

			int LA90_0 = input.LA(1);
			if ( (LA90_0==LESS_AND) ) {
				int LA90_1 = input.LA(2);
				if ( ((synpred5_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt90=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred6_Css3())) ) {
					alt90=2;
				}
				else if ( (((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&synpred7_Css3())) ) {
					alt90=3;
				}
				else if ( (synpred8_Css3()) ) {
					alt90=4;
				}
				else if ( (true) ) {
					alt90=10;
				}

			}
			else if ( (LA90_0==DOT) ) {
				int LA90_2 = input.LA(2);
				if ( ((synpred5_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt90=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred6_Css3())) ) {
					alt90=2;
				}
				else if ( (((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&synpred7_Css3())) ) {
					alt90=3;
				}
				else if ( (synpred8_Css3()) ) {
					alt90=4;
				}
				else if ( (true) ) {
					alt90=10;
				}

			}
			else if ( (LA90_0==HASH) ) {
				int LA90_3 = input.LA(2);
				if ( ((synpred5_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt90=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred6_Css3())) ) {
					alt90=2;
				}
				else if ( (((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&synpred7_Css3())) ) {
					alt90=3;
				}
				else if ( (synpred8_Css3()) ) {
					alt90=4;
				}
				else if ( (true) ) {
					alt90=10;
				}

			}
			else if ( (LA90_0==SASS_MIXIN) ) {
				int LA90_4 = input.LA(2);
				if ( ((synpred5_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt90=1;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt90=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 90, 4, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA90_0==AT_IDENT) ) {
				int LA90_5 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred6_Css3())) ) {
					alt90=2;
				}
				else if ( (((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&synpred7_Css3())) ) {
					alt90=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt90=5;
				}
				else if ( (true) ) {
					alt90=13;
				}

			}
			else if ( (LA90_0==SASS_INCLUDE) ) {
				int LA90_6 = input.LA(2);
				if ( (((evalPredicate(isLessSource(),"isLessSource()")&&synpred6_Css3())&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt90=2;
				}
				else if ( ((evalPredicate(isScssSource(),"isScssSource()")&&synpred7_Css3())) ) {
					alt90=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt90=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 90, 6, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA90_0==SASS_AT_ROOT) ) {
				int LA90_7 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt90=4;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt90=5;
				}
				else if ( (true) ) {
					alt90=10;
				}

			}
			else if ( (LA90_0==GREATER||LA90_0==PLUS||LA90_0==TILDE) ) {
				int LA90_8 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt90=4;
				}
				else if ( (true) ) {
					alt90=10;
				}

			}
			else if ( (LA90_0==SASS_EXTEND_ONLY_SELECTOR) ) {
				int LA90_9 = input.LA(2);
				if ( ((synpred8_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt90=4;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt90=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 90, 9, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA90_0==HASH_SYMBOL) ) {
				int LA90_10 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt90=4;
				}
				else if ( ((synpred9_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt90=5;
				}
				else if ( (true) ) {
					alt90=10;
				}

			}
			else if ( (LA90_0==DIMENSION) ) {
				int LA90_11 = input.LA(2);
				if ( ((synpred8_Css3()&&evalPredicate(tokenNameStartsWith("."),"tokenNameStartsWith(\".\")"))) ) {
					alt90=4;
				}
				else if ( (evalPredicate(tokenNameStartsWith("."),"tokenNameStartsWith(\".\")")) ) {
					alt90=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 90, 11, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA90_0==LBRACKET) ) {
				int LA90_12 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt90=4;
				}
				else if ( (true) ) {
					alt90=10;
				}

			}
			else if ( (LA90_0==COLON||LA90_0==DCOLON) ) {
				int LA90_13 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt90=4;
				}
				else if ( (true) ) {
					alt90=10;
				}

			}
			else if ( (LA90_0==IDENT) ) {
				int LA90_14 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt90=4;
				}
				else if ( (synpred9_Css3()) ) {
					alt90=5;
				}
				else if ( (true) ) {
					alt90=10;
				}

			}
			else if ( (LA90_0==AT_SIGN) ) {
				int LA90_15 = input.LA(2);
				if ( ((synpred8_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt90=4;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred9_Css3())) ) {
					alt90=5;
				}
				else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
					alt90=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 90, 15, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA90_0==MINUS) ) {
				int LA90_16 = input.LA(2);
				if ( ((synpred8_Css3()&&(evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")))) ) {
					alt90=4;
				}
				else if ( ((synpred9_Css3()&&((evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")&&(evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")))||evalPredicate(isScssSource(),"isScssSource()")))) ) {
					alt90=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt90=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 90, 16, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA90_0==STAR) ) {
				int LA90_17 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt90=4;
				}
				else if ( (synpred9_Css3()) ) {
					alt90=5;
				}
				else if ( (true) ) {
					alt90=10;
				}

			}
			else if ( (LA90_0==PIPE) ) {
				int LA90_18 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt90=4;
				}
				else if ( (true) ) {
					alt90=10;
				}

			}
			else if ( (LA90_0==GEN) ) {
				int LA90_19 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt90=4;
				}
				else if ( (synpred9_Css3()) ) {
					alt90=5;
				}
				else if ( (true) ) {
					alt90=10;
				}

			}
			else if ( (LA90_0==VARIABLE) && (synpred9_Css3())) {
				alt90=5;
			}
			else if ( (LA90_0==SASS_DEBUG||LA90_0==SASS_WARN) ) {
				int LA90_21 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt90=5;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt90=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 90, 21, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA90_0==SASS_VAR) && (synpred9_Css3())) {
				alt90=5;
			}
			else if ( (LA90_0==SASS_IF) ) {
				int LA90_23 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt90=5;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt90=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 90, 23, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA90_0==SASS_FOR) ) {
				int LA90_24 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt90=5;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt90=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 90, 24, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA90_0==SASS_EACH) ) {
				int LA90_25 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt90=5;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt90=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 90, 25, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA90_0==SASS_WHILE) ) {
				int LA90_26 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt90=5;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt90=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 90, 26, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA90_0==SASS_CONTENT) ) {
				int LA90_27 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt90=5;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt90=8;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 90, 27, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA90_0==IMPORT_SYM) ) {
				int LA90_28 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt90=5;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt90=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 90, 28, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA90_0==PAGE_SYM) ) {
				int LA90_29 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt90=5;
				}
				else if ( (true) ) {
					alt90=11;
				}

			}
			else if ( (LA90_0==FONT_FACE_SYM) ) {
				int LA90_30 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt90=5;
				}
				else if ( (true) ) {
					alt90=12;
				}

			}
			else if ( (LA90_0==MOZ_DOCUMENT_SYM) ) {
				int LA90_31 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt90=5;
				}
				else if ( (true) ) {
					alt90=13;
				}

			}
			else if ( (LA90_0==WEBKIT_KEYFRAMES_SYM) ) {
				int LA90_32 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt90=5;
				}
				else if ( (true) ) {
					alt90=13;
				}

			}
			else if ( (LA90_0==MEDIA_SYM) ) {
				int LA90_33 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt90=5;
				}
				else if ( (true) ) {
					alt90=14;
				}

			}
			else if ( ((LA90_0 >= BOTTOMCENTER_SYM && LA90_0 <= BOTTOMRIGHT_SYM)||LA90_0==CHARSET_SYM||LA90_0==COUNTER_STYLE_SYM||(LA90_0 >= LEFTBOTTOM_SYM && LA90_0 <= LEFTTOP_SYM)||LA90_0==NAMESPACE_SYM||(LA90_0 >= RIGHTBOTTOM_SYM && LA90_0 <= RIGHTTOP_SYM)||LA90_0==SASS_ELSE||LA90_0==SASS_EXTEND||(LA90_0 >= SASS_FORWARD && LA90_0 <= SASS_FUNCTION)||(LA90_0 >= SASS_RETURN && LA90_0 <= SASS_USE)||(LA90_0 >= TOPCENTER_SYM && LA90_0 <= TOPRIGHT_SYM)) && (synpred9_Css3())) {
				alt90=5;
			}
			else if ( (LA90_0==SUPPORTS_SYM) ) {
				alt90=15;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 90, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(90);}

			switch (alt90) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:5: ( SASS_MIXIN | ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration
					{
					dbg.location(419,96);
					pushFollow(FOLLOW_cp_mixin_declaration_in_mediaBodyItem1313);
					cp_mixin_declaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:421:7: ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )?
					{
					dbg.location(421,55);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaBodyItem", "isLessSource()");
					}dbg.location(421,73);
					pushFollow(FOLLOW_cp_mixin_call_in_mediaBodyItem1346);
					cp_mixin_call();
					state._fsp--;
					if (state.failed) return;dbg.location(421,87);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:421:87: ( ( ws )? IMPORTANT_SYM )?
					int alt87=2;
					try { dbg.enterSubRule(87);
					try { dbg.enterDecision(87, decisionCanBacktrack[87]);

					try {
						isCyclicDecision = true;
						alt87 = dfa87.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(87);}

					switch (alt87) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:421:88: ( ws )? IMPORTANT_SYM
							{
							dbg.location(421,88);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:421:88: ( ws )?
							int alt86=2;
							try { dbg.enterSubRule(86);
							try { dbg.enterDecision(86, decisionCanBacktrack[86]);

							int LA86_0 = input.LA(1);
							if ( (LA86_0==COMMENT||LA86_0==NL||LA86_0==WS) ) {
								alt86=1;
							}
							} finally {dbg.exitDecision(86);}

							switch (alt86) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:421:88: ws
									{
									dbg.location(421,88);
									pushFollow(FOLLOW_ws_in_mediaBodyItem1349);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(86);}
							dbg.location(421,92);
							match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_mediaBodyItem1352); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(87);}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:422:7: ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )?
					{
					dbg.location(422,25);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
					}dbg.location(422,43);
					pushFollow(FOLLOW_cp_mixin_call_in_mediaBodyItem1369);
					cp_mixin_call();
					state._fsp--;
					if (state.failed) return;dbg.location(422,57);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:422:57: ( ( ws )? IMPORTANT_SYM )?
					int alt89=2;
					try { dbg.enterSubRule(89);
					try { dbg.enterDecision(89, decisionCanBacktrack[89]);

					try {
						isCyclicDecision = true;
						alt89 = dfa89.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(89);}

					switch (alt89) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:422:58: ( ws )? IMPORTANT_SYM
							{
							dbg.location(422,58);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:422:58: ( ws )?
							int alt88=2;
							try { dbg.enterSubRule(88);
							try { dbg.enterDecision(88, decisionCanBacktrack[88]);

							int LA88_0 = input.LA(1);
							if ( (LA88_0==COMMENT||LA88_0==NL||LA88_0==WS) ) {
								alt88=1;
							}
							} finally {dbg.exitDecision(88);}

							switch (alt88) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:422:58: ws
									{
									dbg.location(422,58);
									pushFollow(FOLLOW_ws_in_mediaBodyItem1372);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(88);}
							dbg.location(422,62);
							match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_mediaBodyItem1375); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(89);}

					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:7: ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE )=> rule
					{
					dbg.location(423,145);
					pushFollow(FOLLOW_rule_in_mediaBodyItem1440);
					rule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:424:7: ( propertyDeclaration )=> propertyDeclaration
					{
					dbg.location(424,30);
					pushFollow(FOLLOW_propertyDeclaration_in_mediaBodyItem1452);
					propertyDeclaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:425:7: {...}? sass_debug
					{
					dbg.location(425,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
					}dbg.location(425,25);
					pushFollow(FOLLOW_sass_debug_in_mediaBodyItem1462);
					sass_debug();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 7 :
					dbg.enterAlt(7);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:426:7: {...}? sass_control
					{
					dbg.location(426,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
					}dbg.location(426,25);
					pushFollow(FOLLOW_sass_control_in_mediaBodyItem1472);
					sass_control();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 8 :
					dbg.enterAlt(8);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:427:7: {...}? sass_content
					{
					dbg.location(427,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
					}dbg.location(427,25);
					pushFollow(FOLLOW_sass_content_in_mediaBodyItem1482);
					sass_content();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 9 :
					dbg.enterAlt(9);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:428:7: {...}? importItem
					{
					dbg.location(428,7);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaBodyItem", "isCssPreprocessorSource()");
					}dbg.location(428,36);
					pushFollow(FOLLOW_importItem_in_mediaBodyItem1492);
					importItem();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 10 :
					dbg.enterAlt(10);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:429:7: rule
					{
					dbg.location(429,7);
					pushFollow(FOLLOW_rule_in_mediaBodyItem1500);
					rule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 11 :
					dbg.enterAlt(11);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:430:7: page
					{
					dbg.location(430,7);
					pushFollow(FOLLOW_page_in_mediaBodyItem1508);
					page();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 12 :
					dbg.enterAlt(12);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:431:7: fontFace
					{
					dbg.location(431,7);
					pushFollow(FOLLOW_fontFace_in_mediaBodyItem1516);
					fontFace();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 13 :
					dbg.enterAlt(13);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:432:7: vendorAtRule
					{
					dbg.location(432,7);
					pushFollow(FOLLOW_vendorAtRule_in_mediaBodyItem1524);
					vendorAtRule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 14 :
					dbg.enterAlt(14);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:434:7: media
					{
					dbg.location(434,7);
					pushFollow(FOLLOW_media_in_mediaBodyItem1537);
					media();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 15 :
					dbg.enterAlt(15);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:435:7: supportsAtRule
					{
					dbg.location(435,7);
					pushFollow(FOLLOW_supportsAtRule_in_mediaBodyItem1545);
					supportsAtRule();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(436, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaBodyItem");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaBodyItem"



	// $ANTLR start "mediaQueryList"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:1: mediaQueryList : mediaQuery ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )* ;
	public final void mediaQueryList() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaQueryList");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(438, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:439:2: ( mediaQuery ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:439:4: mediaQuery ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )*
			{
			dbg.location(439,4);
			pushFollow(FOLLOW_mediaQuery_in_mediaQueryList1559);
			mediaQuery();
			state._fsp--;
			if (state.failed) return;dbg.location(439,15);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:439:15: ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )*
			try { dbg.enterSubRule(93);

			loop93:
			while (true) {
				int alt93=2;
				try { dbg.enterDecision(93, decisionCanBacktrack[93]);

				try {
					isCyclicDecision = true;
					alt93 = dfa93.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(93);}

				switch (alt93) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:439:17: ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery
					{
					dbg.location(439,31);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:439:31: ( ws )?
					int alt91=2;
					try { dbg.enterSubRule(91);
					try { dbg.enterDecision(91, decisionCanBacktrack[91]);

					int LA91_0 = input.LA(1);
					if ( (LA91_0==COMMENT||LA91_0==NL||LA91_0==WS) ) {
						alt91=1;
					}
					} finally {dbg.exitDecision(91);}

					switch (alt91) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:439:31: ws
							{
							dbg.location(439,31);
							pushFollow(FOLLOW_ws_in_mediaQueryList1571);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(91);}
					dbg.location(439,35);
					match(input,COMMA,FOLLOW_COMMA_in_mediaQueryList1574); if (state.failed) return;dbg.location(439,41);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:439:41: ( ws )?
					int alt92=2;
					try { dbg.enterSubRule(92);
					try { dbg.enterDecision(92, decisionCanBacktrack[92]);

					int LA92_0 = input.LA(1);
					if ( (LA92_0==COMMENT||LA92_0==NL||LA92_0==WS) ) {
						alt92=1;
					}
					} finally {dbg.exitDecision(92);}

					switch (alt92) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:439:41: ws
							{
							dbg.location(439,41);
							pushFollow(FOLLOW_ws_in_mediaQueryList1576);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(92);}
					dbg.location(439,45);
					pushFollow(FOLLOW_mediaQuery_in_mediaQueryList1579);
					mediaQuery();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop93;
				}
			}
			} finally {dbg.exitSubRule(93);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(440, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaQueryList");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaQueryList"



	// $ANTLR start "mediaQuery"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:442:1: mediaQuery : ( ( mediaQueryOperator ( ws )? )? mediaType ( ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression )* | mediaExpression ( ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression )* |{...}? cp_variable );
	public final void mediaQuery() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaQuery");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(442, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:443:2: ( ( mediaQueryOperator ( ws )? )? mediaType ( ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression )* | mediaExpression ( ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression )* |{...}? cp_variable )
			int alt102=3;
			try { dbg.enterDecision(102, decisionCanBacktrack[102]);

			switch ( input.LA(1) ) {
			case IDENT:
				{
				int LA102_1 = input.LA(2);
				if ( (!(evalPredicate((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()")),""))) ) {
					alt102=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt102=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 102, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case GEN:
			case NOT:
				{
				alt102=1;
				}
				break;
			case HASH_SYMBOL:
				{
				int LA102_4 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt102=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt102=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 102, 4, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LPAREN:
				{
				alt102=2;
				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_VAR:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				alt102=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 102, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(102);}

			switch (alt102) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:5: ( mediaQueryOperator ( ws )? )? mediaType ( ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression )*
					{
					dbg.location(444,5);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:5: ( mediaQueryOperator ( ws )? )?
					int alt95=2;
					try { dbg.enterSubRule(95);
					try { dbg.enterDecision(95, decisionCanBacktrack[95]);

					int LA95_0 = input.LA(1);
					if ( (LA95_0==IDENT) ) {
						int LA95_1 = input.LA(2);
						if ( (evalPredicate(tokenNameEquals("only"),"tokenNameEquals(\"only\")")) ) {
							alt95=1;
						}
					}
					else if ( (LA95_0==NOT) ) {
						alt95=1;
					}
					} finally {dbg.exitDecision(95);}

					switch (alt95) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:6: mediaQueryOperator ( ws )?
							{
							dbg.location(444,6);
							pushFollow(FOLLOW_mediaQueryOperator_in_mediaQuery1598);
							mediaQueryOperator();
							state._fsp--;
							if (state.failed) return;dbg.location(444,25);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:25: ( ws )?
							int alt94=2;
							try { dbg.enterSubRule(94);
							try { dbg.enterDecision(94, decisionCanBacktrack[94]);

							int LA94_0 = input.LA(1);
							if ( (LA94_0==COMMENT||LA94_0==NL||LA94_0==WS) ) {
								alt94=1;
							}
							} finally {dbg.exitDecision(94);}

							switch (alt94) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:25: ws
									{
									dbg.location(444,25);
									pushFollow(FOLLOW_ws_in_mediaQuery1600);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(94);}

							}
							break;

					}
					} finally {dbg.exitSubRule(95);}
					dbg.location(444,33);
					pushFollow(FOLLOW_mediaType_in_mediaQuery1607);
					mediaType();
					state._fsp--;
					if (state.failed) return;dbg.location(444,43);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:43: ( ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression )*
					try { dbg.enterSubRule(98);

					loop98:
					while (true) {
						int alt98=2;
						try { dbg.enterDecision(98, decisionCanBacktrack[98]);

						int LA98_0 = input.LA(1);
						if ( (LA98_0==COMMENT||LA98_0==NL||LA98_0==WS) ) {
							int LA98_1 = input.LA(2);
							if ( (synpred11_Css3()) ) {
								alt98=1;
							}

						}
						else if ( (LA98_0==IDENT) ) {
							int LA98_18 = input.LA(2);
							if ( ((synpred11_Css3()&&evalPredicate(tokenNameEquals("and"),"tokenNameEquals(\"and\")"))) ) {
								alt98=1;
							}

						}

						} finally {dbg.exitDecision(98);}

						switch (alt98) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:44: ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression
							{
							dbg.location(444,60);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:60: ( ws )?
							int alt96=2;
							try { dbg.enterSubRule(96);
							try { dbg.enterDecision(96, decisionCanBacktrack[96]);

							int LA96_0 = input.LA(1);
							if ( (LA96_0==COMMENT||LA96_0==NL||LA96_0==WS) ) {
								alt96=1;
							}
							} finally {dbg.exitDecision(96);}

							switch (alt96) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:60: ws
									{
									dbg.location(444,60);
									pushFollow(FOLLOW_ws_in_mediaQuery1618);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(96);}
							dbg.location(444,64);
							pushFollow(FOLLOW_key_and_in_mediaQuery1621);
							key_and();
							state._fsp--;
							if (state.failed) return;dbg.location(444,72);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:72: ( ws )?
							int alt97=2;
							try { dbg.enterSubRule(97);
							try { dbg.enterDecision(97, decisionCanBacktrack[97]);

							int LA97_0 = input.LA(1);
							if ( (LA97_0==COMMENT||LA97_0==NL||LA97_0==WS) ) {
								alt97=1;
							}
							} finally {dbg.exitDecision(97);}

							switch (alt97) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:72: ws
									{
									dbg.location(444,72);
									pushFollow(FOLLOW_ws_in_mediaQuery1623);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(97);}
							dbg.location(444,76);
							pushFollow(FOLLOW_mediaExpression_in_mediaQuery1626);
							mediaExpression();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop98;
						}
					}
					} finally {dbg.exitSubRule(98);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:7: mediaExpression ( ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression )*
					{
					dbg.location(445,7);
					pushFollow(FOLLOW_mediaExpression_in_mediaQuery1637);
					mediaExpression();
					state._fsp--;
					if (state.failed) return;dbg.location(445,23);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:23: ( ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression )*
					try { dbg.enterSubRule(101);

					loop101:
					while (true) {
						int alt101=2;
						try { dbg.enterDecision(101, decisionCanBacktrack[101]);

						int LA101_0 = input.LA(1);
						if ( (LA101_0==COMMENT||LA101_0==NL||LA101_0==WS) ) {
							int LA101_1 = input.LA(2);
							if ( (synpred12_Css3()) ) {
								alt101=1;
							}

						}
						else if ( (LA101_0==IDENT) ) {
							int LA101_18 = input.LA(2);
							if ( ((evalPredicate(tokenNameEquals("and"),"tokenNameEquals(\"and\")")&&synpred12_Css3())) ) {
								alt101=1;
							}

						}

						} finally {dbg.exitDecision(101);}

						switch (alt101) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:24: ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression
							{
							dbg.location(445,40);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:40: ( ws )?
							int alt99=2;
							try { dbg.enterSubRule(99);
							try { dbg.enterDecision(99, decisionCanBacktrack[99]);

							int LA99_0 = input.LA(1);
							if ( (LA99_0==COMMENT||LA99_0==NL||LA99_0==WS) ) {
								alt99=1;
							}
							} finally {dbg.exitDecision(99);}

							switch (alt99) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:40: ws
									{
									dbg.location(445,40);
									pushFollow(FOLLOW_ws_in_mediaQuery1648);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(99);}
							dbg.location(445,44);
							pushFollow(FOLLOW_key_and_in_mediaQuery1651);
							key_and();
							state._fsp--;
							if (state.failed) return;dbg.location(445,52);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:52: ( ws )?
							int alt100=2;
							try { dbg.enterSubRule(100);
							try { dbg.enterDecision(100, decisionCanBacktrack[100]);

							int LA100_0 = input.LA(1);
							if ( (LA100_0==COMMENT||LA100_0==NL||LA100_0==WS) ) {
								alt100=1;
							}
							} finally {dbg.exitDecision(100);}

							switch (alt100) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:52: ws
									{
									dbg.location(445,52);
									pushFollow(FOLLOW_ws_in_mediaQuery1653);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(100);}
							dbg.location(445,56);
							pushFollow(FOLLOW_mediaExpression_in_mediaQuery1656);
							mediaExpression();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop101;
						}
					}
					} finally {dbg.exitSubRule(101);}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:446:7: {...}? cp_variable
					{
					dbg.location(446,7);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaQuery", "isLessSource()");
					}dbg.location(446,25);
					pushFollow(FOLLOW_cp_variable_in_mediaQuery1669);
					cp_variable();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(447, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaQuery");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaQuery"



	// $ANTLR start "mediaQueryOperator"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:449:1: mediaQueryOperator : ( key_only | NOT );
	public final void mediaQueryOperator() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaQueryOperator");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(449, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:450:3: ( key_only | NOT )
			int alt103=2;
			try { dbg.enterDecision(103, decisionCanBacktrack[103]);

			int LA103_0 = input.LA(1);
			if ( (LA103_0==IDENT) ) {
				alt103=1;
			}
			else if ( (LA103_0==NOT) ) {
				alt103=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 103, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(103);}

			switch (alt103) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:450:5: key_only
					{
					dbg.location(450,5);
					pushFollow(FOLLOW_key_only_in_mediaQueryOperator1681);
					key_only();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:450:16: NOT
					{
					dbg.location(450,16);
					match(input,NOT,FOLLOW_NOT_in_mediaQueryOperator1685); if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(451, 2);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaQueryOperator");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaQueryOperator"



	// $ANTLR start "mediaType"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:453:1: mediaType : ( IDENT | GEN |{...}? sass_interpolation_expression_var );
	public final void mediaType() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaType");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(453, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:454:2: ( IDENT | GEN |{...}? sass_interpolation_expression_var )
			int alt104=3;
			try { dbg.enterDecision(104, decisionCanBacktrack[104]);

			switch ( input.LA(1) ) {
			case IDENT:
				{
				alt104=1;
				}
				break;
			case GEN:
				{
				alt104=2;
				}
				break;
			case HASH_SYMBOL:
				{
				alt104=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 104, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(104);}

			switch (alt104) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:454:4: IDENT
					{
					dbg.location(454,4);
					match(input,IDENT,FOLLOW_IDENT_in_mediaType1697); if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:454:12: GEN
					{
					dbg.location(454,12);
					match(input,GEN,FOLLOW_GEN_in_mediaType1701); if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:454:18: {...}? sass_interpolation_expression_var
					{
					dbg.location(454,18);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaType", "isCssPreprocessorSource()");
					}dbg.location(454,47);
					pushFollow(FOLLOW_sass_interpolation_expression_var_in_mediaType1707);
					sass_interpolation_expression_var();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(455, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaType");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaType"



	// $ANTLR start "mediaExpression"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:457:1: mediaExpression : ( ( LPAREN )=> ( LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN ) | ( HASH )=>{...}? sass_interpolation_expression_var );
	public final void mediaExpression() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaExpression");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(457, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:458:5: ( ( LPAREN )=> ( LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN ) | ( HASH )=>{...}? sass_interpolation_expression_var )
			int alt108=2;
			try { dbg.enterDecision(108, decisionCanBacktrack[108]);

			int LA108_0 = input.LA(1);
			if ( (LA108_0==LPAREN) && (synpred13_Css3())) {
				alt108=1;
			}
			else if ( (LA108_0==HASH_SYMBOL) && (synpred14_Css3())) {
				alt108=2;
			}

			} finally {dbg.exitDecision(108);}

			switch (alt108) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:5: ( LPAREN )=> ( LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN )
					{
					dbg.location(459,17);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:17: ( LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:18: LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN
					{
					dbg.location(459,18);
					match(input,LPAREN,FOLLOW_LPAREN_in_mediaExpression1732); if (state.failed) return;dbg.location(459,25);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:25: ( ws )?
					int alt105=2;
					try { dbg.enterSubRule(105);
					try { dbg.enterDecision(105, decisionCanBacktrack[105]);

					int LA105_0 = input.LA(1);
					if ( (LA105_0==COMMENT||LA105_0==NL||LA105_0==WS) ) {
						alt105=1;
					}
					} finally {dbg.exitDecision(105);}

					switch (alt105) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:25: ws
							{
							dbg.location(459,25);
							pushFollow(FOLLOW_ws_in_mediaExpression1734);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(105);}
					dbg.location(459,29);
					pushFollow(FOLLOW_mediaFeature_in_mediaExpression1737);
					mediaFeature();
					state._fsp--;
					if (state.failed) return;dbg.location(459,42);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:42: ( mediaFeatureValue )?
					int alt106=2;
					try { dbg.enterSubRule(106);
					try { dbg.enterDecision(106, decisionCanBacktrack[106]);

					try {
						isCyclicDecision = true;
						alt106 = dfa106.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(106);}

					switch (alt106) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:42: mediaFeatureValue
							{
							dbg.location(459,42);
							pushFollow(FOLLOW_mediaFeatureValue_in_mediaExpression1739);
							mediaFeatureValue();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(106);}
					dbg.location(459,61);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:61: ( ws )?
					int alt107=2;
					try { dbg.enterSubRule(107);
					try { dbg.enterDecision(107, decisionCanBacktrack[107]);

					int LA107_0 = input.LA(1);
					if ( (LA107_0==COMMENT||LA107_0==NL||LA107_0==WS) ) {
						alt107=1;
					}
					} finally {dbg.exitDecision(107);}

					switch (alt107) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:61: ws
							{
							dbg.location(459,61);
							pushFollow(FOLLOW_ws_in_mediaExpression1742);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(107);}
					dbg.location(459,65);
					match(input,RPAREN,FOLLOW_RPAREN_in_mediaExpression1745); if (state.failed) return;
					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:460:7: ( HASH )=>{...}? sass_interpolation_expression_var
					{
					dbg.location(460,17);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaExpression", "isCssPreprocessorSource()");
					}dbg.location(460,46);
					pushFollow(FOLLOW_sass_interpolation_expression_var_in_mediaExpression1762);
					sass_interpolation_expression_var();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(461, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaExpression");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaExpression"



	// $ANTLR start "mediaFeatureValue"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:463:1: mediaFeatureValue : ( ws )? COLON ( ws )? ({...}? cp_expression | expression ) ;
	public final void mediaFeatureValue() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaFeatureValue");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(463, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:464:5: ( ( ws )? COLON ( ws )? ({...}? cp_expression | expression ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:465:5: ( ws )? COLON ( ws )? ({...}? cp_expression | expression )
			{
			dbg.location(465,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:465:5: ( ws )?
			int alt109=2;
			try { dbg.enterSubRule(109);
			try { dbg.enterDecision(109, decisionCanBacktrack[109]);

			int LA109_0 = input.LA(1);
			if ( (LA109_0==COMMENT||LA109_0==NL||LA109_0==WS) ) {
				alt109=1;
			}
			} finally {dbg.exitDecision(109);}

			switch (alt109) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:465:5: ws
					{
					dbg.location(465,5);
					pushFollow(FOLLOW_ws_in_mediaFeatureValue1783);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(109);}
			dbg.location(465,9);
			match(input,COLON,FOLLOW_COLON_in_mediaFeatureValue1786); if (state.failed) return;dbg.location(465,15);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:465:15: ( ws )?
			int alt110=2;
			try { dbg.enterSubRule(110);
			try { dbg.enterDecision(110, decisionCanBacktrack[110]);

			int LA110_0 = input.LA(1);
			if ( (LA110_0==COMMENT||LA110_0==NL||LA110_0==WS) ) {
				alt110=1;
			}
			} finally {dbg.exitDecision(110);}

			switch (alt110) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:465:15: ws
					{
					dbg.location(465,15);
					pushFollow(FOLLOW_ws_in_mediaFeatureValue1788);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(110);}
			dbg.location(466,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:466:5: ({...}? cp_expression | expression )
			int alt111=2;
			try { dbg.enterSubRule(111);
			try { dbg.enterDecision(111, decisionCanBacktrack[111]);

			switch ( input.LA(1) ) {
			case IMPORTANT_SYM:
			case LBRACE:
			case LPAREN:
			case NOT:
				{
				alt111=1;
				}
				break;
			case MINUS:
			case PLUS:
				{
				int LA111_3 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case IDENT:
				{
				int LA111_4 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case VARIABLE:
				{
				int LA111_5 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case LBRACKET:
				{
				int LA111_6 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case NUMBER:
				{
				int LA111_7 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case URANGE:
				{
				int LA111_8 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case PERCENTAGE:
				{
				int LA111_9 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case LENGTH:
				{
				int LA111_10 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case EMS:
				{
				int LA111_11 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case REM:
				{
				int LA111_12 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case EXS:
				{
				int LA111_13 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case ANGLE:
				{
				int LA111_14 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case TIME:
				{
				int LA111_15 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case FREQ:
				{
				int LA111_16 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case RESOLUTION:
				{
				int LA111_17 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case DIMENSION:
				{
				int LA111_18 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case STRING:
				{
				int LA111_19 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case TILDE:
				{
				int LA111_20 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case LESS_JS_STRING:
				{
				int LA111_21 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case GEN:
				{
				int LA111_22 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case URI:
				{
				int LA111_23 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case HASH:
				{
				int LA111_24 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				int LA111_25 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt111=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt111=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 111, 25, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_VAR:
				{
				int LA111_26 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt111=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt111=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 111, 26, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LESS_AND:
				{
				int LA111_27 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt111=1;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt111=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 111, 27, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case HASH_SYMBOL:
				{
				int LA111_28 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt111=1;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt111=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 111, 28, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT_SIGN:
				{
				int LA111_29 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt111=1;
				}
				else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
					alt111=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 111, 29, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PERCENTAGE_SYMBOL:
				{
				int LA111_30 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 111, 30, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 111, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(111);}

			switch (alt111) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:467:9: {...}? cp_expression
					{
					dbg.location(467,9);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaFeatureValue", "isCssPreprocessorSource()");
					}dbg.location(467,38);
					pushFollow(FOLLOW_cp_expression_in_mediaFeatureValue1807);
					cp_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:469:9: expression
					{
					dbg.location(469,9);
					pushFollow(FOLLOW_expression_in_mediaFeatureValue1827);
					expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(111);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(471, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaFeatureValue");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaFeatureValue"



	// $ANTLR start "mediaFeature"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:473:1: mediaFeature : ( IDENT | GEN |{...}? ( cp_variable | sass_interpolation_expression_var ) );
	public final void mediaFeature() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaFeature");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(473, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:474:2: ( IDENT | GEN |{...}? ( cp_variable | sass_interpolation_expression_var ) )
			int alt113=3;
			try { dbg.enterDecision(113, decisionCanBacktrack[113]);

			switch ( input.LA(1) ) {
			case IDENT:
				{
				int LA113_1 = input.LA(2);
				if ( (LA113_1==DOT) ) {
					alt113=3;
				}
				else if ( (LA113_1==COLON||LA113_1==COMMENT||LA113_1==NL||LA113_1==RPAREN||LA113_1==WS) ) {
					alt113=1;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 113, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case GEN:
				{
				alt113=2;
				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case HASH_SYMBOL:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_VAR:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				alt113=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 113, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(113);}

			switch (alt113) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:474:4: IDENT
					{
					dbg.location(474,4);
					match(input,IDENT,FOLLOW_IDENT_in_mediaFeature1847); if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:474:12: GEN
					{
					dbg.location(474,12);
					match(input,GEN,FOLLOW_GEN_in_mediaFeature1851); if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:474:18: {...}? ( cp_variable | sass_interpolation_expression_var )
					{
					dbg.location(474,18);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaFeature", "isCssPreprocessorSource()");
					}dbg.location(474,47);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:474:47: ( cp_variable | sass_interpolation_expression_var )
					int alt112=2;
					try { dbg.enterSubRule(112);
					try { dbg.enterDecision(112, decisionCanBacktrack[112]);

					int LA112_0 = input.LA(1);
					if ( (LA112_0==AT_IDENT||(LA112_0 >= BOTTOMCENTER_SYM && LA112_0 <= BOTTOMRIGHT_SYM)||LA112_0==CHARSET_SYM||LA112_0==COUNTER_STYLE_SYM||LA112_0==FONT_FACE_SYM||LA112_0==IDENT||LA112_0==IMPORT_SYM||(LA112_0 >= LEFTBOTTOM_SYM && LA112_0 <= LEFTTOP_SYM)||LA112_0==MEDIA_SYM||LA112_0==MOZ_DOCUMENT_SYM||LA112_0==NAMESPACE_SYM||LA112_0==PAGE_SYM||(LA112_0 >= RIGHTBOTTOM_SYM && LA112_0 <= RIGHTTOP_SYM)||(LA112_0 >= SASS_AT_ROOT && LA112_0 <= SASS_DEBUG)||(LA112_0 >= SASS_EACH && LA112_0 <= SASS_ELSE)||LA112_0==SASS_EXTEND||(LA112_0 >= SASS_FOR && LA112_0 <= SASS_FUNCTION)||(LA112_0 >= SASS_IF && LA112_0 <= SASS_MIXIN)||(LA112_0 >= SASS_RETURN && LA112_0 <= SASS_WHILE)||(LA112_0 >= TOPCENTER_SYM && LA112_0 <= TOPRIGHT_SYM)||LA112_0==WEBKIT_KEYFRAMES_SYM) ) {
						alt112=1;
					}
					else if ( (LA112_0==HASH_SYMBOL) ) {
						alt112=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 112, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(112);}

					switch (alt112) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:474:49: cp_variable
							{
							dbg.location(474,49);
							pushFollow(FOLLOW_cp_variable_in_mediaFeature1859);
							cp_variable();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:474:63: sass_interpolation_expression_var
							{
							dbg.location(474,63);
							pushFollow(FOLLOW_sass_interpolation_expression_var_in_mediaFeature1863);
							sass_interpolation_expression_var();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(112);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(475, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaFeature");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaFeature"



	// $ANTLR start "body"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:477:2: body : ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ ;
	public final void body() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "body");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(477, 1);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:478:5: ( ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:479:5: ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
			{
			dbg.location(479,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:479:5: ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
			int cnt118=0;
			try { dbg.enterSubRule(118);

			loop118:
			while (true) {
				int alt118=3;
				try { dbg.enterDecision(118, decisionCanBacktrack[118]);

				int LA118_0 = input.LA(1);
				if ( ((LA118_0 >= AT_IDENT && LA118_0 <= AT_SIGN)||(LA118_0 >= BOTTOMCENTER_SYM && LA118_0 <= BOTTOMRIGHT_SYM)||(LA118_0 >= CHARSET_SYM && LA118_0 <= COLON)||LA118_0==COUNTER_STYLE_SYM||(LA118_0 >= DCOLON && LA118_0 <= DOT)||LA118_0==FONT_FACE_SYM||(LA118_0 >= GEN && LA118_0 <= GREATER)||(LA118_0 >= HASH && LA118_0 <= HASH_SYMBOL)||LA118_0==IDENT||LA118_0==IMPORT_SYM||LA118_0==LAYER_SYM||(LA118_0 >= LBRACKET && LA118_0 <= LEFTTOP_SYM)||LA118_0==LESS_AND||(LA118_0 >= MEDIA_SYM && LA118_0 <= MOZ_DOCUMENT_SYM)||LA118_0==NAMESPACE_SYM||LA118_0==PAGE_SYM||(LA118_0 >= PIPE && LA118_0 <= PLUS)||(LA118_0 >= RIGHTBOTTOM_SYM && LA118_0 <= RIGHTTOP_SYM)||(LA118_0 >= SASS_AT_ROOT && LA118_0 <= SASS_DEBUG)||(LA118_0 >= SASS_EACH && LA118_0 <= SASS_ELSE)||(LA118_0 >= SASS_EXTEND && LA118_0 <= SASS_FUNCTION)||(LA118_0 >= SASS_IF && LA118_0 <= SASS_MIXIN)||(LA118_0 >= SASS_RETURN && LA118_0 <= SASS_WHILE)||LA118_0==STAR||LA118_0==SUPPORTS_SYM||LA118_0==TILDE||(LA118_0 >= TOPCENTER_SYM && LA118_0 <= TOPRIGHT_SYM)||LA118_0==WEBKIT_KEYFRAMES_SYM) ) {
					alt118=1;
				}
				else if ( (LA118_0==SEMI) ) {
					alt118=2;
				}

				} finally {dbg.exitDecision(118);}

				switch (alt118) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:480:10: ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
					{
					dbg.location(480,10);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:480:10: ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:480:12: bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )?
					{
					dbg.location(480,12);
					pushFollow(FOLLOW_bodyItem_in_body1897);
					bodyItem();
					state._fsp--;
					if (state.failed) return;dbg.location(480,21);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:480:21: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?
					int alt115=2;
					try { dbg.enterSubRule(115);
					try { dbg.enterDecision(115, decisionCanBacktrack[115]);

					try {
						isCyclicDecision = true;
						alt115 = dfa115.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(115);}

					switch (alt115) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:480:22: ( ( ws )? SEMI )=> ( ws )? SEMI
							{
							dbg.location(480,34);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:480:34: ( ws )?
							int alt114=2;
							try { dbg.enterSubRule(114);
							try { dbg.enterDecision(114, decisionCanBacktrack[114]);

							int LA114_0 = input.LA(1);
							if ( (LA114_0==COMMENT||LA114_0==NL||LA114_0==WS) ) {
								alt114=1;
							}
							} finally {dbg.exitDecision(114);}

							switch (alt114) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:480:34: ws
									{
									dbg.location(480,34);
									pushFollow(FOLLOW_ws_in_body1907);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(114);}
							dbg.location(480,38);
							match(input,SEMI,FOLLOW_SEMI_in_body1910); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(115);}
					dbg.location(480,45);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:480:45: ( ws )?
					int alt116=2;
					try { dbg.enterSubRule(116);
					try { dbg.enterDecision(116, decisionCanBacktrack[116]);

					int LA116_0 = input.LA(1);
					if ( (LA116_0==COMMENT||LA116_0==NL||LA116_0==WS) ) {
						alt116=1;
					}
					} finally {dbg.exitDecision(116);}

					switch (alt116) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:480:45: ws
							{
							dbg.location(480,45);
							pushFollow(FOLLOW_ws_in_body1914);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(116);}

					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:482:10: ( SEMI ( ws )? )
					{
					dbg.location(482,10);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:482:10: ( SEMI ( ws )? )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:482:12: SEMI ( ws )?
					{
					dbg.location(482,12);
					match(input,SEMI,FOLLOW_SEMI_in_body1941); if (state.failed) return;dbg.location(482,17);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:482:17: ( ws )?
					int alt117=2;
					try { dbg.enterSubRule(117);
					try { dbg.enterDecision(117, decisionCanBacktrack[117]);

					int LA117_0 = input.LA(1);
					if ( (LA117_0==COMMENT||LA117_0==NL||LA117_0==WS) ) {
						alt117=1;
					}
					} finally {dbg.exitDecision(117);}

					switch (alt117) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:482:17: ws
							{
							dbg.location(482,17);
							pushFollow(FOLLOW_ws_in_body1943);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(117);}

					}

					}
					break;

				default :
					if ( cnt118 >= 1 ) break loop118;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(118, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt118++;
			}
			} finally {dbg.exitSubRule(118);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(484, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "body");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "body"



	// $ANTLR start "bodyItem"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:486:1: bodyItem : ( ( SASS_MIXIN | ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ws )? SEMI )=>{...}? cp_mixin_call | ( cp_mixin_call )=>{...}? cp_mixin_call | rule | ( cp_variable ( ws )? COLON )=> cp_variable_declaration | ( sass_map )=> sass_map | at_rule |{...}? importItem |{...}? sass_debug |{...}? sass_control |{...}? sass_function_declaration );
	public final void bodyItem() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "bodyItem");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(486, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:487:5: ( ( SASS_MIXIN | ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ws )? SEMI )=>{...}? cp_mixin_call | ( cp_mixin_call )=>{...}? cp_mixin_call | rule | ( cp_variable ( ws )? COLON )=> cp_variable_declaration | ( sass_map )=> sass_map | at_rule |{...}? importItem |{...}? sass_debug |{...}? sass_control |{...}? sass_function_declaration )
			int alt119=11;
			try { dbg.enterDecision(119, decisionCanBacktrack[119]);

			switch ( input.LA(1) ) {
			case LESS_AND:
				{
				int LA119_1 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred16_Css3())) ) {
					alt119=1;
				}
				else if ( ((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=2;
				}
				else if ( (((synpred18_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt119=3;
				}
				else if ( (true) ) {
					alt119=4;
				}

				}
				break;
			case DOT:
				{
				int LA119_2 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred16_Css3())) ) {
					alt119=1;
				}
				else if ( ((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=2;
				}
				else if ( (((synpred18_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt119=3;
				}
				else if ( (true) ) {
					alt119=4;
				}

				}
				break;
			case HASH:
				{
				int LA119_3 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred16_Css3())) ) {
					alt119=1;
				}
				else if ( ((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=2;
				}
				else if ( (((synpred18_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt119=3;
				}
				else if ( (true) ) {
					alt119=4;
				}

				}
				break;
			case SASS_MIXIN:
				{
				int LA119_4 = input.LA(2);
				if ( ((evalPredicate(isScssSource(),"isScssSource()")&&synpred16_Css3())) ) {
					alt119=1;
				}
				else if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 119, 4, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT_IDENT:
				{
				int LA119_5 = input.LA(2);
				if ( ((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=2;
				}
				else if ( (((synpred18_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt119=3;
				}
				else if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}
				else if ( (true) ) {
					alt119=7;
				}

				}
				break;
			case SASS_INCLUDE:
				{
				int LA119_6 = input.LA(2);
				if ( (((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt119=2;
				}
				else if ( ((synpred18_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt119=3;
				}
				else if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 119, 6, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_AT_ROOT:
				{
				int LA119_7 = input.LA(2);
				if ( (true) ) {
					alt119=4;
				}
				else if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 119, 7, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT_SIGN:
			case COLON:
			case DCOLON:
			case DIMENSION:
			case GEN:
			case GREATER:
			case HASH_SYMBOL:
			case LBRACKET:
			case MINUS:
			case PIPE:
			case PLUS:
			case SASS_EXTEND_ONLY_SELECTOR:
			case STAR:
			case TILDE:
				{
				alt119=4;
				}
				break;
			case IDENT:
				{
				int LA119_14 = input.LA(2);
				if ( (true) ) {
					alt119=4;
				}
				else if ( ((synpred19_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isScssSource(),"isScssSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 119, 14, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case MEDIA_SYM:
				{
				int LA119_20 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}
				else if ( (true) ) {
					alt119=7;
				}

				}
				break;
			case SASS_VAR:
				{
				int LA119_21 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isScssSource(),"isScssSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 119, 21, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PAGE_SYM:
				{
				int LA119_22 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}
				else if ( (true) ) {
					alt119=7;
				}

				}
				break;
			case COUNTER_STYLE_SYM:
				{
				int LA119_23 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}
				else if ( (true) ) {
					alt119=7;
				}

				}
				break;
			case FONT_FACE_SYM:
				{
				int LA119_24 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}
				else if ( (true) ) {
					alt119=7;
				}

				}
				break;
			case MOZ_DOCUMENT_SYM:
				{
				int LA119_25 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}
				else if ( (true) ) {
					alt119=7;
				}

				}
				break;
			case LAYER_SYM:
			case SUPPORTS_SYM:
				{
				alt119=7;
				}
				break;
			case WEBKIT_KEYFRAMES_SYM:
				{
				int LA119_27 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}
				else if ( (true) ) {
					alt119=7;
				}

				}
				break;
			case IMPORT_SYM:
				{
				int LA119_28 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt119=8;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 119, 28, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_DEBUG:
			case SASS_WARN:
				{
				int LA119_30 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt119=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 119, 30, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_IF:
				{
				int LA119_31 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt119=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 119, 31, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_FOR:
				{
				int LA119_32 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt119=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 119, 32, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_EACH:
				{
				int LA119_33 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt119=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 119, 33, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_WHILE:
				{
				int LA119_34 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt119=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 119, 34, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_FUNCTION:
				{
				int LA119_35 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt119=11;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 119, 35, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case NAMESPACE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_CONTENT:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FORWARD:
			case SASS_RETURN:
			case SASS_USE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
				{
				int LA119_36 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 119, 36, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 119, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(119);}

			switch (alt119) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:488:9: ( SASS_MIXIN | ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration
					{
					dbg.location(488,107);
					pushFollow(FOLLOW_cp_mixin_declaration_in_bodyItem2023);
					cp_mixin_declaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:490:11: ( cp_mixin_call ( ws )? SEMI )=>{...}? cp_mixin_call
					{
					dbg.location(490,38);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "bodyItem", "isLessSource()");
					}dbg.location(490,56);
					pushFollow(FOLLOW_cp_mixin_call_in_bodyItem2056);
					cp_mixin_call();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:491:11: ( cp_mixin_call )=>{...}? cp_mixin_call
					{
					dbg.location(491,29);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
					}dbg.location(491,47);
					pushFollow(FOLLOW_cp_mixin_call_in_bodyItem2075);
					cp_mixin_call();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:492:8: rule
					{
					dbg.location(492,8);
					pushFollow(FOLLOW_rule_in_bodyItem2084);
					rule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:493:11: ( cp_variable ( ws )? COLON )=> cp_variable_declaration
					{
					dbg.location(493,37);
					pushFollow(FOLLOW_cp_variable_declaration_in_bodyItem2106);
					cp_variable_declaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:494:11: ( sass_map )=> sass_map
					{
					dbg.location(494,24);
					pushFollow(FOLLOW_sass_map_in_bodyItem2123);
					sass_map();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 7 :
					dbg.enterAlt(7);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:495:11: at_rule
					{
					dbg.location(495,11);
					pushFollow(FOLLOW_at_rule_in_bodyItem2135);
					at_rule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 8 :
					dbg.enterAlt(8);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:497:11: {...}? importItem
					{
					dbg.location(497,11);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "bodyItem", "isCssPreprocessorSource()");
					}dbg.location(497,40);
					pushFollow(FOLLOW_importItem_in_bodyItem2158);
					importItem();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 9 :
					dbg.enterAlt(9);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:498:11: {...}? sass_debug
					{
					dbg.location(498,11);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
					}dbg.location(498,29);
					pushFollow(FOLLOW_sass_debug_in_bodyItem2172);
					sass_debug();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 10 :
					dbg.enterAlt(10);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:499:11: {...}? sass_control
					{
					dbg.location(499,11);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
					}dbg.location(499,29);
					pushFollow(FOLLOW_sass_control_in_bodyItem2186);
					sass_control();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 11 :
					dbg.enterAlt(11);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:500:11: {...}? sass_function_declaration
					{
					dbg.location(500,11);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
					}dbg.location(500,29);
					pushFollow(FOLLOW_sass_function_declaration_in_bodyItem2200);
					sass_function_declaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(NL));
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(501, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "bodyItem");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "bodyItem"



	// $ANTLR start "supportsAtRule"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:506:1: supportsAtRule : SUPPORTS_SYM ( ws )? supportsCondition ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE ;
	public final void supportsAtRule() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "supportsAtRule");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(506, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:507:2: ( SUPPORTS_SYM ( ws )? supportsCondition ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:508:2: SUPPORTS_SYM ( ws )? supportsCondition ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE
			{
			dbg.location(508,2);
			match(input,SUPPORTS_SYM,FOLLOW_SUPPORTS_SYM_in_supportsAtRule2220); if (state.failed) return;dbg.location(508,15);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:508:15: ( ws )?
			int alt120=2;
			try { dbg.enterSubRule(120);
			try { dbg.enterDecision(120, decisionCanBacktrack[120]);

			int LA120_0 = input.LA(1);
			if ( (LA120_0==COMMENT||LA120_0==NL||LA120_0==WS) ) {
				alt120=1;
			}
			} finally {dbg.exitDecision(120);}

			switch (alt120) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:508:15: ws
					{
					dbg.location(508,15);
					pushFollow(FOLLOW_ws_in_supportsAtRule2222);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(120);}
			dbg.location(508,19);
			pushFollow(FOLLOW_supportsCondition_in_supportsAtRule2225);
			supportsCondition();
			state._fsp--;
			if (state.failed) return;dbg.location(508,37);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:508:37: ( ws )?
			int alt121=2;
			try { dbg.enterSubRule(121);
			try { dbg.enterDecision(121, decisionCanBacktrack[121]);

			int LA121_0 = input.LA(1);
			if ( (LA121_0==COMMENT||LA121_0==NL||LA121_0==WS) ) {
				alt121=1;
			}
			} finally {dbg.exitDecision(121);}

			switch (alt121) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:508:37: ws
					{
					dbg.location(508,37);
					pushFollow(FOLLOW_ws_in_supportsAtRule2227);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(121);}
			dbg.location(508,41);
			match(input,LBRACE,FOLLOW_LBRACE_in_supportsAtRule2230); if (state.failed) return;dbg.location(508,48);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:508:48: ( ws )?
			int alt122=2;
			try { dbg.enterSubRule(122);
			try { dbg.enterDecision(122, decisionCanBacktrack[122]);

			int LA122_0 = input.LA(1);
			if ( (LA122_0==COMMENT||LA122_0==NL||LA122_0==WS) ) {
				alt122=1;
			}
			} finally {dbg.exitDecision(122);}

			switch (alt122) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:508:48: ws
					{
					dbg.location(508,48);
					pushFollow(FOLLOW_ws_in_supportsAtRule2232);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(122);}
			dbg.location(508,52);
			pushFollow(FOLLOW_syncToFollow_in_supportsAtRule2235);
			syncToFollow();
			state._fsp--;
			if (state.failed) return;dbg.location(508,65);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:508:65: ( mediaBody )?
			int alt123=2;
			try { dbg.enterSubRule(123);
			try { dbg.enterDecision(123, decisionCanBacktrack[123]);

			int LA123_0 = input.LA(1);
			if ( ((LA123_0 >= AT_IDENT && LA123_0 <= AT_SIGN)||(LA123_0 >= BOTTOMCENTER_SYM && LA123_0 <= BOTTOMRIGHT_SYM)||(LA123_0 >= CHARSET_SYM && LA123_0 <= COLON)||LA123_0==COUNTER_STYLE_SYM||(LA123_0 >= DCOLON && LA123_0 <= DOT)||LA123_0==FONT_FACE_SYM||(LA123_0 >= GEN && LA123_0 <= GREATER)||(LA123_0 >= HASH && LA123_0 <= HASH_SYMBOL)||LA123_0==IDENT||LA123_0==IMPORT_SYM||(LA123_0 >= LBRACKET && LA123_0 <= LEFTTOP_SYM)||LA123_0==LESS_AND||(LA123_0 >= MEDIA_SYM && LA123_0 <= MOZ_DOCUMENT_SYM)||LA123_0==NAMESPACE_SYM||LA123_0==PAGE_SYM||(LA123_0 >= PIPE && LA123_0 <= PLUS)||(LA123_0 >= RIGHTBOTTOM_SYM && LA123_0 <= RIGHTTOP_SYM)||(LA123_0 >= SASS_AT_ROOT && LA123_0 <= SASS_DEBUG)||(LA123_0 >= SASS_EACH && LA123_0 <= SASS_ELSE)||(LA123_0 >= SASS_EXTEND && LA123_0 <= SASS_FUNCTION)||(LA123_0 >= SASS_IF && LA123_0 <= SASS_MIXIN)||(LA123_0 >= SASS_RETURN && LA123_0 <= SEMI)||LA123_0==STAR||LA123_0==SUPPORTS_SYM||LA123_0==TILDE||(LA123_0 >= TOPCENTER_SYM && LA123_0 <= TOPRIGHT_SYM)||LA123_0==VARIABLE||LA123_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt123=1;
			}
			} finally {dbg.exitDecision(123);}

			switch (alt123) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:508:65: mediaBody
					{
					dbg.location(508,65);
					pushFollow(FOLLOW_mediaBody_in_supportsAtRule2237);
					mediaBody();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(123);}
			dbg.location(508,76);
			match(input,RBRACE,FOLLOW_RBRACE_in_supportsAtRule2240); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(509, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "supportsAtRule");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "supportsAtRule"



	// $ANTLR start "supportsCondition"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:512:1: supportsCondition : ( NOT ws supportsInParens | supportsInParens ( ws supportsWithOperator )? );
	public final void supportsCondition() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "supportsCondition");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(512, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:513:2: ( NOT ws supportsInParens | supportsInParens ( ws supportsWithOperator )? )
			int alt125=2;
			try { dbg.enterDecision(125, decisionCanBacktrack[125]);

			int LA125_0 = input.LA(1);
			if ( (LA125_0==NOT) ) {
				alt125=1;
			}
			else if ( (LA125_0==IDENT||LA125_0==LPAREN) ) {
				alt125=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 125, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(125);}

			switch (alt125) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:514:2: NOT ws supportsInParens
					{
					dbg.location(514,2);
					match(input,NOT,FOLLOW_NOT_in_supportsCondition2253); if (state.failed) return;dbg.location(514,6);
					pushFollow(FOLLOW_ws_in_supportsCondition2255);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(514,9);
					pushFollow(FOLLOW_supportsInParens_in_supportsCondition2257);
					supportsInParens();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:515:4: supportsInParens ( ws supportsWithOperator )?
					{
					dbg.location(515,4);
					pushFollow(FOLLOW_supportsInParens_in_supportsCondition2262);
					supportsInParens();
					state._fsp--;
					if (state.failed) return;dbg.location(515,21);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:515:21: ( ws supportsWithOperator )?
					int alt124=2;
					try { dbg.enterSubRule(124);
					try { dbg.enterDecision(124, decisionCanBacktrack[124]);

					try {
						isCyclicDecision = true;
						alt124 = dfa124.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(124);}

					switch (alt124) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:515:22: ws supportsWithOperator
							{
							dbg.location(515,22);
							pushFollow(FOLLOW_ws_in_supportsCondition2265);
							ws();
							state._fsp--;
							if (state.failed) return;dbg.location(515,25);
							pushFollow(FOLLOW_supportsWithOperator_in_supportsCondition2267);
							supportsWithOperator();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(124);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(516, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "supportsCondition");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "supportsCondition"



	// $ANTLR start "supportsWithOperator"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:518:1: supportsWithOperator : ( supportsConjunction ( ws supportsConjunction )* | supportsDisjunction ( ws supportsDisjunction )* );
	public final void supportsWithOperator() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "supportsWithOperator");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(518, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:519:9: ( supportsConjunction ( ws supportsConjunction )* | supportsDisjunction ( ws supportsDisjunction )* )
			int alt128=2;
			try { dbg.enterDecision(128, decisionCanBacktrack[128]);

			int LA128_0 = input.LA(1);
			if ( (LA128_0==IDENT) ) {
				int LA128_1 = input.LA(2);
				if ( (evalPredicate(tokenNameEquals("and"),"tokenNameEquals(\"and\")")) ) {
					alt128=1;
				}
				else if ( (evalPredicate(tokenNameEquals("or"),"tokenNameEquals(\"or\")")) ) {
					alt128=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 128, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 128, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(128);}

			switch (alt128) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:520:9: supportsConjunction ( ws supportsConjunction )*
					{
					dbg.location(520,9);
					pushFollow(FOLLOW_supportsConjunction_in_supportsWithOperator2295);
					supportsConjunction();
					state._fsp--;
					if (state.failed) return;dbg.location(520,29);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:520:29: ( ws supportsConjunction )*
					try { dbg.enterSubRule(126);

					loop126:
					while (true) {
						int alt126=2;
						try { dbg.enterDecision(126, decisionCanBacktrack[126]);

						try {
							isCyclicDecision = true;
							alt126 = dfa126.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(126);}

						switch (alt126) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:520:30: ws supportsConjunction
							{
							dbg.location(520,30);
							pushFollow(FOLLOW_ws_in_supportsWithOperator2298);
							ws();
							state._fsp--;
							if (state.failed) return;dbg.location(520,33);
							pushFollow(FOLLOW_supportsConjunction_in_supportsWithOperator2300);
							supportsConjunction();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop126;
						}
					}
					} finally {dbg.exitSubRule(126);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:521:11: supportsDisjunction ( ws supportsDisjunction )*
					{
					dbg.location(521,11);
					pushFollow(FOLLOW_supportsDisjunction_in_supportsWithOperator2314);
					supportsDisjunction();
					state._fsp--;
					if (state.failed) return;dbg.location(521,31);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:521:31: ( ws supportsDisjunction )*
					try { dbg.enterSubRule(127);

					loop127:
					while (true) {
						int alt127=2;
						try { dbg.enterDecision(127, decisionCanBacktrack[127]);

						try {
							isCyclicDecision = true;
							alt127 = dfa127.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(127);}

						switch (alt127) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:521:32: ws supportsDisjunction
							{
							dbg.location(521,32);
							pushFollow(FOLLOW_ws_in_supportsWithOperator2317);
							ws();
							state._fsp--;
							if (state.failed) return;dbg.location(521,35);
							pushFollow(FOLLOW_supportsDisjunction_in_supportsWithOperator2319);
							supportsDisjunction();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop127;
						}
					}
					} finally {dbg.exitSubRule(127);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(522, 8);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "supportsWithOperator");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "supportsWithOperator"



	// $ANTLR start "supportsConjunction"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:1: supportsConjunction : ( key_and ws supportsInParens ) ;
	public final void supportsConjunction() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "supportsConjunction");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(524, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:525:9: ( ( key_and ws supportsInParens ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:525:11: ( key_and ws supportsInParens )
			{
			dbg.location(525,11);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:525:11: ( key_and ws supportsInParens )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:525:12: key_and ws supportsInParens
			{
			dbg.location(525,12);
			pushFollow(FOLLOW_key_and_in_supportsConjunction2347);
			key_and();
			state._fsp--;
			if (state.failed) return;dbg.location(525,20);
			pushFollow(FOLLOW_ws_in_supportsConjunction2349);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(525,23);
			pushFollow(FOLLOW_supportsInParens_in_supportsConjunction2351);
			supportsInParens();
			state._fsp--;
			if (state.failed) return;
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(526, 8);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "supportsConjunction");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "supportsConjunction"



	// $ANTLR start "supportsDisjunction"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:528:1: supportsDisjunction : ( key_or ws supportsInParens ) ;
	public final void supportsDisjunction() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "supportsDisjunction");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(528, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:529:9: ( ( key_or ws supportsInParens ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:529:11: ( key_or ws supportsInParens )
			{
			dbg.location(529,11);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:529:11: ( key_or ws supportsInParens )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:529:12: key_or ws supportsInParens
			{
			dbg.location(529,12);
			pushFollow(FOLLOW_key_or_in_supportsDisjunction2378);
			key_or();
			state._fsp--;
			if (state.failed) return;dbg.location(529,19);
			pushFollow(FOLLOW_ws_in_supportsDisjunction2380);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(529,22);
			pushFollow(FOLLOW_supportsInParens_in_supportsDisjunction2382);
			supportsInParens();
			state._fsp--;
			if (state.failed) return;
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(530, 8);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "supportsDisjunction");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "supportsDisjunction"



	// $ANTLR start "supportsInParens"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:1: supportsInParens options {backtrack=true; } : ( LPAREN ( ws )? supportsCondition ( ws )? RPAREN | supportsFeature | function );
	public final void supportsInParens() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "supportsInParens");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(532, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:533:2: ( LPAREN ( ws )? supportsCondition ( ws )? RPAREN | supportsFeature | function )
			int alt131=3;
			try { dbg.enterDecision(131, decisionCanBacktrack[131]);

			int LA131_0 = input.LA(1);
			if ( (LA131_0==LPAREN) ) {
				int LA131_1 = input.LA(2);
				if ( (synpred21_Css3()) ) {
					alt131=1;
				}
				else if ( (synpred22_Css3()) ) {
					alt131=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 131, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA131_0==IDENT) ) {
				alt131=3;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 131, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(131);}

			switch (alt131) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:2: LPAREN ( ws )? supportsCondition ( ws )? RPAREN
					{
					dbg.location(534,2);
					match(input,LPAREN,FOLLOW_LPAREN_in_supportsInParens2409); if (state.failed) return;dbg.location(534,9);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:9: ( ws )?
					int alt129=2;
					try { dbg.enterSubRule(129);
					try { dbg.enterDecision(129, decisionCanBacktrack[129]);

					int LA129_0 = input.LA(1);
					if ( (LA129_0==COMMENT||LA129_0==NL||LA129_0==WS) ) {
						alt129=1;
					}
					} finally {dbg.exitDecision(129);}

					switch (alt129) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:9: ws
							{
							dbg.location(534,9);
							pushFollow(FOLLOW_ws_in_supportsInParens2411);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(129);}
					dbg.location(534,13);
					pushFollow(FOLLOW_supportsCondition_in_supportsInParens2414);
					supportsCondition();
					state._fsp--;
					if (state.failed) return;dbg.location(534,31);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:31: ( ws )?
					int alt130=2;
					try { dbg.enterSubRule(130);
					try { dbg.enterDecision(130, decisionCanBacktrack[130]);

					int LA130_0 = input.LA(1);
					if ( (LA130_0==COMMENT||LA130_0==NL||LA130_0==WS) ) {
						alt130=1;
					}
					} finally {dbg.exitDecision(130);}

					switch (alt130) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:31: ws
							{
							dbg.location(534,31);
							pushFollow(FOLLOW_ws_in_supportsInParens2416);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(130);}
					dbg.location(534,35);
					match(input,RPAREN,FOLLOW_RPAREN_in_supportsInParens2419); if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:535:4: supportsFeature
					{
					dbg.location(535,4);
					pushFollow(FOLLOW_supportsFeature_in_supportsInParens2424);
					supportsFeature();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:11: function
					{
					dbg.location(536,11);
					pushFollow(FOLLOW_function_in_supportsInParens2436);
					function();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(539, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "supportsInParens");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "supportsInParens"



	// $ANTLR start "supportsFeature"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:541:1: supportsFeature : supportsDecl ;
	public final void supportsFeature() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "supportsFeature");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(541, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:542:2: ( supportsDecl )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:543:2: supportsDecl
			{
			dbg.location(543,2);
			pushFollow(FOLLOW_supportsDecl_in_supportsFeature2467);
			supportsDecl();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(544, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "supportsFeature");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "supportsFeature"



	// $ANTLR start "supportsDecl"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:546:1: supportsDecl : LPAREN ( ws )? declaration ( ws )? RPAREN ;
	public final void supportsDecl() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "supportsDecl");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(546, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:547:2: ( LPAREN ( ws )? declaration ( ws )? RPAREN )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:548:2: LPAREN ( ws )? declaration ( ws )? RPAREN
			{
			dbg.location(548,2);
			match(input,LPAREN,FOLLOW_LPAREN_in_supportsDecl2480); if (state.failed) return;dbg.location(548,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:548:9: ( ws )?
			int alt132=2;
			try { dbg.enterSubRule(132);
			try { dbg.enterDecision(132, decisionCanBacktrack[132]);

			int LA132_0 = input.LA(1);
			if ( (LA132_0==COMMENT||LA132_0==NL||LA132_0==WS) ) {
				alt132=1;
			}
			} finally {dbg.exitDecision(132);}

			switch (alt132) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:548:9: ws
					{
					dbg.location(548,9);
					pushFollow(FOLLOW_ws_in_supportsDecl2482);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(132);}
			dbg.location(548,13);
			pushFollow(FOLLOW_declaration_in_supportsDecl2485);
			declaration();
			state._fsp--;
			if (state.failed) return;dbg.location(548,25);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:548:25: ( ws )?
			int alt133=2;
			try { dbg.enterSubRule(133);
			try { dbg.enterDecision(133, decisionCanBacktrack[133]);

			int LA133_0 = input.LA(1);
			if ( (LA133_0==COMMENT||LA133_0==NL||LA133_0==WS) ) {
				alt133=1;
			}
			} finally {dbg.exitDecision(133);}

			switch (alt133) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:548:25: ws
					{
					dbg.location(548,25);
					pushFollow(FOLLOW_ws_in_supportsDecl2487);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(133);}
			dbg.location(548,29);
			match(input,RPAREN,FOLLOW_RPAREN_in_supportsDecl2490); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(549, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "supportsDecl");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "supportsDecl"



	// $ANTLR start "layerAtRule"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:551:1: layerAtRule : ( layerBlock | layerStatement );
	public final void layerAtRule() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "layerAtRule");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(551, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:552:9: ( layerBlock | layerStatement )
			int alt134=2;
			try { dbg.enterDecision(134, decisionCanBacktrack[134]);

			try {
				isCyclicDecision = true;
				alt134 = dfa134.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(134);}

			switch (alt134) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:553:9: layerBlock
					{
					dbg.location(553,9);
					pushFollow(FOLLOW_layerBlock_in_layerAtRule2516);
					layerBlock();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:555:9: layerStatement
					{
					dbg.location(555,9);
					pushFollow(FOLLOW_layerStatement_in_layerAtRule2536);
					layerStatement();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(556, 8);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "layerAtRule");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "layerAtRule"



	// $ANTLR start "layerBlock"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:558:1: layerBlock : ( LAYER_SYM ws ( layerName )? ( ws )? layerBody ) ;
	public final void layerBlock() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "layerBlock");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(558, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:559:9: ( ( LAYER_SYM ws ( layerName )? ( ws )? layerBody ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:560:9: ( LAYER_SYM ws ( layerName )? ( ws )? layerBody )
			{
			dbg.location(560,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:560:9: ( LAYER_SYM ws ( layerName )? ( ws )? layerBody )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:560:10: LAYER_SYM ws ( layerName )? ( ws )? layerBody
			{
			dbg.location(560,10);
			match(input,LAYER_SYM,FOLLOW_LAYER_SYM_in_layerBlock2570); if (state.failed) return;dbg.location(560,20);
			pushFollow(FOLLOW_ws_in_layerBlock2572);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(560,23);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:560:23: ( layerName )?
			int alt135=2;
			try { dbg.enterSubRule(135);
			try { dbg.enterDecision(135, decisionCanBacktrack[135]);

			int LA135_0 = input.LA(1);
			if ( (LA135_0==IDENT) ) {
				alt135=1;
			}
			} finally {dbg.exitDecision(135);}

			switch (alt135) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:560:23: layerName
					{
					dbg.location(560,23);
					pushFollow(FOLLOW_layerName_in_layerBlock2574);
					layerName();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(135);}
			dbg.location(560,34);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:560:34: ( ws )?
			int alt136=2;
			try { dbg.enterSubRule(136);
			try { dbg.enterDecision(136, decisionCanBacktrack[136]);

			int LA136_0 = input.LA(1);
			if ( (LA136_0==COMMENT||LA136_0==NL||LA136_0==WS) ) {
				alt136=1;
			}
			} finally {dbg.exitDecision(136);}

			switch (alt136) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:560:34: ws
					{
					dbg.location(560,34);
					pushFollow(FOLLOW_ws_in_layerBlock2577);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(136);}
			dbg.location(560,38);
			pushFollow(FOLLOW_layerBody_in_layerBlock2580);
			layerBody();
			state._fsp--;
			if (state.failed) return;
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(561, 8);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "layerBlock");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "layerBlock"



	// $ANTLR start "layerStatement"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:563:1: layerStatement : ( LAYER_SYM ws layerName ( ( ws )? COMMA ( ws )? layerName )* SEMI ) ;
	public final void layerStatement() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "layerStatement");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(563, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:564:9: ( ( LAYER_SYM ws layerName ( ( ws )? COMMA ( ws )? layerName )* SEMI ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:565:9: ( LAYER_SYM ws layerName ( ( ws )? COMMA ( ws )? layerName )* SEMI )
			{
			dbg.location(565,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:565:9: ( LAYER_SYM ws layerName ( ( ws )? COMMA ( ws )? layerName )* SEMI )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:565:10: LAYER_SYM ws layerName ( ( ws )? COMMA ( ws )? layerName )* SEMI
			{
			dbg.location(565,10);
			match(input,LAYER_SYM,FOLLOW_LAYER_SYM_in_layerStatement2615); if (state.failed) return;dbg.location(565,20);
			pushFollow(FOLLOW_ws_in_layerStatement2617);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(565,23);
			pushFollow(FOLLOW_layerName_in_layerStatement2619);
			layerName();
			state._fsp--;
			if (state.failed) return;dbg.location(565,33);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:565:33: ( ( ws )? COMMA ( ws )? layerName )*
			try { dbg.enterSubRule(139);

			loop139:
			while (true) {
				int alt139=2;
				try { dbg.enterDecision(139, decisionCanBacktrack[139]);

				int LA139_0 = input.LA(1);
				if ( ((LA139_0 >= COMMA && LA139_0 <= COMMENT)||LA139_0==NL||LA139_0==WS) ) {
					alt139=1;
				}

				} finally {dbg.exitDecision(139);}

				switch (alt139) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:565:35: ( ws )? COMMA ( ws )? layerName
					{
					dbg.location(565,35);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:565:35: ( ws )?
					int alt137=2;
					try { dbg.enterSubRule(137);
					try { dbg.enterDecision(137, decisionCanBacktrack[137]);

					int LA137_0 = input.LA(1);
					if ( (LA137_0==COMMENT||LA137_0==NL||LA137_0==WS) ) {
						alt137=1;
					}
					} finally {dbg.exitDecision(137);}

					switch (alt137) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:565:35: ws
							{
							dbg.location(565,35);
							pushFollow(FOLLOW_ws_in_layerStatement2623);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(137);}
					dbg.location(565,39);
					match(input,COMMA,FOLLOW_COMMA_in_layerStatement2626); if (state.failed) return;dbg.location(565,45);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:565:45: ( ws )?
					int alt138=2;
					try { dbg.enterSubRule(138);
					try { dbg.enterDecision(138, decisionCanBacktrack[138]);

					int LA138_0 = input.LA(1);
					if ( (LA138_0==COMMENT||LA138_0==NL||LA138_0==WS) ) {
						alt138=1;
					}
					} finally {dbg.exitDecision(138);}

					switch (alt138) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:565:45: ws
							{
							dbg.location(565,45);
							pushFollow(FOLLOW_ws_in_layerStatement2628);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(138);}
					dbg.location(565,49);
					pushFollow(FOLLOW_layerName_in_layerStatement2631);
					layerName();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop139;
				}
			}
			} finally {dbg.exitSubRule(139);}
			dbg.location(565,61);
			match(input,SEMI,FOLLOW_SEMI_in_layerStatement2635); if (state.failed) return;
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(566, 8);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "layerStatement");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "layerStatement"



	// $ANTLR start "layerName"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:568:1: layerName : IDENT ( DOT IDENT )* ;
	public final void layerName() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "layerName");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(568, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:569:9: ( IDENT ( DOT IDENT )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:570:9: IDENT ( DOT IDENT )*
			{
			dbg.location(570,9);
			match(input,IDENT,FOLLOW_IDENT_in_layerName2669); if (state.failed) return;dbg.location(570,15);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:570:15: ( DOT IDENT )*
			try { dbg.enterSubRule(140);

			loop140:
			while (true) {
				int alt140=2;
				try { dbg.enterDecision(140, decisionCanBacktrack[140]);

				int LA140_0 = input.LA(1);
				if ( (LA140_0==DOT) ) {
					alt140=1;
				}

				} finally {dbg.exitDecision(140);}

				switch (alt140) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:570:16: DOT IDENT
					{
					dbg.location(570,16);
					match(input,DOT,FOLLOW_DOT_in_layerName2672); if (state.failed) return;dbg.location(570,20);
					match(input,IDENT,FOLLOW_IDENT_in_layerName2674); if (state.failed) return;
					}
					break;

				default :
					break loop140;
				}
			}
			} finally {dbg.exitSubRule(140);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(571, 8);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "layerName");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "layerName"



	// $ANTLR start "layerBody"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:573:1: layerBody : LBRACE ( ws )? ( body )? ( ws )? RBRACE ;
	public final void layerBody() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "layerBody");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(573, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:574:9: ( LBRACE ( ws )? ( body )? ( ws )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:575:9: LBRACE ( ws )? ( body )? ( ws )? RBRACE
			{
			dbg.location(575,9);
			match(input,LBRACE,FOLLOW_LBRACE_in_layerBody2709); if (state.failed) return;dbg.location(575,16);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:575:16: ( ws )?
			int alt141=2;
			try { dbg.enterSubRule(141);
			try { dbg.enterDecision(141, decisionCanBacktrack[141]);

			int LA141_0 = input.LA(1);
			if ( (LA141_0==COMMENT||LA141_0==NL||LA141_0==WS) ) {
				alt141=1;
			}
			} finally {dbg.exitDecision(141);}

			switch (alt141) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:575:16: ws
					{
					dbg.location(575,16);
					pushFollow(FOLLOW_ws_in_layerBody2711);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(141);}
			dbg.location(575,20);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:575:20: ( body )?
			int alt142=2;
			try { dbg.enterSubRule(142);
			try { dbg.enterDecision(142, decisionCanBacktrack[142]);

			int LA142_0 = input.LA(1);
			if ( ((LA142_0 >= AT_IDENT && LA142_0 <= AT_SIGN)||(LA142_0 >= BOTTOMCENTER_SYM && LA142_0 <= BOTTOMRIGHT_SYM)||(LA142_0 >= CHARSET_SYM && LA142_0 <= COLON)||LA142_0==COUNTER_STYLE_SYM||(LA142_0 >= DCOLON && LA142_0 <= DOT)||LA142_0==FONT_FACE_SYM||(LA142_0 >= GEN && LA142_0 <= GREATER)||(LA142_0 >= HASH && LA142_0 <= HASH_SYMBOL)||LA142_0==IDENT||LA142_0==IMPORT_SYM||LA142_0==LAYER_SYM||(LA142_0 >= LBRACKET && LA142_0 <= LEFTTOP_SYM)||LA142_0==LESS_AND||(LA142_0 >= MEDIA_SYM && LA142_0 <= MOZ_DOCUMENT_SYM)||LA142_0==NAMESPACE_SYM||LA142_0==PAGE_SYM||(LA142_0 >= PIPE && LA142_0 <= PLUS)||(LA142_0 >= RIGHTBOTTOM_SYM && LA142_0 <= RIGHTTOP_SYM)||(LA142_0 >= SASS_AT_ROOT && LA142_0 <= SASS_DEBUG)||(LA142_0 >= SASS_EACH && LA142_0 <= SASS_ELSE)||(LA142_0 >= SASS_EXTEND && LA142_0 <= SASS_FUNCTION)||(LA142_0 >= SASS_IF && LA142_0 <= SASS_MIXIN)||(LA142_0 >= SASS_RETURN && LA142_0 <= SEMI)||LA142_0==STAR||LA142_0==SUPPORTS_SYM||LA142_0==TILDE||(LA142_0 >= TOPCENTER_SYM && LA142_0 <= TOPRIGHT_SYM)||LA142_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt142=1;
			}
			} finally {dbg.exitDecision(142);}

			switch (alt142) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:575:20: body
					{
					dbg.location(575,20);
					pushFollow(FOLLOW_body_in_layerBody2714);
					body();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(142);}
			dbg.location(575,26);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:575:26: ( ws )?
			int alt143=2;
			try { dbg.enterSubRule(143);
			try { dbg.enterDecision(143, decisionCanBacktrack[143]);

			int LA143_0 = input.LA(1);
			if ( (LA143_0==COMMENT||LA143_0==NL||LA143_0==WS) ) {
				alt143=1;
			}
			} finally {dbg.exitDecision(143);}

			switch (alt143) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:575:26: ws
					{
					dbg.location(575,26);
					pushFollow(FOLLOW_ws_in_layerBody2717);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(143);}
			dbg.location(575,30);
			match(input,RBRACE,FOLLOW_RBRACE_in_layerBody2720); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(576, 8);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "layerBody");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "layerBody"



	// $ANTLR start "at_rule"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:578:1: at_rule : ( media | page | counterStyle | fontFace | supportsAtRule | vendorAtRule | layerAtRule );
	public final void at_rule() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "at_rule");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(578, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:579:5: ( media | page | counterStyle | fontFace | supportsAtRule | vendorAtRule | layerAtRule )
			int alt144=7;
			try { dbg.enterDecision(144, decisionCanBacktrack[144]);

			switch ( input.LA(1) ) {
			case MEDIA_SYM:
				{
				alt144=1;
				}
				break;
			case PAGE_SYM:
				{
				alt144=2;
				}
				break;
			case COUNTER_STYLE_SYM:
				{
				alt144=3;
				}
				break;
			case FONT_FACE_SYM:
				{
				alt144=4;
				}
				break;
			case SUPPORTS_SYM:
				{
				alt144=5;
				}
				break;
			case AT_IDENT:
			case MOZ_DOCUMENT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				alt144=6;
				}
				break;
			case LAYER_SYM:
				{
				alt144=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 144, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(144);}

			switch (alt144) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:580:5: media
					{
					dbg.location(580,5);
					pushFollow(FOLLOW_media_in_at_rule2745);
					media();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:581:7: page
					{
					dbg.location(581,7);
					pushFollow(FOLLOW_page_in_at_rule2753);
					page();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:582:7: counterStyle
					{
					dbg.location(582,7);
					pushFollow(FOLLOW_counterStyle_in_at_rule2761);
					counterStyle();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:583:7: fontFace
					{
					dbg.location(583,7);
					pushFollow(FOLLOW_fontFace_in_at_rule2769);
					fontFace();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:584:7: supportsAtRule
					{
					dbg.location(584,7);
					pushFollow(FOLLOW_supportsAtRule_in_at_rule2777);
					supportsAtRule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:585:7: vendorAtRule
					{
					dbg.location(585,7);
					pushFollow(FOLLOW_vendorAtRule_in_at_rule2785);
					vendorAtRule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 7 :
					dbg.enterAlt(7);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:586:7: layerAtRule
					{
					dbg.location(586,7);
					pushFollow(FOLLOW_layerAtRule_in_at_rule2793);
					layerAtRule();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(587, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "at_rule");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "at_rule"



	// $ANTLR start "vendorAtRule"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:589:1: vendorAtRule : ( moz_document | webkitKeyframes | generic_at_rule );
	public final void vendorAtRule() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "vendorAtRule");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(589, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:590:3: ( moz_document | webkitKeyframes | generic_at_rule )
			int alt145=3;
			try { dbg.enterDecision(145, decisionCanBacktrack[145]);

			switch ( input.LA(1) ) {
			case MOZ_DOCUMENT_SYM:
				{
				alt145=1;
				}
				break;
			case WEBKIT_KEYFRAMES_SYM:
				{
				alt145=2;
				}
				break;
			case AT_IDENT:
				{
				alt145=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 145, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(145);}

			switch (alt145) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:590:3: moz_document
					{
					dbg.location(590,3);
					pushFollow(FOLLOW_moz_document_in_vendorAtRule2806);
					moz_document();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:590:18: webkitKeyframes
					{
					dbg.location(590,18);
					pushFollow(FOLLOW_webkitKeyframes_in_vendorAtRule2810);
					webkitKeyframes();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:590:36: generic_at_rule
					{
					dbg.location(590,36);
					pushFollow(FOLLOW_generic_at_rule_in_vendorAtRule2814);
					generic_at_rule();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(590, 50);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "vendorAtRule");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "vendorAtRule"



	// $ANTLR start "atRuleId"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:592:1: atRuleId : ( IDENT | STRING |{...}? ( cp_variable | sass_interpolation_expression_var ) );
	public final void atRuleId() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "atRuleId");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(592, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:593:2: ( IDENT | STRING |{...}? ( cp_variable | sass_interpolation_expression_var ) )
			int alt147=3;
			try { dbg.enterDecision(147, decisionCanBacktrack[147]);

			switch ( input.LA(1) ) {
			case IDENT:
				{
				int LA147_1 = input.LA(2);
				if ( (LA147_1==DOT) ) {
					alt147=3;
				}
				else if ( (LA147_1==COMMENT||LA147_1==LBRACE||LA147_1==NL||LA147_1==WS) ) {
					alt147=1;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 147, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case STRING:
				{
				alt147=2;
				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case HASH_SYMBOL:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_VAR:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				alt147=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 147, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(147);}

			switch (alt147) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:594:2: IDENT
					{
					dbg.location(594,2);
					match(input,IDENT,FOLLOW_IDENT_in_atRuleId2824); if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:594:10: STRING
					{
					dbg.location(594,10);
					match(input,STRING,FOLLOW_STRING_in_atRuleId2828); if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:594:19: {...}? ( cp_variable | sass_interpolation_expression_var )
					{
					dbg.location(594,19);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "atRuleId", "isCssPreprocessorSource()");
					}dbg.location(594,48);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:594:48: ( cp_variable | sass_interpolation_expression_var )
					int alt146=2;
					try { dbg.enterSubRule(146);
					try { dbg.enterDecision(146, decisionCanBacktrack[146]);

					int LA146_0 = input.LA(1);
					if ( (LA146_0==AT_IDENT||(LA146_0 >= BOTTOMCENTER_SYM && LA146_0 <= BOTTOMRIGHT_SYM)||LA146_0==CHARSET_SYM||LA146_0==COUNTER_STYLE_SYM||LA146_0==FONT_FACE_SYM||LA146_0==IDENT||LA146_0==IMPORT_SYM||(LA146_0 >= LEFTBOTTOM_SYM && LA146_0 <= LEFTTOP_SYM)||LA146_0==MEDIA_SYM||LA146_0==MOZ_DOCUMENT_SYM||LA146_0==NAMESPACE_SYM||LA146_0==PAGE_SYM||(LA146_0 >= RIGHTBOTTOM_SYM && LA146_0 <= RIGHTTOP_SYM)||(LA146_0 >= SASS_AT_ROOT && LA146_0 <= SASS_DEBUG)||(LA146_0 >= SASS_EACH && LA146_0 <= SASS_ELSE)||LA146_0==SASS_EXTEND||(LA146_0 >= SASS_FOR && LA146_0 <= SASS_FUNCTION)||(LA146_0 >= SASS_IF && LA146_0 <= SASS_MIXIN)||(LA146_0 >= SASS_RETURN && LA146_0 <= SASS_WHILE)||(LA146_0 >= TOPCENTER_SYM && LA146_0 <= TOPRIGHT_SYM)||LA146_0==WEBKIT_KEYFRAMES_SYM) ) {
						alt146=1;
					}
					else if ( (LA146_0==HASH_SYMBOL) ) {
						alt146=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 146, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(146);}

					switch (alt146) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:594:50: cp_variable
							{
							dbg.location(594,50);
							pushFollow(FOLLOW_cp_variable_in_atRuleId2836);
							cp_variable();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:594:64: sass_interpolation_expression_var
							{
							dbg.location(594,64);
							pushFollow(FOLLOW_sass_interpolation_expression_var_in_atRuleId2840);
							sass_interpolation_expression_var();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(146);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(595, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "atRuleId");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "atRuleId"



	// $ANTLR start "generic_at_rule"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:597:1: generic_at_rule : AT_IDENT ( ws )? ( atRuleId ( ws )? )? LBRACE syncTo_RBRACE RBRACE ;
	public final void generic_at_rule() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "generic_at_rule");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(597, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:598:5: ( AT_IDENT ( ws )? ( atRuleId ( ws )? )? LBRACE syncTo_RBRACE RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:598:7: AT_IDENT ( ws )? ( atRuleId ( ws )? )? LBRACE syncTo_RBRACE RBRACE
			{
			dbg.location(598,7);
			match(input,AT_IDENT,FOLLOW_AT_IDENT_in_generic_at_rule2856); if (state.failed) return;dbg.location(598,16);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:598:16: ( ws )?
			int alt148=2;
			try { dbg.enterSubRule(148);
			try { dbg.enterDecision(148, decisionCanBacktrack[148]);

			int LA148_0 = input.LA(1);
			if ( (LA148_0==COMMENT||LA148_0==NL||LA148_0==WS) ) {
				alt148=1;
			}
			} finally {dbg.exitDecision(148);}

			switch (alt148) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:598:16: ws
					{
					dbg.location(598,16);
					pushFollow(FOLLOW_ws_in_generic_at_rule2858);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(148);}
			dbg.location(598,20);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:598:20: ( atRuleId ( ws )? )?
			int alt150=2;
			try { dbg.enterSubRule(150);
			try { dbg.enterDecision(150, decisionCanBacktrack[150]);

			int LA150_0 = input.LA(1);
			if ( (LA150_0==AT_IDENT||(LA150_0 >= BOTTOMCENTER_SYM && LA150_0 <= BOTTOMRIGHT_SYM)||LA150_0==CHARSET_SYM||LA150_0==COUNTER_STYLE_SYM||LA150_0==FONT_FACE_SYM||LA150_0==HASH_SYMBOL||LA150_0==IDENT||LA150_0==IMPORT_SYM||(LA150_0 >= LEFTBOTTOM_SYM && LA150_0 <= LEFTTOP_SYM)||LA150_0==MEDIA_SYM||LA150_0==MOZ_DOCUMENT_SYM||LA150_0==NAMESPACE_SYM||LA150_0==PAGE_SYM||(LA150_0 >= RIGHTBOTTOM_SYM && LA150_0 <= RIGHTTOP_SYM)||(LA150_0 >= SASS_AT_ROOT && LA150_0 <= SASS_DEBUG)||(LA150_0 >= SASS_EACH && LA150_0 <= SASS_ELSE)||LA150_0==SASS_EXTEND||(LA150_0 >= SASS_FOR && LA150_0 <= SASS_FUNCTION)||(LA150_0 >= SASS_IF && LA150_0 <= SASS_MIXIN)||(LA150_0 >= SASS_RETURN && LA150_0 <= SASS_WHILE)||LA150_0==STRING||(LA150_0 >= TOPCENTER_SYM && LA150_0 <= TOPRIGHT_SYM)||LA150_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt150=1;
			}
			} finally {dbg.exitDecision(150);}

			switch (alt150) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:598:22: atRuleId ( ws )?
					{
					dbg.location(598,22);
					pushFollow(FOLLOW_atRuleId_in_generic_at_rule2863);
					atRuleId();
					state._fsp--;
					if (state.failed) return;dbg.location(598,31);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:598:31: ( ws )?
					int alt149=2;
					try { dbg.enterSubRule(149);
					try { dbg.enterDecision(149, decisionCanBacktrack[149]);

					int LA149_0 = input.LA(1);
					if ( (LA149_0==COMMENT||LA149_0==NL||LA149_0==WS) ) {
						alt149=1;
					}
					} finally {dbg.exitDecision(149);}

					switch (alt149) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:598:31: ws
							{
							dbg.location(598,31);
							pushFollow(FOLLOW_ws_in_generic_at_rule2865);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(149);}

					}
					break;

			}
			} finally {dbg.exitSubRule(150);}
			dbg.location(599,9);
			match(input,LBRACE,FOLLOW_LBRACE_in_generic_at_rule2879); if (state.failed) return;dbg.location(600,10);
			pushFollow(FOLLOW_syncTo_RBRACE_in_generic_at_rule2890);
			syncTo_RBRACE();
			state._fsp--;
			if (state.failed) return;dbg.location(601,9);
			match(input,RBRACE,FOLLOW_RBRACE_in_generic_at_rule2900); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(602, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "generic_at_rule");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "generic_at_rule"



	// $ANTLR start "moz_document"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:603:1: moz_document : MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE ;
	public final void moz_document() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "moz_document");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(603, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:604:2: ( MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:605:2: MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE
			{
			dbg.location(605,2);
			match(input,MOZ_DOCUMENT_SYM,FOLLOW_MOZ_DOCUMENT_SYM_in_moz_document2911); if (state.failed) return;dbg.location(605,19);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:605:19: ( ws )?
			int alt151=2;
			try { dbg.enterSubRule(151);
			try { dbg.enterDecision(151, decisionCanBacktrack[151]);

			int LA151_0 = input.LA(1);
			if ( (LA151_0==COMMENT||LA151_0==NL||LA151_0==WS) ) {
				alt151=1;
			}
			} finally {dbg.exitDecision(151);}

			switch (alt151) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:605:19: ws
					{
					dbg.location(605,19);
					pushFollow(FOLLOW_ws_in_moz_document2913);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(151);}
			dbg.location(605,23);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:605:23: ( moz_document_function ( ws )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:605:25: moz_document_function ( ws )?
			{
			dbg.location(605,25);
			pushFollow(FOLLOW_moz_document_function_in_moz_document2918);
			moz_document_function();
			state._fsp--;
			if (state.failed) return;dbg.location(605,47);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:605:47: ( ws )?
			int alt152=2;
			try { dbg.enterSubRule(152);
			try { dbg.enterDecision(152, decisionCanBacktrack[152]);

			int LA152_0 = input.LA(1);
			if ( (LA152_0==COMMENT||LA152_0==NL||LA152_0==WS) ) {
				alt152=1;
			}
			} finally {dbg.exitDecision(152);}

			switch (alt152) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:605:47: ws
					{
					dbg.location(605,47);
					pushFollow(FOLLOW_ws_in_moz_document2920);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(152);}

			}
			dbg.location(605,52);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:605:52: ( COMMA ( ws )? moz_document_function ( ws )? )*
			try { dbg.enterSubRule(155);

			loop155:
			while (true) {
				int alt155=2;
				try { dbg.enterDecision(155, decisionCanBacktrack[155]);

				int LA155_0 = input.LA(1);
				if ( (LA155_0==COMMA) ) {
					alt155=1;
				}

				} finally {dbg.exitDecision(155);}

				switch (alt155) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:605:54: COMMA ( ws )? moz_document_function ( ws )?
					{
					dbg.location(605,54);
					match(input,COMMA,FOLLOW_COMMA_in_moz_document2926); if (state.failed) return;dbg.location(605,60);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:605:60: ( ws )?
					int alt153=2;
					try { dbg.enterSubRule(153);
					try { dbg.enterDecision(153, decisionCanBacktrack[153]);

					int LA153_0 = input.LA(1);
					if ( (LA153_0==COMMENT||LA153_0==NL||LA153_0==WS) ) {
						alt153=1;
					}
					} finally {dbg.exitDecision(153);}

					switch (alt153) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:605:60: ws
							{
							dbg.location(605,60);
							pushFollow(FOLLOW_ws_in_moz_document2928);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(153);}
					dbg.location(605,64);
					pushFollow(FOLLOW_moz_document_function_in_moz_document2931);
					moz_document_function();
					state._fsp--;
					if (state.failed) return;dbg.location(605,86);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:605:86: ( ws )?
					int alt154=2;
					try { dbg.enterSubRule(154);
					try { dbg.enterDecision(154, decisionCanBacktrack[154]);

					int LA154_0 = input.LA(1);
					if ( (LA154_0==COMMENT||LA154_0==NL||LA154_0==WS) ) {
						alt154=1;
					}
					} finally {dbg.exitDecision(154);}

					switch (alt154) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:605:86: ws
							{
							dbg.location(605,86);
							pushFollow(FOLLOW_ws_in_moz_document2933);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(154);}

					}
					break;

				default :
					break loop155;
				}
			}
			} finally {dbg.exitSubRule(155);}
			dbg.location(606,2);
			match(input,LBRACE,FOLLOW_LBRACE_in_moz_document2940); if (state.failed) return;dbg.location(606,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:606:9: ( ws )?
			int alt156=2;
			try { dbg.enterSubRule(156);
			try { dbg.enterDecision(156, decisionCanBacktrack[156]);

			int LA156_0 = input.LA(1);
			if ( (LA156_0==COMMENT||LA156_0==NL||LA156_0==WS) ) {
				alt156=1;
			}
			} finally {dbg.exitDecision(156);}

			switch (alt156) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:606:9: ws
					{
					dbg.location(606,9);
					pushFollow(FOLLOW_ws_in_moz_document2942);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(156);}
			dbg.location(607,3);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:607:3: ( body )?
			int alt157=2;
			try { dbg.enterSubRule(157);
			try { dbg.enterDecision(157, decisionCanBacktrack[157]);

			int LA157_0 = input.LA(1);
			if ( ((LA157_0 >= AT_IDENT && LA157_0 <= AT_SIGN)||(LA157_0 >= BOTTOMCENTER_SYM && LA157_0 <= BOTTOMRIGHT_SYM)||(LA157_0 >= CHARSET_SYM && LA157_0 <= COLON)||LA157_0==COUNTER_STYLE_SYM||(LA157_0 >= DCOLON && LA157_0 <= DOT)||LA157_0==FONT_FACE_SYM||(LA157_0 >= GEN && LA157_0 <= GREATER)||(LA157_0 >= HASH && LA157_0 <= HASH_SYMBOL)||LA157_0==IDENT||LA157_0==IMPORT_SYM||LA157_0==LAYER_SYM||(LA157_0 >= LBRACKET && LA157_0 <= LEFTTOP_SYM)||LA157_0==LESS_AND||(LA157_0 >= MEDIA_SYM && LA157_0 <= MOZ_DOCUMENT_SYM)||LA157_0==NAMESPACE_SYM||LA157_0==PAGE_SYM||(LA157_0 >= PIPE && LA157_0 <= PLUS)||(LA157_0 >= RIGHTBOTTOM_SYM && LA157_0 <= RIGHTTOP_SYM)||(LA157_0 >= SASS_AT_ROOT && LA157_0 <= SASS_DEBUG)||(LA157_0 >= SASS_EACH && LA157_0 <= SASS_ELSE)||(LA157_0 >= SASS_EXTEND && LA157_0 <= SASS_FUNCTION)||(LA157_0 >= SASS_IF && LA157_0 <= SASS_MIXIN)||(LA157_0 >= SASS_RETURN && LA157_0 <= SEMI)||LA157_0==STAR||LA157_0==SUPPORTS_SYM||LA157_0==TILDE||(LA157_0 >= TOPCENTER_SYM && LA157_0 <= TOPRIGHT_SYM)||LA157_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt157=1;
			}
			} finally {dbg.exitDecision(157);}

			switch (alt157) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:607:3: body
					{
					dbg.location(607,3);
					pushFollow(FOLLOW_body_in_moz_document2947);
					body();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(157);}
			dbg.location(608,2);
			match(input,RBRACE,FOLLOW_RBRACE_in_moz_document2952); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(609, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "moz_document");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "moz_document"



	// $ANTLR start "moz_document_function"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:611:1: moz_document_function : ( URI | MOZ_URL_PREFIX | MOZ_DOMAIN | MOZ_REGEXP );
	public final void moz_document_function() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "moz_document_function");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(611, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:612:2: ( URI | MOZ_URL_PREFIX | MOZ_DOMAIN | MOZ_REGEXP )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(612,2);
			if ( (input.LA(1) >= MOZ_DOMAIN && input.LA(1) <= MOZ_URL_PREFIX)||input.LA(1)==URI ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(614, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "moz_document_function");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "moz_document_function"



	// $ANTLR start "webkitKeyframes"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:617:1: webkitKeyframes : WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE ;
	public final void webkitKeyframes() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "webkitKeyframes");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(617, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:618:2: ( WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:619:2: WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE
			{
			dbg.location(619,2);
			match(input,WEBKIT_KEYFRAMES_SYM,FOLLOW_WEBKIT_KEYFRAMES_SYM_in_webkitKeyframes2989); if (state.failed) return;dbg.location(619,23);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:619:23: ( ws )?
			int alt158=2;
			try { dbg.enterSubRule(158);
			try { dbg.enterDecision(158, decisionCanBacktrack[158]);

			int LA158_0 = input.LA(1);
			if ( (LA158_0==COMMENT||LA158_0==NL||LA158_0==WS) ) {
				alt158=1;
			}
			} finally {dbg.exitDecision(158);}

			switch (alt158) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:619:23: ws
					{
					dbg.location(619,23);
					pushFollow(FOLLOW_ws_in_webkitKeyframes2991);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(158);}
			dbg.location(619,27);
			pushFollow(FOLLOW_atRuleId_in_webkitKeyframes2994);
			atRuleId();
			state._fsp--;
			if (state.failed) return;dbg.location(619,36);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:619:36: ( ws )?
			int alt159=2;
			try { dbg.enterSubRule(159);
			try { dbg.enterDecision(159, decisionCanBacktrack[159]);

			int LA159_0 = input.LA(1);
			if ( (LA159_0==COMMENT||LA159_0==NL||LA159_0==WS) ) {
				alt159=1;
			}
			} finally {dbg.exitDecision(159);}

			switch (alt159) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:619:36: ws
					{
					dbg.location(619,36);
					pushFollow(FOLLOW_ws_in_webkitKeyframes2996);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(159);}
			dbg.location(620,2);
			match(input,LBRACE,FOLLOW_LBRACE_in_webkitKeyframes3000); if (state.failed) return;dbg.location(620,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:620:9: ( ws )?
			int alt160=2;
			try { dbg.enterSubRule(160);
			try { dbg.enterDecision(160, decisionCanBacktrack[160]);

			int LA160_0 = input.LA(1);
			if ( (LA160_0==COMMENT||LA160_0==NL||LA160_0==WS) ) {
				alt160=1;
			}
			} finally {dbg.exitDecision(160);}

			switch (alt160) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:620:9: ws
					{
					dbg.location(620,9);
					pushFollow(FOLLOW_ws_in_webkitKeyframes3002);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(160);}
			dbg.location(621,3);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:621:3: ( webkitKeyframesBlock ( ws )? )*
			try { dbg.enterSubRule(162);

			loop162:
			while (true) {
				int alt162=2;
				try { dbg.enterDecision(162, decisionCanBacktrack[162]);

				int LA162_0 = input.LA(1);
				if ( (LA162_0==IDENT||LA162_0==PERCENTAGE||LA162_0==SASS_CONTENT) ) {
					alt162=1;
				}

				} finally {dbg.exitDecision(162);}

				switch (alt162) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:621:5: webkitKeyframesBlock ( ws )?
					{
					dbg.location(621,5);
					pushFollow(FOLLOW_webkitKeyframesBlock_in_webkitKeyframes3009);
					webkitKeyframesBlock();
					state._fsp--;
					if (state.failed) return;dbg.location(621,26);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:621:26: ( ws )?
					int alt161=2;
					try { dbg.enterSubRule(161);
					try { dbg.enterDecision(161, decisionCanBacktrack[161]);

					int LA161_0 = input.LA(1);
					if ( (LA161_0==COMMENT||LA161_0==NL||LA161_0==WS) ) {
						alt161=1;
					}
					} finally {dbg.exitDecision(161);}

					switch (alt161) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:621:26: ws
							{
							dbg.location(621,26);
							pushFollow(FOLLOW_ws_in_webkitKeyframes3011);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(161);}

					}
					break;

				default :
					break loop162;
				}
			}
			} finally {dbg.exitSubRule(162);}
			dbg.location(622,2);
			match(input,RBRACE,FOLLOW_RBRACE_in_webkitKeyframes3018); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(623, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "webkitKeyframes");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "webkitKeyframes"



	// $ANTLR start "webkitKeyframesBlock"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:625:1: webkitKeyframesBlock : ( webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE |{...}?{...}? sass_content ( SEMI )? );
	public final void webkitKeyframesBlock() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "webkitKeyframesBlock");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(625, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:626:2: ( webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE |{...}?{...}? sass_content ( SEMI )? )
			int alt167=2;
			try { dbg.enterDecision(167, decisionCanBacktrack[167]);

			int LA167_0 = input.LA(1);
			if ( (LA167_0==IDENT||LA167_0==PERCENTAGE) ) {
				alt167=1;
			}
			else if ( (LA167_0==SASS_CONTENT) ) {
				alt167=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 167, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(167);}

			switch (alt167) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:2: webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
					{
					dbg.location(627,2);
					pushFollow(FOLLOW_webkitKeyframeSelectors_in_webkitKeyframesBlock3030);
					webkitKeyframeSelectors();
					state._fsp--;
					if (state.failed) return;dbg.location(627,26);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:26: ( ws )?
					int alt163=2;
					try { dbg.enterSubRule(163);
					try { dbg.enterDecision(163, decisionCanBacktrack[163]);

					int LA163_0 = input.LA(1);
					if ( (LA163_0==COMMENT||LA163_0==NL||LA163_0==WS) ) {
						alt163=1;
					}
					} finally {dbg.exitDecision(163);}

					switch (alt163) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:26: ws
							{
							dbg.location(627,26);
							pushFollow(FOLLOW_ws_in_webkitKeyframesBlock3032);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(163);}
					dbg.location(628,2);
					match(input,LBRACE,FOLLOW_LBRACE_in_webkitKeyframesBlock3036); if (state.failed) return;dbg.location(628,10);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:628:10: ( ws )?
					int alt164=2;
					try { dbg.enterSubRule(164);
					try { dbg.enterDecision(164, decisionCanBacktrack[164]);

					int LA164_0 = input.LA(1);
					if ( (LA164_0==COMMENT||LA164_0==NL||LA164_0==WS) ) {
						alt164=1;
					}
					} finally {dbg.exitDecision(164);}

					switch (alt164) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:628:10: ws
							{
							dbg.location(628,10);
							pushFollow(FOLLOW_ws_in_webkitKeyframesBlock3039);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(164);}
					dbg.location(628,14);
					pushFollow(FOLLOW_syncToFollow_in_webkitKeyframesBlock3042);
					syncToFollow();
					state._fsp--;
					if (state.failed) return;dbg.location(629,3);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:629:3: ( declarations )?
					int alt165=2;
					try { dbg.enterSubRule(165);
					try { dbg.enterDecision(165, decisionCanBacktrack[165]);

					int LA165_0 = input.LA(1);
					if ( ((LA165_0 >= AT_IDENT && LA165_0 <= AT_SIGN)||(LA165_0 >= BOTTOMCENTER_SYM && LA165_0 <= BOTTOMRIGHT_SYM)||(LA165_0 >= CHARSET_SYM && LA165_0 <= COLON)||LA165_0==COUNTER_STYLE_SYM||(LA165_0 >= DCOLON && LA165_0 <= DOT)||LA165_0==FONT_FACE_SYM||(LA165_0 >= GEN && LA165_0 <= GREATER)||(LA165_0 >= HASH && LA165_0 <= HASH_SYMBOL)||LA165_0==IDENT||LA165_0==IMPORT_SYM||LA165_0==LAYER_SYM||(LA165_0 >= LBRACKET && LA165_0 <= LEFTTOP_SYM)||LA165_0==LESS_AND||(LA165_0 >= MEDIA_SYM && LA165_0 <= MOZ_DOCUMENT_SYM)||LA165_0==NAMESPACE_SYM||LA165_0==PAGE_SYM||(LA165_0 >= PIPE && LA165_0 <= PLUS)||(LA165_0 >= RIGHTBOTTOM_SYM && LA165_0 <= RIGHTTOP_SYM)||(LA165_0 >= SASS_AT_ROOT && LA165_0 <= SASS_DEBUG)||(LA165_0 >= SASS_EACH && LA165_0 <= SASS_ELSE)||(LA165_0 >= SASS_ERROR && LA165_0 <= SASS_FUNCTION)||(LA165_0 >= SASS_IF && LA165_0 <= SASS_MIXIN)||(LA165_0 >= SASS_RETURN && LA165_0 <= SEMI)||LA165_0==STAR||LA165_0==SUPPORTS_SYM||LA165_0==TILDE||(LA165_0 >= TOPCENTER_SYM && LA165_0 <= TOPRIGHT_SYM)||LA165_0==VARIABLE||LA165_0==WEBKIT_KEYFRAMES_SYM) ) {
						alt165=1;
					}
					} finally {dbg.exitDecision(165);}

					switch (alt165) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:629:3: declarations
							{
							dbg.location(629,3);
							pushFollow(FOLLOW_declarations_in_webkitKeyframesBlock3046);
							declarations();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(165);}
					dbg.location(630,2);
					match(input,RBRACE,FOLLOW_RBRACE_in_webkitKeyframesBlock3050); if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:631:11: {...}?{...}? sass_content ( SEMI )?
					{
					dbg.location(631,11);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "webkitKeyframesBlock", "isScssSource()");
					}dbg.location(631,30);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "webkitKeyframesBlock", "isScssSource()");
					}dbg.location(631,48);
					pushFollow(FOLLOW_sass_content_in_webkitKeyframesBlock3067);
					sass_content();
					state._fsp--;
					if (state.failed) return;dbg.location(631,61);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:631:61: ( SEMI )?
					int alt166=2;
					try { dbg.enterSubRule(166);
					try { dbg.enterDecision(166, decisionCanBacktrack[166]);

					int LA166_0 = input.LA(1);
					if ( (LA166_0==SEMI) ) {
						alt166=1;
					}
					} finally {dbg.exitDecision(166);}

					switch (alt166) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:631:61: SEMI
							{
							dbg.location(631,61);
							match(input,SEMI,FOLLOW_SEMI_in_webkitKeyframesBlock3069); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(166);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(632, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "webkitKeyframesBlock");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "webkitKeyframesBlock"



	// $ANTLR start "webkitKeyframeSelectors"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:634:1: webkitKeyframeSelectors : ({...}? IDENT |{...}? IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ({...}? IDENT |{...}? IDENT | PERCENTAGE ) )* ;
	public final void webkitKeyframeSelectors() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "webkitKeyframeSelectors");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(634, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:2: ( ({...}? IDENT |{...}? IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ({...}? IDENT |{...}? IDENT | PERCENTAGE ) )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:636:2: ({...}? IDENT |{...}? IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ({...}? IDENT |{...}? IDENT | PERCENTAGE ) )*
			{
			dbg.location(636,2);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:636:2: ({...}? IDENT |{...}? IDENT | PERCENTAGE )
			int alt168=3;
			try { dbg.enterSubRule(168);
			try { dbg.enterDecision(168, decisionCanBacktrack[168]);

			int LA168_0 = input.LA(1);
			if ( (LA168_0==IDENT) ) {
				int LA168_1 = input.LA(2);
				if ( (evalPredicate(tokenNameEquals("from"),"tokenNameEquals(\"from\")")) ) {
					alt168=1;
				}
				else if ( (evalPredicate(tokenNameEquals("to"),"tokenNameEquals(\"to\")")) ) {
					alt168=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 168, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA168_0==PERCENTAGE) ) {
				alt168=3;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 168, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(168);}

			switch (alt168) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:636:4: {...}? IDENT
					{
					dbg.location(636,4);
					if ( !(evalPredicate(tokenNameEquals("from"),"tokenNameEquals(\"from\")")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "webkitKeyframeSelectors", "tokenNameEquals(\"from\")");
					}dbg.location(636,31);
					match(input,IDENT,FOLLOW_IDENT_in_webkitKeyframeSelectors3086); if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:636:39: {...}? IDENT
					{
					dbg.location(636,39);
					if ( !(evalPredicate(tokenNameEquals("to"),"tokenNameEquals(\"to\")")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "webkitKeyframeSelectors", "tokenNameEquals(\"to\")");
					}dbg.location(636,64);
					match(input,IDENT,FOLLOW_IDENT_in_webkitKeyframeSelectors3092); if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:636:72: PERCENTAGE
					{
					dbg.location(636,72);
					match(input,PERCENTAGE,FOLLOW_PERCENTAGE_in_webkitKeyframeSelectors3096); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(168);}
			dbg.location(636,85);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:636:85: ( ( ws )? COMMA ( ws )? ({...}? IDENT |{...}? IDENT | PERCENTAGE ) )*
			try { dbg.enterSubRule(172);

			loop172:
			while (true) {
				int alt172=2;
				try { dbg.enterDecision(172, decisionCanBacktrack[172]);

				try {
					isCyclicDecision = true;
					alt172 = dfa172.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(172);}

				switch (alt172) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:636:87: ( ws )? COMMA ( ws )? ({...}? IDENT |{...}? IDENT | PERCENTAGE )
					{
					dbg.location(636,87);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:636:87: ( ws )?
					int alt169=2;
					try { dbg.enterSubRule(169);
					try { dbg.enterDecision(169, decisionCanBacktrack[169]);

					int LA169_0 = input.LA(1);
					if ( (LA169_0==COMMENT||LA169_0==NL||LA169_0==WS) ) {
						alt169=1;
					}
					} finally {dbg.exitDecision(169);}

					switch (alt169) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:636:87: ws
							{
							dbg.location(636,87);
							pushFollow(FOLLOW_ws_in_webkitKeyframeSelectors3102);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(169);}
					dbg.location(636,91);
					match(input,COMMA,FOLLOW_COMMA_in_webkitKeyframeSelectors3105); if (state.failed) return;dbg.location(636,97);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:636:97: ( ws )?
					int alt170=2;
					try { dbg.enterSubRule(170);
					try { dbg.enterDecision(170, decisionCanBacktrack[170]);

					int LA170_0 = input.LA(1);
					if ( (LA170_0==COMMENT||LA170_0==NL||LA170_0==WS) ) {
						alt170=1;
					}
					} finally {dbg.exitDecision(170);}

					switch (alt170) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:636:97: ws
							{
							dbg.location(636,97);
							pushFollow(FOLLOW_ws_in_webkitKeyframeSelectors3107);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(170);}
					dbg.location(636,101);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:636:101: ({...}? IDENT |{...}? IDENT | PERCENTAGE )
					int alt171=3;
					try { dbg.enterSubRule(171);
					try { dbg.enterDecision(171, decisionCanBacktrack[171]);

					int LA171_0 = input.LA(1);
					if ( (LA171_0==IDENT) ) {
						int LA171_1 = input.LA(2);
						if ( (evalPredicate(tokenNameEquals("from"),"tokenNameEquals(\"from\")")) ) {
							alt171=1;
						}
						else if ( (evalPredicate(tokenNameEquals("to"),"tokenNameEquals(\"to\")")) ) {
							alt171=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 171, 1, input);
								dbg.recognitionException(nvae);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}
					else if ( (LA171_0==PERCENTAGE) ) {
						alt171=3;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 171, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(171);}

					switch (alt171) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:636:103: {...}? IDENT
							{
							dbg.location(636,103);
							if ( !(evalPredicate(tokenNameEquals("from"),"tokenNameEquals(\"from\")")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "webkitKeyframeSelectors", "tokenNameEquals(\"from\")");
							}dbg.location(636,130);
							match(input,IDENT,FOLLOW_IDENT_in_webkitKeyframeSelectors3114); if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:636:138: {...}? IDENT
							{
							dbg.location(636,138);
							if ( !(evalPredicate(tokenNameEquals("to"),"tokenNameEquals(\"to\")")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "webkitKeyframeSelectors", "tokenNameEquals(\"to\")");
							}dbg.location(636,163);
							match(input,IDENT,FOLLOW_IDENT_in_webkitKeyframeSelectors3120); if (state.failed) return;
							}
							break;
						case 3 :
							dbg.enterAlt(3);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:636:171: PERCENTAGE
							{
							dbg.location(636,171);
							match(input,PERCENTAGE,FOLLOW_PERCENTAGE_in_webkitKeyframeSelectors3124); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(171);}

					}
					break;

				default :
					break loop172;
				}
			}
			} finally {dbg.exitSubRule(172);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(637, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "webkitKeyframeSelectors");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "webkitKeyframeSelectors"



	// $ANTLR start "page"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:639:1: page : PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ( ws )? ({...}? ( SEMI ( ws )? ) | ( SEMI ( ws )? )? ) ( propertyDeclaration | margin ) )* ( SEMI )? ( ws )? RBRACE ;
	public final void page() throws RecognitionException {

		    boolean semiRequired = false;

		try { dbg.enterRule(getGrammarFileName(), "page");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(639, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:5: ( PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ( ws )? ({...}? ( SEMI ( ws )? ) | ( SEMI ( ws )? )? ) ( propertyDeclaration | margin ) )* ( SEMI )? ( ws )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:7: PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ( ws )? ({...}? ( SEMI ( ws )? ) | ( SEMI ( ws )? )? ) ( propertyDeclaration | margin ) )* ( SEMI )? ( ws )? RBRACE
			{
			dbg.location(643,7);
			match(input,PAGE_SYM,FOLLOW_PAGE_SYM_in_page3148); if (state.failed) return;dbg.location(643,16);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:16: ( ws )?
			int alt173=2;
			try { dbg.enterSubRule(173);
			try { dbg.enterDecision(173, decisionCanBacktrack[173]);

			int LA173_0 = input.LA(1);
			if ( (LA173_0==COMMENT||LA173_0==NL||LA173_0==WS) ) {
				alt173=1;
			}
			} finally {dbg.exitDecision(173);}

			switch (alt173) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:16: ws
					{
					dbg.location(643,16);
					pushFollow(FOLLOW_ws_in_page3150);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(173);}
			dbg.location(643,20);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:20: ( IDENT ( ws )? )?
			int alt175=2;
			try { dbg.enterSubRule(175);
			try { dbg.enterDecision(175, decisionCanBacktrack[175]);

			int LA175_0 = input.LA(1);
			if ( (LA175_0==IDENT) ) {
				alt175=1;
			}
			} finally {dbg.exitDecision(175);}

			switch (alt175) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:22: IDENT ( ws )?
					{
					dbg.location(643,22);
					match(input,IDENT,FOLLOW_IDENT_in_page3155); if (state.failed) return;dbg.location(643,28);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:28: ( ws )?
					int alt174=2;
					try { dbg.enterSubRule(174);
					try { dbg.enterDecision(174, decisionCanBacktrack[174]);

					int LA174_0 = input.LA(1);
					if ( (LA174_0==COMMENT||LA174_0==NL||LA174_0==WS) ) {
						alt174=1;
					}
					} finally {dbg.exitDecision(174);}

					switch (alt174) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:28: ws
							{
							dbg.location(643,28);
							pushFollow(FOLLOW_ws_in_page3157);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(174);}

					}
					break;

			}
			} finally {dbg.exitSubRule(175);}
			dbg.location(643,35);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:35: ( pseudoPage ( ws )? )?
			int alt177=2;
			try { dbg.enterSubRule(177);
			try { dbg.enterDecision(177, decisionCanBacktrack[177]);

			int LA177_0 = input.LA(1);
			if ( (LA177_0==COLON) ) {
				alt177=1;
			}
			} finally {dbg.exitDecision(177);}

			switch (alt177) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:36: pseudoPage ( ws )?
					{
					dbg.location(643,36);
					pushFollow(FOLLOW_pseudoPage_in_page3164);
					pseudoPage();
					state._fsp--;
					if (state.failed) return;dbg.location(643,47);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:47: ( ws )?
					int alt176=2;
					try { dbg.enterSubRule(176);
					try { dbg.enterDecision(176, decisionCanBacktrack[176]);

					int LA176_0 = input.LA(1);
					if ( (LA176_0==COMMENT||LA176_0==NL||LA176_0==WS) ) {
						alt176=1;
					}
					} finally {dbg.exitDecision(176);}

					switch (alt176) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:47: ws
							{
							dbg.location(643,47);
							pushFollow(FOLLOW_ws_in_page3166);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(176);}

					}
					break;

			}
			} finally {dbg.exitSubRule(177);}
			dbg.location(644,9);
			match(input,LBRACE,FOLLOW_LBRACE_in_page3179); if (state.failed) return;dbg.location(647,13);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:647:13: ( ( ws )? ({...}? ( SEMI ( ws )? ) | ( SEMI ( ws )? )? ) ( propertyDeclaration | margin ) )*
			try { dbg.enterSubRule(184);

			loop184:
			while (true) {
				int alt184=2;
				try { dbg.enterDecision(184, decisionCanBacktrack[184]);

				try {
					isCyclicDecision = true;
					alt184 = dfa184.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(184);}

				switch (alt184) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:647:15: ( ws )? ({...}? ( SEMI ( ws )? ) | ( SEMI ( ws )? )? ) ( propertyDeclaration | margin )
					{
					dbg.location(647,15);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:647:15: ( ws )?
					int alt178=2;
					try { dbg.enterSubRule(178);
					try { dbg.enterDecision(178, decisionCanBacktrack[178]);

					int LA178_0 = input.LA(1);
					if ( (LA178_0==COMMENT||LA178_0==NL||LA178_0==WS) ) {
						alt178=1;
					}
					} finally {dbg.exitDecision(178);}

					switch (alt178) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:647:15: ws
							{
							dbg.location(647,15);
							pushFollow(FOLLOW_ws_in_page3221);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(178);}
					dbg.location(647,19);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:647:19: ({...}? ( SEMI ( ws )? ) | ( SEMI ( ws )? )? )
					int alt182=2;
					try { dbg.enterSubRule(182);
					try { dbg.enterDecision(182, decisionCanBacktrack[182]);

					int LA182_0 = input.LA(1);
					if ( (LA182_0==SEMI) ) {
						int LA182_1 = input.LA(2);
						if ( (evalPredicate(semiRequired,"semiRequired")) ) {
							alt182=1;
						}
						else if ( (true) ) {
							alt182=2;
						}

					}
					else if ( ((LA182_0 >= AT_IDENT && LA182_0 <= AT_SIGN)||(LA182_0 >= BOTTOMCENTER_SYM && LA182_0 <= BOTTOMRIGHT_SYM)||LA182_0==CHARSET_SYM||LA182_0==COUNTER_STYLE_SYM||LA182_0==FONT_FACE_SYM||LA182_0==GEN||LA182_0==HASH_SYMBOL||LA182_0==IDENT||LA182_0==IMPORT_SYM||(LA182_0 >= LEFTBOTTOM_SYM && LA182_0 <= LEFTTOP_SYM)||(LA182_0 >= MEDIA_SYM && LA182_0 <= MOZ_DOCUMENT_SYM)||LA182_0==NAMESPACE_SYM||LA182_0==PAGE_SYM||(LA182_0 >= RIGHTBOTTOM_SYM && LA182_0 <= RIGHTTOP_SYM)||(LA182_0 >= SASS_AT_ROOT && LA182_0 <= SASS_DEBUG)||(LA182_0 >= SASS_EACH && LA182_0 <= SASS_ELSE)||LA182_0==SASS_EXTEND||(LA182_0 >= SASS_FOR && LA182_0 <= SASS_FUNCTION)||(LA182_0 >= SASS_IF && LA182_0 <= SASS_MIXIN)||(LA182_0 >= SASS_RETURN && LA182_0 <= SASS_WHILE)||LA182_0==STAR||(LA182_0 >= TOPCENTER_SYM && LA182_0 <= TOPRIGHT_SYM)||LA182_0==VARIABLE||LA182_0==WEBKIT_KEYFRAMES_SYM) ) {
						alt182=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 182, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(182);}

					switch (alt182) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:647:20: {...}? ( SEMI ( ws )? )
							{
							dbg.location(647,20);
							if ( !(evalPredicate(semiRequired,"semiRequired")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "page", "semiRequired");
							}dbg.location(647,36);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:647:36: ( SEMI ( ws )? )
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:647:37: SEMI ( ws )?
							{
							dbg.location(647,37);
							match(input,SEMI,FOLLOW_SEMI_in_page3228); if (state.failed) return;dbg.location(647,42);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:647:42: ( ws )?
							int alt179=2;
							try { dbg.enterSubRule(179);
							try { dbg.enterDecision(179, decisionCanBacktrack[179]);

							int LA179_0 = input.LA(1);
							if ( (LA179_0==COMMENT||LA179_0==NL||LA179_0==WS) ) {
								alt179=1;
							}
							} finally {dbg.exitDecision(179);}

							switch (alt179) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:647:42: ws
									{
									dbg.location(647,42);
									pushFollow(FOLLOW_ws_in_page3230);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(179);}

							}

							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:647:49: ( SEMI ( ws )? )?
							{
							dbg.location(647,49);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:647:49: ( SEMI ( ws )? )?
							int alt181=2;
							try { dbg.enterSubRule(181);
							try { dbg.enterDecision(181, decisionCanBacktrack[181]);

							int LA181_0 = input.LA(1);
							if ( (LA181_0==SEMI) ) {
								alt181=1;
							}
							} finally {dbg.exitDecision(181);}

							switch (alt181) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:647:50: SEMI ( ws )?
									{
									dbg.location(647,50);
									match(input,SEMI,FOLLOW_SEMI_in_page3237); if (state.failed) return;dbg.location(647,55);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:647:55: ( ws )?
									int alt180=2;
									try { dbg.enterSubRule(180);
									try { dbg.enterDecision(180, decisionCanBacktrack[180]);

									int LA180_0 = input.LA(1);
									if ( (LA180_0==COMMENT||LA180_0==NL||LA180_0==WS) ) {
										alt180=1;
									}
									} finally {dbg.exitDecision(180);}

									switch (alt180) {
										case 1 :
											dbg.enterAlt(1);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:647:55: ws
											{
											dbg.location(647,55);
											pushFollow(FOLLOW_ws_in_page3239);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(180);}

									}
									break;

							}
							} finally {dbg.exitSubRule(181);}

							}
							break;

					}
					} finally {dbg.exitSubRule(182);}
					dbg.location(647,62);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:647:62: ( propertyDeclaration | margin )
					int alt183=2;
					try { dbg.enterSubRule(183);
					try { dbg.enterDecision(183, decisionCanBacktrack[183]);

					try {
						isCyclicDecision = true;
						alt183 = dfa183.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(183);}

					switch (alt183) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:647:63: propertyDeclaration
							{
							dbg.location(647,63);
							pushFollow(FOLLOW_propertyDeclaration_in_page3246);
							propertyDeclaration();
							state._fsp--;
							if (state.failed) return;dbg.location(647,82);
							if ( state.backtracking==0 ) {semiRequired=true;}
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:647:103: margin
							{
							dbg.location(647,103);
							pushFollow(FOLLOW_margin_in_page3249);
							margin();
							state._fsp--;
							if (state.failed) return;dbg.location(647,109);
							if ( state.backtracking==0 ) {semiRequired=false;}
							}
							break;

					}
					} finally {dbg.exitSubRule(183);}

					}
					break;

				default :
					break loop184;
				}
			}
			} finally {dbg.exitSubRule(184);}
			dbg.location(648,13);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:648:13: ( SEMI )?
			int alt185=2;
			try { dbg.enterSubRule(185);
			try { dbg.enterDecision(185, decisionCanBacktrack[185]);

			int LA185_0 = input.LA(1);
			if ( (LA185_0==SEMI) ) {
				alt185=1;
			}
			} finally {dbg.exitDecision(185);}

			switch (alt185) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:648:13: SEMI
					{
					dbg.location(648,13);
					match(input,SEMI,FOLLOW_SEMI_in_page3267); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(185);}
			dbg.location(649,13);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:649:13: ( ws )?
			int alt186=2;
			try { dbg.enterSubRule(186);
			try { dbg.enterDecision(186, decisionCanBacktrack[186]);

			int LA186_0 = input.LA(1);
			if ( (LA186_0==COMMENT||LA186_0==NL||LA186_0==WS) ) {
				alt186=1;
			}
			} finally {dbg.exitDecision(186);}

			switch (alt186) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:649:13: ws
					{
					dbg.location(649,13);
					pushFollow(FOLLOW_ws_in_page3282);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(186);}
			dbg.location(650,9);
			match(input,RBRACE,FOLLOW_RBRACE_in_page3293); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(651, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "page");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "page"



	// $ANTLR start "counterStyle"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:653:1: counterStyle : COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE ;
	public final void counterStyle() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "counterStyle");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(653, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:5: ( COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:7: COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE
			{
			dbg.location(654,7);
			match(input,COUNTER_STYLE_SYM,FOLLOW_COUNTER_STYLE_SYM_in_counterStyle3310); if (state.failed) return;dbg.location(654,25);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:25: ( ws )?
			int alt187=2;
			try { dbg.enterSubRule(187);
			try { dbg.enterDecision(187, decisionCanBacktrack[187]);

			int LA187_0 = input.LA(1);
			if ( (LA187_0==COMMENT||LA187_0==NL||LA187_0==WS) ) {
				alt187=1;
			}
			} finally {dbg.exitDecision(187);}

			switch (alt187) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:25: ws
					{
					dbg.location(654,25);
					pushFollow(FOLLOW_ws_in_counterStyle3312);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(187);}
			dbg.location(654,29);
			match(input,IDENT,FOLLOW_IDENT_in_counterStyle3315); if (state.failed) return;dbg.location(654,35);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:35: ( ws )?
			int alt188=2;
			try { dbg.enterSubRule(188);
			try { dbg.enterDecision(188, decisionCanBacktrack[188]);

			int LA188_0 = input.LA(1);
			if ( (LA188_0==COMMENT||LA188_0==NL||LA188_0==WS) ) {
				alt188=1;
			}
			} finally {dbg.exitDecision(188);}

			switch (alt188) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:35: ws
					{
					dbg.location(654,35);
					pushFollow(FOLLOW_ws_in_counterStyle3317);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(188);}
			dbg.location(655,9);
			match(input,LBRACE,FOLLOW_LBRACE_in_counterStyle3328); if (state.failed) return;dbg.location(655,16);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:655:16: ( ws )?
			int alt189=2;
			try { dbg.enterSubRule(189);
			try { dbg.enterDecision(189, decisionCanBacktrack[189]);

			int LA189_0 = input.LA(1);
			if ( (LA189_0==COMMENT||LA189_0==NL||LA189_0==WS) ) {
				alt189=1;
			}
			} finally {dbg.exitDecision(189);}

			switch (alt189) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:655:16: ws
					{
					dbg.location(655,16);
					pushFollow(FOLLOW_ws_in_counterStyle3330);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(189);}
			dbg.location(655,20);
			pushFollow(FOLLOW_syncToDeclarationsRule_in_counterStyle3333);
			syncToDeclarationsRule();
			state._fsp--;
			if (state.failed) return;dbg.location(656,3);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:656:3: ( declarations )?
			int alt190=2;
			try { dbg.enterSubRule(190);
			try { dbg.enterDecision(190, decisionCanBacktrack[190]);

			int LA190_0 = input.LA(1);
			if ( ((LA190_0 >= AT_IDENT && LA190_0 <= AT_SIGN)||(LA190_0 >= BOTTOMCENTER_SYM && LA190_0 <= BOTTOMRIGHT_SYM)||(LA190_0 >= CHARSET_SYM && LA190_0 <= COLON)||LA190_0==COUNTER_STYLE_SYM||(LA190_0 >= DCOLON && LA190_0 <= DOT)||LA190_0==FONT_FACE_SYM||(LA190_0 >= GEN && LA190_0 <= GREATER)||(LA190_0 >= HASH && LA190_0 <= HASH_SYMBOL)||LA190_0==IDENT||LA190_0==IMPORT_SYM||LA190_0==LAYER_SYM||(LA190_0 >= LBRACKET && LA190_0 <= LEFTTOP_SYM)||LA190_0==LESS_AND||(LA190_0 >= MEDIA_SYM && LA190_0 <= MOZ_DOCUMENT_SYM)||LA190_0==NAMESPACE_SYM||LA190_0==PAGE_SYM||(LA190_0 >= PIPE && LA190_0 <= PLUS)||(LA190_0 >= RIGHTBOTTOM_SYM && LA190_0 <= RIGHTTOP_SYM)||(LA190_0 >= SASS_AT_ROOT && LA190_0 <= SASS_DEBUG)||(LA190_0 >= SASS_EACH && LA190_0 <= SASS_ELSE)||(LA190_0 >= SASS_ERROR && LA190_0 <= SASS_FUNCTION)||(LA190_0 >= SASS_IF && LA190_0 <= SASS_MIXIN)||(LA190_0 >= SASS_RETURN && LA190_0 <= SEMI)||LA190_0==STAR||LA190_0==SUPPORTS_SYM||LA190_0==TILDE||(LA190_0 >= TOPCENTER_SYM && LA190_0 <= TOPRIGHT_SYM)||LA190_0==VARIABLE||LA190_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt190=1;
			}
			} finally {dbg.exitDecision(190);}

			switch (alt190) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:656:3: declarations
					{
					dbg.location(656,3);
					pushFollow(FOLLOW_declarations_in_counterStyle3337);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(190);}
			dbg.location(657,9);
			match(input,RBRACE,FOLLOW_RBRACE_in_counterStyle3348); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(658, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "counterStyle");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "counterStyle"



	// $ANTLR start "fontFace"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:1: fontFace : FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE ;
	public final void fontFace() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "fontFace");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(660, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:661:5: ( FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:661:7: FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE
			{
			dbg.location(661,7);
			match(input,FONT_FACE_SYM,FOLLOW_FONT_FACE_SYM_in_fontFace3365); if (state.failed) return;dbg.location(661,21);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:661:21: ( ws )?
			int alt191=2;
			try { dbg.enterSubRule(191);
			try { dbg.enterDecision(191, decisionCanBacktrack[191]);

			int LA191_0 = input.LA(1);
			if ( (LA191_0==COMMENT||LA191_0==NL||LA191_0==WS) ) {
				alt191=1;
			}
			} finally {dbg.exitDecision(191);}

			switch (alt191) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:661:21: ws
					{
					dbg.location(661,21);
					pushFollow(FOLLOW_ws_in_fontFace3367);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(191);}
			dbg.location(662,9);
			match(input,LBRACE,FOLLOW_LBRACE_in_fontFace3378); if (state.failed) return;dbg.location(662,16);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:662:16: ( ws )?
			int alt192=2;
			try { dbg.enterSubRule(192);
			try { dbg.enterDecision(192, decisionCanBacktrack[192]);

			int LA192_0 = input.LA(1);
			if ( (LA192_0==COMMENT||LA192_0==NL||LA192_0==WS) ) {
				alt192=1;
			}
			} finally {dbg.exitDecision(192);}

			switch (alt192) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:662:16: ws
					{
					dbg.location(662,16);
					pushFollow(FOLLOW_ws_in_fontFace3380);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(192);}
			dbg.location(662,20);
			pushFollow(FOLLOW_syncToDeclarationsRule_in_fontFace3383);
			syncToDeclarationsRule();
			state._fsp--;
			if (state.failed) return;dbg.location(663,3);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:663:3: ( declarations )?
			int alt193=2;
			try { dbg.enterSubRule(193);
			try { dbg.enterDecision(193, decisionCanBacktrack[193]);

			int LA193_0 = input.LA(1);
			if ( ((LA193_0 >= AT_IDENT && LA193_0 <= AT_SIGN)||(LA193_0 >= BOTTOMCENTER_SYM && LA193_0 <= BOTTOMRIGHT_SYM)||(LA193_0 >= CHARSET_SYM && LA193_0 <= COLON)||LA193_0==COUNTER_STYLE_SYM||(LA193_0 >= DCOLON && LA193_0 <= DOT)||LA193_0==FONT_FACE_SYM||(LA193_0 >= GEN && LA193_0 <= GREATER)||(LA193_0 >= HASH && LA193_0 <= HASH_SYMBOL)||LA193_0==IDENT||LA193_0==IMPORT_SYM||LA193_0==LAYER_SYM||(LA193_0 >= LBRACKET && LA193_0 <= LEFTTOP_SYM)||LA193_0==LESS_AND||(LA193_0 >= MEDIA_SYM && LA193_0 <= MOZ_DOCUMENT_SYM)||LA193_0==NAMESPACE_SYM||LA193_0==PAGE_SYM||(LA193_0 >= PIPE && LA193_0 <= PLUS)||(LA193_0 >= RIGHTBOTTOM_SYM && LA193_0 <= RIGHTTOP_SYM)||(LA193_0 >= SASS_AT_ROOT && LA193_0 <= SASS_DEBUG)||(LA193_0 >= SASS_EACH && LA193_0 <= SASS_ELSE)||(LA193_0 >= SASS_ERROR && LA193_0 <= SASS_FUNCTION)||(LA193_0 >= SASS_IF && LA193_0 <= SASS_MIXIN)||(LA193_0 >= SASS_RETURN && LA193_0 <= SEMI)||LA193_0==STAR||LA193_0==SUPPORTS_SYM||LA193_0==TILDE||(LA193_0 >= TOPCENTER_SYM && LA193_0 <= TOPRIGHT_SYM)||LA193_0==VARIABLE||LA193_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt193=1;
			}
			} finally {dbg.exitDecision(193);}

			switch (alt193) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:663:3: declarations
					{
					dbg.location(663,3);
					pushFollow(FOLLOW_declarations_in_fontFace3387);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(193);}
			dbg.location(664,9);
			match(input,RBRACE,FOLLOW_RBRACE_in_fontFace3398); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(665, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "fontFace");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "fontFace"



	// $ANTLR start "margin"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:1: margin : margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE ;
	public final void margin() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "margin");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(667, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:2: ( margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:4: margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE
			{
			dbg.location(668,4);
			pushFollow(FOLLOW_margin_sym_in_margin3412);
			margin_sym();
			state._fsp--;
			if (state.failed) return;dbg.location(668,15);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:15: ( ws )?
			int alt194=2;
			try { dbg.enterSubRule(194);
			try { dbg.enterDecision(194, decisionCanBacktrack[194]);

			int LA194_0 = input.LA(1);
			if ( (LA194_0==COMMENT||LA194_0==NL||LA194_0==WS) ) {
				alt194=1;
			}
			} finally {dbg.exitDecision(194);}

			switch (alt194) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:15: ws
					{
					dbg.location(668,15);
					pushFollow(FOLLOW_ws_in_margin3414);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(194);}
			dbg.location(668,19);
			match(input,LBRACE,FOLLOW_LBRACE_in_margin3417); if (state.failed) return;dbg.location(668,26);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:26: ( ws )?
			int alt195=2;
			try { dbg.enterSubRule(195);
			try { dbg.enterDecision(195, decisionCanBacktrack[195]);

			int LA195_0 = input.LA(1);
			if ( (LA195_0==COMMENT||LA195_0==NL||LA195_0==WS) ) {
				alt195=1;
			}
			} finally {dbg.exitDecision(195);}

			switch (alt195) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:26: ws
					{
					dbg.location(668,26);
					pushFollow(FOLLOW_ws_in_margin3419);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(195);}
			dbg.location(668,30);
			pushFollow(FOLLOW_syncToDeclarationsRule_in_margin3422);
			syncToDeclarationsRule();
			state._fsp--;
			if (state.failed) return;dbg.location(668,53);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:53: ( declarations )?
			int alt196=2;
			try { dbg.enterSubRule(196);
			try { dbg.enterDecision(196, decisionCanBacktrack[196]);

			int LA196_0 = input.LA(1);
			if ( ((LA196_0 >= AT_IDENT && LA196_0 <= AT_SIGN)||(LA196_0 >= BOTTOMCENTER_SYM && LA196_0 <= BOTTOMRIGHT_SYM)||(LA196_0 >= CHARSET_SYM && LA196_0 <= COLON)||LA196_0==COUNTER_STYLE_SYM||(LA196_0 >= DCOLON && LA196_0 <= DOT)||LA196_0==FONT_FACE_SYM||(LA196_0 >= GEN && LA196_0 <= GREATER)||(LA196_0 >= HASH && LA196_0 <= HASH_SYMBOL)||LA196_0==IDENT||LA196_0==IMPORT_SYM||LA196_0==LAYER_SYM||(LA196_0 >= LBRACKET && LA196_0 <= LEFTTOP_SYM)||LA196_0==LESS_AND||(LA196_0 >= MEDIA_SYM && LA196_0 <= MOZ_DOCUMENT_SYM)||LA196_0==NAMESPACE_SYM||LA196_0==PAGE_SYM||(LA196_0 >= PIPE && LA196_0 <= PLUS)||(LA196_0 >= RIGHTBOTTOM_SYM && LA196_0 <= RIGHTTOP_SYM)||(LA196_0 >= SASS_AT_ROOT && LA196_0 <= SASS_DEBUG)||(LA196_0 >= SASS_EACH && LA196_0 <= SASS_ELSE)||(LA196_0 >= SASS_ERROR && LA196_0 <= SASS_FUNCTION)||(LA196_0 >= SASS_IF && LA196_0 <= SASS_MIXIN)||(LA196_0 >= SASS_RETURN && LA196_0 <= SEMI)||LA196_0==STAR||LA196_0==SUPPORTS_SYM||LA196_0==TILDE||(LA196_0 >= TOPCENTER_SYM && LA196_0 <= TOPRIGHT_SYM)||LA196_0==VARIABLE||LA196_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt196=1;
			}
			} finally {dbg.exitDecision(196);}

			switch (alt196) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:53: declarations
					{
					dbg.location(668,53);
					pushFollow(FOLLOW_declarations_in_margin3424);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(196);}
			dbg.location(668,67);
			match(input,RBRACE,FOLLOW_RBRACE_in_margin3427); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(669, 7);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "margin");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "margin"



	// $ANTLR start "margin_sym"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:671:1: margin_sym : ( TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM );
	public final void margin_sym() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "margin_sym");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(671, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:2: ( TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(672,2);
			if ( (input.LA(1) >= BOTTOMCENTER_SYM && input.LA(1) <= BOTTOMRIGHT_SYM)||(input.LA(1) >= LEFTBOTTOM_SYM && input.LA(1) <= LEFTTOP_SYM)||(input.LA(1) >= RIGHTBOTTOM_SYM && input.LA(1) <= RIGHTTOP_SYM)||(input.LA(1) >= TOPCENTER_SYM && input.LA(1) <= TOPRIGHT_SYM) ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(689, 7);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "margin_sym");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "margin_sym"



	// $ANTLR start "pseudoPage"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:691:1: pseudoPage : COLON IDENT ;
	public final void pseudoPage() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "pseudoPage");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(691, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:692:5: ( COLON IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:692:7: COLON IDENT
			{
			dbg.location(692,7);
			match(input,COLON,FOLLOW_COLON_in_pseudoPage3636); if (state.failed) return;dbg.location(692,13);
			match(input,IDENT,FOLLOW_IDENT_in_pseudoPage3638); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(693, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "pseudoPage");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "pseudoPage"



	// $ANTLR start "operator"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:695:1: operator : ( SOLIDUS | COMMA );
	public final void operator() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "operator");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(695, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:5: ( SOLIDUS | COMMA )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(696,5);
			if ( input.LA(1)==COMMA||input.LA(1)==SOLIDUS ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(698, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "operator");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "operator"



	// $ANTLR start "unaryOperator"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:700:1: unaryOperator : ( MINUS | PLUS );
	public final void unaryOperator() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "unaryOperator");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(700, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:701:5: ( MINUS | PLUS )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(701,5);
			if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(703, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "unaryOperator");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "unaryOperator"



	// $ANTLR start "property"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:705:1: property : ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp | VARIABLE | IDENT | GEN |{...}? cp_variable );
	public final void property() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "property");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(705, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:706:5: ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp | VARIABLE | IDENT | GEN |{...}? cp_variable )
			int alt197=6;
			try { dbg.enterDecision(197, decisionCanBacktrack[197]);

			switch ( input.LA(1) ) {
			case IDENT:
				{
				switch ( input.LA(2) ) {
				case DOT:
					{
					alt197=6;
					}
					break;
				case HASH_SYMBOL:
					{
					alt197=1;
					}
					break;
				case AT_SIGN:
					{
					alt197=2;
					}
					break;
				case COLON:
				case COMMENT:
				case NL:
				case WS:
					{
					alt197=4;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 197, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case HASH_SYMBOL:
				{
				alt197=1;
				}
				break;
			case AT_SIGN:
				{
				alt197=2;
				}
				break;
			case VARIABLE:
				{
				alt197=3;
				}
				break;
			case MINUS:
				{
				int LA197_5 = input.LA(2);
				if ( (LA197_5==HASH_SYMBOL) ) {
					alt197=1;
				}
				else if ( (LA197_5==AT_SIGN) ) {
					alt197=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 197, 5, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case GEN:
				{
				alt197=5;
				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_VAR:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				alt197=6;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 197, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(197);}

			switch (alt197) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:710:5: {...}? sass_selector_interpolation_exp
					{
					dbg.location(710,5);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "property", "isScssSource()");
					}dbg.location(710,23);
					pushFollow(FOLLOW_sass_selector_interpolation_exp_in_property3722);
					sass_selector_interpolation_exp();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:711:7: {...}? less_selector_interpolation_exp
					{
					dbg.location(711,7);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "property", "isLessSource()");
					}dbg.location(711,25);
					pushFollow(FOLLOW_less_selector_interpolation_exp_in_property3732);
					less_selector_interpolation_exp();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:712:7: VARIABLE
					{
					dbg.location(712,7);
					match(input,VARIABLE,FOLLOW_VARIABLE_in_property3740); if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:713:7: IDENT
					{
					dbg.location(713,7);
					match(input,IDENT,FOLLOW_IDENT_in_property3748); if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:714:7: GEN
					{
					dbg.location(714,7);
					match(input,GEN,FOLLOW_GEN_in_property3756); if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:715:7: {...}? cp_variable
					{
					dbg.location(715,7);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "property", "isCssPreprocessorSource()");
					}dbg.location(715,36);
					pushFollow(FOLLOW_cp_variable_in_property3766);
					cp_variable();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(COLON));
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(717, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "property");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "property"



	// $ANTLR start "sass_map"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:722:1: sass_map : sass_map_name COLON ( ws )? LPAREN ( ws )? syncToFollow ( sass_map_pairs )? RPAREN ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )* ;
	public final void sass_map() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_map");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(722, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:723:5: ( sass_map_name COLON ( ws )? LPAREN ( ws )? syncToFollow ( sass_map_pairs )? RPAREN ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:724:5: sass_map_name COLON ( ws )? LPAREN ( ws )? syncToFollow ( sass_map_pairs )? RPAREN ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )*
			{
			dbg.location(724,5);
			pushFollow(FOLLOW_sass_map_name_in_sass_map3793);
			sass_map_name();
			state._fsp--;
			if (state.failed) return;dbg.location(724,19);
			match(input,COLON,FOLLOW_COLON_in_sass_map3795); if (state.failed) return;dbg.location(724,25);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:724:25: ( ws )?
			int alt198=2;
			try { dbg.enterSubRule(198);
			try { dbg.enterDecision(198, decisionCanBacktrack[198]);

			int LA198_0 = input.LA(1);
			if ( (LA198_0==COMMENT||LA198_0==NL||LA198_0==WS) ) {
				alt198=1;
			}
			} finally {dbg.exitDecision(198);}

			switch (alt198) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:724:25: ws
					{
					dbg.location(724,25);
					pushFollow(FOLLOW_ws_in_sass_map3797);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(198);}
			dbg.location(724,29);
			match(input,LPAREN,FOLLOW_LPAREN_in_sass_map3800); if (state.failed) return;dbg.location(724,36);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:724:36: ( ws )?
			int alt199=2;
			try { dbg.enterSubRule(199);
			try { dbg.enterDecision(199, decisionCanBacktrack[199]);

			int LA199_0 = input.LA(1);
			if ( (LA199_0==COMMENT||LA199_0==NL||LA199_0==WS) ) {
				alt199=1;
			}
			} finally {dbg.exitDecision(199);}

			switch (alt199) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:724:36: ws
					{
					dbg.location(724,36);
					pushFollow(FOLLOW_ws_in_sass_map3802);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(199);}
			dbg.location(724,40);
			pushFollow(FOLLOW_syncToFollow_in_sass_map3805);
			syncToFollow();
			state._fsp--;
			if (state.failed) return;dbg.location(726,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:726:9: ( sass_map_pairs )?
			int alt200=2;
			try { dbg.enterSubRule(200);
			try { dbg.enterDecision(200, decisionCanBacktrack[200]);

			int LA200_0 = input.LA(1);
			if ( ((LA200_0 >= AT_IDENT && LA200_0 <= AT_SIGN)||(LA200_0 >= BOTTOMCENTER_SYM && LA200_0 <= BOTTOMRIGHT_SYM)||LA200_0==CHARSET_SYM||LA200_0==COMMA||LA200_0==COUNTER_STYLE_SYM||LA200_0==FONT_FACE_SYM||LA200_0==GEN||LA200_0==HASH_SYMBOL||LA200_0==IDENT||LA200_0==IMPORT_SYM||(LA200_0 >= LEFTBOTTOM_SYM && LA200_0 <= LEFTTOP_SYM)||(LA200_0 >= MEDIA_SYM && LA200_0 <= MOZ_DOCUMENT_SYM)||LA200_0==NAMESPACE_SYM||LA200_0==NUMBER||LA200_0==PAGE_SYM||(LA200_0 >= RIGHTBOTTOM_SYM && LA200_0 <= RIGHTTOP_SYM)||(LA200_0 >= SASS_AT_ROOT && LA200_0 <= SASS_DEBUG)||(LA200_0 >= SASS_EACH && LA200_0 <= SASS_ELSE)||LA200_0==SASS_EXTEND||(LA200_0 >= SASS_FOR && LA200_0 <= SASS_FUNCTION)||(LA200_0 >= SASS_IF && LA200_0 <= SASS_MIXIN)||(LA200_0 >= SASS_RETURN && LA200_0 <= SASS_WHILE)||LA200_0==STRING||(LA200_0 >= TOPCENTER_SYM && LA200_0 <= TOPRIGHT_SYM)||LA200_0==VARIABLE||LA200_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt200=1;
			}
			} finally {dbg.exitDecision(200);}

			switch (alt200) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:726:9: sass_map_pairs
					{
					dbg.location(726,9);
					pushFollow(FOLLOW_sass_map_pairs_in_sass_map3824);
					sass_map_pairs();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(200);}
			dbg.location(727,5);
			match(input,RPAREN,FOLLOW_RPAREN_in_sass_map3831); if (state.failed) return;dbg.location(727,12);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:727:12: ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )*
			try { dbg.enterSubRule(203);

			loop203:
			while (true) {
				int alt203=3;
				try { dbg.enterDecision(203, decisionCanBacktrack[203]);

				try {
					isCyclicDecision = true;
					alt203 = dfa203.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(203);}

				switch (alt203) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:727:13: ( ( ws )? SASS_DEFAULT )
					{
					dbg.location(727,13);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:727:13: ( ( ws )? SASS_DEFAULT )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:727:14: ( ws )? SASS_DEFAULT
					{
					dbg.location(727,14);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:727:14: ( ws )?
					int alt201=2;
					try { dbg.enterSubRule(201);
					try { dbg.enterDecision(201, decisionCanBacktrack[201]);

					int LA201_0 = input.LA(1);
					if ( (LA201_0==COMMENT||LA201_0==NL||LA201_0==WS) ) {
						alt201=1;
					}
					} finally {dbg.exitDecision(201);}

					switch (alt201) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:727:14: ws
							{
							dbg.location(727,14);
							pushFollow(FOLLOW_ws_in_sass_map3835);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(201);}
					dbg.location(727,18);
					match(input,SASS_DEFAULT,FOLLOW_SASS_DEFAULT_in_sass_map3838); if (state.failed) return;
					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:727:34: ( ( ws )? SASS_GLOBAL )
					{
					dbg.location(727,34);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:727:34: ( ( ws )? SASS_GLOBAL )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:727:35: ( ws )? SASS_GLOBAL
					{
					dbg.location(727,35);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:727:35: ( ws )?
					int alt202=2;
					try { dbg.enterSubRule(202);
					try { dbg.enterDecision(202, decisionCanBacktrack[202]);

					int LA202_0 = input.LA(1);
					if ( (LA202_0==COMMENT||LA202_0==NL||LA202_0==WS) ) {
						alt202=1;
					}
					} finally {dbg.exitDecision(202);}

					switch (alt202) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:727:35: ws
							{
							dbg.location(727,35);
							pushFollow(FOLLOW_ws_in_sass_map3844);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(202);}
					dbg.location(727,39);
					match(input,SASS_GLOBAL,FOLLOW_SASS_GLOBAL_in_sass_map3847); if (state.failed) return;
					}

					}
					break;

				default :
					break loop203;
				}
			}
			} finally {dbg.exitSubRule(203);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(728, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_map");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_map"



	// $ANTLR start "sass_map_name"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:730:1: sass_map_name : cp_variable ;
	public final void sass_map_name() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_map_name");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(730, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:731:5: ( cp_variable )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:732:5: cp_variable
			{
			dbg.location(732,5);
			pushFollow(FOLLOW_cp_variable_in_sass_map_name3871);
			cp_variable();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(733, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_map_name");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_map_name"



	// $ANTLR start "sass_map_pairs"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:735:1: sass_map_pairs : ( ( sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )? ) | ( COMMA ( ws )? ) )+ ;
	public final void sass_map_pairs() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_map_pairs");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(735, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:736:5: ( ( ( sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )? ) | ( COMMA ( ws )? ) )+ )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:737:5: ( ( sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )? ) | ( COMMA ( ws )? ) )+
			{
			dbg.location(737,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:737:5: ( ( sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )? ) | ( COMMA ( ws )? ) )+
			int cnt208=0;
			try { dbg.enterSubRule(208);

			loop208:
			while (true) {
				int alt208=3;
				try { dbg.enterDecision(208, decisionCanBacktrack[208]);

				int LA208_0 = input.LA(1);
				if ( ((LA208_0 >= AT_IDENT && LA208_0 <= AT_SIGN)||(LA208_0 >= BOTTOMCENTER_SYM && LA208_0 <= BOTTOMRIGHT_SYM)||LA208_0==CHARSET_SYM||LA208_0==COUNTER_STYLE_SYM||LA208_0==FONT_FACE_SYM||LA208_0==GEN||LA208_0==HASH_SYMBOL||LA208_0==IDENT||LA208_0==IMPORT_SYM||(LA208_0 >= LEFTBOTTOM_SYM && LA208_0 <= LEFTTOP_SYM)||(LA208_0 >= MEDIA_SYM && LA208_0 <= MOZ_DOCUMENT_SYM)||LA208_0==NAMESPACE_SYM||LA208_0==NUMBER||LA208_0==PAGE_SYM||(LA208_0 >= RIGHTBOTTOM_SYM && LA208_0 <= RIGHTTOP_SYM)||(LA208_0 >= SASS_AT_ROOT && LA208_0 <= SASS_DEBUG)||(LA208_0 >= SASS_EACH && LA208_0 <= SASS_ELSE)||LA208_0==SASS_EXTEND||(LA208_0 >= SASS_FOR && LA208_0 <= SASS_FUNCTION)||(LA208_0 >= SASS_IF && LA208_0 <= SASS_MIXIN)||(LA208_0 >= SASS_RETURN && LA208_0 <= SASS_WHILE)||LA208_0==STRING||(LA208_0 >= TOPCENTER_SYM && LA208_0 <= TOPRIGHT_SYM)||LA208_0==VARIABLE||LA208_0==WEBKIT_KEYFRAMES_SYM) ) {
					alt208=1;
				}
				else if ( (LA208_0==COMMA) ) {
					alt208=2;
				}

				} finally {dbg.exitDecision(208);}

				switch (alt208) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:738:10: ( sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )? )
					{
					dbg.location(738,10);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:738:10: ( sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )? )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:738:12: sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )?
					{
					dbg.location(738,12);
					pushFollow(FOLLOW_sass_map_pair_in_sass_map_pairs3905);
					sass_map_pair();
					state._fsp--;
					if (state.failed) return;dbg.location(738,26);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:738:26: ( ( ( ws )? COMMA )=> ( ws )? COMMA )?
					int alt205=2;
					try { dbg.enterSubRule(205);
					try { dbg.enterDecision(205, decisionCanBacktrack[205]);

					try {
						isCyclicDecision = true;
						alt205 = dfa205.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(205);}

					switch (alt205) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:738:27: ( ( ws )? COMMA )=> ( ws )? COMMA
							{
							dbg.location(738,40);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:738:40: ( ws )?
							int alt204=2;
							try { dbg.enterSubRule(204);
							try { dbg.enterDecision(204, decisionCanBacktrack[204]);

							int LA204_0 = input.LA(1);
							if ( (LA204_0==COMMENT||LA204_0==NL||LA204_0==WS) ) {
								alt204=1;
							}
							} finally {dbg.exitDecision(204);}

							switch (alt204) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:738:40: ws
									{
									dbg.location(738,40);
									pushFollow(FOLLOW_ws_in_sass_map_pairs3915);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(204);}
							dbg.location(738,44);
							match(input,COMMA,FOLLOW_COMMA_in_sass_map_pairs3918); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(205);}
					dbg.location(738,52);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:738:52: ( ws )?
					int alt206=2;
					try { dbg.enterSubRule(206);
					try { dbg.enterDecision(206, decisionCanBacktrack[206]);

					int LA206_0 = input.LA(1);
					if ( (LA206_0==COMMENT||LA206_0==NL||LA206_0==WS) ) {
						alt206=1;
					}
					} finally {dbg.exitDecision(206);}

					switch (alt206) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:738:52: ws
							{
							dbg.location(738,52);
							pushFollow(FOLLOW_ws_in_sass_map_pairs3922);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(206);}

					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:740:10: ( COMMA ( ws )? )
					{
					dbg.location(740,10);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:740:10: ( COMMA ( ws )? )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:740:12: COMMA ( ws )?
					{
					dbg.location(740,12);
					match(input,COMMA,FOLLOW_COMMA_in_sass_map_pairs3949); if (state.failed) return;dbg.location(740,18);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:740:18: ( ws )?
					int alt207=2;
					try { dbg.enterSubRule(207);
					try { dbg.enterDecision(207, decisionCanBacktrack[207]);

					int LA207_0 = input.LA(1);
					if ( (LA207_0==COMMENT||LA207_0==NL||LA207_0==WS) ) {
						alt207=1;
					}
					} finally {dbg.exitDecision(207);}

					switch (alt207) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:740:18: ws
							{
							dbg.location(740,18);
							pushFollow(FOLLOW_ws_in_sass_map_pairs3951);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(207);}

					}

					}
					break;

				default :
					if ( cnt208 >= 1 ) break loop208;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(208, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt208++;
			}
			} finally {dbg.exitSubRule(208);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(742, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_map_pairs");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_map_pairs"



	// $ANTLR start "sass_map_pair"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:744:1: sass_map_pair : ( NUMBER | ( STRING ( ( ws )? STRING )* ) | ( ( function )=> function ) | property | sass_map ) ( ws )? COLON ( ws )? cp_expression ( ( ws )? prio )? ;
	public final void sass_map_pair() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_map_pair");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(744, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:745:5: ( ( NUMBER | ( STRING ( ( ws )? STRING )* ) | ( ( function )=> function ) | property | sass_map ) ( ws )? COLON ( ws )? cp_expression ( ( ws )? prio )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:746:9: ( NUMBER | ( STRING ( ( ws )? STRING )* ) | ( ( function )=> function ) | property | sass_map ) ( ws )? COLON ( ws )? cp_expression ( ( ws )? prio )?
			{
			dbg.location(746,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:746:9: ( NUMBER | ( STRING ( ( ws )? STRING )* ) | ( ( function )=> function ) | property | sass_map )
			int alt211=5;
			try { dbg.enterSubRule(211);
			try { dbg.enterDecision(211, decisionCanBacktrack[211]);

			switch ( input.LA(1) ) {
			case NUMBER:
				{
				alt211=1;
				}
				break;
			case STRING:
				{
				alt211=2;
				}
				break;
			case IDENT:
				{
				int LA211_3 = input.LA(2);
				if ( (synpred24_Css3()) ) {
					alt211=3;
				}
				else if ( (true) ) {
					alt211=4;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt211=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 211, 3, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT_SIGN:
			case GEN:
			case HASH_SYMBOL:
			case MINUS:
			case VARIABLE:
				{
				alt211=4;
				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				int LA211_9 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt211=4;
				}
				else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
					alt211=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 211, 9, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_VAR:
				{
				int LA211_10 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt211=4;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt211=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 211, 10, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 211, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(211);}

			switch (alt211) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:746:10: NUMBER
					{
					dbg.location(746,10);
					match(input,NUMBER,FOLLOW_NUMBER_in_sass_map_pair3987); if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:746:17: ( STRING ( ( ws )? STRING )* )
					{
					dbg.location(746,17);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:746:17: ( STRING ( ( ws )? STRING )* )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:746:18: STRING ( ( ws )? STRING )*
					{
					dbg.location(746,18);
					match(input,STRING,FOLLOW_STRING_in_sass_map_pair3990); if (state.failed) return;dbg.location(746,25);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:746:25: ( ( ws )? STRING )*
					try { dbg.enterSubRule(210);

					loop210:
					while (true) {
						int alt210=2;
						try { dbg.enterDecision(210, decisionCanBacktrack[210]);

						try {
							isCyclicDecision = true;
							alt210 = dfa210.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(210);}

						switch (alt210) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:746:26: ( ws )? STRING
							{
							dbg.location(746,26);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:746:26: ( ws )?
							int alt209=2;
							try { dbg.enterSubRule(209);
							try { dbg.enterDecision(209, decisionCanBacktrack[209]);

							int LA209_0 = input.LA(1);
							if ( (LA209_0==COMMENT||LA209_0==NL||LA209_0==WS) ) {
								alt209=1;
							}
							} finally {dbg.exitDecision(209);}

							switch (alt209) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:746:26: ws
									{
									dbg.location(746,26);
									pushFollow(FOLLOW_ws_in_sass_map_pair3993);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(209);}
							dbg.location(746,30);
							match(input,STRING,FOLLOW_STRING_in_sass_map_pair3996); if (state.failed) return;
							}
							break;

						default :
							break loop210;
						}
					}
					} finally {dbg.exitSubRule(210);}

					}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:746:40: ( ( function )=> function )
					{
					dbg.location(746,40);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:746:40: ( ( function )=> function )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:746:41: ( function )=> function
					{
					dbg.location(746,53);
					pushFollow(FOLLOW_function_in_sass_map_pair4006);
					function();
					state._fsp--;
					if (state.failed) return;
					}

					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:746:63: property
					{
					dbg.location(746,63);
					pushFollow(FOLLOW_property_in_sass_map_pair4009);
					property();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:746:72: sass_map
					{
					dbg.location(746,72);
					pushFollow(FOLLOW_sass_map_in_sass_map_pair4011);
					sass_map();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(211);}
			dbg.location(746,82);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:746:82: ( ws )?
			int alt212=2;
			try { dbg.enterSubRule(212);
			try { dbg.enterDecision(212, decisionCanBacktrack[212]);

			int LA212_0 = input.LA(1);
			if ( (LA212_0==COMMENT||LA212_0==NL||LA212_0==WS) ) {
				alt212=1;
			}
			} finally {dbg.exitDecision(212);}

			switch (alt212) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:746:82: ws
					{
					dbg.location(746,82);
					pushFollow(FOLLOW_ws_in_sass_map_pair4014);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(212);}
			dbg.location(746,86);
			match(input,COLON,FOLLOW_COLON_in_sass_map_pair4017); if (state.failed) return;dbg.location(746,92);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:746:92: ( ws )?
			int alt213=2;
			try { dbg.enterSubRule(213);
			try { dbg.enterDecision(213, decisionCanBacktrack[213]);

			int LA213_0 = input.LA(1);
			if ( (LA213_0==COMMENT||LA213_0==NL||LA213_0==WS) ) {
				alt213=1;
			}
			} finally {dbg.exitDecision(213);}

			switch (alt213) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:746:92: ws
					{
					dbg.location(746,92);
					pushFollow(FOLLOW_ws_in_sass_map_pair4019);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(213);}
			dbg.location(746,96);
			pushFollow(FOLLOW_cp_expression_in_sass_map_pair4022);
			cp_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(746,110);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:746:110: ( ( ws )? prio )?
			int alt215=2;
			try { dbg.enterSubRule(215);
			try { dbg.enterDecision(215, decisionCanBacktrack[215]);

			try {
				isCyclicDecision = true;
				alt215 = dfa215.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(215);}

			switch (alt215) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:746:111: ( ws )? prio
					{
					dbg.location(746,111);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:746:111: ( ws )?
					int alt214=2;
					try { dbg.enterSubRule(214);
					try { dbg.enterDecision(214, decisionCanBacktrack[214]);

					int LA214_0 = input.LA(1);
					if ( (LA214_0==COMMENT||LA214_0==NL||LA214_0==WS) ) {
						alt214=1;
					}
					} finally {dbg.exitDecision(214);}

					switch (alt214) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:746:111: ws
							{
							dbg.location(746,111);
							pushFollow(FOLLOW_ws_in_sass_map_pair4025);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(214);}
					dbg.location(746,115);
					pushFollow(FOLLOW_prio_in_sass_map_pair4028);
					prio();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(215);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(747, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_map_pair");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_map_pair"



	// $ANTLR start "rule"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:749:1: rule : ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? {...}? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
	public final void rule() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "rule");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(749, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:750:5: ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? {...}? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:751:9: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? {...}? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
			{
			dbg.location(751,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:751:9: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? {...}? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup )
			int alt221=3;
			try { dbg.enterSubRule(221);
			try { dbg.enterDecision(221, decisionCanBacktrack[221]);

			try {
				isCyclicDecision = true;
				alt221 = dfa221.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(221);}

			switch (alt221) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:752:13: ( SASS_AT_ROOT ( ws selectorsGroup )? )
					{
					dbg.location(752,13);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:752:13: ( SASS_AT_ROOT ( ws selectorsGroup )? )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:752:14: SASS_AT_ROOT ( ws selectorsGroup )?
					{
					dbg.location(752,14);
					match(input,SASS_AT_ROOT,FOLLOW_SASS_AT_ROOT_in_rule4070); if (state.failed) return;dbg.location(752,27);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:752:27: ( ws selectorsGroup )?
					int alt216=2;
					try { dbg.enterSubRule(216);
					try { dbg.enterDecision(216, decisionCanBacktrack[216]);

					try {
						isCyclicDecision = true;
						alt216 = dfa216.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(216);}

					switch (alt216) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:752:28: ws selectorsGroup
							{
							dbg.location(752,28);
							pushFollow(FOLLOW_ws_in_rule4073);
							ws();
							state._fsp--;
							if (state.failed) return;dbg.location(752,31);
							pushFollow(FOLLOW_selectorsGroup_in_rule4075);
							selectorsGroup();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(216);}

					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:753:15: ( SASS_AT_ROOT ws LPAREN ( ws )? {...}? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN )
					{
					dbg.location(753,15);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:753:15: ( SASS_AT_ROOT ws LPAREN ( ws )? {...}? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:753:16: SASS_AT_ROOT ws LPAREN ( ws )? {...}? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN
					{
					dbg.location(753,16);
					match(input,SASS_AT_ROOT,FOLLOW_SASS_AT_ROOT_in_rule4096); if (state.failed) return;dbg.location(753,29);
					pushFollow(FOLLOW_ws_in_rule4098);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(753,32);
					match(input,LPAREN,FOLLOW_LPAREN_in_rule4100); if (state.failed) return;dbg.location(753,39);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:753:39: ( ws )?
					int alt217=2;
					try { dbg.enterSubRule(217);
					try { dbg.enterDecision(217, decisionCanBacktrack[217]);

					int LA217_0 = input.LA(1);
					if ( (LA217_0==COMMENT||LA217_0==NL||LA217_0==WS) ) {
						alt217=1;
					}
					} finally {dbg.exitDecision(217);}

					switch (alt217) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:753:39: ws
							{
							dbg.location(753,39);
							pushFollow(FOLLOW_ws_in_rule4102);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(217);}
					dbg.location(753,43);
					if ( !(evalPredicate(tokenNameEquals("without") || tokenNameEquals("with"),"tokenNameEquals(\"without\") || tokenNameEquals(\"with\")")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "rule", "tokenNameEquals(\"without\") || tokenNameEquals(\"with\")");
					}dbg.location(753,100);
					match(input,IDENT,FOLLOW_IDENT_in_rule4107); if (state.failed) return;dbg.location(753,128);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:753:128: ( ws )?
					int alt218=2;
					try { dbg.enterSubRule(218);
					try { dbg.enterDecision(218, decisionCanBacktrack[218]);

					int LA218_0 = input.LA(1);
					if ( (LA218_0==COMMENT||LA218_0==NL||LA218_0==WS) ) {
						alt218=1;
					}
					} finally {dbg.exitDecision(218);}

					switch (alt218) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:753:128: ws
							{
							dbg.location(753,128);
							pushFollow(FOLLOW_ws_in_rule4111);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(218);}
					dbg.location(753,132);
					match(input,COLON,FOLLOW_COLON_in_rule4114); if (state.failed) return;dbg.location(753,138);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:753:138: ( ws )?
					int alt219=2;
					try { dbg.enterSubRule(219);
					try { dbg.enterDecision(219, decisionCanBacktrack[219]);

					int LA219_0 = input.LA(1);
					if ( (LA219_0==COMMENT||LA219_0==NL||LA219_0==WS) ) {
						alt219=1;
					}
					} finally {dbg.exitDecision(219);}

					switch (alt219) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:753:138: ws
							{
							dbg.location(753,138);
							pushFollow(FOLLOW_ws_in_rule4116);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(219);}
					dbg.location(753,142);
					match(input,IDENT,FOLLOW_IDENT_in_rule4119); if (state.failed) return;dbg.location(753,148);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:753:148: ( ws )?
					int alt220=2;
					try { dbg.enterSubRule(220);
					try { dbg.enterDecision(220, decisionCanBacktrack[220]);

					int LA220_0 = input.LA(1);
					if ( (LA220_0==COMMENT||LA220_0==NL||LA220_0==WS) ) {
						alt220=1;
					}
					} finally {dbg.exitDecision(220);}

					switch (alt220) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:753:148: ws
							{
							dbg.location(753,148);
							pushFollow(FOLLOW_ws_in_rule4121);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(220);}
					dbg.location(753,152);
					match(input,RPAREN,FOLLOW_RPAREN_in_rule4124); if (state.failed) return;
					}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:754:15: selectorsGroup
					{
					dbg.location(754,15);
					pushFollow(FOLLOW_selectorsGroup_in_rule4142);
					selectorsGroup();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(221);}
			dbg.location(755,11);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:755:11: ( ws )?
			int alt222=2;
			try { dbg.enterSubRule(222);
			try { dbg.enterDecision(222, decisionCanBacktrack[222]);

			int LA222_0 = input.LA(1);
			if ( (LA222_0==COMMENT||LA222_0==NL||LA222_0==WS) ) {
				alt222=1;
			}
			} finally {dbg.exitDecision(222);}

			switch (alt222) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:755:11: ws
					{
					dbg.location(755,11);
					pushFollow(FOLLOW_ws_in_rule4154);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(222);}
			dbg.location(756,5);
			match(input,LBRACE,FOLLOW_LBRACE_in_rule4161); if (state.failed) return;dbg.location(756,12);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:756:12: ( ws )?
			int alt223=2;
			try { dbg.enterSubRule(223);
			try { dbg.enterDecision(223, decisionCanBacktrack[223]);

			int LA223_0 = input.LA(1);
			if ( (LA223_0==COMMENT||LA223_0==NL||LA223_0==WS) ) {
				alt223=1;
			}
			} finally {dbg.exitDecision(223);}

			switch (alt223) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:756:12: ws
					{
					dbg.location(756,12);
					pushFollow(FOLLOW_ws_in_rule4163);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(223);}
			dbg.location(756,16);
			pushFollow(FOLLOW_syncToFollow_in_rule4166);
			syncToFollow();
			state._fsp--;
			if (state.failed) return;dbg.location(757,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:757:9: ( declarations )?
			int alt224=2;
			try { dbg.enterSubRule(224);
			try { dbg.enterDecision(224, decisionCanBacktrack[224]);

			int LA224_0 = input.LA(1);
			if ( ((LA224_0 >= AT_IDENT && LA224_0 <= AT_SIGN)||(LA224_0 >= BOTTOMCENTER_SYM && LA224_0 <= BOTTOMRIGHT_SYM)||(LA224_0 >= CHARSET_SYM && LA224_0 <= COLON)||LA224_0==COUNTER_STYLE_SYM||(LA224_0 >= DCOLON && LA224_0 <= DOT)||LA224_0==FONT_FACE_SYM||(LA224_0 >= GEN && LA224_0 <= GREATER)||(LA224_0 >= HASH && LA224_0 <= HASH_SYMBOL)||LA224_0==IDENT||LA224_0==IMPORT_SYM||LA224_0==LAYER_SYM||(LA224_0 >= LBRACKET && LA224_0 <= LEFTTOP_SYM)||LA224_0==LESS_AND||(LA224_0 >= MEDIA_SYM && LA224_0 <= MOZ_DOCUMENT_SYM)||LA224_0==NAMESPACE_SYM||LA224_0==PAGE_SYM||(LA224_0 >= PIPE && LA224_0 <= PLUS)||(LA224_0 >= RIGHTBOTTOM_SYM && LA224_0 <= RIGHTTOP_SYM)||(LA224_0 >= SASS_AT_ROOT && LA224_0 <= SASS_DEBUG)||(LA224_0 >= SASS_EACH && LA224_0 <= SASS_ELSE)||(LA224_0 >= SASS_ERROR && LA224_0 <= SASS_FUNCTION)||(LA224_0 >= SASS_IF && LA224_0 <= SASS_MIXIN)||(LA224_0 >= SASS_RETURN && LA224_0 <= SEMI)||LA224_0==STAR||LA224_0==SUPPORTS_SYM||LA224_0==TILDE||(LA224_0 >= TOPCENTER_SYM && LA224_0 <= TOPRIGHT_SYM)||LA224_0==VARIABLE||LA224_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt224=1;
			}
			} finally {dbg.exitDecision(224);}

			switch (alt224) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:757:9: declarations
					{
					dbg.location(757,9);
					pushFollow(FOLLOW_declarations_in_rule4176);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(224);}
			dbg.location(758,5);
			match(input,RBRACE,FOLLOW_RBRACE_in_rule4183); if (state.failed) return;
			}

		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(RBRACE));
			        input.consume(); //consume the RBRACE as well
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(759, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "rule");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "rule"



	// $ANTLR start "declarations"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:766:1: declarations : ( ( SEMI ( ws )? )* declaration ( ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws ) declaration )* ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws )? | ( SEMI ( ws )? )+ );
	public final void declarations() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "declarations");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(766, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:767:5: ( ( SEMI ( ws )? )* declaration ( ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws ) declaration )* ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws )? | ( SEMI ( ws )? )+ )
			int alt238=2;
			try { dbg.enterDecision(238, decisionCanBacktrack[238]);

			try {
				isCyclicDecision = true;
				alt238 = dfa238.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(238);}

			switch (alt238) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:8: ( SEMI ( ws )? )* declaration ( ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws ) declaration )* ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws )?
					{
					dbg.location(768,8);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:8: ( SEMI ( ws )? )*
					try { dbg.enterSubRule(226);

					loop226:
					while (true) {
						int alt226=2;
						try { dbg.enterDecision(226, decisionCanBacktrack[226]);

						int LA226_0 = input.LA(1);
						if ( (LA226_0==SEMI) ) {
							alt226=1;
						}

						} finally {dbg.exitDecision(226);}

						switch (alt226) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:9: SEMI ( ws )?
							{
							dbg.location(768,9);
							match(input,SEMI,FOLLOW_SEMI_in_declarations4217); if (state.failed) return;dbg.location(768,14);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:14: ( ws )?
							int alt225=2;
							try { dbg.enterSubRule(225);
							try { dbg.enterDecision(225, decisionCanBacktrack[225]);

							int LA225_0 = input.LA(1);
							if ( (LA225_0==COMMENT||LA225_0==NL||LA225_0==WS) ) {
								alt225=1;
							}
							} finally {dbg.exitDecision(225);}

							switch (alt225) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:14: ws
									{
									dbg.location(768,14);
									pushFollow(FOLLOW_ws_in_declarations4219);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(225);}

							}
							break;

						default :
							break loop226;
						}
					}
					} finally {dbg.exitSubRule(226);}
					dbg.location(768,21);
					pushFollow(FOLLOW_declaration_in_declarations4225);
					declaration();
					state._fsp--;
					if (state.failed) return;dbg.location(768,33);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:33: ( ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws ) declaration )*
					try { dbg.enterSubRule(231);

					loop231:
					while (true) {
						int alt231=2;
						try { dbg.enterDecision(231, decisionCanBacktrack[231]);

						try {
							isCyclicDecision = true;
							alt231 = dfa231.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(231);}

						switch (alt231) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:34: ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws ) declaration
							{
							dbg.location(768,34);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:34: ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws )
							int alt230=2;
							try { dbg.enterSubRule(230);
							try { dbg.enterDecision(230, decisionCanBacktrack[230]);

							try {
								isCyclicDecision = true;
								alt230 = dfa230.predict(input);
							}
							catch (NoViableAltException nvae) {
								dbg.recognitionException(nvae);
								throw nvae;
							}
							} finally {dbg.exitDecision(230);}

							switch (alt230) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:35: ( ( ws )? ( SEMI ( ws )? )+ )
									{
									dbg.location(768,35);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:35: ( ( ws )? ( SEMI ( ws )? )+ )
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:36: ( ws )? ( SEMI ( ws )? )+
									{
									dbg.location(768,36);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:36: ( ws )?
									int alt227=2;
									try { dbg.enterSubRule(227);
									try { dbg.enterDecision(227, decisionCanBacktrack[227]);

									int LA227_0 = input.LA(1);
									if ( (LA227_0==COMMENT||LA227_0==NL||LA227_0==WS) ) {
										alt227=1;
									}
									} finally {dbg.exitDecision(227);}

									switch (alt227) {
										case 1 :
											dbg.enterAlt(1);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:36: ws
											{
											dbg.location(768,36);
											pushFollow(FOLLOW_ws_in_declarations4230);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(227);}
									dbg.location(768,40);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:40: ( SEMI ( ws )? )+
									int cnt229=0;
									try { dbg.enterSubRule(229);

									loop229:
									while (true) {
										int alt229=2;
										try { dbg.enterDecision(229, decisionCanBacktrack[229]);

										int LA229_0 = input.LA(1);
										if ( (LA229_0==SEMI) ) {
											alt229=1;
										}

										} finally {dbg.exitDecision(229);}

										switch (alt229) {
										case 1 :
											dbg.enterAlt(1);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:41: SEMI ( ws )?
											{
											dbg.location(768,41);
											match(input,SEMI,FOLLOW_SEMI_in_declarations4234); if (state.failed) return;dbg.location(768,46);
											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:46: ( ws )?
											int alt228=2;
											try { dbg.enterSubRule(228);
											try { dbg.enterDecision(228, decisionCanBacktrack[228]);

											int LA228_0 = input.LA(1);
											if ( (LA228_0==COMMENT||LA228_0==NL||LA228_0==WS) ) {
												alt228=1;
											}
											} finally {dbg.exitDecision(228);}

											switch (alt228) {
												case 1 :
													dbg.enterAlt(1);

													// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:46: ws
													{
													dbg.location(768,46);
													pushFollow(FOLLOW_ws_in_declarations4236);
													ws();
													state._fsp--;
													if (state.failed) return;
													}
													break;

											}
											} finally {dbg.exitSubRule(228);}

											}
											break;

										default :
											if ( cnt229 >= 1 ) break loop229;
											if (state.backtracking>0) {state.failed=true; return;}
											EarlyExitException eee = new EarlyExitException(229, input);
											dbg.recognitionException(eee);

											throw eee;
										}
										cnt229++;
									}
									} finally {dbg.exitSubRule(229);}

									}

									}
									break;
								case 2 :
									dbg.enterAlt(2);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:53: ws
									{
									dbg.location(768,53);
									pushFollow(FOLLOW_ws_in_declarations4242);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(230);}
							dbg.location(768,57);
							pushFollow(FOLLOW_declaration_in_declarations4245);
							declaration();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop231;
						}
					}
					} finally {dbg.exitSubRule(231);}
					dbg.location(768,71);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:71: ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws )?
					int alt235=3;
					try { dbg.enterSubRule(235);
					try { dbg.enterDecision(235, decisionCanBacktrack[235]);

					try {
						isCyclicDecision = true;
						alt235 = dfa235.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(235);}

					switch (alt235) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:72: ( ( ws )? ( SEMI ( ws )? )+ )
							{
							dbg.location(768,72);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:72: ( ( ws )? ( SEMI ( ws )? )+ )
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:73: ( ws )? ( SEMI ( ws )? )+
							{
							dbg.location(768,73);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:73: ( ws )?
							int alt232=2;
							try { dbg.enterSubRule(232);
							try { dbg.enterDecision(232, decisionCanBacktrack[232]);

							int LA232_0 = input.LA(1);
							if ( (LA232_0==COMMENT||LA232_0==NL||LA232_0==WS) ) {
								alt232=1;
							}
							} finally {dbg.exitDecision(232);}

							switch (alt232) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:73: ws
									{
									dbg.location(768,73);
									pushFollow(FOLLOW_ws_in_declarations4251);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(232);}
							dbg.location(768,77);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:77: ( SEMI ( ws )? )+
							int cnt234=0;
							try { dbg.enterSubRule(234);

							loop234:
							while (true) {
								int alt234=2;
								try { dbg.enterDecision(234, decisionCanBacktrack[234]);

								int LA234_0 = input.LA(1);
								if ( (LA234_0==SEMI) ) {
									alt234=1;
								}

								} finally {dbg.exitDecision(234);}

								switch (alt234) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:78: SEMI ( ws )?
									{
									dbg.location(768,78);
									match(input,SEMI,FOLLOW_SEMI_in_declarations4255); if (state.failed) return;dbg.location(768,83);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:83: ( ws )?
									int alt233=2;
									try { dbg.enterSubRule(233);
									try { dbg.enterDecision(233, decisionCanBacktrack[233]);

									int LA233_0 = input.LA(1);
									if ( (LA233_0==COMMENT||LA233_0==NL||LA233_0==WS) ) {
										alt233=1;
									}
									} finally {dbg.exitDecision(233);}

									switch (alt233) {
										case 1 :
											dbg.enterAlt(1);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:83: ws
											{
											dbg.location(768,83);
											pushFollow(FOLLOW_ws_in_declarations4257);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(233);}

									}
									break;

								default :
									if ( cnt234 >= 1 ) break loop234;
									if (state.backtracking>0) {state.failed=true; return;}
									EarlyExitException eee = new EarlyExitException(234, input);
									dbg.recognitionException(eee);

									throw eee;
								}
								cnt234++;
							}
							} finally {dbg.exitSubRule(234);}

							}

							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:90: ws
							{
							dbg.location(768,90);
							pushFollow(FOLLOW_ws_in_declarations4263);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(235);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:769:8: ( SEMI ( ws )? )+
					{
					dbg.location(769,8);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:769:8: ( SEMI ( ws )? )+
					int cnt237=0;
					try { dbg.enterSubRule(237);

					loop237:
					while (true) {
						int alt237=2;
						try { dbg.enterDecision(237, decisionCanBacktrack[237]);

						int LA237_0 = input.LA(1);
						if ( (LA237_0==SEMI) ) {
							alt237=1;
						}

						} finally {dbg.exitDecision(237);}

						switch (alt237) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:769:9: SEMI ( ws )?
							{
							dbg.location(769,9);
							match(input,SEMI,FOLLOW_SEMI_in_declarations4275); if (state.failed) return;dbg.location(769,14);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:769:14: ( ws )?
							int alt236=2;
							try { dbg.enterSubRule(236);
							try { dbg.enterDecision(236, decisionCanBacktrack[236]);

							int LA236_0 = input.LA(1);
							if ( (LA236_0==COMMENT||LA236_0==NL||LA236_0==WS) ) {
								alt236=1;
							}
							} finally {dbg.exitDecision(236);}

							switch (alt236) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:769:14: ws
									{
									dbg.location(769,14);
									pushFollow(FOLLOW_ws_in_declarations4277);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(236);}

							}
							break;

						default :
							if ( cnt237 >= 1 ) break loop237;
							if (state.backtracking>0) {state.failed=true; return;}
							EarlyExitException eee = new EarlyExitException(237, input);
							dbg.recognitionException(eee);

							throw eee;
						}
						cnt237++;
					}
					} finally {dbg.exitSubRule(237);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(770, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "declarations");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "declarations"



	// $ANTLR start "declaration"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:772:1: declaration : ( ( cp_variable_declaration )=> cp_variable_declaration | ( sass_map )=> sass_map | ( sass_nested_properties )=> sass_nested_properties | ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE )=> rule | ( propertyDeclaration )=> propertyDeclaration | ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration | ( cp_mixin_declaration )=> cp_mixin_declaration | ( cp_mixin_call )=> cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? |{...}? at_rule |{...}? sass_control |{...}? sass_extend |{...}? sass_debug |{...}? sass_content |{...}? sass_function_return |{...}? sass_error |{...}? importItem | GEN );
	public final void declaration() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "declaration");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(772, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:773:5: ( ( cp_variable_declaration )=> cp_variable_declaration | ( sass_map )=> sass_map | ( sass_nested_properties )=> sass_nested_properties | ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE )=> rule | ( propertyDeclaration )=> propertyDeclaration | ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration | ( cp_mixin_declaration )=> cp_mixin_declaration | ( cp_mixin_call )=> cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? |{...}? at_rule |{...}? sass_control |{...}? sass_extend |{...}? sass_debug |{...}? sass_content |{...}? sass_function_return |{...}? sass_error |{...}? importItem | GEN )
			int alt243=18;
			try { dbg.enterDecision(243, decisionCanBacktrack[243]);

			int LA243_0 = input.LA(1);
			if ( (LA243_0==SASS_AT_ROOT) ) {
				int LA243_1 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred25_Css3())) ) {
					alt243=1;
				}
				else if ( ((synpred26_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt243=3;
				}
				else if ( (synpred28_Css3()) ) {
					alt243=4;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {
					alt243=5;
				}
				else if ( (((synpred30_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 243, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA243_0==SASS_VAR) ) {
				int LA243_2 = input.LA(2);
				if ( ((synpred25_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt243=1;
				}
				else if ( ((synpred26_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt243=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&synpred27_Css3())&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt243=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&synpred29_Css3())&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt243=5;
				}
				else if ( (((synpred30_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt243=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 243, 2, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA243_0==IDENT) ) {
				int LA243_3 = input.LA(2);
				if ( ((synpred25_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt243=1;
				}
				else if ( ((synpred26_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt243=2;
				}
				else if ( (synpred27_Css3()) ) {
					alt243=3;
				}
				else if ( (synpred28_Css3()) ) {
					alt243=4;
				}
				else if ( (synpred29_Css3()) ) {
					alt243=5;
				}
				else if ( (synpred30_Css3()) ) {
					alt243=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 243, 3, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA243_0==MINUS) ) {
				int LA243_4 = input.LA(2);
				if ( ((synpred27_Css3()&&(evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")))) ) {
					alt243=3;
				}
				else if ( (((evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()"))&&synpred28_Css3())) ) {
					alt243=4;
				}
				else if ( ((((evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")&&(evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")))||evalPredicate(isScssSource(),"isScssSource()"))&&synpred29_Css3())) ) {
					alt243=5;
				}
				else if ( ((synpred30_Css3()&&((evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")&&(evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")))||evalPredicate(isScssSource(),"isScssSource()")))) ) {
					alt243=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 243, 4, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA243_0==HASH_SYMBOL) ) {
				int LA243_5 = input.LA(2);
				if ( ((synpred27_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt243=3;
				}
				else if ( (synpred28_Css3()) ) {
					alt243=4;
				}
				else if ( ((synpred29_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt243=5;
				}
				else if ( ((synpred30_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt243=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 243, 5, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA243_0==AT_SIGN) ) {
				int LA243_6 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred27_Css3())) ) {
					alt243=3;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred28_Css3())) ) {
					alt243=4;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred29_Css3())) ) {
					alt243=5;
				}
				else if ( ((synpred30_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 243, 6, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA243_0==VARIABLE) ) {
				int LA243_7 = input.LA(2);
				if ( (synpred27_Css3()) ) {
					alt243=3;
				}
				else if ( (synpred29_Css3()) ) {
					alt243=5;
				}
				else if ( (synpred30_Css3()) ) {
					alt243=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 243, 7, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA243_0==GEN) ) {
				int LA243_8 = input.LA(2);
				if ( (synpred27_Css3()) ) {
					alt243=3;
				}
				else if ( (synpred28_Css3()) ) {
					alt243=4;
				}
				else if ( (synpred29_Css3()) ) {
					alt243=5;
				}
				else if ( (synpred30_Css3()) ) {
					alt243=6;
				}
				else if ( (true) ) {
					alt243=18;
				}

			}
			else if ( (LA243_0==SASS_MIXIN) ) {
				int LA243_9 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred25_Css3())) ) {
					alt243=1;
				}
				else if ( ((synpred26_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt243=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {
					alt243=5;
				}
				else if ( (((synpred30_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=6;
				}
				else if ( ((synpred31_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt243=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 243, 9, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA243_0==GREATER||LA243_0==PLUS||LA243_0==TILDE) && (synpred28_Css3())) {
				alt243=4;
			}
			else if ( (LA243_0==SASS_EXTEND_ONLY_SELECTOR) && (synpred28_Css3())) {
				alt243=4;
			}
			else if ( (LA243_0==LESS_AND) ) {
				int LA243_12 = input.LA(2);
				if ( (synpred28_Css3()) ) {
					alt243=4;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred31_Css3())) ) {
					alt243=7;
				}
				else if ( ((synpred32_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=8;
				}
				else if ( (((evalPredicate(isLessSource(),"isLessSource()")&&synpred33_Css3())&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt243=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 243, 12, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA243_0==HASH) ) {
				int LA243_13 = input.LA(2);
				if ( (synpred28_Css3()) ) {
					alt243=4;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred31_Css3())) ) {
					alt243=7;
				}
				else if ( ((synpred32_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=8;
				}
				else if ( (((evalPredicate(isLessSource(),"isLessSource()")&&synpred33_Css3())&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt243=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 243, 13, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA243_0==DOT) ) {
				int LA243_14 = input.LA(2);
				if ( (synpred28_Css3()) ) {
					alt243=4;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred31_Css3())) ) {
					alt243=7;
				}
				else if ( ((synpred32_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=8;
				}
				else if ( (((evalPredicate(isLessSource(),"isLessSource()")&&synpred33_Css3())&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt243=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 243, 14, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA243_0==DIMENSION) && (synpred28_Css3())) {
				alt243=4;
			}
			else if ( (LA243_0==LBRACKET) && (synpred28_Css3())) {
				alt243=4;
			}
			else if ( (LA243_0==COLON||LA243_0==DCOLON) && (synpred28_Css3())) {
				alt243=4;
			}
			else if ( (LA243_0==STAR) ) {
				int LA243_18 = input.LA(2);
				if ( (synpred28_Css3()) ) {
					alt243=4;
				}
				else if ( (synpred29_Css3()) ) {
					alt243=5;
				}
				else if ( (synpred30_Css3()) ) {
					alt243=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 243, 18, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA243_0==PIPE) && (synpred28_Css3())) {
				alt243=4;
			}
			else if ( (LA243_0==AT_IDENT) ) {
				int LA243_20 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred25_Css3())) ) {
					alt243=1;
				}
				else if ( ((synpred26_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt243=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {
					alt243=5;
				}
				else if ( (((synpred30_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=6;
				}
				else if ( ((synpred32_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=8;
				}
				else if ( (((evalPredicate(isLessSource(),"isLessSource()")&&synpred33_Css3())&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt243=9;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt243=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 243, 20, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA243_0==SASS_INCLUDE) ) {
				int LA243_21 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred25_Css3())) ) {
					alt243=1;
				}
				else if ( ((synpred26_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt243=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {
					alt243=5;
				}
				else if ( (((synpred30_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=6;
				}
				else if ( ((synpred32_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt243=8;
				}
				else if ( ((synpred33_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt243=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 243, 21, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA243_0==MEDIA_SYM) ) {
				int LA243_22 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred25_Css3())) ) {
					alt243=1;
				}
				else if ( ((synpred26_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt243=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {
					alt243=5;
				}
				else if ( (((synpred30_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=6;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt243=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 243, 22, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA243_0==PAGE_SYM) ) {
				int LA243_23 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred25_Css3())) ) {
					alt243=1;
				}
				else if ( ((synpred26_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt243=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {
					alt243=5;
				}
				else if ( (((synpred30_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=6;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt243=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 243, 23, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA243_0==COUNTER_STYLE_SYM) ) {
				int LA243_24 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred25_Css3())) ) {
					alt243=1;
				}
				else if ( ((synpred26_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt243=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {
					alt243=5;
				}
				else if ( (((synpred30_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=6;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt243=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 243, 24, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA243_0==FONT_FACE_SYM) ) {
				int LA243_25 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred25_Css3())) ) {
					alt243=1;
				}
				else if ( ((synpred26_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt243=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {
					alt243=5;
				}
				else if ( (((synpred30_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=6;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt243=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 243, 25, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA243_0==MOZ_DOCUMENT_SYM) ) {
				int LA243_26 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred25_Css3())) ) {
					alt243=1;
				}
				else if ( ((synpred26_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt243=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {
					alt243=5;
				}
				else if ( (((synpred30_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=6;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt243=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 243, 26, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA243_0==LAYER_SYM||LA243_0==SUPPORTS_SYM) ) {
				alt243=10;
			}
			else if ( (LA243_0==WEBKIT_KEYFRAMES_SYM) ) {
				int LA243_28 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred25_Css3())) ) {
					alt243=1;
				}
				else if ( ((synpred26_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt243=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {
					alt243=5;
				}
				else if ( (((synpred30_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=6;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt243=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 243, 28, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA243_0==SASS_IF) ) {
				int LA243_29 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred25_Css3())) ) {
					alt243=1;
				}
				else if ( ((synpred26_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt243=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {
					alt243=5;
				}
				else if ( (((synpred30_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt243=11;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 243, 29, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA243_0==SASS_FOR) ) {
				int LA243_31 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred25_Css3())) ) {
					alt243=1;
				}
				else if ( ((synpred26_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt243=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {
					alt243=5;
				}
				else if ( (((synpred30_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt243=11;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 243, 31, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA243_0==SASS_EACH) ) {
				int LA243_32 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred25_Css3())) ) {
					alt243=1;
				}
				else if ( ((synpred26_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt243=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {
					alt243=5;
				}
				else if ( (((synpred30_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt243=11;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 243, 32, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA243_0==SASS_WHILE) ) {
				int LA243_33 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred25_Css3())) ) {
					alt243=1;
				}
				else if ( ((synpred26_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt243=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {
					alt243=5;
				}
				else if ( (((synpred30_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt243=11;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 243, 33, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA243_0==SASS_EXTEND) ) {
				int LA243_34 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred25_Css3())) ) {
					alt243=1;
				}
				else if ( ((synpred26_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt243=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {
					alt243=5;
				}
				else if ( (((synpred30_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt243=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 243, 34, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA243_0==SASS_DEBUG||LA243_0==SASS_WARN) ) {
				int LA243_35 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred25_Css3())) ) {
					alt243=1;
				}
				else if ( ((synpred26_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt243=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {
					alt243=5;
				}
				else if ( (((synpred30_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt243=13;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 243, 35, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA243_0==SASS_CONTENT) ) {
				int LA243_36 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred25_Css3())) ) {
					alt243=1;
				}
				else if ( ((synpred26_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt243=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {
					alt243=5;
				}
				else if ( (((synpred30_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt243=14;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 243, 36, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA243_0==SASS_RETURN) ) {
				int LA243_37 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred25_Css3())) ) {
					alt243=1;
				}
				else if ( ((synpred26_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt243=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {
					alt243=5;
				}
				else if ( (((synpred30_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt243=15;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 243, 37, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA243_0==IMPORT_SYM) ) {
				int LA243_38 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred25_Css3())) ) {
					alt243=1;
				}
				else if ( ((synpred26_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt243=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {
					alt243=5;
				}
				else if ( (((synpred30_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt243=17;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 243, 38, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA243_0==SASS_ERROR) ) {
				alt243=16;
			}
			else if ( ((LA243_0 >= BOTTOMCENTER_SYM && LA243_0 <= BOTTOMRIGHT_SYM)||LA243_0==CHARSET_SYM||(LA243_0 >= LEFTBOTTOM_SYM && LA243_0 <= LEFTTOP_SYM)||LA243_0==NAMESPACE_SYM||(LA243_0 >= RIGHTBOTTOM_SYM && LA243_0 <= RIGHTTOP_SYM)||LA243_0==SASS_ELSE||(LA243_0 >= SASS_FORWARD && LA243_0 <= SASS_FUNCTION)||LA243_0==SASS_USE||(LA243_0 >= TOPCENTER_SYM && LA243_0 <= TOPRIGHT_SYM)) ) {
				int LA243_40 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred25_Css3())) ) {
					alt243=1;
				}
				else if ( ((synpred26_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt243=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {
					alt243=5;
				}
				else if ( (((synpred30_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt243=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 243, 40, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 243, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(243);}

			switch (alt243) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:774:5: ( cp_variable_declaration )=> cp_variable_declaration
					{
					dbg.location(774,32);
					pushFollow(FOLLOW_cp_variable_declaration_in_declaration4306);
					cp_variable_declaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:775:7: ( sass_map )=> sass_map
					{
					dbg.location(775,20);
					pushFollow(FOLLOW_sass_map_in_declaration4319);
					sass_map();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:776:7: ( sass_nested_properties )=> sass_nested_properties
					{
					dbg.location(776,33);
					pushFollow(FOLLOW_sass_nested_properties_in_declaration4331);
					sass_nested_properties();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:777:7: ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE )=> rule
					{
					dbg.location(777,145);
					pushFollow(FOLLOW_rule_in_declaration4394);
					rule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:778:7: ( propertyDeclaration )=> propertyDeclaration
					{
					dbg.location(778,30);
					pushFollow(FOLLOW_propertyDeclaration_in_declaration4406);
					propertyDeclaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:780:7: ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration
					{
					dbg.location(780,67);
					pushFollow(FOLLOW_propertyDeclaration_in_declaration4445);
					propertyDeclaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 7 :
					dbg.enterAlt(7);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:781:7: ( cp_mixin_declaration )=> cp_mixin_declaration
					{
					dbg.location(781,31);
					pushFollow(FOLLOW_cp_mixin_declaration_in_declaration4457);
					cp_mixin_declaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 8 :
					dbg.enterAlt(8);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:782:7: ( cp_mixin_call )=> cp_mixin_call ( ( ws )? IMPORTANT_SYM )?
					{
					dbg.location(782,25);
					pushFollow(FOLLOW_cp_mixin_call_in_declaration4470);
					cp_mixin_call();
					state._fsp--;
					if (state.failed) return;dbg.location(782,39);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:782:39: ( ( ws )? IMPORTANT_SYM )?
					int alt240=2;
					try { dbg.enterSubRule(240);
					try { dbg.enterDecision(240, decisionCanBacktrack[240]);

					try {
						isCyclicDecision = true;
						alt240 = dfa240.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(240);}

					switch (alt240) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:782:40: ( ws )? IMPORTANT_SYM
							{
							dbg.location(782,40);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:782:40: ( ws )?
							int alt239=2;
							try { dbg.enterSubRule(239);
							try { dbg.enterDecision(239, decisionCanBacktrack[239]);

							int LA239_0 = input.LA(1);
							if ( (LA239_0==COMMENT||LA239_0==NL||LA239_0==WS) ) {
								alt239=1;
							}
							} finally {dbg.exitDecision(239);}

							switch (alt239) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:782:40: ws
									{
									dbg.location(782,40);
									pushFollow(FOLLOW_ws_in_declaration4473);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(239);}
							dbg.location(782,44);
							match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_declaration4476); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(240);}

					}
					break;
				case 9 :
					dbg.enterAlt(9);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:783:7: ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )?
					{
					dbg.location(783,25);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(783,43);
					pushFollow(FOLLOW_cp_mixin_call_in_declaration4493);
					cp_mixin_call();
					state._fsp--;
					if (state.failed) return;dbg.location(783,57);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:783:57: ( ( ws )? IMPORTANT_SYM )?
					int alt242=2;
					try { dbg.enterSubRule(242);
					try { dbg.enterDecision(242, decisionCanBacktrack[242]);

					try {
						isCyclicDecision = true;
						alt242 = dfa242.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(242);}

					switch (alt242) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:783:58: ( ws )? IMPORTANT_SYM
							{
							dbg.location(783,58);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:783:58: ( ws )?
							int alt241=2;
							try { dbg.enterSubRule(241);
							try { dbg.enterDecision(241, decisionCanBacktrack[241]);

							int LA241_0 = input.LA(1);
							if ( (LA241_0==COMMENT||LA241_0==NL||LA241_0==WS) ) {
								alt241=1;
							}
							} finally {dbg.exitDecision(241);}

							switch (alt241) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:783:58: ws
									{
									dbg.location(783,58);
									pushFollow(FOLLOW_ws_in_declaration4496);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(241);}
							dbg.location(783,62);
							match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_declaration4499); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(242);}

					}
					break;
				case 10 :
					dbg.enterAlt(10);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:784:7: {...}? at_rule
					{
					dbg.location(784,7);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isCssPreprocessorSource()");
					}dbg.location(784,36);
					pushFollow(FOLLOW_at_rule_in_declaration4515);
					at_rule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 11 :
					dbg.enterAlt(11);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:785:7: {...}? sass_control
					{
					dbg.location(785,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(785,25);
					pushFollow(FOLLOW_sass_control_in_declaration4525);
					sass_control();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 12 :
					dbg.enterAlt(12);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:786:7: {...}? sass_extend
					{
					dbg.location(786,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(786,25);
					pushFollow(FOLLOW_sass_extend_in_declaration4535);
					sass_extend();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 13 :
					dbg.enterAlt(13);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:787:7: {...}? sass_debug
					{
					dbg.location(787,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(787,25);
					pushFollow(FOLLOW_sass_debug_in_declaration4545);
					sass_debug();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 14 :
					dbg.enterAlt(14);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:788:7: {...}? sass_content
					{
					dbg.location(788,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(788,25);
					pushFollow(FOLLOW_sass_content_in_declaration4555);
					sass_content();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 15 :
					dbg.enterAlt(15);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:789:7: {...}? sass_function_return
					{
					dbg.location(789,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(789,25);
					pushFollow(FOLLOW_sass_function_return_in_declaration4565);
					sass_function_return();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 16 :
					dbg.enterAlt(16);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:790:7: {...}? sass_error
					{
					dbg.location(790,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(790,25);
					pushFollow(FOLLOW_sass_error_in_declaration4575);
					sass_error();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 17 :
					dbg.enterAlt(17);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:791:7: {...}? importItem
					{
					dbg.location(791,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(791,25);
					pushFollow(FOLLOW_importItem_in_declaration4585);
					importItem();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 18 :
					dbg.enterAlt(18);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:7: GEN
					{
					dbg.location(792,7);
					match(input,GEN,FOLLOW_GEN_in_declaration4593); if (state.failed) return;
					}
					break;

			}
		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(SEMI));
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(793, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "declaration");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "declaration"



	// $ANTLR start "selectorsGroup"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:799:1: selectorsGroup : selector ( ( ws )? COMMA ( ws )? selector )* ({...}? COMMA )? ;
	public final void selectorsGroup() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "selectorsGroup");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(799, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:800:5: ( selector ( ( ws )? COMMA ( ws )? selector )* ({...}? COMMA )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:801:9: selector ( ( ws )? COMMA ( ws )? selector )* ({...}? COMMA )?
			{
			dbg.location(801,9);
			pushFollow(FOLLOW_selector_in_selectorsGroup4627);
			selector();
			state._fsp--;
			if (state.failed) return;dbg.location(801,18);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:801:18: ( ( ws )? COMMA ( ws )? selector )*
			try { dbg.enterSubRule(246);

			loop246:
			while (true) {
				int alt246=2;
				try { dbg.enterDecision(246, decisionCanBacktrack[246]);

				try {
					isCyclicDecision = true;
					alt246 = dfa246.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(246);}

				switch (alt246) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:801:19: ( ws )? COMMA ( ws )? selector
					{
					dbg.location(801,19);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:801:19: ( ws )?
					int alt244=2;
					try { dbg.enterSubRule(244);
					try { dbg.enterDecision(244, decisionCanBacktrack[244]);

					int LA244_0 = input.LA(1);
					if ( (LA244_0==COMMENT||LA244_0==NL||LA244_0==WS) ) {
						alt244=1;
					}
					} finally {dbg.exitDecision(244);}

					switch (alt244) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:801:19: ws
							{
							dbg.location(801,19);
							pushFollow(FOLLOW_ws_in_selectorsGroup4630);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(244);}
					dbg.location(801,23);
					match(input,COMMA,FOLLOW_COMMA_in_selectorsGroup4633); if (state.failed) return;dbg.location(801,29);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:801:29: ( ws )?
					int alt245=2;
					try { dbg.enterSubRule(245);
					try { dbg.enterDecision(245, decisionCanBacktrack[245]);

					int LA245_0 = input.LA(1);
					if ( (LA245_0==COMMENT||LA245_0==NL||LA245_0==WS) ) {
						alt245=1;
					}
					} finally {dbg.exitDecision(245);}

					switch (alt245) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:801:29: ws
							{
							dbg.location(801,29);
							pushFollow(FOLLOW_ws_in_selectorsGroup4635);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(245);}
					dbg.location(801,33);
					pushFollow(FOLLOW_selector_in_selectorsGroup4638);
					selector();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop246;
				}
			}
			} finally {dbg.exitSubRule(246);}
			dbg.location(801,44);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:801:44: ({...}? COMMA )?
			int alt247=2;
			try { dbg.enterSubRule(247);
			try { dbg.enterDecision(247, decisionCanBacktrack[247]);

			int LA247_0 = input.LA(1);
			if ( (LA247_0==COMMA) ) {
				alt247=1;
			}
			} finally {dbg.exitDecision(247);}

			switch (alt247) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:801:45: {...}? COMMA
					{
					dbg.location(801,45);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "selectorsGroup", "isCssPreprocessorSource()");
					}dbg.location(801,74);
					match(input,COMMA,FOLLOW_COMMA_in_selectorsGroup4645); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(247);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(802, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "selectorsGroup");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "selectorsGroup"



	// $ANTLR start "selector"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:804:1: selector : ( ( combinator ( ws )? )? simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence )* |{...}? combinator );
	public final void selector() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "selector");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(804, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:805:5: ( ( combinator ( ws )? )? simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence )* |{...}? combinator )
			int alt254=2;
			try { dbg.enterDecision(254, decisionCanBacktrack[254]);

			try {
				isCyclicDecision = true;
				alt254 = dfa254.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(254);}

			switch (alt254) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:805:8: ( combinator ( ws )? )? simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence )*
					{
					dbg.location(805,8);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:805:8: ( combinator ( ws )? )?
					int alt249=2;
					try { dbg.enterSubRule(249);
					try { dbg.enterDecision(249, decisionCanBacktrack[249]);

					int LA249_0 = input.LA(1);
					if ( (LA249_0==GREATER||LA249_0==PLUS||LA249_0==TILDE) ) {
						alt249=1;
					}
					} finally {dbg.exitDecision(249);}

					switch (alt249) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:805:9: combinator ( ws )?
							{
							dbg.location(805,9);
							pushFollow(FOLLOW_combinator_in_selector4666);
							combinator();
							state._fsp--;
							if (state.failed) return;dbg.location(805,20);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:805:20: ( ws )?
							int alt248=2;
							try { dbg.enterSubRule(248);
							try { dbg.enterDecision(248, decisionCanBacktrack[248]);

							int LA248_0 = input.LA(1);
							if ( (LA248_0==COMMENT||LA248_0==NL||LA248_0==WS) ) {
								alt248=1;
							}
							} finally {dbg.exitDecision(248);}

							switch (alt248) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:805:20: ws
									{
									dbg.location(805,20);
									pushFollow(FOLLOW_ws_in_selector4668);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(248);}

							}
							break;

					}
					} finally {dbg.exitSubRule(249);}
					dbg.location(805,26);
					pushFollow(FOLLOW_simpleSelectorSequence_in_selector4673);
					simpleSelectorSequence();
					state._fsp--;
					if (state.failed) return;dbg.location(805,49);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:805:49: ( ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence )*
					try { dbg.enterSubRule(253);

					loop253:
					while (true) {
						int alt253=2;
						try { dbg.enterDecision(253, decisionCanBacktrack[253]);

						try {
							isCyclicDecision = true;
							alt253 = dfa253.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(253);}

						switch (alt253) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:805:51: ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence
							{
							dbg.location(805,51);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:805:51: ( ( ( ws )? combinator ( ws )? ) | ws )
							int alt252=2;
							try { dbg.enterSubRule(252);
							try { dbg.enterDecision(252, decisionCanBacktrack[252]);

							try {
								isCyclicDecision = true;
								alt252 = dfa252.predict(input);
							}
							catch (NoViableAltException nvae) {
								dbg.recognitionException(nvae);
								throw nvae;
							}
							} finally {dbg.exitDecision(252);}

							switch (alt252) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:805:52: ( ( ws )? combinator ( ws )? )
									{
									dbg.location(805,52);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:805:52: ( ( ws )? combinator ( ws )? )
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:805:53: ( ws )? combinator ( ws )?
									{
									dbg.location(805,53);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:805:53: ( ws )?
									int alt250=2;
									try { dbg.enterSubRule(250);
									try { dbg.enterDecision(250, decisionCanBacktrack[250]);

									int LA250_0 = input.LA(1);
									if ( (LA250_0==COMMENT||LA250_0==NL||LA250_0==WS) ) {
										alt250=1;
									}
									} finally {dbg.exitDecision(250);}

									switch (alt250) {
										case 1 :
											dbg.enterAlt(1);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:805:53: ws
											{
											dbg.location(805,53);
											pushFollow(FOLLOW_ws_in_selector4679);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(250);}
									dbg.location(805,57);
									pushFollow(FOLLOW_combinator_in_selector4682);
									combinator();
									state._fsp--;
									if (state.failed) return;dbg.location(805,68);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:805:68: ( ws )?
									int alt251=2;
									try { dbg.enterSubRule(251);
									try { dbg.enterDecision(251, decisionCanBacktrack[251]);

									int LA251_0 = input.LA(1);
									if ( (LA251_0==COMMENT||LA251_0==NL||LA251_0==WS) ) {
										alt251=1;
									}
									} finally {dbg.exitDecision(251);}

									switch (alt251) {
										case 1 :
											dbg.enterAlt(1);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:805:68: ws
											{
											dbg.location(805,68);
											pushFollow(FOLLOW_ws_in_selector4684);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(251);}

									}

									}
									break;
								case 2 :
									dbg.enterAlt(2);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:805:73: ws
									{
									dbg.location(805,73);
									pushFollow(FOLLOW_ws_in_selector4688);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(252);}
							dbg.location(805,77);
							pushFollow(FOLLOW_simpleSelectorSequence_in_selector4691);
							simpleSelectorSequence();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop253;
						}
					}
					} finally {dbg.exitSubRule(253);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:806:10: {...}? combinator
					{
					dbg.location(806,10);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "selector", "isScssSource()");
					}dbg.location(806,28);
					pushFollow(FOLLOW_combinator_in_selector4706);
					combinator();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(807, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "selector");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "selector"



	// $ANTLR start "combinator"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:809:1: combinator : ( PLUS | GREATER | TILDE );
	public final void combinator() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "combinator");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(809, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:810:5: ( PLUS | GREATER | TILDE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(810,5);
			if ( input.LA(1)==GREATER||input.LA(1)==PLUS||input.LA(1)==TILDE ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(812, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "combinator");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "combinator"



	// $ANTLR start "simpleSelectorSequence"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:814:1: simpleSelectorSequence : ( ( elementSubsequent |{...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ( ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) | ( ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ) ) )* | ( typeSelector )=> typeSelector ( ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) |{...}? ws sass_selector_interpolation_exp ) )* );
	public final void simpleSelectorSequence() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "simpleSelectorSequence");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(814, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:815:2: ( ( elementSubsequent |{...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ( ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) | ( ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ) ) )* | ( typeSelector )=> typeSelector ( ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) |{...}? ws sass_selector_interpolation_exp ) )* )
			int alt263=2;
			try { dbg.enterDecision(263, decisionCanBacktrack[263]);

			int LA263_0 = input.LA(1);
			if ( (LA263_0==AT_SIGN||LA263_0==COLON||(LA263_0 >= DCOLON && LA263_0 <= DOT)||(LA263_0 >= HASH && LA263_0 <= HASH_SYMBOL)||LA263_0==LBRACKET||LA263_0==MINUS||LA263_0==SASS_EXTEND_ONLY_SELECTOR) ) {
				alt263=1;
			}
			else if ( (LA263_0==LESS_AND) ) {
				int LA263_2 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt263=1;
				}
				else if ( (synpred35_Css3()) ) {
					alt263=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 263, 2, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA263_0==IDENT) ) {
				int LA263_3 = input.LA(2);
				if ( (LA263_3==HASH_SYMBOL) ) {
					int LA263_7 = input.LA(3);
					if ( (LA263_7==LBRACE) ) {
						alt263=1;
					}
					else if ( (LA263_7==NAME) && (synpred35_Css3())) {
						alt263=2;
					}
					else if ( (LA263_7==IDENT||LA263_7==MINUS) && (synpred35_Css3())) {
						alt263=2;
					}
					else if ( (LA263_7==AT_SIGN) && (synpred35_Css3())) {
						alt263=2;
					}

				}
				else if ( (LA263_3==AT_SIGN) ) {
					alt263=1;
				}
				else if ( (LA263_3==PIPE) && (synpred35_Css3())) {
					alt263=2;
				}
				else if ( (LA263_3==COMMENT||LA263_3==NL||LA263_3==WS) && (synpred35_Css3())) {
					alt263=2;
				}
				else if ( (LA263_3==SASS_EXTEND_ONLY_SELECTOR) && (synpred35_Css3())) {
					alt263=2;
				}
				else if ( (LA263_3==LESS_AND) && (synpred35_Css3())) {
					alt263=2;
				}
				else if ( (LA263_3==HASH) && (synpred35_Css3())) {
					alt263=2;
				}
				else if ( (LA263_3==DOT) && (synpred35_Css3())) {
					alt263=2;
				}
				else if ( (LA263_3==DIMENSION) && (synpred35_Css3())) {
					alt263=2;
				}
				else if ( (LA263_3==LBRACKET) && (synpred35_Css3())) {
					alt263=2;
				}
				else if ( (LA263_3==COLON||LA263_3==DCOLON) && (synpred35_Css3())) {
					alt263=2;
				}
				else if ( (LA263_3==GREATER||LA263_3==PLUS||LA263_3==TILDE) && (synpred35_Css3())) {
					alt263=2;
				}
				else if ( (LA263_3==COMMA) && (synpred35_Css3())) {
					alt263=2;
				}
				else if ( (LA263_3==LBRACE) && (synpred35_Css3())) {
					alt263=2;
				}
				else if ( (LA263_3==RPAREN) && (synpred35_Css3())) {
					alt263=2;
				}
				else if ( (LA263_3==SEMI) && (synpred35_Css3())) {
					alt263=2;
				}
				else if ( (LA263_3==RBRACE) && (synpred35_Css3())) {
					alt263=2;
				}

			}
			else if ( (LA263_0==STAR) && (synpred35_Css3())) {
				alt263=2;
			}
			else if ( (LA263_0==PIPE) && (synpred35_Css3())) {
				alt263=2;
			}
			else if ( (LA263_0==GEN) && (synpred35_Css3())) {
				alt263=2;
			}

			} finally {dbg.exitDecision(263);}

			switch (alt263) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:816:9: ( elementSubsequent |{...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ( ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) | ( ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ) ) )*
					{
					dbg.location(816,9);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:816:9: ( elementSubsequent |{...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp )
					int alt255=3;
					try { dbg.enterSubRule(255);
					try { dbg.enterDecision(255, decisionCanBacktrack[255]);

					switch ( input.LA(1) ) {
					case COLON:
					case DCOLON:
					case DIMENSION:
					case DOT:
					case HASH:
					case LBRACKET:
					case LESS_AND:
					case SASS_EXTEND_ONLY_SELECTOR:
						{
						alt255=1;
						}
						break;
					case HASH_SYMBOL:
						{
						int LA255_2 = input.LA(2);
						if ( (LA255_2==LBRACE) ) {
							alt255=2;
						}
						else if ( (LA255_2==AT_SIGN||LA255_2==IDENT||LA255_2==MINUS||LA255_2==NAME) ) {
							alt255=1;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 255, 2, input);
								dbg.recognitionException(nvae);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case IDENT:
					case MINUS:
						{
						int LA255_3 = input.LA(2);
						if ( (LA255_3==HASH_SYMBOL) ) {
							alt255=2;
						}
						else if ( (LA255_3==AT_SIGN) ) {
							alt255=3;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 255, 3, input);
								dbg.recognitionException(nvae);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case AT_SIGN:
						{
						alt255=3;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 255, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(255);}

					switch (alt255) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:816:10: elementSubsequent
							{
							dbg.location(816,10);
							pushFollow(FOLLOW_elementSubsequent_in_simpleSelectorSequence4758);
							elementSubsequent();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:816:30: {...}? sass_selector_interpolation_exp
							{
							dbg.location(816,30);
							if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "simpleSelectorSequence", "isScssSource()");
							}dbg.location(816,48);
							pushFollow(FOLLOW_sass_selector_interpolation_exp_in_simpleSelectorSequence4764);
							sass_selector_interpolation_exp();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 3 :
							dbg.enterAlt(3);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:817:11: {...}? less_selector_interpolation_exp
							{
							dbg.location(817,11);
							if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "simpleSelectorSequence", "isLessSource()");
							}dbg.location(817,29);
							pushFollow(FOLLOW_less_selector_interpolation_exp_in_simpleSelectorSequence4778);
							less_selector_interpolation_exp();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(255);}
					dbg.location(817,64);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:817:64: ( ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) | ( ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ) ) )*
					try { dbg.enterSubRule(259);

					loop259:
					while (true) {
						int alt259=2;
						try { dbg.enterDecision(259, decisionCanBacktrack[259]);

						int LA259_0 = input.LA(1);
						if ( (LA259_0==COMMENT||LA259_0==NL||LA259_0==WS) ) {
							int LA259_1 = input.LA(2);
							if ( (synpred34_Css3()) ) {
								alt259=1;
							}

						}
						else if ( (LA259_0==SASS_EXTEND_ONLY_SELECTOR) && (synpred34_Css3())) {
							alt259=1;
						}
						else if ( (LA259_0==LESS_AND) && (synpred34_Css3())) {
							alt259=1;
						}
						else if ( (LA259_0==HASH) && (synpred34_Css3())) {
							alt259=1;
						}
						else if ( (LA259_0==HASH_SYMBOL) && (synpred34_Css3())) {
							alt259=1;
						}
						else if ( (LA259_0==DOT) && (synpred34_Css3())) {
							alt259=1;
						}
						else if ( (LA259_0==DIMENSION) && (synpred34_Css3())) {
							alt259=1;
						}
						else if ( (LA259_0==LBRACKET) && (synpred34_Css3())) {
							alt259=1;
						}
						else if ( (LA259_0==COLON||LA259_0==DCOLON) && (synpred34_Css3())) {
							alt259=1;
						}

						} finally {dbg.exitDecision(259);}

						switch (alt259) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:817:65: ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) | ( ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ) )
							{
							dbg.location(817,79);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:817:79: ( ( ( ws )? elementSubsequent ) | ( ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ) )
							int alt258=2;
							try { dbg.enterSubRule(258);
							try { dbg.enterDecision(258, decisionCanBacktrack[258]);

							try {
								isCyclicDecision = true;
								alt258 = dfa258.predict(input);
							}
							catch (NoViableAltException nvae) {
								dbg.recognitionException(nvae);
								throw nvae;
							}
							} finally {dbg.exitDecision(258);}

							switch (alt258) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:817:80: ( ( ws )? elementSubsequent )
									{
									dbg.location(817,80);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:817:80: ( ( ws )? elementSubsequent )
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:817:81: ( ws )? elementSubsequent
									{
									dbg.location(817,81);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:817:81: ( ws )?
									int alt256=2;
									try { dbg.enterSubRule(256);
									try { dbg.enterDecision(256, decisionCanBacktrack[256]);

									int LA256_0 = input.LA(1);
									if ( (LA256_0==COMMENT||LA256_0==NL||LA256_0==WS) ) {
										alt256=1;
									}
									} finally {dbg.exitDecision(256);}

									switch (alt256) {
										case 1 :
											dbg.enterAlt(1);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:817:81: ws
											{
											dbg.location(817,81);
											pushFollow(FOLLOW_ws_in_simpleSelectorSequence4793);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(256);}
									dbg.location(817,85);
									pushFollow(FOLLOW_elementSubsequent_in_simpleSelectorSequence4796);
									elementSubsequent();
									state._fsp--;
									if (state.failed) return;
									}

									}
									break;
								case 2 :
									dbg.enterAlt(2);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:817:105: ( ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) )
									{
									dbg.location(817,105);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:817:105: ( ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) )
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:817:106: ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp )
									{
									dbg.location(817,106);
									pushFollow(FOLLOW_ws_in_simpleSelectorSequence4801);
									ws();
									state._fsp--;
									if (state.failed) return;dbg.location(817,109);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:817:109: ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp )
									int alt257=2;
									try { dbg.enterSubRule(257);
									try { dbg.enterDecision(257, decisionCanBacktrack[257]);

									switch ( input.LA(1) ) {
									case IDENT:
									case MINUS:
										{
										int LA257_1 = input.LA(2);
										if ( (LA257_1==HASH_SYMBOL) ) {
											alt257=1;
										}
										else if ( (LA257_1==AT_SIGN) ) {
											alt257=2;
										}

										else {
											if (state.backtracking>0) {state.failed=true; return;}
											int nvaeMark = input.mark();
											try {
												input.consume();
												NoViableAltException nvae =
													new NoViableAltException("", 257, 1, input);
												dbg.recognitionException(nvae);
												throw nvae;
											} finally {
												input.rewind(nvaeMark);
											}
										}

										}
										break;
									case HASH_SYMBOL:
										{
										alt257=1;
										}
										break;
									case AT_SIGN:
										{
										alt257=2;
										}
										break;
									default:
										if (state.backtracking>0) {state.failed=true; return;}
										NoViableAltException nvae =
											new NoViableAltException("", 257, 0, input);
										dbg.recognitionException(nvae);
										throw nvae;
									}
									} finally {dbg.exitDecision(257);}

									switch (alt257) {
										case 1 :
											dbg.enterAlt(1);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:817:110: {...}? sass_selector_interpolation_exp
											{
											dbg.location(817,110);
											if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
												if (state.backtracking>0) {state.failed=true; return;}
												throw new FailedPredicateException(input, "simpleSelectorSequence", "isScssSource()");
											}dbg.location(817,128);
											pushFollow(FOLLOW_sass_selector_interpolation_exp_in_simpleSelectorSequence4806);
											sass_selector_interpolation_exp();
											state._fsp--;
											if (state.failed) return;
											}
											break;
										case 2 :
											dbg.enterAlt(2);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:817:162: {...}? less_selector_interpolation_exp
											{
											dbg.location(817,162);
											if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
												if (state.backtracking>0) {state.failed=true; return;}
												throw new FailedPredicateException(input, "simpleSelectorSequence", "isLessSource()");
											}dbg.location(817,180);
											pushFollow(FOLLOW_less_selector_interpolation_exp_in_simpleSelectorSequence4812);
											less_selector_interpolation_exp();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(257);}

									}

									}
									break;

							}
							} finally {dbg.exitSubRule(258);}

							}
							break;

						default :
							break loop259;
						}
					}
					} finally {dbg.exitSubRule(259);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:818:4: ( typeSelector )=> typeSelector ( ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) |{...}? ws sass_selector_interpolation_exp ) )*
					{
					dbg.location(818,20);
					pushFollow(FOLLOW_typeSelector_in_simpleSelectorSequence4826);
					typeSelector();
					state._fsp--;
					if (state.failed) return;dbg.location(818,33);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:818:33: ( ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) |{...}? ws sass_selector_interpolation_exp ) )*
					try { dbg.enterSubRule(262);

					loop262:
					while (true) {
						int alt262=2;
						try { dbg.enterDecision(262, decisionCanBacktrack[262]);

						int LA262_0 = input.LA(1);
						if ( (LA262_0==COMMENT||LA262_0==NL||LA262_0==WS) ) {
							int LA262_1 = input.LA(2);
							if ( (synpred36_Css3()) ) {
								alt262=1;
							}

						}
						else if ( (LA262_0==SASS_EXTEND_ONLY_SELECTOR) && (synpred36_Css3())) {
							alt262=1;
						}
						else if ( (LA262_0==LESS_AND) && (synpred36_Css3())) {
							alt262=1;
						}
						else if ( (LA262_0==HASH) && (synpred36_Css3())) {
							alt262=1;
						}
						else if ( (LA262_0==HASH_SYMBOL) && (synpred36_Css3())) {
							alt262=1;
						}
						else if ( (LA262_0==DOT) && (synpred36_Css3())) {
							alt262=1;
						}
						else if ( (LA262_0==DIMENSION) && (synpred36_Css3())) {
							alt262=1;
						}
						else if ( (LA262_0==LBRACKET) && (synpred36_Css3())) {
							alt262=1;
						}
						else if ( (LA262_0==COLON||LA262_0==DCOLON) && (synpred36_Css3())) {
							alt262=1;
						}

						} finally {dbg.exitDecision(262);}

						switch (alt262) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:818:34: ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) |{...}? ws sass_selector_interpolation_exp )
							{
							dbg.location(818,48);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:818:48: ( ( ( ws )? elementSubsequent ) |{...}? ws sass_selector_interpolation_exp )
							int alt261=2;
							try { dbg.enterSubRule(261);
							try { dbg.enterDecision(261, decisionCanBacktrack[261]);

							try {
								isCyclicDecision = true;
								alt261 = dfa261.predict(input);
							}
							catch (NoViableAltException nvae) {
								dbg.recognitionException(nvae);
								throw nvae;
							}
							} finally {dbg.exitDecision(261);}

							switch (alt261) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:818:49: ( ( ws )? elementSubsequent )
									{
									dbg.location(818,49);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:818:49: ( ( ws )? elementSubsequent )
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:818:50: ( ws )? elementSubsequent
									{
									dbg.location(818,50);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:818:50: ( ws )?
									int alt260=2;
									try { dbg.enterSubRule(260);
									try { dbg.enterDecision(260, decisionCanBacktrack[260]);

									int LA260_0 = input.LA(1);
									if ( (LA260_0==COMMENT||LA260_0==NL||LA260_0==WS) ) {
										alt260=1;
									}
									} finally {dbg.exitDecision(260);}

									switch (alt260) {
										case 1 :
											dbg.enterAlt(1);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:818:50: ws
											{
											dbg.location(818,50);
											pushFollow(FOLLOW_ws_in_simpleSelectorSequence4838);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(260);}
									dbg.location(818,54);
									pushFollow(FOLLOW_elementSubsequent_in_simpleSelectorSequence4841);
									elementSubsequent();
									state._fsp--;
									if (state.failed) return;
									}

									}
									break;
								case 2 :
									dbg.enterAlt(2);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:818:75: {...}? ws sass_selector_interpolation_exp
									{
									dbg.location(818,75);
									if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
										if (state.backtracking>0) {state.failed=true; return;}
										throw new FailedPredicateException(input, "simpleSelectorSequence", "isScssSource()");
									}dbg.location(818,93);
									pushFollow(FOLLOW_ws_in_simpleSelectorSequence4848);
									ws();
									state._fsp--;
									if (state.failed) return;dbg.location(818,96);
									pushFollow(FOLLOW_sass_selector_interpolation_exp_in_simpleSelectorSequence4850);
									sass_selector_interpolation_exp();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(261);}

							}
							break;

						default :
							break loop262;
						}
					}
					} finally {dbg.exitSubRule(262);}

					}
					break;

			}
		}
		catch ( RecognitionException rce) {

			            reportError(rce);
			            consumeUntil(input, BitSet.of(LBRACE));
			        
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(819, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "simpleSelectorSequence");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "simpleSelectorSequence"



	// $ANTLR start "esPred"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:826:1: esPred : ( HASH_SYMBOL | HASH | DOT | LBRACKET | COLON | DCOLON | SASS_EXTEND_ONLY_SELECTOR |{...}? LESS_AND );
	public final void esPred() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "esPred");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(826, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:827:5: ( HASH_SYMBOL | HASH | DOT | LBRACKET | COLON | DCOLON | SASS_EXTEND_ONLY_SELECTOR |{...}? LESS_AND )
			int alt264=8;
			try { dbg.enterDecision(264, decisionCanBacktrack[264]);

			switch ( input.LA(1) ) {
			case HASH_SYMBOL:
				{
				alt264=1;
				}
				break;
			case HASH:
				{
				alt264=2;
				}
				break;
			case DOT:
				{
				alt264=3;
				}
				break;
			case LBRACKET:
				{
				alt264=4;
				}
				break;
			case COLON:
				{
				alt264=5;
				}
				break;
			case DCOLON:
				{
				alt264=6;
				}
				break;
			case SASS_EXTEND_ONLY_SELECTOR:
				{
				alt264=7;
				}
				break;
			case LESS_AND:
				{
				alt264=8;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 264, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(264);}

			switch (alt264) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:827:7: HASH_SYMBOL
					{
					dbg.location(827,7);
					match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_esPred4875); if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:827:21: HASH
					{
					dbg.location(827,21);
					match(input,HASH,FOLLOW_HASH_in_esPred4879); if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:827:28: DOT
					{
					dbg.location(827,28);
					match(input,DOT,FOLLOW_DOT_in_esPred4883); if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:827:34: LBRACKET
					{
					dbg.location(827,34);
					match(input,LBRACKET,FOLLOW_LBRACKET_in_esPred4887); if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:827:45: COLON
					{
					dbg.location(827,45);
					match(input,COLON,FOLLOW_COLON_in_esPred4891); if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:827:53: DCOLON
					{
					dbg.location(827,53);
					match(input,DCOLON,FOLLOW_DCOLON_in_esPred4895); if (state.failed) return;
					}
					break;
				case 7 :
					dbg.enterAlt(7);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:827:62: SASS_EXTEND_ONLY_SELECTOR
					{
					dbg.location(827,62);
					match(input,SASS_EXTEND_ONLY_SELECTOR,FOLLOW_SASS_EXTEND_ONLY_SELECTOR_in_esPred4899); if (state.failed) return;
					}
					break;
				case 8 :
					dbg.enterAlt(8);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:827:90: {...}? LESS_AND
					{
					dbg.location(827,90);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "esPred", "isCssPreprocessorSource()");
					}dbg.location(827,119);
					match(input,LESS_AND,FOLLOW_LESS_AND_in_esPred4905); if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(828, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "esPred");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "esPred"



	// $ANTLR start "typeSelector"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:830:1: typeSelector options {k=2; } : ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? elementName ;
	public final void typeSelector() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "typeSelector");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(830, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:832:3: ( ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? elementName )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:832:6: ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? elementName
			{
			dbg.location(832,6);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:832:6: ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )?
			int alt265=2;
			try { dbg.enterSubRule(265);
			try { dbg.enterDecision(265, decisionCanBacktrack[265]);

			int LA265_0 = input.LA(1);
			if ( (LA265_0==IDENT) ) {
				int LA265_1 = input.LA(2);
				if ( (LA265_1==PIPE) && (synpred37_Css3())) {
					alt265=1;
				}
			}
			else if ( (LA265_0==STAR) ) {
				int LA265_2 = input.LA(2);
				if ( (LA265_2==PIPE) && (synpred37_Css3())) {
					alt265=1;
				}
			}
			else if ( (LA265_0==PIPE) && (synpred37_Css3())) {
				alt265=1;
			}
			} finally {dbg.exitDecision(265);}

			switch (alt265) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:832:7: ( ( IDENT | STAR )? PIPE )=> namespacePrefix
					{
					dbg.location(832,31);
					pushFollow(FOLLOW_namespacePrefix_in_typeSelector4947);
					namespacePrefix();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(265);}
			dbg.location(832,49);
			pushFollow(FOLLOW_elementName_in_typeSelector4951);
			elementName();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(833, 2);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "typeSelector");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "typeSelector"



	// $ANTLR start "namespacePrefix"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:835:1: namespacePrefix : ( namespacePrefixName | STAR )? PIPE ;
	public final void namespacePrefix() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "namespacePrefix");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(835, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:836:3: ( ( namespacePrefixName | STAR )? PIPE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:836:5: ( namespacePrefixName | STAR )? PIPE
			{
			dbg.location(836,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:836:5: ( namespacePrefixName | STAR )?
			int alt266=3;
			try { dbg.enterSubRule(266);
			try { dbg.enterDecision(266, decisionCanBacktrack[266]);

			int LA266_0 = input.LA(1);
			if ( (LA266_0==IDENT) ) {
				alt266=1;
			}
			else if ( (LA266_0==STAR) ) {
				alt266=2;
			}
			} finally {dbg.exitDecision(266);}

			switch (alt266) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:836:7: namespacePrefixName
					{
					dbg.location(836,7);
					pushFollow(FOLLOW_namespacePrefixName_in_namespacePrefix4966);
					namespacePrefixName();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:836:29: STAR
					{
					dbg.location(836,29);
					match(input,STAR,FOLLOW_STAR_in_namespacePrefix4970); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(266);}
			dbg.location(836,36);
			match(input,PIPE,FOLLOW_PIPE_in_namespacePrefix4974); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(837, 2);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "namespacePrefix");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "namespacePrefix"



	// $ANTLR start "elementSubsequent"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:840:1: elementSubsequent : ({...}? sass_extend_only_selector |{...}? LESS_AND ( IDENT | NUMBER |{...}? sass_interpolation_expression_var )* |{...}? LESS_AND less_selector_interpolation_exp | cssId | cssClass | slAttribute | pseudo ) ;
	public final void elementSubsequent() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "elementSubsequent");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(840, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:841:5: ( ({...}? sass_extend_only_selector |{...}? LESS_AND ( IDENT | NUMBER |{...}? sass_interpolation_expression_var )* |{...}? LESS_AND less_selector_interpolation_exp | cssId | cssClass | slAttribute | pseudo ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:842:5: ({...}? sass_extend_only_selector |{...}? LESS_AND ( IDENT | NUMBER |{...}? sass_interpolation_expression_var )* |{...}? LESS_AND less_selector_interpolation_exp | cssId | cssClass | slAttribute | pseudo )
			{
			dbg.location(842,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:842:5: ({...}? sass_extend_only_selector |{...}? LESS_AND ( IDENT | NUMBER |{...}? sass_interpolation_expression_var )* |{...}? LESS_AND less_selector_interpolation_exp | cssId | cssClass | slAttribute | pseudo )
			int alt268=7;
			try { dbg.enterSubRule(268);
			try { dbg.enterDecision(268, decisionCanBacktrack[268]);

			switch ( input.LA(1) ) {
			case SASS_EXTEND_ONLY_SELECTOR:
				{
				alt268=1;
				}
				break;
			case LESS_AND:
				{
				switch ( input.LA(2) ) {
				case IDENT:
					{
					int LA268_7 = input.LA(3);
					if ( ((LA268_7 >= COLON && LA268_7 <= COMMENT)||(LA268_7 >= DCOLON && LA268_7 <= DOT)||LA268_7==GREATER||(LA268_7 >= HASH && LA268_7 <= HASH_SYMBOL)||LA268_7==IDENT||(LA268_7 >= LBRACE && LA268_7 <= LBRACKET)||LA268_7==LESS_AND||LA268_7==NL||LA268_7==NUMBER||LA268_7==PLUS||LA268_7==RBRACE||LA268_7==RPAREN||LA268_7==SASS_EXTEND_ONLY_SELECTOR||LA268_7==SEMI||LA268_7==TILDE||LA268_7==WS) ) {
						alt268=2;
					}
					else if ( (LA268_7==AT_SIGN) ) {
						alt268=3;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 268, 7, input);
							dbg.recognitionException(nvae);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case COLON:
				case COMMA:
				case COMMENT:
				case DCOLON:
				case DIMENSION:
				case DOT:
				case GREATER:
				case HASH:
				case HASH_SYMBOL:
				case LBRACE:
				case LBRACKET:
				case LESS_AND:
				case NL:
				case NUMBER:
				case PLUS:
				case RBRACE:
				case RPAREN:
				case SASS_EXTEND_ONLY_SELECTOR:
				case SEMI:
				case TILDE:
				case WS:
					{
					alt268=2;
					}
					break;
				case AT_SIGN:
				case MINUS:
					{
					alt268=3;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 268, 2, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case HASH:
			case HASH_SYMBOL:
				{
				alt268=4;
				}
				break;
			case DIMENSION:
			case DOT:
				{
				alt268=5;
				}
				break;
			case LBRACKET:
				{
				alt268=6;
				}
				break;
			case COLON:
			case DCOLON:
				{
				alt268=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 268, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(268);}

			switch (alt268) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:843:9: {...}? sass_extend_only_selector
					{
					dbg.location(843,9);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "elementSubsequent", "isScssSource()");
					}dbg.location(843,27);
					pushFollow(FOLLOW_sass_extend_only_selector_in_elementSubsequent5006);
					sass_extend_only_selector();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:844:11: {...}? LESS_AND ( IDENT | NUMBER |{...}? sass_interpolation_expression_var )*
					{
					dbg.location(844,11);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "elementSubsequent", "isCssPreprocessorSource()");
					}dbg.location(844,40);
					match(input,LESS_AND,FOLLOW_LESS_AND_in_elementSubsequent5020); if (state.failed) return;dbg.location(844,49);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:844:49: ( IDENT | NUMBER |{...}? sass_interpolation_expression_var )*
					try { dbg.enterSubRule(267);

					loop267:
					while (true) {
						int alt267=4;
						try { dbg.enterDecision(267, decisionCanBacktrack[267]);

						switch ( input.LA(1) ) {
						case HASH_SYMBOL:
							{
							int LA267_2 = input.LA(2);
							if ( (LA267_2==LBRACE) ) {
								alt267=3;
							}

							}
							break;
						case IDENT:
							{
							alt267=1;
							}
							break;
						case NUMBER:
							{
							alt267=2;
							}
							break;
						}
						} finally {dbg.exitDecision(267);}

						switch (alt267) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:844:50: IDENT
							{
							dbg.location(844,50);
							match(input,IDENT,FOLLOW_IDENT_in_elementSubsequent5023); if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:844:58: NUMBER
							{
							dbg.location(844,58);
							match(input,NUMBER,FOLLOW_NUMBER_in_elementSubsequent5027); if (state.failed) return;
							}
							break;
						case 3 :
							dbg.enterAlt(3);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:844:67: {...}? sass_interpolation_expression_var
							{
							dbg.location(844,67);
							if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "elementSubsequent", "isScssSource()");
							}dbg.location(844,85);
							pushFollow(FOLLOW_sass_interpolation_expression_var_in_elementSubsequent5033);
							sass_interpolation_expression_var();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop267;
						}
					}
					} finally {dbg.exitSubRule(267);}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:845:11: {...}? LESS_AND less_selector_interpolation_exp
					{
					dbg.location(845,11);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "elementSubsequent", "isLessSource()");
					}dbg.location(845,29);
					match(input,LESS_AND,FOLLOW_LESS_AND_in_elementSubsequent5049); if (state.failed) return;dbg.location(845,38);
					pushFollow(FOLLOW_less_selector_interpolation_exp_in_elementSubsequent5051);
					less_selector_interpolation_exp();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:846:8: cssId
					{
					dbg.location(846,8);
					pushFollow(FOLLOW_cssId_in_elementSubsequent5060);
					cssId();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:847:8: cssClass
					{
					dbg.location(847,8);
					pushFollow(FOLLOW_cssClass_in_elementSubsequent5069);
					cssClass();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:848:11: slAttribute
					{
					dbg.location(848,11);
					pushFollow(FOLLOW_slAttribute_in_elementSubsequent5081);
					slAttribute();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 7 :
					dbg.enterAlt(7);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:849:11: pseudo
					{
					dbg.location(849,11);
					pushFollow(FOLLOW_pseudo_in_elementSubsequent5093);
					pseudo();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(268);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(851, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "elementSubsequent");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "elementSubsequent"



	// $ANTLR start "cssId"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:854:1: cssId : ( HASH ({...}? sass_selector_interpolation_exp )? | ( HASH_SYMBOL ( NAME |{...}? less_selector_interpolation_exp ) ) );
	public final void cssId() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cssId");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(854, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:855:5: ( HASH ({...}? sass_selector_interpolation_exp )? | ( HASH_SYMBOL ( NAME |{...}? less_selector_interpolation_exp ) ) )
			int alt271=2;
			try { dbg.enterDecision(271, decisionCanBacktrack[271]);

			int LA271_0 = input.LA(1);
			if ( (LA271_0==HASH) ) {
				alt271=1;
			}
			else if ( (LA271_0==HASH_SYMBOL) ) {
				alt271=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 271, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(271);}

			switch (alt271) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:855:7: HASH ({...}? sass_selector_interpolation_exp )?
					{
					dbg.location(855,7);
					match(input,HASH,FOLLOW_HASH_in_cssId5117); if (state.failed) return;dbg.location(855,12);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:855:12: ({...}? sass_selector_interpolation_exp )?
					int alt269=2;
					try { dbg.enterSubRule(269);
					try { dbg.enterDecision(269, decisionCanBacktrack[269]);

					int LA269_0 = input.LA(1);
					if ( (LA269_0==IDENT||LA269_0==MINUS) ) {
						alt269=1;
					}
					else if ( (LA269_0==HASH_SYMBOL) ) {
						int LA269_2 = input.LA(2);
						if ( (LA269_2==LBRACE) ) {
							alt269=1;
						}
					}
					} finally {dbg.exitDecision(269);}

					switch (alt269) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:855:13: {...}? sass_selector_interpolation_exp
							{
							dbg.location(855,13);
							if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "cssId", "isScssSource()");
							}dbg.location(855,31);
							pushFollow(FOLLOW_sass_selector_interpolation_exp_in_cssId5122);
							sass_selector_interpolation_exp();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(269);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:857:9: ( HASH_SYMBOL ( NAME |{...}? less_selector_interpolation_exp ) )
					{
					dbg.location(857,9);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:857:9: ( HASH_SYMBOL ( NAME |{...}? less_selector_interpolation_exp ) )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:857:11: HASH_SYMBOL ( NAME |{...}? less_selector_interpolation_exp )
					{
					dbg.location(857,11);
					match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_cssId5144); if (state.failed) return;dbg.location(858,13);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:858:13: ( NAME |{...}? less_selector_interpolation_exp )
					int alt270=2;
					try { dbg.enterSubRule(270);
					try { dbg.enterDecision(270, decisionCanBacktrack[270]);

					int LA270_0 = input.LA(1);
					if ( (LA270_0==NAME) ) {
						alt270=1;
					}
					else if ( (LA270_0==AT_SIGN||LA270_0==IDENT||LA270_0==MINUS) ) {
						alt270=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 270, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(270);}

					switch (alt270) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:858:15: NAME
							{
							dbg.location(858,15);
							match(input,NAME,FOLLOW_NAME_in_cssId5160); if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:859:17: {...}? less_selector_interpolation_exp
							{
							dbg.location(859,17);
							if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "cssId", "isLessSource()");
							}dbg.location(859,35);
							pushFollow(FOLLOW_less_selector_interpolation_exp_in_cssId5180);
							less_selector_interpolation_exp();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(270);}

					}

					}
					break;

			}
		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(WS, IDENT, LBRACE));
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(862, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cssId");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cssId"



	// $ANTLR start "cssClass"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:868:1: cssClass : ( ( DOT ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp | IDENT | NOT | GEN ) ) |{...}? DIMENSION );
	public final void cssClass() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cssClass");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(868, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:869:5: ( ( DOT ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp | IDENT | NOT | GEN ) ) |{...}? DIMENSION )
			int alt273=2;
			try { dbg.enterDecision(273, decisionCanBacktrack[273]);

			int LA273_0 = input.LA(1);
			if ( (LA273_0==DOT) ) {
				alt273=1;
			}
			else if ( (LA273_0==DIMENSION) ) {
				alt273=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 273, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(273);}

			switch (alt273) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:869:7: ( DOT ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp | IDENT | NOT | GEN ) )
					{
					dbg.location(869,7);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:869:7: ( DOT ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp | IDENT | NOT | GEN ) )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:869:8: DOT ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp | IDENT | NOT | GEN )
					{
					dbg.location(869,8);
					match(input,DOT,FOLLOW_DOT_in_cssClass5232); if (state.failed) return;dbg.location(870,9);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:870:9: ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp | IDENT | NOT | GEN )
					int alt272=5;
					try { dbg.enterSubRule(272);
					try { dbg.enterDecision(272, decisionCanBacktrack[272]);

					switch ( input.LA(1) ) {
					case IDENT:
						{
						switch ( input.LA(2) ) {
						case HASH_SYMBOL:
							{
							int LA272_7 = input.LA(3);
							if ( (LA272_7==LBRACE) ) {
								alt272=1;
							}
							else if ( (LA272_7==AT_SIGN||LA272_7==IDENT||LA272_7==MINUS||LA272_7==NAME) ) {
								alt272=3;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 272, 7, input);
									dbg.recognitionException(nvae);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

							}
							break;
						case AT_SIGN:
							{
							alt272=2;
							}
							break;
						case COLON:
						case COMMA:
						case COMMENT:
						case DCOLON:
						case DIMENSION:
						case DOT:
						case GREATER:
						case HASH:
						case LBRACE:
						case LBRACKET:
						case LESS_AND:
						case NL:
						case PLUS:
						case RBRACE:
						case RPAREN:
						case SASS_EXTEND_ONLY_SELECTOR:
						case SEMI:
						case TILDE:
						case WS:
							{
							alt272=3;
							}
							break;
						default:
							if (state.backtracking>0) {state.failed=true; return;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 272, 1, input);
								dbg.recognitionException(nvae);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}
						}
						break;
					case HASH_SYMBOL:
						{
						alt272=1;
						}
						break;
					case AT_SIGN:
						{
						alt272=2;
						}
						break;
					case MINUS:
						{
						int LA272_4 = input.LA(2);
						if ( (LA272_4==HASH_SYMBOL) ) {
							alt272=1;
						}
						else if ( (LA272_4==AT_SIGN) ) {
							alt272=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 272, 4, input);
								dbg.recognitionException(nvae);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case NOT:
						{
						alt272=4;
						}
						break;
					case GEN:
						{
						alt272=5;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 272, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(272);}

					switch (alt272) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:871:14: {...}? sass_selector_interpolation_exp
							{
							dbg.location(871,14);
							if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "cssClass", "isScssSource()");
							}dbg.location(871,33);
							pushFollow(FOLLOW_sass_selector_interpolation_exp_in_cssClass5260);
							sass_selector_interpolation_exp();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:872:15: {...}? less_selector_interpolation_exp
							{
							dbg.location(872,15);
							if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "cssClass", "isLessSource()");
							}dbg.location(872,33);
							pushFollow(FOLLOW_less_selector_interpolation_exp_in_cssClass5278);
							less_selector_interpolation_exp();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 3 :
							dbg.enterAlt(3);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:873:15: IDENT
							{
							dbg.location(873,15);
							match(input,IDENT,FOLLOW_IDENT_in_cssClass5294); if (state.failed) return;
							}
							break;
						case 4 :
							dbg.enterAlt(4);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:874:15: NOT
							{
							dbg.location(874,15);
							match(input,NOT,FOLLOW_NOT_in_cssClass5310); if (state.failed) return;
							}
							break;
						case 5 :
							dbg.enterAlt(5);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:875:15: GEN
							{
							dbg.location(875,15);
							match(input,GEN,FOLLOW_GEN_in_cssClass5326); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(272);}

					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:877:11: {...}? DIMENSION
					{
					dbg.location(877,11);
					if ( !(evalPredicate(tokenNameStartsWith("."),"tokenNameStartsWith(\".\")")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cssClass", "tokenNameStartsWith(\".\")");
					}dbg.location(877,39);
					match(input,DIMENSION,FOLLOW_DIMENSION_in_cssClass5350); if (state.failed) return;
					}
					break;

			}
		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(WS, IDENT, LBRACE));
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(878, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cssClass");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cssClass"



	// $ANTLR start "elementName"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:885:1: elementName : ( IDENT | GEN | LESS_AND | STAR );
	public final void elementName() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "elementName");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(885, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:886:5: ( IDENT | GEN | LESS_AND | STAR )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(886,5);
			if ( input.LA(1)==GEN||input.LA(1)==IDENT||input.LA(1)==LESS_AND||input.LA(1)==STAR ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(887, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "elementName");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "elementName"



	// $ANTLR start "slAttribute"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:889:1: slAttribute : LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET ;
	public final void slAttribute() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "slAttribute");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(889, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:890:5: ( LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:890:7: LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET
			{
			dbg.location(890,7);
			match(input,LBRACKET,FOLLOW_LBRACKET_in_slAttribute5406); if (state.failed) return;dbg.location(891,6);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:891:6: ( namespacePrefix )?
			int alt274=2;
			try { dbg.enterSubRule(274);
			try { dbg.enterDecision(274, decisionCanBacktrack[274]);

			int LA274_0 = input.LA(1);
			if ( (LA274_0==IDENT) ) {
				int LA274_1 = input.LA(2);
				if ( (LA274_1==PIPE) ) {
					alt274=1;
				}
			}
			else if ( (LA274_0==PIPE||LA274_0==STAR) ) {
				alt274=1;
			}
			} finally {dbg.exitDecision(274);}

			switch (alt274) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:891:6: namespacePrefix
					{
					dbg.location(891,6);
					pushFollow(FOLLOW_namespacePrefix_in_slAttribute5413);
					namespacePrefix();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(274);}
			dbg.location(891,23);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:891:23: ( ws )?
			int alt275=2;
			try { dbg.enterSubRule(275);
			try { dbg.enterDecision(275, decisionCanBacktrack[275]);

			int LA275_0 = input.LA(1);
			if ( (LA275_0==COMMENT||LA275_0==NL||LA275_0==WS) ) {
				alt275=1;
			}
			} finally {dbg.exitDecision(275);}

			switch (alt275) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:891:23: ws
					{
					dbg.location(891,23);
					pushFollow(FOLLOW_ws_in_slAttribute5416);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(275);}
			dbg.location(892,9);
			pushFollow(FOLLOW_slAttributeName_in_slAttribute5427);
			slAttributeName();
			state._fsp--;
			if (state.failed) return;dbg.location(892,25);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:892:25: ( ws )?
			int alt276=2;
			try { dbg.enterSubRule(276);
			try { dbg.enterDecision(276, decisionCanBacktrack[276]);

			int LA276_0 = input.LA(1);
			if ( (LA276_0==COMMENT||LA276_0==NL||LA276_0==WS) ) {
				alt276=1;
			}
			} finally {dbg.exitDecision(276);}

			switch (alt276) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:892:25: ws
					{
					dbg.location(892,25);
					pushFollow(FOLLOW_ws_in_slAttribute5429);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(276);}
			dbg.location(894,13);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:894:13: ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )?
			int alt279=2;
			try { dbg.enterSubRule(279);
			try { dbg.enterDecision(279, decisionCanBacktrack[279]);

			int LA279_0 = input.LA(1);
			if ( (LA279_0==BEGINS||LA279_0==CONTAINS||LA279_0==DASHMATCH||LA279_0==ENDS||LA279_0==INCLUDES||LA279_0==OPEQ) ) {
				alt279=1;
			}
			} finally {dbg.exitDecision(279);}

			switch (alt279) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:895:17: ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )?
					{
					dbg.location(895,17);
					if ( input.LA(1)==BEGINS||input.LA(1)==CONTAINS||input.LA(1)==DASHMATCH||input.LA(1)==ENDS||input.LA(1)==INCLUDES||input.LA(1)==OPEQ ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}dbg.location(903,17);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:903:17: ( ws )?
					int alt277=2;
					try { dbg.enterSubRule(277);
					try { dbg.enterDecision(277, decisionCanBacktrack[277]);

					int LA277_0 = input.LA(1);
					if ( (LA277_0==COMMENT||LA277_0==NL||LA277_0==WS) ) {
						alt277=1;
					}
					} finally {dbg.exitDecision(277);}

					switch (alt277) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:903:17: ws
							{
							dbg.location(903,17);
							pushFollow(FOLLOW_ws_in_slAttribute5643);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(277);}
					dbg.location(904,17);
					pushFollow(FOLLOW_slAttributeValue_in_slAttribute5662);
					slAttributeValue();
					state._fsp--;
					if (state.failed) return;dbg.location(905,17);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:905:17: ( ws )?
					int alt278=2;
					try { dbg.enterSubRule(278);
					try { dbg.enterDecision(278, decisionCanBacktrack[278]);

					int LA278_0 = input.LA(1);
					if ( (LA278_0==COMMENT||LA278_0==NL||LA278_0==WS) ) {
						alt278=1;
					}
					} finally {dbg.exitDecision(278);}

					switch (alt278) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:905:17: ws
							{
							dbg.location(905,17);
							pushFollow(FOLLOW_ws_in_slAttribute5680);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(278);}

					}
					break;

			}
			} finally {dbg.exitSubRule(279);}
			dbg.location(908,7);
			match(input,RBRACKET,FOLLOW_RBRACKET_in_slAttribute5705); if (state.failed) return;
			}

		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(IDENT, LBRACE));
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(909, 0);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "slAttribute");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "slAttribute"



	// $ANTLR start "slAttributeName"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:916:1: slAttributeName : IDENT ;
	public final void slAttributeName() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "slAttributeName");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(916, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:917:2: ( IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:917:4: IDENT
			{
			dbg.location(917,4);
			match(input,IDENT,FOLLOW_IDENT_in_slAttributeName5721); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(918, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "slAttributeName");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "slAttributeName"



	// $ANTLR start "slAttributeValue"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:920:1: slAttributeValue : ( IDENT | STRING ) ;
	public final void slAttributeValue() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "slAttributeValue");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(920, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:921:2: ( ( IDENT | STRING ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(921,2);
			if ( input.LA(1)==IDENT||input.LA(1)==STRING ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(926, 8);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "slAttributeValue");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "slAttributeValue"



	// $ANTLR start "pseudo"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:928:1: pseudo : ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) |{...}? sass_interpolation_expression_var | ( NOT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN ) |{...}? ( IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN ) | ({...}?{...}? IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup )? RPAREN ) ) ;
	public final void pseudo() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "pseudo");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(928, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:929:5: ( ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) |{...}? sass_interpolation_expression_var | ( NOT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN ) |{...}? ( IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN ) | ({...}?{...}? IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup )? RPAREN ) ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:929:7: ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) |{...}? sass_interpolation_expression_var | ( NOT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN ) |{...}? ( IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN ) | ({...}?{...}? IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup )? RPAREN ) )
			{
			dbg.location(929,7);
			if ( input.LA(1)==COLON||input.LA(1)==DCOLON ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}dbg.location(930,14);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:930:14: ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) |{...}? sass_interpolation_expression_var | ( NOT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN ) |{...}? ( IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN ) | ({...}?{...}? IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup )? RPAREN ) )
			int alt296=5;
			try { dbg.enterSubRule(296);
			try { dbg.enterDecision(296, decisionCanBacktrack[296]);

			switch ( input.LA(1) ) {
			case IDENT:
				{
				int LA296_1 = input.LA(2);
				if ( (!(evalPredicate(((evalPredicate(tokenNameEquals("extend"),"tokenNameEquals(\"extend\")")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(tokenNameEquals("is") || tokenNameEquals("where") || tokenNameEquals("has"),"tokenNameEquals(\"is\") || tokenNameEquals(\"where\") || tokenNameEquals(\"has\")")),""))) ) {
					alt296=1;
				}
				else if ( (evalPredicate(tokenNameEquals("is") || tokenNameEquals("where") || tokenNameEquals("has"),"tokenNameEquals(\"is\") || tokenNameEquals(\"where\") || tokenNameEquals(\"has\")")) ) {
					alt296=4;
				}
				else if ( ((evalPredicate(tokenNameEquals("extend"),"tokenNameEquals(\"extend\")")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt296=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 296, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case HASH_SYMBOL:
				{
				alt296=2;
				}
				break;
			case NOT:
				{
				alt296=3;
				}
				break;
			case GEN:
				{
				alt296=1;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 296, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(296);}

			switch (alt296) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:931:17: ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? )
					{
					dbg.location(931,17);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:931:17: ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:932:21: ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?
					{
					dbg.location(932,21);
					if ( input.LA(1)==GEN||input.LA(1)==IDENT ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}dbg.location(933,21);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:933:21: ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?
					int alt284=2;
					try { dbg.enterSubRule(284);
					try { dbg.enterDecision(284, decisionCanBacktrack[284]);

					try {
						isCyclicDecision = true;
						alt284 = dfa284.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(284);}

					switch (alt284) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:25: ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN
							{
							dbg.location(934,25);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:25: ( ws )?
							int alt280=2;
							try { dbg.enterSubRule(280);
							try { dbg.enterDecision(280, decisionCanBacktrack[280]);

							int LA280_0 = input.LA(1);
							if ( (LA280_0==COMMENT||LA280_0==NL||LA280_0==WS) ) {
								alt280=1;
							}
							} finally {dbg.exitDecision(280);}

							switch (alt280) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:25: ws
									{
									dbg.location(934,25);
									pushFollow(FOLLOW_ws_in_pseudo5913);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(280);}
							dbg.location(934,29);
							match(input,LPAREN,FOLLOW_LPAREN_in_pseudo5916); if (state.failed) return;dbg.location(934,36);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:36: ( ws )?
							int alt281=2;
							try { dbg.enterSubRule(281);
							try { dbg.enterDecision(281, decisionCanBacktrack[281]);

							int LA281_0 = input.LA(1);
							if ( (LA281_0==COMMENT||LA281_0==NL||LA281_0==WS) ) {
								alt281=1;
							}
							} finally {dbg.exitDecision(281);}

							switch (alt281) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:36: ws
									{
									dbg.location(934,36);
									pushFollow(FOLLOW_ws_in_pseudo5918);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(281);}
							dbg.location(934,40);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:40: ( ( expression ( ws )? ) | STAR )?
							int alt283=3;
							try { dbg.enterSubRule(283);
							try { dbg.enterDecision(283, decisionCanBacktrack[283]);

							int LA283_0 = input.LA(1);
							if ( ((LA283_0 >= ANGLE && LA283_0 <= AT_SIGN)||(LA283_0 >= BOTTOMCENTER_SYM && LA283_0 <= BOTTOMRIGHT_SYM)||LA283_0==CHARSET_SYM||LA283_0==COUNTER_STYLE_SYM||LA283_0==DIMENSION||LA283_0==EMS||LA283_0==EXS||(LA283_0 >= FONT_FACE_SYM && LA283_0 <= FREQ)||LA283_0==GEN||(LA283_0 >= HASH && LA283_0 <= HASH_SYMBOL)||LA283_0==IDENT||LA283_0==IMPORT_SYM||(LA283_0 >= LBRACKET && LA283_0 <= LENGTH)||(LA283_0 >= LESS_AND && LA283_0 <= LESS_JS_STRING)||(LA283_0 >= MEDIA_SYM && LA283_0 <= MOZ_DOCUMENT_SYM)||LA283_0==NAMESPACE_SYM||LA283_0==NUMBER||(LA283_0 >= PAGE_SYM && LA283_0 <= PERCENTAGE_SYMBOL)||LA283_0==PLUS||(LA283_0 >= REM && LA283_0 <= RIGHTTOP_SYM)||(LA283_0 >= SASS_AT_ROOT && LA283_0 <= SASS_DEBUG)||(LA283_0 >= SASS_EACH && LA283_0 <= SASS_ELSE)||LA283_0==SASS_EXTEND||(LA283_0 >= SASS_FOR && LA283_0 <= SASS_FUNCTION)||(LA283_0 >= SASS_IF && LA283_0 <= SASS_MIXIN)||(LA283_0 >= SASS_RETURN && LA283_0 <= SASS_WHILE)||LA283_0==STRING||(LA283_0 >= TILDE && LA283_0 <= TOPRIGHT_SYM)||(LA283_0 >= URANGE && LA283_0 <= URI)||LA283_0==VARIABLE||LA283_0==WEBKIT_KEYFRAMES_SYM) ) {
								alt283=1;
							}
							else if ( (LA283_0==STAR) ) {
								alt283=2;
							}
							} finally {dbg.exitDecision(283);}

							switch (alt283) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:42: ( expression ( ws )? )
									{
									dbg.location(934,42);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:42: ( expression ( ws )? )
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:43: expression ( ws )?
									{
									dbg.location(934,43);
									pushFollow(FOLLOW_expression_in_pseudo5924);
									expression();
									state._fsp--;
									if (state.failed) return;dbg.location(934,54);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:54: ( ws )?
									int alt282=2;
									try { dbg.enterSubRule(282);
									try { dbg.enterDecision(282, decisionCanBacktrack[282]);

									int LA282_0 = input.LA(1);
									if ( (LA282_0==COMMENT||LA282_0==NL||LA282_0==WS) ) {
										alt282=1;
									}
									} finally {dbg.exitDecision(282);}

									switch (alt282) {
										case 1 :
											dbg.enterAlt(1);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:54: ws
											{
											dbg.location(934,54);
											pushFollow(FOLLOW_ws_in_pseudo5926);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(282);}

									}

									}
									break;
								case 2 :
									dbg.enterAlt(2);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:61: STAR
									{
									dbg.location(934,61);
									match(input,STAR,FOLLOW_STAR_in_pseudo5932); if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(283);}
							dbg.location(934,69);
							match(input,RPAREN,FOLLOW_RPAREN_in_pseudo5937); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(284);}

					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:937:19: {...}? sass_interpolation_expression_var
					{
					dbg.location(937,19);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "pseudo", "isScssSource()");
					}dbg.location(937,37);
					pushFollow(FOLLOW_sass_interpolation_expression_var_in_pseudo6000);
					sass_interpolation_expression_var();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:938:19: ( NOT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN )
					{
					dbg.location(938,19);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:938:19: ( NOT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:938:21: NOT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN
					{
					dbg.location(938,21);
					match(input,NOT,FOLLOW_NOT_in_pseudo6022); if (state.failed) return;dbg.location(938,25);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:938:25: ( ws )?
					int alt285=2;
					try { dbg.enterSubRule(285);
					try { dbg.enterDecision(285, decisionCanBacktrack[285]);

					int LA285_0 = input.LA(1);
					if ( (LA285_0==COMMENT||LA285_0==NL||LA285_0==WS) ) {
						alt285=1;
					}
					} finally {dbg.exitDecision(285);}

					switch (alt285) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:938:25: ws
							{
							dbg.location(938,25);
							pushFollow(FOLLOW_ws_in_pseudo6024);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(285);}
					dbg.location(938,29);
					match(input,LPAREN,FOLLOW_LPAREN_in_pseudo6027); if (state.failed) return;dbg.location(938,36);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:938:36: ( ws )?
					int alt286=2;
					try { dbg.enterSubRule(286);
					try { dbg.enterDecision(286, decisionCanBacktrack[286]);

					int LA286_0 = input.LA(1);
					if ( (LA286_0==COMMENT||LA286_0==NL||LA286_0==WS) ) {
						alt286=1;
					}
					} finally {dbg.exitDecision(286);}

					switch (alt286) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:938:36: ws
							{
							dbg.location(938,36);
							pushFollow(FOLLOW_ws_in_pseudo6029);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(286);}
					dbg.location(938,40);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:938:40: ( selectorsGroup ( ws )? )?
					int alt288=2;
					try { dbg.enterSubRule(288);
					try { dbg.enterDecision(288, decisionCanBacktrack[288]);

					int LA288_0 = input.LA(1);
					if ( (LA288_0==AT_SIGN||LA288_0==COLON||(LA288_0 >= DCOLON && LA288_0 <= DOT)||(LA288_0 >= GEN && LA288_0 <= GREATER)||(LA288_0 >= HASH && LA288_0 <= HASH_SYMBOL)||LA288_0==IDENT||LA288_0==LBRACKET||LA288_0==LESS_AND||LA288_0==MINUS||(LA288_0 >= PIPE && LA288_0 <= PLUS)||LA288_0==SASS_EXTEND_ONLY_SELECTOR||LA288_0==STAR||LA288_0==TILDE) ) {
						alt288=1;
					}
					} finally {dbg.exitDecision(288);}

					switch (alt288) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:938:42: selectorsGroup ( ws )?
							{
							dbg.location(938,42);
							pushFollow(FOLLOW_selectorsGroup_in_pseudo6034);
							selectorsGroup();
							state._fsp--;
							if (state.failed) return;dbg.location(938,57);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:938:57: ( ws )?
							int alt287=2;
							try { dbg.enterSubRule(287);
							try { dbg.enterDecision(287, decisionCanBacktrack[287]);

							int LA287_0 = input.LA(1);
							if ( (LA287_0==COMMENT||LA287_0==NL||LA287_0==WS) ) {
								alt287=1;
							}
							} finally {dbg.exitDecision(287);}

							switch (alt287) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:938:57: ws
									{
									dbg.location(938,57);
									pushFollow(FOLLOW_ws_in_pseudo6036);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(287);}

							}
							break;

					}
					} finally {dbg.exitSubRule(288);}
					dbg.location(938,63);
					match(input,RPAREN,FOLLOW_RPAREN_in_pseudo6041); if (state.failed) return;
					}

					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:939:19: {...}? ( IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN )
					{
					dbg.location(939,19);
					if ( !(evalPredicate(tokenNameEquals("is") || tokenNameEquals("where") || tokenNameEquals("has"),"tokenNameEquals(\"is\") || tokenNameEquals(\"where\") || tokenNameEquals(\"has\")")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "pseudo", "tokenNameEquals(\"is\") || tokenNameEquals(\"where\") || tokenNameEquals(\"has\")");
					}dbg.location(939,98);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:939:98: ( IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:939:100: IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN
					{
					dbg.location(939,100);
					match(input,IDENT,FOLLOW_IDENT_in_pseudo6067); if (state.failed) return;dbg.location(939,106);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:939:106: ( ws )?
					int alt289=2;
					try { dbg.enterSubRule(289);
					try { dbg.enterDecision(289, decisionCanBacktrack[289]);

					int LA289_0 = input.LA(1);
					if ( (LA289_0==COMMENT||LA289_0==NL||LA289_0==WS) ) {
						alt289=1;
					}
					} finally {dbg.exitDecision(289);}

					switch (alt289) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:939:106: ws
							{
							dbg.location(939,106);
							pushFollow(FOLLOW_ws_in_pseudo6069);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(289);}
					dbg.location(939,110);
					match(input,LPAREN,FOLLOW_LPAREN_in_pseudo6072); if (state.failed) return;dbg.location(939,117);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:939:117: ( ws )?
					int alt290=2;
					try { dbg.enterSubRule(290);
					try { dbg.enterDecision(290, decisionCanBacktrack[290]);

					int LA290_0 = input.LA(1);
					if ( (LA290_0==COMMENT||LA290_0==NL||LA290_0==WS) ) {
						alt290=1;
					}
					} finally {dbg.exitDecision(290);}

					switch (alt290) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:939:117: ws
							{
							dbg.location(939,117);
							pushFollow(FOLLOW_ws_in_pseudo6074);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(290);}
					dbg.location(939,121);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:939:121: ( selectorsGroup ( ws )? )?
					int alt292=2;
					try { dbg.enterSubRule(292);
					try { dbg.enterDecision(292, decisionCanBacktrack[292]);

					int LA292_0 = input.LA(1);
					if ( (LA292_0==AT_SIGN||LA292_0==COLON||(LA292_0 >= DCOLON && LA292_0 <= DOT)||(LA292_0 >= GEN && LA292_0 <= GREATER)||(LA292_0 >= HASH && LA292_0 <= HASH_SYMBOL)||LA292_0==IDENT||LA292_0==LBRACKET||LA292_0==LESS_AND||LA292_0==MINUS||(LA292_0 >= PIPE && LA292_0 <= PLUS)||LA292_0==SASS_EXTEND_ONLY_SELECTOR||LA292_0==STAR||LA292_0==TILDE) ) {
						alt292=1;
					}
					} finally {dbg.exitDecision(292);}

					switch (alt292) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:939:123: selectorsGroup ( ws )?
							{
							dbg.location(939,123);
							pushFollow(FOLLOW_selectorsGroup_in_pseudo6079);
							selectorsGroup();
							state._fsp--;
							if (state.failed) return;dbg.location(939,138);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:939:138: ( ws )?
							int alt291=2;
							try { dbg.enterSubRule(291);
							try { dbg.enterDecision(291, decisionCanBacktrack[291]);

							int LA291_0 = input.LA(1);
							if ( (LA291_0==COMMENT||LA291_0==NL||LA291_0==WS) ) {
								alt291=1;
							}
							} finally {dbg.exitDecision(291);}

							switch (alt291) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:939:138: ws
									{
									dbg.location(939,138);
									pushFollow(FOLLOW_ws_in_pseudo6081);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(291);}

							}
							break;

					}
					} finally {dbg.exitSubRule(292);}
					dbg.location(939,144);
					match(input,RPAREN,FOLLOW_RPAREN_in_pseudo6086); if (state.failed) return;
					}

					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:19: ({...}?{...}? IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup )? RPAREN )
					{
					dbg.location(940,19);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:19: ({...}?{...}? IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup )? RPAREN )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:20: {...}?{...}? IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup )? RPAREN
					{
					dbg.location(940,20);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "pseudo", "isLessSource()");
					}dbg.location(940,38);
					if ( !(evalPredicate(tokenNameEquals("extend"),"tokenNameEquals(\"extend\")")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "pseudo", "tokenNameEquals(\"extend\")");
					}dbg.location(940,67);
					match(input,IDENT,FOLLOW_IDENT_in_pseudo6113); if (state.failed) return;dbg.location(940,73);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:73: ( ws )?
					int alt293=2;
					try { dbg.enterSubRule(293);
					try { dbg.enterDecision(293, decisionCanBacktrack[293]);

					int LA293_0 = input.LA(1);
					if ( (LA293_0==COMMENT||LA293_0==NL||LA293_0==WS) ) {
						alt293=1;
					}
					} finally {dbg.exitDecision(293);}

					switch (alt293) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:73: ws
							{
							dbg.location(940,73);
							pushFollow(FOLLOW_ws_in_pseudo6115);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(293);}
					dbg.location(940,77);
					match(input,LPAREN,FOLLOW_LPAREN_in_pseudo6118); if (state.failed) return;dbg.location(940,84);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:84: ( ws )?
					int alt294=2;
					try { dbg.enterSubRule(294);
					try { dbg.enterDecision(294, decisionCanBacktrack[294]);

					int LA294_0 = input.LA(1);
					if ( (LA294_0==COMMENT||LA294_0==NL||LA294_0==WS) ) {
						alt294=1;
					}
					} finally {dbg.exitDecision(294);}

					switch (alt294) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:84: ws
							{
							dbg.location(940,84);
							pushFollow(FOLLOW_ws_in_pseudo6120);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(294);}
					dbg.location(940,88);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:88: ( selectorsGroup )?
					int alt295=2;
					try { dbg.enterSubRule(295);
					try { dbg.enterDecision(295, decisionCanBacktrack[295]);

					int LA295_0 = input.LA(1);
					if ( (LA295_0==AT_SIGN||LA295_0==COLON||(LA295_0 >= DCOLON && LA295_0 <= DOT)||(LA295_0 >= GEN && LA295_0 <= GREATER)||(LA295_0 >= HASH && LA295_0 <= HASH_SYMBOL)||LA295_0==IDENT||LA295_0==LBRACKET||LA295_0==LESS_AND||LA295_0==MINUS||(LA295_0 >= PIPE && LA295_0 <= PLUS)||LA295_0==SASS_EXTEND_ONLY_SELECTOR||LA295_0==STAR||LA295_0==TILDE) ) {
						alt295=1;
					}
					} finally {dbg.exitDecision(295);}

					switch (alt295) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:88: selectorsGroup
							{
							dbg.location(940,88);
							pushFollow(FOLLOW_selectorsGroup_in_pseudo6123);
							selectorsGroup();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(295);}
					dbg.location(940,104);
					match(input,RPAREN,FOLLOW_RPAREN_in_pseudo6126); if (state.failed) return;
					}

					}
					break;

			}
			} finally {dbg.exitSubRule(296);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(942, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "pseudo");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "pseudo"



	// $ANTLR start "propertyDeclaration"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:944:1: propertyDeclaration : ({...}? ( STAR )? property ( ws )? COLON ( ws )? cp_propertyValue |{...}? property ( ws )? COLON ( ws )? ( componentValueOuter )? | ( STAR )? property ( ws )? COLON ( ws )? propertyValue ( ( ws )? prio )? );
	public final void propertyDeclaration() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "propertyDeclaration");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(944, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:945:5: ({...}? ( STAR )? property ( ws )? COLON ( ws )? cp_propertyValue |{...}? property ( ws )? COLON ( ws )? ( componentValueOuter )? | ( STAR )? property ( ws )? COLON ( ws )? propertyValue ( ( ws )? prio )? )
			int alt308=3;
			try { dbg.enterDecision(308, decisionCanBacktrack[308]);

			switch ( input.LA(1) ) {
			case STAR:
				{
				int LA308_1 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")) ) {
					alt308=1;
				}
				else if ( (true) ) {
					alt308=3;
				}

				}
				break;
			case IDENT:
				{
				int LA308_2 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")) ) {
					alt308=1;
				}
				else if ( (evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")) ) {
					alt308=2;
				}
				else if ( (true) ) {
					alt308=3;
				}

				}
				break;
			case HASH_SYMBOL:
				{
				int LA308_3 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt308=1;
				}
				else if ( ((evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt308=2;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt308=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 308, 3, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT_SIGN:
				{
				int LA308_4 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt308=1;
				}
				else if ( ((evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt308=2;
				}
				else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
					alt308=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 308, 4, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case VARIABLE:
				{
				int LA308_5 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")) ) {
					alt308=1;
				}
				else if ( (evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")) ) {
					alt308=2;
				}
				else if ( (true) ) {
					alt308=3;
				}

				}
				break;
			case MINUS:
				{
				int LA308_6 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")&&(evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")))) ) {
					alt308=1;
				}
				else if ( ((evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")&&(evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")))) ) {
					alt308=2;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt308=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 308, 6, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case GEN:
				{
				int LA308_7 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")) ) {
					alt308=1;
				}
				else if ( (evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")) ) {
					alt308=2;
				}
				else if ( (true) ) {
					alt308=3;
				}

				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				int LA308_8 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt308=1;
				}
				else if ( (((evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt308=2;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt308=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 308, 8, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_VAR:
				{
				int LA308_9 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt308=1;
				}
				else if ( (((evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt308=2;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt308=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 308, 9, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 308, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(308);}

			switch (alt308) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:946:7: {...}? ( STAR )? property ( ws )? COLON ( ws )? cp_propertyValue
					{
					dbg.location(946,7);
					if ( !(evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "propertyDeclaration", "isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")");
					}dbg.location(946,66);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:946:66: ( STAR )?
					int alt297=2;
					try { dbg.enterSubRule(297);
					try { dbg.enterDecision(297, decisionCanBacktrack[297]);

					int LA297_0 = input.LA(1);
					if ( (LA297_0==STAR) ) {
						alt297=1;
					}
					} finally {dbg.exitDecision(297);}

					switch (alt297) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:946:66: STAR
							{
							dbg.location(946,66);
							match(input,STAR,FOLLOW_STAR_in_propertyDeclaration6168); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(297);}
					dbg.location(946,72);
					pushFollow(FOLLOW_property_in_propertyDeclaration6171);
					property();
					state._fsp--;
					if (state.failed) return;dbg.location(946,81);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:946:81: ( ws )?
					int alt298=2;
					try { dbg.enterSubRule(298);
					try { dbg.enterDecision(298, decisionCanBacktrack[298]);

					int LA298_0 = input.LA(1);
					if ( (LA298_0==COMMENT||LA298_0==NL||LA298_0==WS) ) {
						alt298=1;
					}
					} finally {dbg.exitDecision(298);}

					switch (alt298) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:946:81: ws
							{
							dbg.location(946,81);
							pushFollow(FOLLOW_ws_in_propertyDeclaration6173);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(298);}
					dbg.location(946,85);
					match(input,COLON,FOLLOW_COLON_in_propertyDeclaration6176); if (state.failed) return;dbg.location(946,91);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:946:91: ( ws )?
					int alt299=2;
					try { dbg.enterSubRule(299);
					try { dbg.enterDecision(299, decisionCanBacktrack[299]);

					int LA299_0 = input.LA(1);
					if ( (LA299_0==COMMENT||LA299_0==NL||LA299_0==WS) ) {
						alt299=1;
					}
					} finally {dbg.exitDecision(299);}

					switch (alt299) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:946:91: ws
							{
							dbg.location(946,91);
							pushFollow(FOLLOW_ws_in_propertyDeclaration6178);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(299);}
					dbg.location(946,95);
					pushFollow(FOLLOW_cp_propertyValue_in_propertyDeclaration6181);
					cp_propertyValue();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:947:7: {...}? property ( ws )? COLON ( ws )? ( componentValueOuter )?
					{
					dbg.location(947,7);
					if ( !(evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "propertyDeclaration", "tokenNameStartsWith(\"--\")");
					}dbg.location(947,36);
					pushFollow(FOLLOW_property_in_propertyDeclaration6192);
					property();
					state._fsp--;
					if (state.failed) return;dbg.location(947,45);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:947:45: ( ws )?
					int alt300=2;
					try { dbg.enterSubRule(300);
					try { dbg.enterDecision(300, decisionCanBacktrack[300]);

					int LA300_0 = input.LA(1);
					if ( (LA300_0==COMMENT||LA300_0==NL||LA300_0==WS) ) {
						alt300=1;
					}
					} finally {dbg.exitDecision(300);}

					switch (alt300) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:947:45: ws
							{
							dbg.location(947,45);
							pushFollow(FOLLOW_ws_in_propertyDeclaration6194);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(300);}
					dbg.location(947,49);
					match(input,COLON,FOLLOW_COLON_in_propertyDeclaration6197); if (state.failed) return;dbg.location(947,55);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:947:55: ( ws )?
					int alt301=2;
					try { dbg.enterSubRule(301);
					try { dbg.enterDecision(301, decisionCanBacktrack[301]);

					int LA301_0 = input.LA(1);
					if ( (LA301_0==COMMENT||LA301_0==NL||LA301_0==WS) ) {
						alt301=1;
					}
					} finally {dbg.exitDecision(301);}

					switch (alt301) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:947:55: ws
							{
							dbg.location(947,55);
							pushFollow(FOLLOW_ws_in_propertyDeclaration6199);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(301);}
					dbg.location(947,59);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:947:59: ( componentValueOuter )?
					int alt302=2;
					try { dbg.enterSubRule(302);
					try { dbg.enterDecision(302, decisionCanBacktrack[302]);

					switch ( input.LA(1) ) {
						case LBRACE:
						case LPAREN:
							{
							alt302=1;
							}
							break;
						case LBRACKET:
							{
							alt302=1;
							}
							break;
						case IDENT:
							{
							alt302=1;
							}
							break;
						case COMMENT:
						case NL:
						case WS:
							{
							alt302=1;
							}
							break;
						case LESS_AND:
							{
							alt302=1;
							}
							break;
						case DOT:
							{
							alt302=1;
							}
							break;
						case HASH:
							{
							alt302=1;
							}
							break;
						case SASS_MIXIN:
							{
							alt302=1;
							}
							break;
						case AT_IDENT:
							{
							alt302=1;
							}
							break;
						case SASS_INCLUDE:
							{
							alt302=1;
							}
							break;
						case SASS_AT_ROOT:
							{
							alt302=1;
							}
							break;
						case GREATER:
						case PLUS:
						case TILDE:
							{
							alt302=1;
							}
							break;
						case SASS_EXTEND_ONLY_SELECTOR:
							{
							int LA302_16 = input.LA(2);
							if ( (!(evalPredicate(evalPredicate(isScssSource(),"isScssSource()"),""))) ) {
								alt302=1;
							}
							}
							break;
						case HASH_SYMBOL:
							{
							alt302=1;
							}
							break;
						case DIMENSION:
							{
							int LA302_18 = input.LA(2);
							if ( (!(evalPredicate(evalPredicate(tokenNameStartsWith("."),"tokenNameStartsWith(\".\")"),""))) ) {
								alt302=1;
							}
							}
							break;
						case COLON:
						case DCOLON:
							{
							alt302=1;
							}
							break;
						case MINUS:
							{
							alt302=1;
							}
							break;
						case AT_SIGN:
							{
							alt302=1;
							}
							break;
						case STAR:
							{
							alt302=1;
							}
							break;
						case PIPE:
							{
							alt302=1;
							}
							break;
						case GEN:
							{
							alt302=1;
							}
							break;
						case VARIABLE:
							{
							alt302=1;
							}
							break;
						case SASS_DEBUG:
						case SASS_WARN:
							{
							alt302=1;
							}
							break;
						case SASS_VAR:
							{
							alt302=1;
							}
							break;
						case SUPPORTS_SYM:
							{
							alt302=1;
							}
							break;
						case SASS_IF:
							{
							alt302=1;
							}
							break;
						case SASS_FOR:
							{
							alt302=1;
							}
							break;
						case SASS_EACH:
							{
							alt302=1;
							}
							break;
						case SASS_WHILE:
							{
							alt302=1;
							}
							break;
						case A:
						case ANGLE:
						case B:
						case BEGINS:
						case C:
						case CDC:
						case CDO:
						case COMMA:
						case CONTAINS:
						case CP_DOTS:
						case CP_EQ:
						case CP_NOT_EQ:
						case D:
						case DASHMATCH:
						case E:
						case EMS:
						case ENDS:
						case ESCAPE:
						case EXCLAMATION_MARK:
						case EXS:
						case F:
						case FREQ:
						case G:
						case GREATER_OR_EQ:
						case H:
						case HEXCHAR:
						case HEXCHAR_WILDCARD:
						case I:
						case IMPORTANT_SYM:
						case INCLUDES:
						case INVALID:
						case J:
						case K:
						case L:
						case LAYER_SYM:
						case LENGTH:
						case LESS:
						case LESS_JS_STRING:
						case LESS_OR_EQ:
						case LESS_REST:
						case LINE_COMMENT:
						case M:
						case MOZ_DOMAIN:
						case MOZ_REGEXP:
						case MOZ_URL_PREFIX:
						case N:
						case NAME:
						case NMCHAR:
						case NMSTART:
						case NONASCII:
						case NOT:
						case NUMBER:
						case O:
						case OPEQ:
						case P:
						case PERCENTAGE:
						case PERCENTAGE_SYMBOL:
						case Q:
						case R:
						case REM:
						case RESOLUTION:
						case S:
						case SASS_CONTENT:
						case SASS_DEFAULT:
						case SASS_ELSEIF:
						case SASS_ERROR:
						case SASS_GLOBAL:
						case SASS_OPTIONAL:
						case SOLIDUS:
						case STRING:
						case T:
						case TIME:
						case U:
						case UNICODE:
						case URANGE:
						case URI:
						case URL:
						case V:
						case W:
						case X:
						case Y:
						case Z:
							{
							alt302=1;
							}
							break;
						case IMPORT_SYM:
							{
							alt302=1;
							}
							break;
						case PAGE_SYM:
							{
							alt302=1;
							}
							break;
						case FONT_FACE_SYM:
							{
							alt302=1;
							}
							break;
						case MOZ_DOCUMENT_SYM:
							{
							alt302=1;
							}
							break;
						case WEBKIT_KEYFRAMES_SYM:
							{
							alt302=1;
							}
							break;
						case MEDIA_SYM:
							{
							alt302=1;
							}
							break;
						case SASS_EXTEND:
							{
							alt302=1;
							}
							break;
						case BOTTOMCENTER_SYM:
						case BOTTOMLEFTCORNER_SYM:
						case BOTTOMLEFT_SYM:
						case BOTTOMRIGHTCORNER_SYM:
						case BOTTOMRIGHT_SYM:
						case LEFTBOTTOM_SYM:
						case LEFTMIDDLE_SYM:
						case LEFTTOP_SYM:
						case RIGHTBOTTOM_SYM:
						case RIGHTMIDDLE_SYM:
						case RIGHTTOP_SYM:
						case TOPCENTER_SYM:
						case TOPLEFTCORNER_SYM:
						case TOPLEFT_SYM:
						case TOPRIGHTCORNER_SYM:
						case TOPRIGHT_SYM:
							{
							alt302=1;
							}
							break;
						case CHARSET_SYM:
						case COUNTER_STYLE_SYM:
						case NAMESPACE_SYM:
						case SASS_ELSE:
						case SASS_FORWARD:
						case SASS_FUNCTION:
						case SASS_RETURN:
						case SASS_USE:
							{
							alt302=1;
							}
							break;
					}
					} finally {dbg.exitDecision(302);}

					switch (alt302) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:947:59: componentValueOuter
							{
							dbg.location(947,59);
							pushFollow(FOLLOW_componentValueOuter_in_propertyDeclaration6202);
							componentValueOuter();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(302);}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:948:7: ( STAR )? property ( ws )? COLON ( ws )? propertyValue ( ( ws )? prio )?
					{
					dbg.location(948,7);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:948:7: ( STAR )?
					int alt303=2;
					try { dbg.enterSubRule(303);
					try { dbg.enterDecision(303, decisionCanBacktrack[303]);

					int LA303_0 = input.LA(1);
					if ( (LA303_0==STAR) ) {
						alt303=1;
					}
					} finally {dbg.exitDecision(303);}

					switch (alt303) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:948:7: STAR
							{
							dbg.location(948,7);
							match(input,STAR,FOLLOW_STAR_in_propertyDeclaration6211); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(303);}
					dbg.location(948,13);
					pushFollow(FOLLOW_property_in_propertyDeclaration6214);
					property();
					state._fsp--;
					if (state.failed) return;dbg.location(948,22);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:948:22: ( ws )?
					int alt304=2;
					try { dbg.enterSubRule(304);
					try { dbg.enterDecision(304, decisionCanBacktrack[304]);

					int LA304_0 = input.LA(1);
					if ( (LA304_0==COMMENT||LA304_0==NL||LA304_0==WS) ) {
						alt304=1;
					}
					} finally {dbg.exitDecision(304);}

					switch (alt304) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:948:22: ws
							{
							dbg.location(948,22);
							pushFollow(FOLLOW_ws_in_propertyDeclaration6216);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(304);}
					dbg.location(948,26);
					match(input,COLON,FOLLOW_COLON_in_propertyDeclaration6219); if (state.failed) return;dbg.location(948,32);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:948:32: ( ws )?
					int alt305=2;
					try { dbg.enterSubRule(305);
					try { dbg.enterDecision(305, decisionCanBacktrack[305]);

					int LA305_0 = input.LA(1);
					if ( (LA305_0==COMMENT||LA305_0==NL||LA305_0==WS) ) {
						alt305=1;
					}
					} finally {dbg.exitDecision(305);}

					switch (alt305) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:948:32: ws
							{
							dbg.location(948,32);
							pushFollow(FOLLOW_ws_in_propertyDeclaration6221);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(305);}
					dbg.location(948,36);
					pushFollow(FOLLOW_propertyValue_in_propertyDeclaration6224);
					propertyValue();
					state._fsp--;
					if (state.failed) return;dbg.location(948,50);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:948:50: ( ( ws )? prio )?
					int alt307=2;
					try { dbg.enterSubRule(307);
					try { dbg.enterDecision(307, decisionCanBacktrack[307]);

					try {
						isCyclicDecision = true;
						alt307 = dfa307.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(307);}

					switch (alt307) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:948:51: ( ws )? prio
							{
							dbg.location(948,51);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:948:51: ( ws )?
							int alt306=2;
							try { dbg.enterSubRule(306);
							try { dbg.enterDecision(306, decisionCanBacktrack[306]);

							int LA306_0 = input.LA(1);
							if ( (LA306_0==COMMENT||LA306_0==NL||LA306_0==WS) ) {
								alt306=1;
							}
							} finally {dbg.exitDecision(306);}

							switch (alt306) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:948:51: ws
									{
									dbg.location(948,51);
									pushFollow(FOLLOW_ws_in_propertyDeclaration6227);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(306);}
							dbg.location(948,55);
							pushFollow(FOLLOW_prio_in_propertyDeclaration6230);
							prio();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(307);}

					}
					break;

			}
		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        //recovery: if an mismatched token occures inside a declaration is found,
			        //then skip all tokens until an end of the rule is found represented by right curly brace
			        consumeUntil(input, BitSet.of(SEMI, RBRACE));
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(950, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "propertyDeclaration");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "propertyDeclaration"



	// $ANTLR start "cp_propertyValue"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:959:1: cp_propertyValue : ({...}? cp_expression_list | propertyValue );
	public final void cp_propertyValue() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_propertyValue");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(959, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:960:5: ({...}? cp_expression_list | propertyValue )
			int alt309=2;
			try { dbg.enterDecision(309, decisionCanBacktrack[309]);

			switch ( input.LA(1) ) {
			case IMPORTANT_SYM:
			case LBRACE:
			case LPAREN:
			case NOT:
				{
				alt309=1;
				}
				break;
			case MINUS:
			case PLUS:
				{
				int LA309_3 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt309=1;
				}
				else if ( (true) ) {
					alt309=2;
				}

				}
				break;
			case IDENT:
				{
				int LA309_4 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt309=1;
				}
				else if ( (true) ) {
					alt309=2;
				}

				}
				break;
			case VARIABLE:
				{
				int LA309_5 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt309=1;
				}
				else if ( (true) ) {
					alt309=2;
				}

				}
				break;
			case LBRACKET:
				{
				int LA309_6 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt309=1;
				}
				else if ( (true) ) {
					alt309=2;
				}

				}
				break;
			case NUMBER:
				{
				int LA309_7 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt309=1;
				}
				else if ( (true) ) {
					alt309=2;
				}

				}
				break;
			case URANGE:
				{
				int LA309_8 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt309=1;
				}
				else if ( (true) ) {
					alt309=2;
				}

				}
				break;
			case PERCENTAGE:
				{
				int LA309_9 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt309=1;
				}
				else if ( (true) ) {
					alt309=2;
				}

				}
				break;
			case LENGTH:
				{
				int LA309_10 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt309=1;
				}
				else if ( (true) ) {
					alt309=2;
				}

				}
				break;
			case EMS:
				{
				int LA309_11 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt309=1;
				}
				else if ( (true) ) {
					alt309=2;
				}

				}
				break;
			case REM:
				{
				int LA309_12 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt309=1;
				}
				else if ( (true) ) {
					alt309=2;
				}

				}
				break;
			case EXS:
				{
				int LA309_13 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt309=1;
				}
				else if ( (true) ) {
					alt309=2;
				}

				}
				break;
			case ANGLE:
				{
				int LA309_14 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt309=1;
				}
				else if ( (true) ) {
					alt309=2;
				}

				}
				break;
			case TIME:
				{
				int LA309_15 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt309=1;
				}
				else if ( (true) ) {
					alt309=2;
				}

				}
				break;
			case FREQ:
				{
				int LA309_16 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt309=1;
				}
				else if ( (true) ) {
					alt309=2;
				}

				}
				break;
			case RESOLUTION:
				{
				int LA309_17 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt309=1;
				}
				else if ( (true) ) {
					alt309=2;
				}

				}
				break;
			case DIMENSION:
				{
				int LA309_18 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt309=1;
				}
				else if ( (true) ) {
					alt309=2;
				}

				}
				break;
			case STRING:
				{
				int LA309_19 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt309=1;
				}
				else if ( (true) ) {
					alt309=2;
				}

				}
				break;
			case TILDE:
				{
				int LA309_20 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt309=1;
				}
				else if ( (true) ) {
					alt309=2;
				}

				}
				break;
			case LESS_JS_STRING:
				{
				int LA309_21 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt309=1;
				}
				else if ( (true) ) {
					alt309=2;
				}

				}
				break;
			case GEN:
				{
				int LA309_22 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt309=1;
				}
				else if ( (true) ) {
					alt309=2;
				}

				}
				break;
			case URI:
				{
				int LA309_23 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt309=1;
				}
				else if ( (true) ) {
					alt309=2;
				}

				}
				break;
			case HASH:
				{
				int LA309_24 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt309=1;
				}
				else if ( (true) ) {
					alt309=2;
				}

				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				int LA309_25 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt309=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt309=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 309, 25, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_VAR:
				{
				int LA309_26 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt309=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt309=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 309, 26, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LESS_AND:
				{
				int LA309_27 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt309=1;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt309=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 309, 27, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case HASH_SYMBOL:
				{
				int LA309_28 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt309=1;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt309=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 309, 28, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT_SIGN:
				{
				int LA309_29 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt309=1;
				}
				else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
					alt309=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 309, 29, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PERCENTAGE_SYMBOL:
				{
				int LA309_30 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt309=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt309=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 309, 30, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 309, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(309);}

			switch (alt309) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:5: {...}? cp_expression_list
					{
					dbg.location(961,5);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_propertyValue", "isCssPreprocessorSource()");
					}dbg.location(961,34);
					pushFollow(FOLLOW_cp_expression_list_in_cp_propertyValue6270);
					cp_expression_list();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:962:7: propertyValue
					{
					dbg.location(962,7);
					pushFollow(FOLLOW_propertyValue_in_cp_propertyValue6278);
					propertyValue();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(963, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_propertyValue");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_propertyValue"



	// $ANTLR start "propertyValue"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:965:1: propertyValue : expression ;
	public final void propertyValue() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "propertyValue");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(965, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:966:2: ( expression )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:967:9: expression
			{
			dbg.location(967,9);
			pushFollow(FOLLOW_expression_in_propertyValue6300);
			expression();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(968, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "propertyValue");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "propertyValue"



	// $ANTLR start "expressionPredicate"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:971:1: expressionPredicate options {k=1; } : (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE ) ;
	public final void expressionPredicate() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "expressionPredicate");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(971, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:973:5: ( (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:974:5: (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE )
			{
			dbg.location(974,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:974:5: (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+
			int cnt310=0;
			try { dbg.enterSubRule(310);

			loop310:
			while (true) {
				int alt310=2;
				try { dbg.enterDecision(310, decisionCanBacktrack[310]);

				int LA310_0 = input.LA(1);
				if ( ((LA310_0 >= A && LA310_0 <= ANGLE)||(LA310_0 >= AT_SIGN && LA310_0 <= LAYER_SYM)||(LA310_0 >= LBRACKET && LA310_0 <= R)||(LA310_0 >= RBRACKET && LA310_0 <= SASS_USE)||(LA310_0 >= SASS_WARN && LA310_0 <= SASS_WHILE)||(LA310_0 >= STRING && LA310_0 <= Z)) ) {
					alt310=1;
				}

				} finally {dbg.exitDecision(310);}

				switch (alt310) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
					{
					dbg.location(974,5);
					if ( (input.LA(1) >= A && input.LA(1) <= ANGLE)||(input.LA(1) >= AT_SIGN && input.LA(1) <= LAYER_SYM)||(input.LA(1) >= LBRACKET && input.LA(1) <= R)||(input.LA(1) >= RBRACKET && input.LA(1) <= SASS_USE)||(input.LA(1) >= SASS_WARN && input.LA(1) <= SASS_WHILE)||(input.LA(1) >= STRING && input.LA(1) <= Z) ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}
					}
					break;

				default :
					if ( cnt310 >= 1 ) break loop310;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(310, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt310++;
			}
			} finally {dbg.exitSubRule(310);}
			dbg.location(974,76);
			if ( input.LA(1)==RBRACE||input.LA(1)==SEMI ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(975, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "expressionPredicate");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "expressionPredicate"



	// $ANTLR start "preservedToken"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:977:1: preservedToken : ~ ( LPAREN | LBRACE | LBRACKET | RPAREN | RBRACE | RBRACKET ) ;
	public final void preservedToken() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "preservedToken");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(977, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:977:15: (~ ( LPAREN | LBRACE | LBRACKET | RPAREN | RBRACE | RBRACKET ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(977,15);
			if ( (input.LA(1) >= A && input.LA(1) <= LAYER_SYM)||(input.LA(1) >= LEFTBOTTOM_SYM && input.LA(1) <= LINE_COMMENT)||(input.LA(1) >= M && input.LA(1) <= R)||(input.LA(1) >= REM && input.LA(1) <= RIGHTTOP_SYM)||(input.LA(1) >= S && input.LA(1) <= Z) ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(977, 75);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "preservedToken");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "preservedToken"



	// $ANTLR start "preservedTokenTopLevel"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:1: preservedTokenTopLevel : ~ ( LPAREN | LBRACE | LBRACKET | RPAREN | RBRACE | RBRACKET | SEMI ) ;
	public final void preservedTokenTopLevel() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "preservedTokenTopLevel");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(979, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:23: (~ ( LPAREN | LBRACE | LBRACKET | RPAREN | RBRACE | RBRACKET | SEMI ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(979,23);
			if ( (input.LA(1) >= A && input.LA(1) <= LAYER_SYM)||(input.LA(1) >= LEFTBOTTOM_SYM && input.LA(1) <= LINE_COMMENT)||(input.LA(1) >= M && input.LA(1) <= R)||(input.LA(1) >= REM && input.LA(1) <= RIGHTTOP_SYM)||(input.LA(1) >= S && input.LA(1) <= SASS_WHILE)||(input.LA(1) >= SOLIDUS && input.LA(1) <= Z) ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(979, 91);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "preservedTokenTopLevel");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "preservedTokenTopLevel"



	// $ANTLR start "braceBlock"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:981:1: braceBlock : LBRACE ( componentValue )+ RBRACE ;
	public final void braceBlock() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "braceBlock");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(981, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:981:11: ( LBRACE ( componentValue )+ RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:981:13: LBRACE ( componentValue )+ RBRACE
			{
			dbg.location(981,13);
			match(input,LBRACE,FOLLOW_LBRACE_in_braceBlock6456); if (state.failed) return;dbg.location(981,20);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:981:20: ( componentValue )+
			int cnt311=0;
			try { dbg.enterSubRule(311);

			loop311:
			while (true) {
				int alt311=2;
				try { dbg.enterDecision(311, decisionCanBacktrack[311]);

				int LA311_0 = input.LA(1);
				if ( ((LA311_0 >= A && LA311_0 <= R)||(LA311_0 >= REM && LA311_0 <= RIGHTTOP_SYM)||(LA311_0 >= S && LA311_0 <= Z)) ) {
					alt311=1;
				}

				} finally {dbg.exitDecision(311);}

				switch (alt311) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:981:20: componentValue
					{
					dbg.location(981,20);
					pushFollow(FOLLOW_componentValue_in_braceBlock6458);
					componentValue();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					if ( cnt311 >= 1 ) break loop311;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(311, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt311++;
			}
			} finally {dbg.exitSubRule(311);}
			dbg.location(981,36);
			match(input,RBRACE,FOLLOW_RBRACE_in_braceBlock6461); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(981, 41);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "braceBlock");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "braceBlock"



	// $ANTLR start "bracketBlock"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:983:1: bracketBlock : LBRACKET ( componentValue )+ RBRACKET ;
	public final void bracketBlock() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "bracketBlock");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(983, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:983:13: ( LBRACKET ( componentValue )+ RBRACKET )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:983:15: LBRACKET ( componentValue )+ RBRACKET
			{
			dbg.location(983,15);
			match(input,LBRACKET,FOLLOW_LBRACKET_in_bracketBlock6468); if (state.failed) return;dbg.location(983,24);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:983:24: ( componentValue )+
			int cnt312=0;
			try { dbg.enterSubRule(312);

			loop312:
			while (true) {
				int alt312=2;
				try { dbg.enterDecision(312, decisionCanBacktrack[312]);

				int LA312_0 = input.LA(1);
				if ( ((LA312_0 >= A && LA312_0 <= R)||(LA312_0 >= REM && LA312_0 <= RIGHTTOP_SYM)||(LA312_0 >= S && LA312_0 <= Z)) ) {
					alt312=1;
				}

				} finally {dbg.exitDecision(312);}

				switch (alt312) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:983:24: componentValue
					{
					dbg.location(983,24);
					pushFollow(FOLLOW_componentValue_in_bracketBlock6470);
					componentValue();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					if ( cnt312 >= 1 ) break loop312;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(312, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt312++;
			}
			} finally {dbg.exitSubRule(312);}
			dbg.location(983,40);
			match(input,RBRACKET,FOLLOW_RBRACKET_in_bracketBlock6473); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(983, 47);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "bracketBlock");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "bracketBlock"



	// $ANTLR start "parenBlock"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:985:1: parenBlock : LPAREN ( componentValue )+ RPAREN ;
	public final void parenBlock() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "parenBlock");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(985, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:985:11: ( LPAREN ( componentValue )+ RPAREN )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:985:13: LPAREN ( componentValue )+ RPAREN
			{
			dbg.location(985,13);
			match(input,LPAREN,FOLLOW_LPAREN_in_parenBlock6480); if (state.failed) return;dbg.location(985,20);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:985:20: ( componentValue )+
			int cnt313=0;
			try { dbg.enterSubRule(313);

			loop313:
			while (true) {
				int alt313=2;
				try { dbg.enterDecision(313, decisionCanBacktrack[313]);

				int LA313_0 = input.LA(1);
				if ( ((LA313_0 >= A && LA313_0 <= R)||(LA313_0 >= REM && LA313_0 <= RIGHTTOP_SYM)||(LA313_0 >= S && LA313_0 <= Z)) ) {
					alt313=1;
				}

				} finally {dbg.exitDecision(313);}

				switch (alt313) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:985:20: componentValue
					{
					dbg.location(985,20);
					pushFollow(FOLLOW_componentValue_in_parenBlock6482);
					componentValue();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					if ( cnt313 >= 1 ) break loop313;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(313, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt313++;
			}
			} finally {dbg.exitSubRule(313);}
			dbg.location(985,36);
			match(input,RPAREN,FOLLOW_RPAREN_in_parenBlock6485); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(985, 41);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "parenBlock");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "parenBlock"



	// $ANTLR start "componentValue"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:987:1: componentValue : ( parenBlock | braceBlock | bracketBlock | ( functionName ( ws )? LPAREN )=> function | preservedToken );
	public final void componentValue() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "componentValue");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(987, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:987:15: ( parenBlock | braceBlock | bracketBlock | ( functionName ( ws )? LPAREN )=> function | preservedToken )
			int alt314=5;
			try { dbg.enterDecision(314, decisionCanBacktrack[314]);

			switch ( input.LA(1) ) {
			case LPAREN:
				{
				alt314=1;
				}
				break;
			case LBRACE:
				{
				alt314=2;
				}
				break;
			case LBRACKET:
				{
				alt314=3;
				}
				break;
			case IDENT:
				{
				int LA314_4 = input.LA(2);
				if ( (synpred38_Css3()) ) {
					alt314=4;
				}
				else if ( (true) ) {
					alt314=5;
				}

				}
				break;
			case A:
			case ANGLE:
			case AT_IDENT:
			case AT_SIGN:
			case B:
			case BEGINS:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case C:
			case CDC:
			case CDO:
			case CHARSET_SYM:
			case COLON:
			case COMMA:
			case COMMENT:
			case CONTAINS:
			case COUNTER_STYLE_SYM:
			case CP_DOTS:
			case CP_EQ:
			case CP_NOT_EQ:
			case D:
			case DASHMATCH:
			case DCOLON:
			case DIMENSION:
			case DOT:
			case E:
			case EMS:
			case ENDS:
			case ESCAPE:
			case EXCLAMATION_MARK:
			case EXS:
			case F:
			case FONT_FACE_SYM:
			case FREQ:
			case G:
			case GEN:
			case GREATER:
			case GREATER_OR_EQ:
			case H:
			case HASH:
			case HASH_SYMBOL:
			case HEXCHAR:
			case HEXCHAR_WILDCARD:
			case I:
			case IMPORTANT_SYM:
			case IMPORT_SYM:
			case INCLUDES:
			case INVALID:
			case J:
			case K:
			case L:
			case LAYER_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case LENGTH:
			case LESS:
			case LESS_AND:
			case LESS_JS_STRING:
			case LESS_OR_EQ:
			case LESS_REST:
			case LINE_COMMENT:
			case M:
			case MEDIA_SYM:
			case MINUS:
			case MOZ_DOCUMENT_SYM:
			case MOZ_DOMAIN:
			case MOZ_REGEXP:
			case MOZ_URL_PREFIX:
			case N:
			case NAME:
			case NAMESPACE_SYM:
			case NL:
			case NMCHAR:
			case NMSTART:
			case NONASCII:
			case NOT:
			case NUMBER:
			case O:
			case OPEQ:
			case P:
			case PAGE_SYM:
			case PERCENTAGE:
			case PERCENTAGE_SYMBOL:
			case PIPE:
			case PLUS:
			case Q:
			case R:
			case REM:
			case RESOLUTION:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case S:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_DEFAULT:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_ELSEIF:
			case SASS_ERROR:
			case SASS_EXTEND:
			case SASS_EXTEND_ONLY_SELECTOR:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_GLOBAL:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_OPTIONAL:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_VAR:
			case SASS_WARN:
			case SASS_WHILE:
			case SEMI:
			case SOLIDUS:
			case STAR:
			case STRING:
			case SUPPORTS_SYM:
			case T:
			case TILDE:
			case TIME:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case U:
			case UNICODE:
			case URANGE:
			case URI:
			case URL:
			case V:
			case VARIABLE:
			case W:
			case WEBKIT_KEYFRAMES_SYM:
			case WS:
			case X:
			case Y:
			case Z:
				{
				alt314=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 314, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(314);}

			switch (alt314) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:987:17: parenBlock
					{
					dbg.location(987,17);
					pushFollow(FOLLOW_parenBlock_in_componentValue6492);
					parenBlock();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:987:30: braceBlock
					{
					dbg.location(987,30);
					pushFollow(FOLLOW_braceBlock_in_componentValue6496);
					braceBlock();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:987:43: bracketBlock
					{
					dbg.location(987,43);
					pushFollow(FOLLOW_bracketBlock_in_componentValue6500);
					bracketBlock();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:987:58: ( functionName ( ws )? LPAREN )=> function
					{
					dbg.location(987,87);
					pushFollow(FOLLOW_function_in_componentValue6515);
					function();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:987:98: preservedToken
					{
					dbg.location(987,98);
					pushFollow(FOLLOW_preservedToken_in_componentValue6519);
					preservedToken();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(987, 111);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "componentValue");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "componentValue"



	// $ANTLR start "componentValueOuter"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:989:1: componentValueOuter : ( parenBlock | braceBlock | bracketBlock | ( functionName ( ws )? LPAREN )=> function | preservedTokenTopLevel ) ( componentValueOuter )* ;
	public final void componentValueOuter() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "componentValueOuter");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(989, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:989:20: ( ( parenBlock | braceBlock | bracketBlock | ( functionName ( ws )? LPAREN )=> function | preservedTokenTopLevel ) ( componentValueOuter )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:989:22: ( parenBlock | braceBlock | bracketBlock | ( functionName ( ws )? LPAREN )=> function | preservedTokenTopLevel ) ( componentValueOuter )*
			{
			dbg.location(989,22);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:989:22: ( parenBlock | braceBlock | bracketBlock | ( functionName ( ws )? LPAREN )=> function | preservedTokenTopLevel )
			int alt315=5;
			try { dbg.enterSubRule(315);
			try { dbg.enterDecision(315, decisionCanBacktrack[315]);

			switch ( input.LA(1) ) {
			case LPAREN:
				{
				alt315=1;
				}
				break;
			case LBRACE:
				{
				alt315=2;
				}
				break;
			case LBRACKET:
				{
				alt315=3;
				}
				break;
			case IDENT:
				{
				int LA315_4 = input.LA(2);
				if ( (synpred39_Css3()) ) {
					alt315=4;
				}
				else if ( (true) ) {
					alt315=5;
				}

				}
				break;
			case A:
			case ANGLE:
			case AT_IDENT:
			case AT_SIGN:
			case B:
			case BEGINS:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case C:
			case CDC:
			case CDO:
			case CHARSET_SYM:
			case COLON:
			case COMMA:
			case COMMENT:
			case CONTAINS:
			case COUNTER_STYLE_SYM:
			case CP_DOTS:
			case CP_EQ:
			case CP_NOT_EQ:
			case D:
			case DASHMATCH:
			case DCOLON:
			case DIMENSION:
			case DOT:
			case E:
			case EMS:
			case ENDS:
			case ESCAPE:
			case EXCLAMATION_MARK:
			case EXS:
			case F:
			case FONT_FACE_SYM:
			case FREQ:
			case G:
			case GEN:
			case GREATER:
			case GREATER_OR_EQ:
			case H:
			case HASH:
			case HASH_SYMBOL:
			case HEXCHAR:
			case HEXCHAR_WILDCARD:
			case I:
			case IMPORTANT_SYM:
			case IMPORT_SYM:
			case INCLUDES:
			case INVALID:
			case J:
			case K:
			case L:
			case LAYER_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case LENGTH:
			case LESS:
			case LESS_AND:
			case LESS_JS_STRING:
			case LESS_OR_EQ:
			case LESS_REST:
			case LINE_COMMENT:
			case M:
			case MEDIA_SYM:
			case MINUS:
			case MOZ_DOCUMENT_SYM:
			case MOZ_DOMAIN:
			case MOZ_REGEXP:
			case MOZ_URL_PREFIX:
			case N:
			case NAME:
			case NAMESPACE_SYM:
			case NL:
			case NMCHAR:
			case NMSTART:
			case NONASCII:
			case NOT:
			case NUMBER:
			case O:
			case OPEQ:
			case P:
			case PAGE_SYM:
			case PERCENTAGE:
			case PERCENTAGE_SYMBOL:
			case PIPE:
			case PLUS:
			case Q:
			case R:
			case REM:
			case RESOLUTION:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case S:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_DEFAULT:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_ELSEIF:
			case SASS_ERROR:
			case SASS_EXTEND:
			case SASS_EXTEND_ONLY_SELECTOR:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_GLOBAL:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_OPTIONAL:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_VAR:
			case SASS_WARN:
			case SASS_WHILE:
			case SOLIDUS:
			case STAR:
			case STRING:
			case SUPPORTS_SYM:
			case T:
			case TILDE:
			case TIME:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case U:
			case UNICODE:
			case URANGE:
			case URI:
			case URL:
			case V:
			case VARIABLE:
			case W:
			case WEBKIT_KEYFRAMES_SYM:
			case WS:
			case X:
			case Y:
			case Z:
				{
				alt315=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 315, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(315);}

			switch (alt315) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:989:23: parenBlock
					{
					dbg.location(989,23);
					pushFollow(FOLLOW_parenBlock_in_componentValueOuter6527);
					parenBlock();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:989:36: braceBlock
					{
					dbg.location(989,36);
					pushFollow(FOLLOW_braceBlock_in_componentValueOuter6531);
					braceBlock();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:989:49: bracketBlock
					{
					dbg.location(989,49);
					pushFollow(FOLLOW_bracketBlock_in_componentValueOuter6535);
					bracketBlock();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:989:64: ( functionName ( ws )? LPAREN )=> function
					{
					dbg.location(989,93);
					pushFollow(FOLLOW_function_in_componentValueOuter6550);
					function();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:989:104: preservedTokenTopLevel
					{
					dbg.location(989,104);
					pushFollow(FOLLOW_preservedTokenTopLevel_in_componentValueOuter6554);
					preservedTokenTopLevel();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(315);}
			dbg.location(989,128);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:989:128: ( componentValueOuter )*
			try { dbg.enterSubRule(316);

			loop316:
			while (true) {
				int alt316=2;
				try { dbg.enterDecision(316, decisionCanBacktrack[316]);

				switch ( input.LA(1) ) {
				case COMMENT:
				case NL:
				case WS:
					{
					alt316=1;
					}
					break;
				case LESS_AND:
					{
					alt316=1;
					}
					break;
				case DOT:
					{
					alt316=1;
					}
					break;
				case HASH:
					{
					alt316=1;
					}
					break;
				case SASS_MIXIN:
					{
					alt316=1;
					}
					break;
				case AT_IDENT:
					{
					alt316=1;
					}
					break;
				case SASS_INCLUDE:
					{
					alt316=1;
					}
					break;
				case SASS_AT_ROOT:
					{
					alt316=1;
					}
					break;
				case GREATER:
				case PLUS:
				case TILDE:
					{
					alt316=1;
					}
					break;
				case SASS_EXTEND_ONLY_SELECTOR:
					{
					alt316=1;
					}
					break;
				case HASH_SYMBOL:
					{
					alt316=1;
					}
					break;
				case DIMENSION:
					{
					alt316=1;
					}
					break;
				case LBRACKET:
					{
					alt316=1;
					}
					break;
				case COLON:
				case DCOLON:
					{
					alt316=1;
					}
					break;
				case IDENT:
					{
					alt316=1;
					}
					break;
				case AT_SIGN:
					{
					alt316=1;
					}
					break;
				case MINUS:
					{
					alt316=1;
					}
					break;
				case STAR:
					{
					alt316=1;
					}
					break;
				case PIPE:
					{
					alt316=1;
					}
					break;
				case GEN:
					{
					alt316=1;
					}
					break;
				case VARIABLE:
					{
					alt316=1;
					}
					break;
				case SASS_DEBUG:
				case SASS_WARN:
					{
					alt316=1;
					}
					break;
				case SASS_VAR:
					{
					alt316=1;
					}
					break;
				case SASS_IF:
					{
					alt316=1;
					}
					break;
				case SASS_FOR:
					{
					alt316=1;
					}
					break;
				case SASS_EACH:
					{
					alt316=1;
					}
					break;
				case SASS_WHILE:
					{
					alt316=1;
					}
					break;
				case SASS_CONTENT:
					{
					alt316=1;
					}
					break;
				case IMPORT_SYM:
					{
					alt316=1;
					}
					break;
				case PAGE_SYM:
					{
					alt316=1;
					}
					break;
				case FONT_FACE_SYM:
					{
					alt316=1;
					}
					break;
				case MOZ_DOCUMENT_SYM:
					{
					alt316=1;
					}
					break;
				case WEBKIT_KEYFRAMES_SYM:
					{
					alt316=1;
					}
					break;
				case MEDIA_SYM:
					{
					alt316=1;
					}
					break;
				case SASS_EXTEND:
					{
					alt316=1;
					}
					break;
				case SUPPORTS_SYM:
					{
					alt316=1;
					}
					break;
				case BOTTOMCENTER_SYM:
				case BOTTOMLEFTCORNER_SYM:
				case BOTTOMLEFT_SYM:
				case BOTTOMRIGHTCORNER_SYM:
				case BOTTOMRIGHT_SYM:
				case LEFTBOTTOM_SYM:
				case LEFTMIDDLE_SYM:
				case LEFTTOP_SYM:
				case RIGHTBOTTOM_SYM:
				case RIGHTMIDDLE_SYM:
				case RIGHTTOP_SYM:
				case TOPCENTER_SYM:
				case TOPLEFTCORNER_SYM:
				case TOPLEFT_SYM:
				case TOPRIGHTCORNER_SYM:
				case TOPRIGHT_SYM:
					{
					alt316=1;
					}
					break;
				case CHARSET_SYM:
				case COUNTER_STYLE_SYM:
				case NAMESPACE_SYM:
				case SASS_ELSE:
				case SASS_FORWARD:
				case SASS_FUNCTION:
				case SASS_RETURN:
				case SASS_USE:
					{
					alt316=1;
					}
					break;
				case LPAREN:
					{
					alt316=1;
					}
					break;
				case LBRACE:
					{
					alt316=1;
					}
					break;
				case A:
				case ANGLE:
				case B:
				case BEGINS:
				case C:
				case CDC:
				case CDO:
				case COMMA:
				case CONTAINS:
				case CP_DOTS:
				case CP_EQ:
				case CP_NOT_EQ:
				case D:
				case DASHMATCH:
				case E:
				case EMS:
				case ENDS:
				case ESCAPE:
				case EXCLAMATION_MARK:
				case EXS:
				case F:
				case FREQ:
				case G:
				case GREATER_OR_EQ:
				case H:
				case HEXCHAR:
				case HEXCHAR_WILDCARD:
				case I:
				case IMPORTANT_SYM:
				case INCLUDES:
				case INVALID:
				case J:
				case K:
				case L:
				case LAYER_SYM:
				case LENGTH:
				case LESS:
				case LESS_JS_STRING:
				case LESS_OR_EQ:
				case LESS_REST:
				case LINE_COMMENT:
				case M:
				case MOZ_DOMAIN:
				case MOZ_REGEXP:
				case MOZ_URL_PREFIX:
				case N:
				case NAME:
				case NMCHAR:
				case NMSTART:
				case NONASCII:
				case NOT:
				case NUMBER:
				case O:
				case OPEQ:
				case P:
				case PERCENTAGE:
				case PERCENTAGE_SYMBOL:
				case Q:
				case R:
				case REM:
				case RESOLUTION:
				case S:
				case SASS_DEFAULT:
				case SASS_ELSEIF:
				case SASS_ERROR:
				case SASS_GLOBAL:
				case SASS_OPTIONAL:
				case SOLIDUS:
				case STRING:
				case T:
				case TIME:
				case U:
				case UNICODE:
				case URANGE:
				case URI:
				case URL:
				case V:
				case W:
				case X:
				case Y:
				case Z:
					{
					alt316=1;
					}
					break;
				}
				} finally {dbg.exitDecision(316);}

				switch (alt316) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:989:128: componentValueOuter
					{
					dbg.location(989,128);
					pushFollow(FOLLOW_componentValueOuter_in_componentValueOuter6557);
					componentValueOuter();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop316;
				}
			}
			} finally {dbg.exitSubRule(316);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(989, 147);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "componentValueOuter");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "componentValueOuter"



	// $ANTLR start "syncToDeclarationsRule"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:993:1: syncToDeclarationsRule :;
	public final void syncToDeclarationsRule() throws RecognitionException {

		        //why sync to DOT? - LESS allows class rules nested
		        syncToSet(BitSet.of(IDENT, RBRACE, STAR, DOT));
		    
		try { dbg.enterRule(getGrammarFileName(), "syncToDeclarationsRule");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(993, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:998:6: ()
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:999:6: 
			{
			}

		}
		finally {
			// do for sure before leaving
		}
		dbg.location(999, 5);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "syncToDeclarationsRule");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "syncToDeclarationsRule"



	// $ANTLR start "syncTo_RBRACE"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1001:1: syncTo_RBRACE :;
	public final void syncTo_RBRACE() throws RecognitionException {

		        syncToRBRACE(1); //initial nest == 1
		    
		try { dbg.enterRule(getGrammarFileName(), "syncTo_RBRACE");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1001, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1005:6: ()
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1006:6: 
			{
			}

		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1006, 5);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "syncTo_RBRACE");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "syncTo_RBRACE"



	// $ANTLR start "syncTo_SEMI"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1008:1: syncTo_SEMI : SEMI ;
	public final void syncTo_SEMI() throws RecognitionException {

		        syncToSet(BitSet.of(SEMI));
		    
		try { dbg.enterRule(getGrammarFileName(), "syncTo_SEMI");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1008, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1012:6: ( SEMI )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1013:13: SEMI
			{
			dbg.location(1013,13);
			match(input,SEMI,FOLLOW_SEMI_in_syncTo_SEMI6646); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1014, 5);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "syncTo_SEMI");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "syncTo_SEMI"



	// $ANTLR start "syncToFollow"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1017:1: syncToFollow :;
	public final void syncToFollow() throws RecognitionException {

		        syncToSet();
		    
		try { dbg.enterRule(getGrammarFileName(), "syncToFollow");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1017, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1021:6: ()
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1022:6: 
			{
			}

		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1022, 5);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "syncToFollow");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "syncToFollow"



	// $ANTLR start "prio"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1024:1: prio : IMPORTANT_SYM ;
	public final void prio() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "prio");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1024, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1025:5: ( IMPORTANT_SYM )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1025:7: IMPORTANT_SYM
			{
			dbg.location(1025,7);
			match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_prio6691); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1026, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "prio");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "prio"



	// $ANTLR start "expression"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1028:1: expression : term ( ( ( ws | ( ( ws )? operator ( ws )? ) |) term )=> ( ws | ( ( ws )? operator ( ws )? ) |) term )* ;
	public final void expression() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "expression");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1028, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1029:5: ( term ( ( ( ws | ( ( ws )? operator ( ws )? ) |) term )=> ( ws | ( ( ws )? operator ( ws )? ) |) term )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1029:7: term ( ( ( ws | ( ( ws )? operator ( ws )? ) |) term )=> ( ws | ( ( ws )? operator ( ws )? ) |) term )*
			{
			dbg.location(1029,7);
			pushFollow(FOLLOW_term_in_expression6708);
			term();
			state._fsp--;
			if (state.failed) return;dbg.location(1029,12);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1029:12: ( ( ( ws | ( ( ws )? operator ( ws )? ) |) term )=> ( ws | ( ( ws )? operator ( ws )? ) |) term )*
			try { dbg.enterSubRule(320);

			loop320:
			while (true) {
				int alt320=2;
				try { dbg.enterDecision(320, decisionCanBacktrack[320]);

				try {
					isCyclicDecision = true;
					alt320 = dfa320.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(320);}

				switch (alt320) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1029:14: ( ( ws | ( ( ws )? operator ( ws )? ) |) term )=> ( ws | ( ( ws )? operator ( ws )? ) |) term
					{
					dbg.location(1029,66);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1029:66: ( ws | ( ( ws )? operator ( ws )? ) |)
					int alt319=3;
					try { dbg.enterSubRule(319);
					try { dbg.enterDecision(319, decisionCanBacktrack[319]);

					try {
						isCyclicDecision = true;
						alt319 = dfa319.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(319);}

					switch (alt319) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1029:68: ws
							{
							dbg.location(1029,68);
							pushFollow(FOLLOW_ws_in_expression6740);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1029:73: ( ( ws )? operator ( ws )? )
							{
							dbg.location(1029,73);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1029:73: ( ( ws )? operator ( ws )? )
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1029:74: ( ws )? operator ( ws )?
							{
							dbg.location(1029,74);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1029:74: ( ws )?
							int alt317=2;
							try { dbg.enterSubRule(317);
							try { dbg.enterDecision(317, decisionCanBacktrack[317]);

							int LA317_0 = input.LA(1);
							if ( (LA317_0==COMMENT||LA317_0==NL||LA317_0==WS) ) {
								alt317=1;
							}
							} finally {dbg.exitDecision(317);}

							switch (alt317) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1029:74: ws
									{
									dbg.location(1029,74);
									pushFollow(FOLLOW_ws_in_expression6745);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(317);}
							dbg.location(1029,78);
							pushFollow(FOLLOW_operator_in_expression6748);
							operator();
							state._fsp--;
							if (state.failed) return;dbg.location(1029,87);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1029:87: ( ws )?
							int alt318=2;
							try { dbg.enterSubRule(318);
							try { dbg.enterDecision(318, decisionCanBacktrack[318]);

							int LA318_0 = input.LA(1);
							if ( (LA318_0==COMMENT||LA318_0==NL||LA318_0==WS) ) {
								alt318=1;
							}
							} finally {dbg.exitDecision(318);}

							switch (alt318) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1029:87: ws
									{
									dbg.location(1029,87);
									pushFollow(FOLLOW_ws_in_expression6750);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(318);}

							}

							}
							break;
						case 3 :
							dbg.enterAlt(3);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1029:107: 
							{
							}
							break;

					}
					} finally {dbg.exitSubRule(319);}
					dbg.location(1029,109);
					pushFollow(FOLLOW_term_in_expression6759);
					term();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop320;
				}
			}
			} finally {dbg.exitSubRule(320);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1030, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "expression");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "expression"



	// $ANTLR start "term"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1032:1: term : ( unaryOperator ( ws )? )? ( ( functionName ( ws )? LPAREN )=> function | VARIABLE |{...}? IDENT | ( LBRACKET ( WS )? IDENT ( WS IDENT )* ( WS )? RBRACKET ) | NUMBER | URANGE | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | TILDE ( STRING | LESS_JS_STRING ) | LESS_JS_STRING | GEN | URI | hexColor |{...}? cp_variable |{...}? LESS_AND |{...}? sass_interpolation_expression_var |{...}? less_selector_interpolation |{...}? cp_term_symbol ) ;
	public final void term() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "term");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1032, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1033:5: ( ( unaryOperator ( ws )? )? ( ( functionName ( ws )? LPAREN )=> function | VARIABLE |{...}? IDENT | ( LBRACKET ( WS )? IDENT ( WS IDENT )* ( WS )? RBRACKET ) | NUMBER | URANGE | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | TILDE ( STRING | LESS_JS_STRING ) | LESS_JS_STRING | GEN | URI | hexColor |{...}? cp_variable |{...}? LESS_AND |{...}? sass_interpolation_expression_var |{...}? less_selector_interpolation |{...}? cp_term_symbol ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1034:5: ( unaryOperator ( ws )? )? ( ( functionName ( ws )? LPAREN )=> function | VARIABLE |{...}? IDENT | ( LBRACKET ( WS )? IDENT ( WS IDENT )* ( WS )? RBRACKET ) | NUMBER | URANGE | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | TILDE ( STRING | LESS_JS_STRING ) | LESS_JS_STRING | GEN | URI | hexColor |{...}? cp_variable |{...}? LESS_AND |{...}? sass_interpolation_expression_var |{...}? less_selector_interpolation |{...}? cp_term_symbol )
			{
			dbg.location(1034,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1034:5: ( unaryOperator ( ws )? )?
			int alt322=2;
			try { dbg.enterSubRule(322);
			try { dbg.enterDecision(322, decisionCanBacktrack[322]);

			int LA322_0 = input.LA(1);
			if ( (LA322_0==MINUS||LA322_0==PLUS) ) {
				alt322=1;
			}
			} finally {dbg.exitDecision(322);}

			switch (alt322) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1034:7: unaryOperator ( ws )?
					{
					dbg.location(1034,7);
					pushFollow(FOLLOW_unaryOperator_in_term6784);
					unaryOperator();
					state._fsp--;
					if (state.failed) return;dbg.location(1034,21);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1034:21: ( ws )?
					int alt321=2;
					try { dbg.enterSubRule(321);
					try { dbg.enterDecision(321, decisionCanBacktrack[321]);

					int LA321_0 = input.LA(1);
					if ( (LA321_0==COMMENT||LA321_0==NL||LA321_0==WS) ) {
						alt321=1;
					}
					} finally {dbg.exitDecision(321);}

					switch (alt321) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1034:21: ws
							{
							dbg.location(1034,21);
							pushFollow(FOLLOW_ws_in_term6786);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(321);}

					}
					break;

			}
			} finally {dbg.exitSubRule(322);}
			dbg.location(1035,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1035:5: ( ( functionName ( ws )? LPAREN )=> function | VARIABLE |{...}? IDENT | ( LBRACKET ( WS )? IDENT ( WS IDENT )* ( WS )? RBRACKET ) | NUMBER | URANGE | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | TILDE ( STRING | LESS_JS_STRING ) | LESS_JS_STRING | GEN | URI | hexColor |{...}? cp_variable |{...}? LESS_AND |{...}? sass_interpolation_expression_var |{...}? less_selector_interpolation |{...}? cp_term_symbol )
			int alt326=27;
			try { dbg.enterSubRule(326);
			try { dbg.enterDecision(326, decisionCanBacktrack[326]);

			switch ( input.LA(1) ) {
			case IDENT:
				{
				int LA326_1 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt326=1;
				}
				else if ( (evalPredicate(! (isScssSource() && tokenNameEquals2(".")),"! (isScssSource() && tokenNameEquals2(\".\"))")) ) {
					alt326=3;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt326=23;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 326, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case VARIABLE:
				{
				alt326=2;
				}
				break;
			case LBRACKET:
				{
				alt326=4;
				}
				break;
			case NUMBER:
				{
				alt326=5;
				}
				break;
			case URANGE:
				{
				alt326=6;
				}
				break;
			case PERCENTAGE:
				{
				alt326=7;
				}
				break;
			case LENGTH:
				{
				alt326=8;
				}
				break;
			case EMS:
				{
				alt326=9;
				}
				break;
			case REM:
				{
				alt326=10;
				}
				break;
			case EXS:
				{
				alt326=11;
				}
				break;
			case ANGLE:
				{
				alt326=12;
				}
				break;
			case TIME:
				{
				alt326=13;
				}
				break;
			case FREQ:
				{
				alt326=14;
				}
				break;
			case RESOLUTION:
				{
				alt326=15;
				}
				break;
			case DIMENSION:
				{
				alt326=16;
				}
				break;
			case STRING:
				{
				alt326=17;
				}
				break;
			case TILDE:
				{
				alt326=18;
				}
				break;
			case LESS_JS_STRING:
				{
				alt326=19;
				}
				break;
			case GEN:
				{
				alt326=20;
				}
				break;
			case URI:
				{
				alt326=21;
				}
				break;
			case HASH:
				{
				alt326=22;
				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_VAR:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				alt326=23;
				}
				break;
			case LESS_AND:
				{
				alt326=24;
				}
				break;
			case HASH_SYMBOL:
				{
				alt326=25;
				}
				break;
			case AT_SIGN:
				{
				alt326=26;
				}
				break;
			case PERCENTAGE_SYMBOL:
				{
				alt326=27;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 326, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(326);}

			switch (alt326) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1036:9: ( functionName ( ws )? LPAREN )=> function
					{
					dbg.location(1036,36);
					pushFollow(FOLLOW_function_in_term6815);
					function();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1037:11: VARIABLE
					{
					dbg.location(1037,11);
					match(input,VARIABLE,FOLLOW_VARIABLE_in_term6828); if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1038:11: {...}? IDENT
					{
					dbg.location(1038,11);
					if ( !(evalPredicate(! (isScssSource() && tokenNameEquals2(".")),"! (isScssSource() && tokenNameEquals2(\".\"))")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "term", "! (isScssSource() && tokenNameEquals2(\".\"))");
					}dbg.location(1038,58);
					match(input,IDENT,FOLLOW_IDENT_in_term6842); if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1039:11: ( LBRACKET ( WS )? IDENT ( WS IDENT )* ( WS )? RBRACKET )
					{
					dbg.location(1039,11);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1039:11: ( LBRACKET ( WS )? IDENT ( WS IDENT )* ( WS )? RBRACKET )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1039:12: LBRACKET ( WS )? IDENT ( WS IDENT )* ( WS )? RBRACKET
					{
					dbg.location(1039,12);
					match(input,LBRACKET,FOLLOW_LBRACKET_in_term6855); if (state.failed) return;dbg.location(1039,21);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1039:21: ( WS )?
					int alt323=2;
					try { dbg.enterSubRule(323);
					try { dbg.enterDecision(323, decisionCanBacktrack[323]);

					int LA323_0 = input.LA(1);
					if ( (LA323_0==WS) ) {
						alt323=1;
					}
					} finally {dbg.exitDecision(323);}

					switch (alt323) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1039:21: WS
							{
							dbg.location(1039,21);
							match(input,WS,FOLLOW_WS_in_term6857); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(323);}
					dbg.location(1039,25);
					match(input,IDENT,FOLLOW_IDENT_in_term6860); if (state.failed) return;dbg.location(1039,31);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1039:31: ( WS IDENT )*
					try { dbg.enterSubRule(324);

					loop324:
					while (true) {
						int alt324=2;
						try { dbg.enterDecision(324, decisionCanBacktrack[324]);

						int LA324_0 = input.LA(1);
						if ( (LA324_0==WS) ) {
							int LA324_1 = input.LA(2);
							if ( (LA324_1==IDENT) ) {
								alt324=1;
							}

						}

						} finally {dbg.exitDecision(324);}

						switch (alt324) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1039:32: WS IDENT
							{
							dbg.location(1039,32);
							match(input,WS,FOLLOW_WS_in_term6863); if (state.failed) return;dbg.location(1039,35);
							match(input,IDENT,FOLLOW_IDENT_in_term6865); if (state.failed) return;
							}
							break;

						default :
							break loop324;
						}
					}
					} finally {dbg.exitSubRule(324);}
					dbg.location(1039,43);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1039:43: ( WS )?
					int alt325=2;
					try { dbg.enterSubRule(325);
					try { dbg.enterDecision(325, decisionCanBacktrack[325]);

					int LA325_0 = input.LA(1);
					if ( (LA325_0==WS) ) {
						alt325=1;
					}
					} finally {dbg.exitDecision(325);}

					switch (alt325) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1039:43: WS
							{
							dbg.location(1039,43);
							match(input,WS,FOLLOW_WS_in_term6869); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(325);}
					dbg.location(1039,47);
					match(input,RBRACKET,FOLLOW_RBRACKET_in_term6872); if (state.failed) return;
					}

					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1040:11: NUMBER
					{
					dbg.location(1040,11);
					match(input,NUMBER,FOLLOW_NUMBER_in_term6885); if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1041:11: URANGE
					{
					dbg.location(1041,11);
					match(input,URANGE,FOLLOW_URANGE_in_term6897); if (state.failed) return;
					}
					break;
				case 7 :
					dbg.enterAlt(7);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1042:11: PERCENTAGE
					{
					dbg.location(1042,11);
					match(input,PERCENTAGE,FOLLOW_PERCENTAGE_in_term6909); if (state.failed) return;
					}
					break;
				case 8 :
					dbg.enterAlt(8);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1043:11: LENGTH
					{
					dbg.location(1043,11);
					match(input,LENGTH,FOLLOW_LENGTH_in_term6921); if (state.failed) return;
					}
					break;
				case 9 :
					dbg.enterAlt(9);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1044:11: EMS
					{
					dbg.location(1044,11);
					match(input,EMS,FOLLOW_EMS_in_term6933); if (state.failed) return;
					}
					break;
				case 10 :
					dbg.enterAlt(10);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1045:11: REM
					{
					dbg.location(1045,11);
					match(input,REM,FOLLOW_REM_in_term6945); if (state.failed) return;
					}
					break;
				case 11 :
					dbg.enterAlt(11);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1046:11: EXS
					{
					dbg.location(1046,11);
					match(input,EXS,FOLLOW_EXS_in_term6957); if (state.failed) return;
					}
					break;
				case 12 :
					dbg.enterAlt(12);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1047:11: ANGLE
					{
					dbg.location(1047,11);
					match(input,ANGLE,FOLLOW_ANGLE_in_term6969); if (state.failed) return;
					}
					break;
				case 13 :
					dbg.enterAlt(13);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1048:11: TIME
					{
					dbg.location(1048,11);
					match(input,TIME,FOLLOW_TIME_in_term6981); if (state.failed) return;
					}
					break;
				case 14 :
					dbg.enterAlt(14);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1049:11: FREQ
					{
					dbg.location(1049,11);
					match(input,FREQ,FOLLOW_FREQ_in_term6993); if (state.failed) return;
					}
					break;
				case 15 :
					dbg.enterAlt(15);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1050:11: RESOLUTION
					{
					dbg.location(1050,11);
					match(input,RESOLUTION,FOLLOW_RESOLUTION_in_term7005); if (state.failed) return;
					}
					break;
				case 16 :
					dbg.enterAlt(16);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1051:11: DIMENSION
					{
					dbg.location(1051,11);
					match(input,DIMENSION,FOLLOW_DIMENSION_in_term7017); if (state.failed) return;
					}
					break;
				case 17 :
					dbg.enterAlt(17);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1052:11: STRING
					{
					dbg.location(1052,11);
					match(input,STRING,FOLLOW_STRING_in_term7034); if (state.failed) return;
					}
					break;
				case 18 :
					dbg.enterAlt(18);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1053:11: TILDE ( STRING | LESS_JS_STRING )
					{
					dbg.location(1053,11);
					match(input,TILDE,FOLLOW_TILDE_in_term7046); if (state.failed) return;dbg.location(1053,17);
					if ( input.LA(1)==LESS_JS_STRING||input.LA(1)==STRING ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}
					}
					break;
				case 19 :
					dbg.enterAlt(19);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1054:11: LESS_JS_STRING
					{
					dbg.location(1054,11);
					match(input,LESS_JS_STRING,FOLLOW_LESS_JS_STRING_in_term7069); if (state.failed) return;
					}
					break;
				case 20 :
					dbg.enterAlt(20);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1055:11: GEN
					{
					dbg.location(1055,11);
					match(input,GEN,FOLLOW_GEN_in_term7084); if (state.failed) return;
					}
					break;
				case 21 :
					dbg.enterAlt(21);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1056:11: URI
					{
					dbg.location(1056,11);
					match(input,URI,FOLLOW_URI_in_term7096); if (state.failed) return;
					}
					break;
				case 22 :
					dbg.enterAlt(22);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1057:11: hexColor
					{
					dbg.location(1057,11);
					pushFollow(FOLLOW_hexColor_in_term7108);
					hexColor();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 23 :
					dbg.enterAlt(23);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1058:11: {...}? cp_variable
					{
					dbg.location(1058,11);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "term", "isCssPreprocessorSource()");
					}dbg.location(1058,40);
					pushFollow(FOLLOW_cp_variable_in_term7122);
					cp_variable();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 24 :
					dbg.enterAlt(24);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1059:11: {...}? LESS_AND
					{
					dbg.location(1059,11);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "term", "isScssSource()");
					}dbg.location(1059,29);
					match(input,LESS_AND,FOLLOW_LESS_AND_in_term7136); if (state.failed) return;
					}
					break;
				case 25 :
					dbg.enterAlt(25);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1060:11: {...}? sass_interpolation_expression_var
					{
					dbg.location(1060,11);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "term", "isScssSource()");
					}dbg.location(1060,29);
					pushFollow(FOLLOW_sass_interpolation_expression_var_in_term7150);
					sass_interpolation_expression_var();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 26 :
					dbg.enterAlt(26);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1061:11: {...}? less_selector_interpolation
					{
					dbg.location(1061,11);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "term", "isLessSource()");
					}dbg.location(1061,29);
					pushFollow(FOLLOW_less_selector_interpolation_in_term7164);
					less_selector_interpolation();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 27 :
					dbg.enterAlt(27);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1062:11: {...}? cp_term_symbol
					{
					dbg.location(1062,11);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "term", "isCssPreprocessorSource()");
					}dbg.location(1062,40);
					pushFollow(FOLLOW_cp_term_symbol_in_term7178);
					cp_term_symbol();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(326);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1064, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "term");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "term"



	// $ANTLR start "cp_term_symbol"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1069:1: cp_term_symbol : PERCENTAGE_SYMBOL ;
	public final void cp_term_symbol() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_term_symbol");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1069, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1070:5: ( PERCENTAGE_SYMBOL )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1070:7: PERCENTAGE_SYMBOL
			{
			dbg.location(1070,7);
			match(input,PERCENTAGE_SYMBOL,FOLLOW_PERCENTAGE_SYMBOL_in_cp_term_symbol7205); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1071, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_term_symbol");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_term_symbol"



	// $ANTLR start "function"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1073:1: function : functionName ( ws )? LPAREN ( ws )? ( fnAttributes |) RPAREN ;
	public final void function() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "function");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1073, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1074:2: ( functionName ( ws )? LPAREN ( ws )? ( fnAttributes |) RPAREN )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1074:5: functionName ( ws )? LPAREN ( ws )? ( fnAttributes |) RPAREN
			{
			dbg.location(1074,5);
			pushFollow(FOLLOW_functionName_in_function7221);
			functionName();
			state._fsp--;
			if (state.failed) return;dbg.location(1074,18);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1074:18: ( ws )?
			int alt327=2;
			try { dbg.enterSubRule(327);
			try { dbg.enterDecision(327, decisionCanBacktrack[327]);

			int LA327_0 = input.LA(1);
			if ( (LA327_0==COMMENT||LA327_0==NL||LA327_0==WS) ) {
				alt327=1;
			}
			} finally {dbg.exitDecision(327);}

			switch (alt327) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1074:18: ws
					{
					dbg.location(1074,18);
					pushFollow(FOLLOW_ws_in_function7223);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(327);}
			dbg.location(1075,3);
			match(input,LPAREN,FOLLOW_LPAREN_in_function7228); if (state.failed) return;dbg.location(1075,10);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1075:10: ( ws )?
			int alt328=2;
			try { dbg.enterSubRule(328);
			try { dbg.enterDecision(328, decisionCanBacktrack[328]);

			int LA328_0 = input.LA(1);
			if ( (LA328_0==COMMENT||LA328_0==NL||LA328_0==WS) ) {
				alt328=1;
			}
			} finally {dbg.exitDecision(328);}

			switch (alt328) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1075:10: ws
					{
					dbg.location(1075,10);
					pushFollow(FOLLOW_ws_in_function7230);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(328);}
			dbg.location(1076,3);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1076:3: ( fnAttributes |)
			int alt329=2;
			try { dbg.enterSubRule(329);
			try { dbg.enterDecision(329, decisionCanBacktrack[329]);

			int LA329_0 = input.LA(1);
			if ( ((LA329_0 >= ANGLE && LA329_0 <= AT_SIGN)||(LA329_0 >= BOTTOMCENTER_SYM && LA329_0 <= BOTTOMRIGHT_SYM)||LA329_0==CHARSET_SYM||LA329_0==COUNTER_STYLE_SYM||LA329_0==DIMENSION||LA329_0==EMS||LA329_0==EXS||(LA329_0 >= FONT_FACE_SYM && LA329_0 <= FREQ)||LA329_0==GEN||(LA329_0 >= HASH && LA329_0 <= HASH_SYMBOL)||(LA329_0 >= IDENT && LA329_0 <= IMPORT_SYM)||(LA329_0 >= LBRACE && LA329_0 <= LENGTH)||(LA329_0 >= LESS_AND && LA329_0 <= LESS_JS_STRING)||LA329_0==LPAREN||(LA329_0 >= MEDIA_SYM && LA329_0 <= MOZ_DOCUMENT_SYM)||LA329_0==NAMESPACE_SYM||(LA329_0 >= NOT && LA329_0 <= NUMBER)||(LA329_0 >= PAGE_SYM && LA329_0 <= PERCENTAGE_SYMBOL)||LA329_0==PLUS||(LA329_0 >= REM && LA329_0 <= RIGHTTOP_SYM)||(LA329_0 >= SASS_AT_ROOT && LA329_0 <= SASS_DEBUG)||(LA329_0 >= SASS_EACH && LA329_0 <= SASS_ELSE)||LA329_0==SASS_EXTEND||(LA329_0 >= SASS_FOR && LA329_0 <= SASS_FUNCTION)||(LA329_0 >= SASS_IF && LA329_0 <= SASS_MIXIN)||(LA329_0 >= SASS_RETURN && LA329_0 <= SASS_WHILE)||LA329_0==STRING||(LA329_0 >= TILDE && LA329_0 <= TOPRIGHT_SYM)||(LA329_0 >= URANGE && LA329_0 <= URI)||LA329_0==VARIABLE||LA329_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt329=1;
			}
			else if ( (LA329_0==RPAREN) ) {
				alt329=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 329, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(329);}

			switch (alt329) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:21: fnAttributes
					{
					dbg.location(1077,21);
					pushFollow(FOLLOW_fnAttributes_in_function7257);
					fnAttributes();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1079:3: 
					{
					}
					break;

			}
			} finally {dbg.exitSubRule(329);}
			dbg.location(1080,3);
			match(input,RPAREN,FOLLOW_RPAREN_in_function7288); if (state.failed) return;
			}

		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(RPAREN, SEMI, RBRACE));

		}

		finally {
			// do for sure before leaving
		}
		dbg.location(1081, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "function");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "function"



	// $ANTLR start "functionName"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1087:1: functionName : ( IDENT COLON )? IDENT ( DOT IDENT )* ;
	public final void functionName() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "functionName");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1087, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1091:2: ( ( IDENT COLON )? IDENT ( DOT IDENT )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1092:9: ( IDENT COLON )? IDENT ( DOT IDENT )*
			{
			dbg.location(1092,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1092:9: ( IDENT COLON )?
			int alt330=2;
			try { dbg.enterSubRule(330);
			try { dbg.enterDecision(330, decisionCanBacktrack[330]);

			int LA330_0 = input.LA(1);
			if ( (LA330_0==IDENT) ) {
				int LA330_1 = input.LA(2);
				if ( (LA330_1==COLON) ) {
					alt330=1;
				}
			}
			} finally {dbg.exitDecision(330);}

			switch (alt330) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1092:10: IDENT COLON
					{
					dbg.location(1092,10);
					match(input,IDENT,FOLLOW_IDENT_in_functionName7340); if (state.failed) return;dbg.location(1092,16);
					match(input,COLON,FOLLOW_COLON_in_functionName7342); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(330);}
			dbg.location(1092,24);
			match(input,IDENT,FOLLOW_IDENT_in_functionName7346); if (state.failed) return;dbg.location(1092,30);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1092:30: ( DOT IDENT )*
			try { dbg.enterSubRule(331);

			loop331:
			while (true) {
				int alt331=2;
				try { dbg.enterDecision(331, decisionCanBacktrack[331]);

				int LA331_0 = input.LA(1);
				if ( (LA331_0==DOT) ) {
					alt331=1;
				}

				} finally {dbg.exitDecision(331);}

				switch (alt331) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1092:31: DOT IDENT
					{
					dbg.location(1092,31);
					match(input,DOT,FOLLOW_DOT_in_functionName7349); if (state.failed) return;dbg.location(1092,35);
					match(input,IDENT,FOLLOW_IDENT_in_functionName7351); if (state.failed) return;
					}
					break;

				default :
					break loop331;
				}
			}
			} finally {dbg.exitSubRule(331);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1093, 5);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "functionName");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "functionName"



	// $ANTLR start "fnAttributes"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1095:1: fnAttributes : fnAttribute ( ( ws )? ( COMMA |{...}? SEMI ) ( ws )? fnAttribute )* ( ws )? ;
	public final void fnAttributes() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "fnAttributes");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1095, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1096:5: ( fnAttribute ( ( ws )? ( COMMA |{...}? SEMI ) ( ws )? fnAttribute )* ( ws )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1097:5: fnAttribute ( ( ws )? ( COMMA |{...}? SEMI ) ( ws )? fnAttribute )* ( ws )?
			{
			dbg.location(1097,5);
			pushFollow(FOLLOW_fnAttribute_in_fnAttributes7375);
			fnAttribute();
			state._fsp--;
			if (state.failed) return;dbg.location(1097,17);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1097:17: ( ( ws )? ( COMMA |{...}? SEMI ) ( ws )? fnAttribute )*
			try { dbg.enterSubRule(335);

			loop335:
			while (true) {
				int alt335=2;
				try { dbg.enterDecision(335, decisionCanBacktrack[335]);

				try {
					isCyclicDecision = true;
					alt335 = dfa335.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(335);}

				switch (alt335) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1097:18: ( ws )? ( COMMA |{...}? SEMI ) ( ws )? fnAttribute
					{
					dbg.location(1097,18);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1097:18: ( ws )?
					int alt332=2;
					try { dbg.enterSubRule(332);
					try { dbg.enterDecision(332, decisionCanBacktrack[332]);

					int LA332_0 = input.LA(1);
					if ( (LA332_0==COMMENT||LA332_0==NL||LA332_0==WS) ) {
						alt332=1;
					}
					} finally {dbg.exitDecision(332);}

					switch (alt332) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1097:18: ws
							{
							dbg.location(1097,18);
							pushFollow(FOLLOW_ws_in_fnAttributes7378);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(332);}
					dbg.location(1097,22);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1097:22: ( COMMA |{...}? SEMI )
					int alt333=2;
					try { dbg.enterSubRule(333);
					try { dbg.enterDecision(333, decisionCanBacktrack[333]);

					int LA333_0 = input.LA(1);
					if ( (LA333_0==COMMA) ) {
						alt333=1;
					}
					else if ( (LA333_0==SEMI) ) {
						alt333=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 333, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(333);}

					switch (alt333) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1097:23: COMMA
							{
							dbg.location(1097,23);
							match(input,COMMA,FOLLOW_COMMA_in_fnAttributes7382); if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1097:31: {...}? SEMI
							{
							dbg.location(1097,31);
							if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "fnAttributes", "isLessSource()");
							}dbg.location(1097,49);
							match(input,SEMI,FOLLOW_SEMI_in_fnAttributes7388); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(333);}
					dbg.location(1097,55);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1097:55: ( ws )?
					int alt334=2;
					try { dbg.enterSubRule(334);
					try { dbg.enterDecision(334, decisionCanBacktrack[334]);

					int LA334_0 = input.LA(1);
					if ( (LA334_0==COMMENT||LA334_0==NL||LA334_0==WS) ) {
						alt334=1;
					}
					} finally {dbg.exitDecision(334);}

					switch (alt334) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1097:55: ws
							{
							dbg.location(1097,55);
							pushFollow(FOLLOW_ws_in_fnAttributes7391);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(334);}
					dbg.location(1097,59);
					pushFollow(FOLLOW_fnAttribute_in_fnAttributes7394);
					fnAttribute();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop335;
				}
			}
			} finally {dbg.exitSubRule(335);}
			dbg.location(1097,73);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1097:73: ( ws )?
			int alt336=2;
			try { dbg.enterSubRule(336);
			try { dbg.enterDecision(336, decisionCanBacktrack[336]);

			int LA336_0 = input.LA(1);
			if ( (LA336_0==COMMENT||LA336_0==NL||LA336_0==WS) ) {
				alt336=1;
			}
			} finally {dbg.exitDecision(336);}

			switch (alt336) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1097:73: ws
					{
					dbg.location(1097,73);
					pushFollow(FOLLOW_ws_in_fnAttributes7398);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(336);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1098, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "fnAttributes");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "fnAttributes"



	// $ANTLR start "fnAttribute"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1100:1: fnAttribute : ( ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue | ( cp_expression )=> cp_expression | expression );
	public final void fnAttribute() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "fnAttribute");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1100, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1101:2: ( ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue | ( cp_expression )=> cp_expression | expression )
			int alt339=3;
			try { dbg.enterDecision(339, decisionCanBacktrack[339]);

			int LA339_0 = input.LA(1);
			if ( (LA339_0==IDENT) ) {
				int LA339_1 = input.LA(2);
				if ( (synpred42_Css3()) ) {
					alt339=1;
				}
				else if ( (synpred43_Css3()) ) {
					alt339=2;
				}
				else if ( (true) ) {
					alt339=3;
				}

			}
			else if ( (LA339_0==AT_IDENT||(LA339_0 >= BOTTOMCENTER_SYM && LA339_0 <= BOTTOMRIGHT_SYM)||LA339_0==CHARSET_SYM||LA339_0==COUNTER_STYLE_SYM||LA339_0==FONT_FACE_SYM||LA339_0==IMPORT_SYM||(LA339_0 >= LEFTBOTTOM_SYM && LA339_0 <= LEFTTOP_SYM)||LA339_0==MEDIA_SYM||LA339_0==MOZ_DOCUMENT_SYM||LA339_0==NAMESPACE_SYM||LA339_0==PAGE_SYM||(LA339_0 >= RIGHTBOTTOM_SYM && LA339_0 <= RIGHTTOP_SYM)||(LA339_0 >= SASS_AT_ROOT && LA339_0 <= SASS_DEBUG)||(LA339_0 >= SASS_EACH && LA339_0 <= SASS_ELSE)||LA339_0==SASS_EXTEND||(LA339_0 >= SASS_FOR && LA339_0 <= SASS_FUNCTION)||(LA339_0 >= SASS_IF && LA339_0 <= SASS_MIXIN)||(LA339_0 >= SASS_RETURN && LA339_0 <= SASS_USE)||(LA339_0 >= SASS_WARN && LA339_0 <= SASS_WHILE)||(LA339_0 >= TOPCENTER_SYM && LA339_0 <= TOPRIGHT_SYM)||LA339_0==WEBKIT_KEYFRAMES_SYM) ) {
				int LA339_2 = input.LA(2);
				if ( (((synpred42_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt339=1;
				}
				else if ( (((synpred43_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt339=2;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt339=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 339, 2, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA339_0==SASS_VAR) ) {
				int LA339_3 = input.LA(2);
				if ( (((synpred42_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt339=1;
				}
				else if ( (((synpred43_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt339=2;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt339=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 339, 3, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA339_0==LBRACE) && (synpred43_Css3())) {
				alt339=2;
			}
			else if ( (LA339_0==NOT) && (synpred43_Css3())) {
				alt339=2;
			}
			else if ( (LA339_0==MINUS||LA339_0==PLUS) ) {
				int LA339_6 = input.LA(2);
				if ( (synpred43_Css3()) ) {
					alt339=2;
				}
				else if ( (true) ) {
					alt339=3;
				}

			}
			else if ( (LA339_0==VARIABLE) ) {
				int LA339_7 = input.LA(2);
				if ( (synpred43_Css3()) ) {
					alt339=2;
				}
				else if ( (true) ) {
					alt339=3;
				}

			}
			else if ( (LA339_0==LBRACKET) ) {
				int LA339_8 = input.LA(2);
				if ( (synpred43_Css3()) ) {
					alt339=2;
				}
				else if ( (true) ) {
					alt339=3;
				}

			}
			else if ( (LA339_0==NUMBER) ) {
				int LA339_9 = input.LA(2);
				if ( (synpred43_Css3()) ) {
					alt339=2;
				}
				else if ( (true) ) {
					alt339=3;
				}

			}
			else if ( (LA339_0==URANGE) ) {
				int LA339_10 = input.LA(2);
				if ( (synpred43_Css3()) ) {
					alt339=2;
				}
				else if ( (true) ) {
					alt339=3;
				}

			}
			else if ( (LA339_0==PERCENTAGE) ) {
				int LA339_11 = input.LA(2);
				if ( (synpred43_Css3()) ) {
					alt339=2;
				}
				else if ( (true) ) {
					alt339=3;
				}

			}
			else if ( (LA339_0==LENGTH) ) {
				int LA339_12 = input.LA(2);
				if ( (synpred43_Css3()) ) {
					alt339=2;
				}
				else if ( (true) ) {
					alt339=3;
				}

			}
			else if ( (LA339_0==EMS) ) {
				int LA339_13 = input.LA(2);
				if ( (synpred43_Css3()) ) {
					alt339=2;
				}
				else if ( (true) ) {
					alt339=3;
				}

			}
			else if ( (LA339_0==REM) ) {
				int LA339_14 = input.LA(2);
				if ( (synpred43_Css3()) ) {
					alt339=2;
				}
				else if ( (true) ) {
					alt339=3;
				}

			}
			else if ( (LA339_0==EXS) ) {
				int LA339_15 = input.LA(2);
				if ( (synpred43_Css3()) ) {
					alt339=2;
				}
				else if ( (true) ) {
					alt339=3;
				}

			}
			else if ( (LA339_0==ANGLE) ) {
				int LA339_16 = input.LA(2);
				if ( (synpred43_Css3()) ) {
					alt339=2;
				}
				else if ( (true) ) {
					alt339=3;
				}

			}
			else if ( (LA339_0==TIME) ) {
				int LA339_17 = input.LA(2);
				if ( (synpred43_Css3()) ) {
					alt339=2;
				}
				else if ( (true) ) {
					alt339=3;
				}

			}
			else if ( (LA339_0==FREQ) ) {
				int LA339_18 = input.LA(2);
				if ( (synpred43_Css3()) ) {
					alt339=2;
				}
				else if ( (true) ) {
					alt339=3;
				}

			}
			else if ( (LA339_0==RESOLUTION) ) {
				int LA339_19 = input.LA(2);
				if ( (synpred43_Css3()) ) {
					alt339=2;
				}
				else if ( (true) ) {
					alt339=3;
				}

			}
			else if ( (LA339_0==DIMENSION) ) {
				int LA339_20 = input.LA(2);
				if ( (synpred43_Css3()) ) {
					alt339=2;
				}
				else if ( (true) ) {
					alt339=3;
				}

			}
			else if ( (LA339_0==STRING) ) {
				int LA339_21 = input.LA(2);
				if ( (synpred43_Css3()) ) {
					alt339=2;
				}
				else if ( (true) ) {
					alt339=3;
				}

			}
			else if ( (LA339_0==TILDE) ) {
				int LA339_22 = input.LA(2);
				if ( (synpred43_Css3()) ) {
					alt339=2;
				}
				else if ( (true) ) {
					alt339=3;
				}

			}
			else if ( (LA339_0==LESS_JS_STRING) ) {
				int LA339_23 = input.LA(2);
				if ( (synpred43_Css3()) ) {
					alt339=2;
				}
				else if ( (true) ) {
					alt339=3;
				}

			}
			else if ( (LA339_0==GEN) ) {
				int LA339_24 = input.LA(2);
				if ( (synpred43_Css3()) ) {
					alt339=2;
				}
				else if ( (true) ) {
					alt339=3;
				}

			}
			else if ( (LA339_0==URI) ) {
				int LA339_25 = input.LA(2);
				if ( (synpred43_Css3()) ) {
					alt339=2;
				}
				else if ( (true) ) {
					alt339=3;
				}

			}
			else if ( (LA339_0==HASH) ) {
				int LA339_26 = input.LA(2);
				if ( (synpred43_Css3()) ) {
					alt339=2;
				}
				else if ( (true) ) {
					alt339=3;
				}

			}
			else if ( (LA339_0==LESS_AND) ) {
				int LA339_27 = input.LA(2);
				if ( ((synpred43_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt339=2;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt339=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 339, 27, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA339_0==HASH_SYMBOL) ) {
				int LA339_28 = input.LA(2);
				if ( ((synpred43_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt339=2;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt339=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 339, 28, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA339_0==AT_SIGN) ) {
				int LA339_29 = input.LA(2);
				if ( ((synpred43_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt339=2;
				}
				else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
					alt339=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 339, 29, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA339_0==PERCENTAGE_SYMBOL) ) {
				int LA339_30 = input.LA(2);
				if ( ((synpred43_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {
					alt339=2;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt339=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 339, 30, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA339_0==IMPORTANT_SYM) && (synpred43_Css3())) {
				alt339=2;
			}
			else if ( (LA339_0==LPAREN) && (synpred43_Css3())) {
				alt339=2;
			}

			} finally {dbg.exitDecision(339);}

			switch (alt339) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1102:9: ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue
					{
					dbg.location(1102,46);
					pushFollow(FOLLOW_fnAttributeName_in_fnAttribute7435);
					fnAttributeName();
					state._fsp--;
					if (state.failed) return;dbg.location(1102,62);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1102:62: ( ws )?
					int alt337=2;
					try { dbg.enterSubRule(337);
					try { dbg.enterDecision(337, decisionCanBacktrack[337]);

					int LA337_0 = input.LA(1);
					if ( (LA337_0==COMMENT||LA337_0==NL||LA337_0==WS) ) {
						alt337=1;
					}
					} finally {dbg.exitDecision(337);}

					switch (alt337) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1102:62: ws
							{
							dbg.location(1102,62);
							pushFollow(FOLLOW_ws_in_fnAttribute7437);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(337);}
					dbg.location(1102,66);
					if ( input.LA(1)==COLON||input.LA(1)==OPEQ ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}dbg.location(1102,79);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1102:79: ( ws )?
					int alt338=2;
					try { dbg.enterSubRule(338);
					try { dbg.enterDecision(338, decisionCanBacktrack[338]);

					int LA338_0 = input.LA(1);
					if ( (LA338_0==COMMENT||LA338_0==NL||LA338_0==WS) ) {
						alt338=1;
					}
					} finally {dbg.exitDecision(338);}

					switch (alt338) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1102:79: ws
							{
							dbg.location(1102,79);
							pushFollow(FOLLOW_ws_in_fnAttribute7446);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(338);}
					dbg.location(1102,83);
					pushFollow(FOLLOW_fnAttributeValue_in_fnAttribute7449);
					fnAttributeValue();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1103:11: ( cp_expression )=> cp_expression
					{
					dbg.location(1103,29);
					pushFollow(FOLLOW_cp_expression_in_fnAttribute7466);
					cp_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1104:11: expression
					{
					dbg.location(1104,11);
					pushFollow(FOLLOW_expression_in_fnAttribute7478);
					expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1105, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "fnAttribute");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "fnAttribute"



	// $ANTLR start "fnAttributeName"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1107:1: fnAttributeName : ( IDENT ( DOT IDENT )* |{...}? cp_variable );
	public final void fnAttributeName() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "fnAttributeName");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1107, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1108:2: ( IDENT ( DOT IDENT )* |{...}? cp_variable )
			int alt341=2;
			try { dbg.enterDecision(341, decisionCanBacktrack[341]);

			int LA341_0 = input.LA(1);
			if ( (LA341_0==IDENT) ) {
				int LA341_1 = input.LA(2);
				if ( (LA341_1==DOT) ) {
					int LA341_3 = input.LA(3);
					if ( (LA341_3==SASS_VAR) ) {
						alt341=2;
					}
					else if ( (LA341_3==IDENT) ) {
						alt341=1;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 341, 3, input);
							dbg.recognitionException(nvae);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}
				else if ( (LA341_1==COLON||LA341_1==COMMENT||LA341_1==NL||LA341_1==OPEQ||LA341_1==WS) ) {
					alt341=1;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 341, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA341_0==AT_IDENT||(LA341_0 >= BOTTOMCENTER_SYM && LA341_0 <= BOTTOMRIGHT_SYM)||LA341_0==CHARSET_SYM||LA341_0==COUNTER_STYLE_SYM||LA341_0==FONT_FACE_SYM||LA341_0==IMPORT_SYM||(LA341_0 >= LEFTBOTTOM_SYM && LA341_0 <= LEFTTOP_SYM)||LA341_0==MEDIA_SYM||LA341_0==MOZ_DOCUMENT_SYM||LA341_0==NAMESPACE_SYM||LA341_0==PAGE_SYM||(LA341_0 >= RIGHTBOTTOM_SYM && LA341_0 <= RIGHTTOP_SYM)||(LA341_0 >= SASS_AT_ROOT && LA341_0 <= SASS_DEBUG)||(LA341_0 >= SASS_EACH && LA341_0 <= SASS_ELSE)||LA341_0==SASS_EXTEND||(LA341_0 >= SASS_FOR && LA341_0 <= SASS_FUNCTION)||(LA341_0 >= SASS_IF && LA341_0 <= SASS_MIXIN)||(LA341_0 >= SASS_RETURN && LA341_0 <= SASS_WHILE)||(LA341_0 >= TOPCENTER_SYM && LA341_0 <= TOPRIGHT_SYM)||LA341_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt341=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 341, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(341);}

			switch (alt341) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1109:13: IDENT ( DOT IDENT )*
					{
					dbg.location(1109,13);
					match(input,IDENT,FOLLOW_IDENT_in_fnAttributeName7501); if (state.failed) return;dbg.location(1109,19);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1109:19: ( DOT IDENT )*
					try { dbg.enterSubRule(340);

					loop340:
					while (true) {
						int alt340=2;
						try { dbg.enterDecision(340, decisionCanBacktrack[340]);

						int LA340_0 = input.LA(1);
						if ( (LA340_0==DOT) ) {
							alt340=1;
						}

						} finally {dbg.exitDecision(340);}

						switch (alt340) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1109:20: DOT IDENT
							{
							dbg.location(1109,20);
							match(input,DOT,FOLLOW_DOT_in_fnAttributeName7504); if (state.failed) return;dbg.location(1109,24);
							match(input,IDENT,FOLLOW_IDENT_in_fnAttributeName7506); if (state.failed) return;
							}
							break;

						default :
							break loop340;
						}
					}
					} finally {dbg.exitSubRule(340);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1110:15: {...}? cp_variable
					{
					dbg.location(1110,15);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "fnAttributeName", "isCssPreprocessorSource()");
					}dbg.location(1110,44);
					pushFollow(FOLLOW_cp_variable_in_fnAttributeName7526);
					cp_variable();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1111, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "fnAttributeName");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "fnAttributeName"



	// $ANTLR start "fnAttributeValue"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1113:1: fnAttributeValue : ( term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )* |{...}? cp_math_expression );
	public final void fnAttributeValue() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "fnAttributeValue");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1113, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1114:2: ( term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )* |{...}? cp_math_expression )
			int alt346=2;
			try { dbg.enterDecision(346, decisionCanBacktrack[346]);

			switch ( input.LA(1) ) {
			case MINUS:
			case PLUS:
				{
				int LA346_1 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt346=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt346=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 346, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case IDENT:
				{
				int LA346_2 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt346=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt346=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 346, 2, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case VARIABLE:
				{
				int LA346_3 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt346=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt346=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 346, 3, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LBRACKET:
				{
				int LA346_4 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt346=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt346=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 346, 4, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case NUMBER:
				{
				int LA346_5 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt346=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt346=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 346, 5, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case URANGE:
				{
				int LA346_6 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt346=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt346=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 346, 6, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PERCENTAGE:
				{
				int LA346_7 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt346=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt346=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 346, 7, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LENGTH:
				{
				int LA346_8 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt346=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt346=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 346, 8, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case EMS:
				{
				int LA346_9 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt346=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt346=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 346, 9, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case REM:
				{
				int LA346_10 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt346=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt346=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 346, 10, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case EXS:
				{
				int LA346_11 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt346=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt346=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 346, 11, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ANGLE:
				{
				int LA346_12 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt346=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt346=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 346, 12, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TIME:
				{
				int LA346_13 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt346=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt346=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 346, 13, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case FREQ:
				{
				int LA346_14 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt346=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt346=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 346, 14, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case RESOLUTION:
				{
				int LA346_15 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt346=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt346=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 346, 15, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case DIMENSION:
				{
				int LA346_16 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt346=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt346=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 346, 16, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case STRING:
				{
				int LA346_17 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt346=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt346=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 346, 17, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TILDE:
				{
				int LA346_18 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt346=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt346=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 346, 18, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LESS_JS_STRING:
				{
				int LA346_19 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt346=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt346=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 346, 19, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case GEN:
				{
				int LA346_20 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt346=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt346=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 346, 20, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case URI:
				{
				int LA346_21 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt346=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt346=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 346, 21, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case HASH:
				{
				int LA346_22 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt346=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt346=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 346, 22, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				int LA346_23 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt346=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt346=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 346, 23, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_VAR:
				{
				int LA346_24 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt346=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt346=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 346, 24, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LESS_AND:
				{
				int LA346_25 = input.LA(2);
				if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt346=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt346=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 346, 25, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case HASH_SYMBOL:
				{
				int LA346_26 = input.LA(2);
				if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt346=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt346=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 346, 26, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT_SIGN:
				{
				int LA346_27 = input.LA(2);
				if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
					alt346=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt346=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 346, 27, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PERCENTAGE_SYMBOL:
				{
				int LA346_28 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt346=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt346=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 346, 28, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case IMPORTANT_SYM:
			case LPAREN:
				{
				alt346=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 346, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(346);}

			switch (alt346) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:13: term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )*
					{
					dbg.location(1115,13);
					pushFollow(FOLLOW_term_in_fnAttributeValue7549);
					term();
					state._fsp--;
					if (state.failed) return;dbg.location(1115,18);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:18: ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )*
					try { dbg.enterSubRule(345);

					loop345:
					while (true) {
						int alt345=2;
						try { dbg.enterDecision(345, decisionCanBacktrack[345]);

						try {
							isCyclicDecision = true;
							alt345 = dfa345.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(345);}

						switch (alt345) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:20: ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term
							{
							dbg.location(1115,71);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:71: ( ws | ( ( ws )? SOLIDUS ( ws )? ) |)
							int alt344=3;
							try { dbg.enterSubRule(344);
							try { dbg.enterDecision(344, decisionCanBacktrack[344]);

							try {
								isCyclicDecision = true;
								alt344 = dfa344.predict(input);
							}
							catch (NoViableAltException nvae) {
								dbg.recognitionException(nvae);
								throw nvae;
							}
							} finally {dbg.exitDecision(344);}

							switch (alt344) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:73: ws
									{
									dbg.location(1115,73);
									pushFollow(FOLLOW_ws_in_fnAttributeValue7581);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;
								case 2 :
									dbg.enterAlt(2);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:78: ( ( ws )? SOLIDUS ( ws )? )
									{
									dbg.location(1115,78);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:78: ( ( ws )? SOLIDUS ( ws )? )
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:79: ( ws )? SOLIDUS ( ws )?
									{
									dbg.location(1115,79);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:79: ( ws )?
									int alt342=2;
									try { dbg.enterSubRule(342);
									try { dbg.enterDecision(342, decisionCanBacktrack[342]);

									int LA342_0 = input.LA(1);
									if ( (LA342_0==COMMENT||LA342_0==NL||LA342_0==WS) ) {
										alt342=1;
									}
									} finally {dbg.exitDecision(342);}

									switch (alt342) {
										case 1 :
											dbg.enterAlt(1);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:79: ws
											{
											dbg.location(1115,79);
											pushFollow(FOLLOW_ws_in_fnAttributeValue7586);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(342);}
									dbg.location(1115,83);
									match(input,SOLIDUS,FOLLOW_SOLIDUS_in_fnAttributeValue7589); if (state.failed) return;dbg.location(1115,91);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:91: ( ws )?
									int alt343=2;
									try { dbg.enterSubRule(343);
									try { dbg.enterDecision(343, decisionCanBacktrack[343]);

									int LA343_0 = input.LA(1);
									if ( (LA343_0==COMMENT||LA343_0==NL||LA343_0==WS) ) {
										alt343=1;
									}
									} finally {dbg.exitDecision(343);}

									switch (alt343) {
										case 1 :
											dbg.enterAlt(1);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:91: ws
											{
											dbg.location(1115,91);
											pushFollow(FOLLOW_ws_in_fnAttributeValue7591);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(343);}

									}

									}
									break;
								case 3 :
									dbg.enterAlt(3);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:111: 
									{
									}
									break;

							}
							} finally {dbg.exitSubRule(344);}
							dbg.location(1115,113);
							pushFollow(FOLLOW_term_in_fnAttributeValue7600);
							term();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop345;
						}
					}
					} finally {dbg.exitSubRule(345);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1116:15: {...}? cp_math_expression
					{
					dbg.location(1116,15);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "fnAttributeValue", "isCssPreprocessorSource()");
					}dbg.location(1116,44);
					pushFollow(FOLLOW_cp_math_expression_in_fnAttributeValue7621);
					cp_math_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1117, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "fnAttributeValue");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "fnAttributeValue"



	// $ANTLR start "hexColor"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1119:1: hexColor : HASH ;
	public final void hexColor() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "hexColor");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1119, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1120:5: ( HASH )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1120:7: HASH
			{
			dbg.location(1120,7);
			match(input,HASH,FOLLOW_HASH_in_hexColor7635); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1121, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "hexColor");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "hexColor"



	// $ANTLR start "ws"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1123:1: ws : ( WS | NL | COMMENT )+ ;
	public final void ws() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "ws");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1123, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1124:5: ( ( WS | NL | COMMENT )+ )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1124:7: ( WS | NL | COMMENT )+
			{
			dbg.location(1124,7);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1124:7: ( WS | NL | COMMENT )+
			int cnt347=0;
			try { dbg.enterSubRule(347);

			loop347:
			while (true) {
				int alt347=2;
				try { dbg.enterDecision(347, decisionCanBacktrack[347]);

				int LA347_0 = input.LA(1);
				if ( (LA347_0==COMMENT||LA347_0==NL||LA347_0==WS) ) {
					alt347=1;
				}

				} finally {dbg.exitDecision(347);}

				switch (alt347) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
					{
					dbg.location(1124,7);
					if ( input.LA(1)==COMMENT||input.LA(1)==NL||input.LA(1)==WS ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}
					}
					break;

				default :
					if ( cnt347 >= 1 ) break loop347;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(347, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt347++;
			}
			} finally {dbg.exitSubRule(347);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1125, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "ws");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "ws"



	// $ANTLR start "cp_variable_declaration"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1130:1: cp_variable_declaration : ({...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list |{...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )* );
	public final void cp_variable_declaration() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_variable_declaration");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1130, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1131:5: ({...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list |{...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )* )
			int alt355=2;
			try { dbg.enterDecision(355, decisionCanBacktrack[355]);

			switch ( input.LA(1) ) {
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				int LA355_1 = input.LA(2);
				if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
					alt355=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt355=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 355, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_VAR:
				{
				int LA355_2 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt355=1;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt355=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 355, 2, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case IDENT:
				{
				int LA355_3 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt355=1;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt355=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 355, 3, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 355, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(355);}

			switch (alt355) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1132:9: {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list
					{
					dbg.location(1132,9);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_variable_declaration", "isLessSource()");
					}dbg.location(1132,27);
					pushFollow(FOLLOW_cp_variable_in_cp_variable_declaration7695);
					cp_variable();
					state._fsp--;
					if (state.failed) return;dbg.location(1132,39);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1132:39: ( ws )?
					int alt348=2;
					try { dbg.enterSubRule(348);
					try { dbg.enterDecision(348, decisionCanBacktrack[348]);

					int LA348_0 = input.LA(1);
					if ( (LA348_0==COMMENT||LA348_0==NL||LA348_0==WS) ) {
						alt348=1;
					}
					} finally {dbg.exitDecision(348);}

					switch (alt348) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1132:39: ws
							{
							dbg.location(1132,39);
							pushFollow(FOLLOW_ws_in_cp_variable_declaration7697);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(348);}
					dbg.location(1132,43);
					match(input,COLON,FOLLOW_COLON_in_cp_variable_declaration7700); if (state.failed) return;dbg.location(1132,49);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1132:49: ( ws )?
					int alt349=2;
					try { dbg.enterSubRule(349);
					try { dbg.enterDecision(349, decisionCanBacktrack[349]);

					int LA349_0 = input.LA(1);
					if ( (LA349_0==COMMENT||LA349_0==NL||LA349_0==WS) ) {
						alt349=1;
					}
					} finally {dbg.exitDecision(349);}

					switch (alt349) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1132:49: ws
							{
							dbg.location(1132,49);
							pushFollow(FOLLOW_ws_in_cp_variable_declaration7702);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(349);}
					dbg.location(1132,53);
					pushFollow(FOLLOW_cp_expression_list_in_cp_variable_declaration7705);
					cp_expression_list();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:9: {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )*
					{
					dbg.location(1134,9);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_variable_declaration", "isScssSource()");
					}dbg.location(1134,27);
					pushFollow(FOLLOW_cp_variable_in_cp_variable_declaration7727);
					cp_variable();
					state._fsp--;
					if (state.failed) return;dbg.location(1134,39);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:39: ( ws )?
					int alt350=2;
					try { dbg.enterSubRule(350);
					try { dbg.enterDecision(350, decisionCanBacktrack[350]);

					int LA350_0 = input.LA(1);
					if ( (LA350_0==COMMENT||LA350_0==NL||LA350_0==WS) ) {
						alt350=1;
					}
					} finally {dbg.exitDecision(350);}

					switch (alt350) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:39: ws
							{
							dbg.location(1134,39);
							pushFollow(FOLLOW_ws_in_cp_variable_declaration7729);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(350);}
					dbg.location(1134,43);
					match(input,COLON,FOLLOW_COLON_in_cp_variable_declaration7732); if (state.failed) return;dbg.location(1134,49);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:49: ( ws )?
					int alt351=2;
					try { dbg.enterSubRule(351);
					try { dbg.enterDecision(351, decisionCanBacktrack[351]);

					int LA351_0 = input.LA(1);
					if ( (LA351_0==COMMENT||LA351_0==NL||LA351_0==WS) ) {
						alt351=1;
					}
					} finally {dbg.exitDecision(351);}

					switch (alt351) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:49: ws
							{
							dbg.location(1134,49);
							pushFollow(FOLLOW_ws_in_cp_variable_declaration7734);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(351);}
					dbg.location(1134,53);
					pushFollow(FOLLOW_cp_expression_list_in_cp_variable_declaration7737);
					cp_expression_list();
					state._fsp--;
					if (state.failed) return;dbg.location(1134,72);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:72: ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )*
					try { dbg.enterSubRule(354);

					loop354:
					while (true) {
						int alt354=3;
						try { dbg.enterDecision(354, decisionCanBacktrack[354]);

						try {
							isCyclicDecision = true;
							alt354 = dfa354.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(354);}

						switch (alt354) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:73: ( ( ws )? SASS_DEFAULT )
							{
							dbg.location(1134,73);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:73: ( ( ws )? SASS_DEFAULT )
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:74: ( ws )? SASS_DEFAULT
							{
							dbg.location(1134,74);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:74: ( ws )?
							int alt352=2;
							try { dbg.enterSubRule(352);
							try { dbg.enterDecision(352, decisionCanBacktrack[352]);

							int LA352_0 = input.LA(1);
							if ( (LA352_0==COMMENT||LA352_0==NL||LA352_0==WS) ) {
								alt352=1;
							}
							} finally {dbg.exitDecision(352);}

							switch (alt352) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:74: ws
									{
									dbg.location(1134,74);
									pushFollow(FOLLOW_ws_in_cp_variable_declaration7741);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(352);}
							dbg.location(1134,78);
							match(input,SASS_DEFAULT,FOLLOW_SASS_DEFAULT_in_cp_variable_declaration7744); if (state.failed) return;
							}

							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:94: ( ( ws )? SASS_GLOBAL )
							{
							dbg.location(1134,94);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:94: ( ( ws )? SASS_GLOBAL )
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:95: ( ws )? SASS_GLOBAL
							{
							dbg.location(1134,95);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:95: ( ws )?
							int alt353=2;
							try { dbg.enterSubRule(353);
							try { dbg.enterDecision(353, decisionCanBacktrack[353]);

							int LA353_0 = input.LA(1);
							if ( (LA353_0==COMMENT||LA353_0==NL||LA353_0==WS) ) {
								alt353=1;
							}
							} finally {dbg.exitDecision(353);}

							switch (alt353) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:95: ws
									{
									dbg.location(1134,95);
									pushFollow(FOLLOW_ws_in_cp_variable_declaration7750);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(353);}
							dbg.location(1134,99);
							match(input,SASS_GLOBAL,FOLLOW_SASS_GLOBAL_in_cp_variable_declaration7753); if (state.failed) return;
							}

							}
							break;

						default :
							break loop354;
						}
					}
					} finally {dbg.exitSubRule(354);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1135, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_variable_declaration");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_variable_declaration"



	// $ANTLR start "cp_variable"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1138:1: cp_variable : ({...}? ( AT_IDENT | IMPORT_SYM | PAGE_SYM | MEDIA_SYM | NAMESPACE_SYM | CHARSET_SYM | COUNTER_STYLE_SYM | FONT_FACE_SYM | TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM | MOZ_DOCUMENT_SYM | WEBKIT_KEYFRAMES_SYM | SASS_CONTENT | SASS_MIXIN | SASS_INCLUDE | SASS_EXTEND | SASS_DEBUG | SASS_WARN | SASS_IF | SASS_ELSE | SASS_FOR | SASS_FUNCTION | SASS_RETURN | SASS_EACH | SASS_WHILE | SASS_AT_ROOT | SASS_USE | SASS_FORWARD ) |{...}? ( SASS_VAR | IDENT DOT SASS_VAR ) );
	public final void cp_variable() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_variable");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1138, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1139:5: ({...}? ( AT_IDENT | IMPORT_SYM | PAGE_SYM | MEDIA_SYM | NAMESPACE_SYM | CHARSET_SYM | COUNTER_STYLE_SYM | FONT_FACE_SYM | TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM | MOZ_DOCUMENT_SYM | WEBKIT_KEYFRAMES_SYM | SASS_CONTENT | SASS_MIXIN | SASS_INCLUDE | SASS_EXTEND | SASS_DEBUG | SASS_WARN | SASS_IF | SASS_ELSE | SASS_FOR | SASS_FUNCTION | SASS_RETURN | SASS_EACH | SASS_WHILE | SASS_AT_ROOT | SASS_USE | SASS_FORWARD ) |{...}? ( SASS_VAR | IDENT DOT SASS_VAR ) )
			int alt357=2;
			try { dbg.enterDecision(357, decisionCanBacktrack[357]);

			int LA357_0 = input.LA(1);
			if ( (LA357_0==AT_IDENT||(LA357_0 >= BOTTOMCENTER_SYM && LA357_0 <= BOTTOMRIGHT_SYM)||LA357_0==CHARSET_SYM||LA357_0==COUNTER_STYLE_SYM||LA357_0==FONT_FACE_SYM||LA357_0==IMPORT_SYM||(LA357_0 >= LEFTBOTTOM_SYM && LA357_0 <= LEFTTOP_SYM)||LA357_0==MEDIA_SYM||LA357_0==MOZ_DOCUMENT_SYM||LA357_0==NAMESPACE_SYM||LA357_0==PAGE_SYM||(LA357_0 >= RIGHTBOTTOM_SYM && LA357_0 <= RIGHTTOP_SYM)||(LA357_0 >= SASS_AT_ROOT && LA357_0 <= SASS_DEBUG)||(LA357_0 >= SASS_EACH && LA357_0 <= SASS_ELSE)||LA357_0==SASS_EXTEND||(LA357_0 >= SASS_FOR && LA357_0 <= SASS_FUNCTION)||(LA357_0 >= SASS_IF && LA357_0 <= SASS_MIXIN)||(LA357_0 >= SASS_RETURN && LA357_0 <= SASS_USE)||(LA357_0 >= SASS_WARN && LA357_0 <= SASS_WHILE)||(LA357_0 >= TOPCENTER_SYM && LA357_0 <= TOPRIGHT_SYM)||LA357_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt357=1;
			}
			else if ( (LA357_0==IDENT||LA357_0==SASS_VAR) ) {
				alt357=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 357, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(357);}

			switch (alt357) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1141:9: {...}? ( AT_IDENT | IMPORT_SYM | PAGE_SYM | MEDIA_SYM | NAMESPACE_SYM | CHARSET_SYM | COUNTER_STYLE_SYM | FONT_FACE_SYM | TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM | MOZ_DOCUMENT_SYM | WEBKIT_KEYFRAMES_SYM | SASS_CONTENT | SASS_MIXIN | SASS_INCLUDE | SASS_EXTEND | SASS_DEBUG | SASS_WARN | SASS_IF | SASS_ELSE | SASS_FOR | SASS_FUNCTION | SASS_RETURN | SASS_EACH | SASS_WHILE | SASS_AT_ROOT | SASS_USE | SASS_FORWARD )
					{
					dbg.location(1141,9);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_variable", "isLessSource()");
					}dbg.location(1141,27);
					if ( input.LA(1)==AT_IDENT||(input.LA(1) >= BOTTOMCENTER_SYM && input.LA(1) <= BOTTOMRIGHT_SYM)||input.LA(1)==CHARSET_SYM||input.LA(1)==COUNTER_STYLE_SYM||input.LA(1)==FONT_FACE_SYM||input.LA(1)==IMPORT_SYM||(input.LA(1) >= LEFTBOTTOM_SYM && input.LA(1) <= LEFTTOP_SYM)||input.LA(1)==MEDIA_SYM||input.LA(1)==MOZ_DOCUMENT_SYM||input.LA(1)==NAMESPACE_SYM||input.LA(1)==PAGE_SYM||(input.LA(1) >= RIGHTBOTTOM_SYM && input.LA(1) <= RIGHTTOP_SYM)||(input.LA(1) >= SASS_AT_ROOT && input.LA(1) <= SASS_DEBUG)||(input.LA(1) >= SASS_EACH && input.LA(1) <= SASS_ELSE)||input.LA(1)==SASS_EXTEND||(input.LA(1) >= SASS_FOR && input.LA(1) <= SASS_FUNCTION)||(input.LA(1) >= SASS_IF && input.LA(1) <= SASS_MIXIN)||(input.LA(1) >= SASS_RETURN && input.LA(1) <= SASS_USE)||(input.LA(1) >= SASS_WARN && input.LA(1) <= SASS_WHILE)||(input.LA(1) >= TOPCENTER_SYM && input.LA(1) <= TOPRIGHT_SYM)||input.LA(1)==WEBKIT_KEYFRAMES_SYM ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1143:9: {...}? ( SASS_VAR | IDENT DOT SASS_VAR )
					{
					dbg.location(1143,9);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_variable", "isScssSource()");
					}dbg.location(1143,27);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1143:27: ( SASS_VAR | IDENT DOT SASS_VAR )
					int alt356=2;
					try { dbg.enterSubRule(356);
					try { dbg.enterDecision(356, decisionCanBacktrack[356]);

					int LA356_0 = input.LA(1);
					if ( (LA356_0==SASS_VAR) ) {
						alt356=1;
					}
					else if ( (LA356_0==IDENT) ) {
						alt356=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 356, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(356);}

					switch (alt356) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1143:29: SASS_VAR
							{
							dbg.location(1143,29);
							match(input,SASS_VAR,FOLLOW_SASS_VAR_in_cp_variable7985); if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1143:40: IDENT DOT SASS_VAR
							{
							dbg.location(1143,40);
							match(input,IDENT,FOLLOW_IDENT_in_cp_variable7989); if (state.failed) return;dbg.location(1143,46);
							match(input,DOT,FOLLOW_DOT_in_cp_variable7991); if (state.failed) return;dbg.location(1143,50);
							match(input,SASS_VAR,FOLLOW_SASS_VAR_in_cp_variable7993); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(356);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1144, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_variable");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_variable"



	// $ANTLR start "cp_expression_list"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1147:1: cp_expression_list : ( cp_expression )=> cp_expression ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )* ;
	public final void cp_expression_list() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_expression_list");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1147, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1148:5: ( ( cp_expression )=> cp_expression ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1149:5: ( cp_expression )=> cp_expression ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )*
			{
			dbg.location(1149,24);
			pushFollow(FOLLOW_cp_expression_in_cp_expression_list8023);
			cp_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(1150,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1150:5: ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )*
			try { dbg.enterSubRule(360);

			loop360:
			while (true) {
				int alt360=2;
				try { dbg.enterDecision(360, decisionCanBacktrack[360]);

				try {
					isCyclicDecision = true;
					alt360 = dfa360.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(360);}

				switch (alt360) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1150:6: ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression
					{
					dbg.location(1150,37);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1150:37: ( ws )?
					int alt358=2;
					try { dbg.enterSubRule(358);
					try { dbg.enterDecision(358, decisionCanBacktrack[358]);

					int LA358_0 = input.LA(1);
					if ( (LA358_0==COMMENT||LA358_0==NL||LA358_0==WS) ) {
						alt358=1;
					}
					} finally {dbg.exitDecision(358);}

					switch (alt358) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1150:37: ws
							{
							dbg.location(1150,37);
							pushFollow(FOLLOW_ws_in_cp_expression_list8042);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(358);}
					dbg.location(1150,41);
					match(input,COMMA,FOLLOW_COMMA_in_cp_expression_list8045); if (state.failed) return;dbg.location(1150,47);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1150:47: ( ws )?
					int alt359=2;
					try { dbg.enterSubRule(359);
					try { dbg.enterDecision(359, decisionCanBacktrack[359]);

					int LA359_0 = input.LA(1);
					if ( (LA359_0==COMMENT||LA359_0==NL||LA359_0==WS) ) {
						alt359=1;
					}
					} finally {dbg.exitDecision(359);}

					switch (alt359) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1150:47: ws
							{
							dbg.location(1150,47);
							pushFollow(FOLLOW_ws_in_cp_expression_list8047);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(359);}
					dbg.location(1150,51);
					pushFollow(FOLLOW_cp_expression_in_cp_expression_list8050);
					cp_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop360;
				}
			}
			} finally {dbg.exitSubRule(360);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1151, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_expression_list");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_expression_list"



	// $ANTLR start "cp_expression"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1163:1: cp_expression : ({...}? ( LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ) | ( cp_expression_atom )=> ( cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )* ) |{...}? LPAREN ( ws )? syncToFollow ( sass_map_pairs )? RPAREN );
	public final void cp_expression() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_expression");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1163, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1164:5: ({...}? ( LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ) | ( cp_expression_atom )=> ( cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )* ) |{...}? LPAREN ( ws )? syncToFollow ( sass_map_pairs )? RPAREN )
			int alt369=3;
			try { dbg.enterDecision(369, decisionCanBacktrack[369]);

			int LA369_0 = input.LA(1);
			if ( (LA369_0==LBRACE) ) {
				alt369=1;
			}
			else if ( (LA369_0==NOT) && (synpred47_Css3())) {
				alt369=2;
			}
			else if ( (LA369_0==MINUS||LA369_0==PLUS) && (synpred47_Css3())) {
				alt369=2;
			}
			else if ( (LA369_0==IDENT) && (synpred47_Css3())) {
				alt369=2;
			}
			else if ( (LA369_0==VARIABLE) && (synpred47_Css3())) {
				alt369=2;
			}
			else if ( (LA369_0==LBRACKET) && (synpred47_Css3())) {
				alt369=2;
			}
			else if ( (LA369_0==NUMBER) && (synpred47_Css3())) {
				alt369=2;
			}
			else if ( (LA369_0==URANGE) && (synpred47_Css3())) {
				alt369=2;
			}
			else if ( (LA369_0==PERCENTAGE) && (synpred47_Css3())) {
				alt369=2;
			}
			else if ( (LA369_0==LENGTH) && (synpred47_Css3())) {
				alt369=2;
			}
			else if ( (LA369_0==EMS) && (synpred47_Css3())) {
				alt369=2;
			}
			else if ( (LA369_0==REM) && (synpred47_Css3())) {
				alt369=2;
			}
			else if ( (LA369_0==EXS) && (synpred47_Css3())) {
				alt369=2;
			}
			else if ( (LA369_0==ANGLE) && (synpred47_Css3())) {
				alt369=2;
			}
			else if ( (LA369_0==TIME) && (synpred47_Css3())) {
				alt369=2;
			}
			else if ( (LA369_0==FREQ) && (synpred47_Css3())) {
				alt369=2;
			}
			else if ( (LA369_0==RESOLUTION) && (synpred47_Css3())) {
				alt369=2;
			}
			else if ( (LA369_0==DIMENSION) && (synpred47_Css3())) {
				alt369=2;
			}
			else if ( (LA369_0==STRING) && (synpred47_Css3())) {
				alt369=2;
			}
			else if ( (LA369_0==TILDE) && (synpred47_Css3())) {
				alt369=2;
			}
			else if ( (LA369_0==LESS_JS_STRING) && (synpred47_Css3())) {
				alt369=2;
			}
			else if ( (LA369_0==GEN) && (synpred47_Css3())) {
				alt369=2;
			}
			else if ( (LA369_0==URI) && (synpred47_Css3())) {
				alt369=2;
			}
			else if ( (LA369_0==HASH) && (synpred47_Css3())) {
				alt369=2;
			}
			else if ( (LA369_0==AT_IDENT||(LA369_0 >= BOTTOMCENTER_SYM && LA369_0 <= BOTTOMRIGHT_SYM)||LA369_0==CHARSET_SYM||LA369_0==COUNTER_STYLE_SYM||LA369_0==FONT_FACE_SYM||LA369_0==IMPORT_SYM||(LA369_0 >= LEFTBOTTOM_SYM && LA369_0 <= LEFTTOP_SYM)||LA369_0==MEDIA_SYM||LA369_0==MOZ_DOCUMENT_SYM||LA369_0==NAMESPACE_SYM||LA369_0==PAGE_SYM||(LA369_0 >= RIGHTBOTTOM_SYM && LA369_0 <= RIGHTTOP_SYM)||(LA369_0 >= SASS_AT_ROOT && LA369_0 <= SASS_DEBUG)||(LA369_0 >= SASS_EACH && LA369_0 <= SASS_ELSE)||LA369_0==SASS_EXTEND||(LA369_0 >= SASS_FOR && LA369_0 <= SASS_FUNCTION)||(LA369_0 >= SASS_IF && LA369_0 <= SASS_MIXIN)||(LA369_0 >= SASS_RETURN && LA369_0 <= SASS_USE)||(LA369_0 >= SASS_WARN && LA369_0 <= SASS_WHILE)||(LA369_0 >= TOPCENTER_SYM && LA369_0 <= TOPRIGHT_SYM)||LA369_0==WEBKIT_KEYFRAMES_SYM) && (synpred47_Css3())) {
				alt369=2;
			}
			else if ( (LA369_0==SASS_VAR) && (synpred47_Css3())) {
				alt369=2;
			}
			else if ( (LA369_0==LESS_AND) && (synpred47_Css3())) {
				alt369=2;
			}
			else if ( (LA369_0==HASH_SYMBOL) && (synpred47_Css3())) {
				alt369=2;
			}
			else if ( (LA369_0==AT_SIGN) && (synpred47_Css3())) {
				alt369=2;
			}
			else if ( (LA369_0==PERCENTAGE_SYMBOL) && (synpred47_Css3())) {
				alt369=2;
			}
			else if ( (LA369_0==IMPORTANT_SYM) && (synpred47_Css3())) {
				alt369=2;
			}
			else if ( (LA369_0==LPAREN) ) {
				int LA369_32 = input.LA(2);
				if ( (synpred47_Css3()) ) {
					alt369=2;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt369=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 369, 32, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 369, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(369);}

			switch (alt369) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1165:5: {...}? ( LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
					{
					dbg.location(1165,5);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_expression", "isLessSource()");
					}dbg.location(1165,23);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1165:23: ( LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1165:24: LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
					{
					dbg.location(1165,24);
					match(input,LBRACE,FOLLOW_LBRACE_in_cp_expression8086); if (state.failed) return;dbg.location(1165,31);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1165:31: ( ws )?
					int alt361=2;
					try { dbg.enterSubRule(361);
					try { dbg.enterDecision(361, decisionCanBacktrack[361]);

					int LA361_0 = input.LA(1);
					if ( (LA361_0==COMMENT||LA361_0==NL||LA361_0==WS) ) {
						alt361=1;
					}
					} finally {dbg.exitDecision(361);}

					switch (alt361) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1165:31: ws
							{
							dbg.location(1165,31);
							pushFollow(FOLLOW_ws_in_cp_expression8088);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(361);}
					dbg.location(1165,35);
					pushFollow(FOLLOW_syncToFollow_in_cp_expression8091);
					syncToFollow();
					state._fsp--;
					if (state.failed) return;dbg.location(1165,48);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1165:48: ( declarations )?
					int alt362=2;
					try { dbg.enterSubRule(362);
					try { dbg.enterDecision(362, decisionCanBacktrack[362]);

					int LA362_0 = input.LA(1);
					if ( ((LA362_0 >= AT_IDENT && LA362_0 <= AT_SIGN)||(LA362_0 >= BOTTOMCENTER_SYM && LA362_0 <= BOTTOMRIGHT_SYM)||(LA362_0 >= CHARSET_SYM && LA362_0 <= COLON)||LA362_0==COUNTER_STYLE_SYM||(LA362_0 >= DCOLON && LA362_0 <= DOT)||LA362_0==FONT_FACE_SYM||(LA362_0 >= GEN && LA362_0 <= GREATER)||(LA362_0 >= HASH && LA362_0 <= HASH_SYMBOL)||LA362_0==IDENT||LA362_0==IMPORT_SYM||LA362_0==LAYER_SYM||(LA362_0 >= LBRACKET && LA362_0 <= LEFTTOP_SYM)||LA362_0==LESS_AND||(LA362_0 >= MEDIA_SYM && LA362_0 <= MOZ_DOCUMENT_SYM)||LA362_0==NAMESPACE_SYM||LA362_0==PAGE_SYM||(LA362_0 >= PIPE && LA362_0 <= PLUS)||(LA362_0 >= RIGHTBOTTOM_SYM && LA362_0 <= RIGHTTOP_SYM)||(LA362_0 >= SASS_AT_ROOT && LA362_0 <= SASS_DEBUG)||(LA362_0 >= SASS_EACH && LA362_0 <= SASS_ELSE)||(LA362_0 >= SASS_ERROR && LA362_0 <= SASS_FUNCTION)||(LA362_0 >= SASS_IF && LA362_0 <= SASS_MIXIN)||(LA362_0 >= SASS_RETURN && LA362_0 <= SEMI)||LA362_0==STAR||LA362_0==SUPPORTS_SYM||LA362_0==TILDE||(LA362_0 >= TOPCENTER_SYM && LA362_0 <= TOPRIGHT_SYM)||LA362_0==VARIABLE||LA362_0==WEBKIT_KEYFRAMES_SYM) ) {
						alt362=1;
					}
					} finally {dbg.exitDecision(362);}

					switch (alt362) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1165:48: declarations
							{
							dbg.location(1165,48);
							pushFollow(FOLLOW_declarations_in_cp_expression8093);
							declarations();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(362);}
					dbg.location(1165,62);
					match(input,RBRACE,FOLLOW_RBRACE_in_cp_expression8096); if (state.failed) return;
					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1166:7: ( cp_expression_atom )=> ( cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )* )
					{
					dbg.location(1166,31);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1166:31: ( cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )* )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1166:32: cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )*
					{
					dbg.location(1166,32);
					pushFollow(FOLLOW_cp_expression_atom_in_cp_expression8112);
					cp_expression_atom();
					state._fsp--;
					if (state.failed) return;dbg.location(1167,5);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1167:5: ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )*
					try { dbg.enterSubRule(366);

					loop366:
					while (true) {
						int alt366=3;
						try { dbg.enterDecision(366, decisionCanBacktrack[366]);

						try {
							isCyclicDecision = true;
							alt366 = dfa366.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(366);}

						switch (alt366) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1168:9: ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom
							{
							dbg.location(1168,39);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1168:39: ( ( ws )? cp_expression_operator ( ws )? )
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1168:40: ( ws )? cp_expression_operator ( ws )?
							{
							dbg.location(1168,40);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1168:40: ( ws )?
							int alt363=2;
							try { dbg.enterSubRule(363);
							try { dbg.enterDecision(363, decisionCanBacktrack[363]);

							int LA363_0 = input.LA(1);
							if ( (LA363_0==COMMENT||LA363_0==NL||LA363_0==WS) ) {
								alt363=1;
							}
							} finally {dbg.exitDecision(363);}

							switch (alt363) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1168:40: ws
									{
									dbg.location(1168,40);
									pushFollow(FOLLOW_ws_in_cp_expression8136);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(363);}
							dbg.location(1168,44);
							pushFollow(FOLLOW_cp_expression_operator_in_cp_expression8139);
							cp_expression_operator();
							state._fsp--;
							if (state.failed) return;dbg.location(1168,67);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1168:67: ( ws )?
							int alt364=2;
							try { dbg.enterSubRule(364);
							try { dbg.enterDecision(364, decisionCanBacktrack[364]);

							int LA364_0 = input.LA(1);
							if ( (LA364_0==COMMENT||LA364_0==NL||LA364_0==WS) ) {
								alt364=1;
							}
							} finally {dbg.exitDecision(364);}

							switch (alt364) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1168:67: ws
									{
									dbg.location(1168,67);
									pushFollow(FOLLOW_ws_in_cp_expression8141);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(364);}

							}
							dbg.location(1168,72);
							pushFollow(FOLLOW_cp_expression_atom_in_cp_expression8145);
							cp_expression_atom();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1169:11: ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom
							{
							dbg.location(1169,37);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1169:37: ( ws )?
							int alt365=2;
							try { dbg.enterSubRule(365);
							try { dbg.enterDecision(365, decisionCanBacktrack[365]);

							int LA365_0 = input.LA(1);
							if ( (LA365_0==COMMENT||LA365_0==NL||LA365_0==WS) ) {
								alt365=1;
							}
							} finally {dbg.exitDecision(365);}

							switch (alt365) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1169:37: ws
									{
									dbg.location(1169,37);
									pushFollow(FOLLOW_ws_in_cp_expression8164);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(365);}
							dbg.location(1169,41);
							pushFollow(FOLLOW_cp_expression_atom_in_cp_expression8167);
							cp_expression_atom();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop366;
						}
					}
					} finally {dbg.exitSubRule(366);}

					}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1171:7: {...}? LPAREN ( ws )? syncToFollow ( sass_map_pairs )? RPAREN
					{
					dbg.location(1171,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_expression", "isScssSource()");
					}dbg.location(1171,25);
					match(input,LPAREN,FOLLOW_LPAREN_in_cp_expression8185); if (state.failed) return;dbg.location(1171,32);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1171:32: ( ws )?
					int alt367=2;
					try { dbg.enterSubRule(367);
					try { dbg.enterDecision(367, decisionCanBacktrack[367]);

					int LA367_0 = input.LA(1);
					if ( (LA367_0==COMMENT||LA367_0==NL||LA367_0==WS) ) {
						alt367=1;
					}
					} finally {dbg.exitDecision(367);}

					switch (alt367) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1171:32: ws
							{
							dbg.location(1171,32);
							pushFollow(FOLLOW_ws_in_cp_expression8187);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(367);}
					dbg.location(1171,36);
					pushFollow(FOLLOW_syncToFollow_in_cp_expression8190);
					syncToFollow();
					state._fsp--;
					if (state.failed) return;dbg.location(1171,49);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1171:49: ( sass_map_pairs )?
					int alt368=2;
					try { dbg.enterSubRule(368);
					try { dbg.enterDecision(368, decisionCanBacktrack[368]);

					int LA368_0 = input.LA(1);
					if ( ((LA368_0 >= AT_IDENT && LA368_0 <= AT_SIGN)||(LA368_0 >= BOTTOMCENTER_SYM && LA368_0 <= BOTTOMRIGHT_SYM)||LA368_0==CHARSET_SYM||LA368_0==COMMA||LA368_0==COUNTER_STYLE_SYM||LA368_0==FONT_FACE_SYM||LA368_0==GEN||LA368_0==HASH_SYMBOL||LA368_0==IDENT||LA368_0==IMPORT_SYM||(LA368_0 >= LEFTBOTTOM_SYM && LA368_0 <= LEFTTOP_SYM)||(LA368_0 >= MEDIA_SYM && LA368_0 <= MOZ_DOCUMENT_SYM)||LA368_0==NAMESPACE_SYM||LA368_0==NUMBER||LA368_0==PAGE_SYM||(LA368_0 >= RIGHTBOTTOM_SYM && LA368_0 <= RIGHTTOP_SYM)||(LA368_0 >= SASS_AT_ROOT && LA368_0 <= SASS_DEBUG)||(LA368_0 >= SASS_EACH && LA368_0 <= SASS_ELSE)||LA368_0==SASS_EXTEND||(LA368_0 >= SASS_FOR && LA368_0 <= SASS_FUNCTION)||(LA368_0 >= SASS_IF && LA368_0 <= SASS_MIXIN)||(LA368_0 >= SASS_RETURN && LA368_0 <= SASS_WHILE)||LA368_0==STRING||(LA368_0 >= TOPCENTER_SYM && LA368_0 <= TOPRIGHT_SYM)||LA368_0==VARIABLE||LA368_0==WEBKIT_KEYFRAMES_SYM) ) {
						alt368=1;
					}
					} finally {dbg.exitDecision(368);}

					switch (alt368) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1171:49: sass_map_pairs
							{
							dbg.location(1171,49);
							pushFollow(FOLLOW_sass_map_pairs_in_cp_expression8192);
							sass_map_pairs();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(368);}
					dbg.location(1171,65);
					match(input,RPAREN,FOLLOW_RPAREN_in_cp_expression8195); if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1172, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_expression");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_expression"



	// $ANTLR start "cp_expression_operator"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1174:1: cp_expression_operator : ( key_or | key_and | CP_EQ | CP_NOT_EQ | LESS | LESS_OR_EQ | GREATER | GREATER_OR_EQ );
	public final void cp_expression_operator() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_expression_operator");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1174, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1175:5: ( key_or | key_and | CP_EQ | CP_NOT_EQ | LESS | LESS_OR_EQ | GREATER | GREATER_OR_EQ )
			int alt370=8;
			try { dbg.enterDecision(370, decisionCanBacktrack[370]);

			switch ( input.LA(1) ) {
			case IDENT:
				{
				int LA370_1 = input.LA(2);
				if ( (evalPredicate(tokenNameEquals("or"),"tokenNameEquals(\"or\")")) ) {
					alt370=1;
				}
				else if ( (evalPredicate(tokenNameEquals("and"),"tokenNameEquals(\"and\")")) ) {
					alt370=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 370, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CP_EQ:
				{
				alt370=3;
				}
				break;
			case CP_NOT_EQ:
				{
				alt370=4;
				}
				break;
			case LESS:
				{
				alt370=5;
				}
				break;
			case LESS_OR_EQ:
				{
				alt370=6;
				}
				break;
			case GREATER:
				{
				alt370=7;
				}
				break;
			case GREATER_OR_EQ:
				{
				alt370=8;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 370, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(370);}

			switch (alt370) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1176:5: key_or
					{
					dbg.location(1176,5);
					pushFollow(FOLLOW_key_or_in_cp_expression_operator8216);
					key_or();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1176:14: key_and
					{
					dbg.location(1176,14);
					pushFollow(FOLLOW_key_and_in_cp_expression_operator8220);
					key_and();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1176:25: CP_EQ
					{
					dbg.location(1176,25);
					match(input,CP_EQ,FOLLOW_CP_EQ_in_cp_expression_operator8225); if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1176:33: CP_NOT_EQ
					{
					dbg.location(1176,33);
					match(input,CP_NOT_EQ,FOLLOW_CP_NOT_EQ_in_cp_expression_operator8229); if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1176:45: LESS
					{
					dbg.location(1176,45);
					match(input,LESS,FOLLOW_LESS_in_cp_expression_operator8233); if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1176:52: LESS_OR_EQ
					{
					dbg.location(1176,52);
					match(input,LESS_OR_EQ,FOLLOW_LESS_OR_EQ_in_cp_expression_operator8237); if (state.failed) return;
					}
					break;
				case 7 :
					dbg.enterAlt(7);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1176:65: GREATER
					{
					dbg.location(1176,65);
					match(input,GREATER,FOLLOW_GREATER_in_cp_expression_operator8241); if (state.failed) return;
					}
					break;
				case 8 :
					dbg.enterAlt(8);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1176:75: GREATER_OR_EQ
					{
					dbg.location(1176,75);
					match(input,GREATER_OR_EQ,FOLLOW_GREATER_OR_EQ_in_cp_expression_operator8245); if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1177, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_expression_operator");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_expression_operator"



	// $ANTLR start "cp_expression_atom"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1179:1: cp_expression_atom : ( NOT ( ws )? )? ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? ( cp_expression_list ( ws )? )? RPAREN ) ;
	public final void cp_expression_atom() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_expression_atom");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1179, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1180:5: ( ( NOT ( ws )? )? ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? ( cp_expression_list ( ws )? )? RPAREN ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1181:9: ( NOT ( ws )? )? ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? ( cp_expression_list ( ws )? )? RPAREN )
			{
			dbg.location(1181,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1181:9: ( NOT ( ws )? )?
			int alt372=2;
			try { dbg.enterSubRule(372);
			try { dbg.enterDecision(372, decisionCanBacktrack[372]);

			int LA372_0 = input.LA(1);
			if ( (LA372_0==NOT) ) {
				alt372=1;
			}
			} finally {dbg.exitDecision(372);}

			switch (alt372) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1181:10: NOT ( ws )?
					{
					dbg.location(1181,10);
					match(input,NOT,FOLLOW_NOT_in_cp_expression_atom8271); if (state.failed) return;dbg.location(1181,14);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1181:14: ( ws )?
					int alt371=2;
					try { dbg.enterSubRule(371);
					try { dbg.enterDecision(371, decisionCanBacktrack[371]);

					int LA371_0 = input.LA(1);
					if ( (LA371_0==COMMENT||LA371_0==NL||LA371_0==WS) ) {
						alt371=1;
					}
					} finally {dbg.exitDecision(371);}

					switch (alt371) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1181:14: ws
							{
							dbg.location(1181,14);
							pushFollow(FOLLOW_ws_in_cp_expression_atom8273);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(371);}

					}
					break;

			}
			} finally {dbg.exitSubRule(372);}
			dbg.location(1182,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1182:9: ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? ( cp_expression_list ( ws )? )? RPAREN )
			int alt376=2;
			try { dbg.enterSubRule(376);
			try { dbg.enterDecision(376, decisionCanBacktrack[376]);

			int LA376_0 = input.LA(1);
			if ( (LA376_0==MINUS||LA376_0==PLUS) && (synpred50_Css3())) {
				alt376=1;
			}
			else if ( (LA376_0==IDENT) && (synpred50_Css3())) {
				alt376=1;
			}
			else if ( (LA376_0==VARIABLE) && (synpred50_Css3())) {
				alt376=1;
			}
			else if ( (LA376_0==LBRACKET) && (synpred50_Css3())) {
				alt376=1;
			}
			else if ( (LA376_0==NUMBER) && (synpred50_Css3())) {
				alt376=1;
			}
			else if ( (LA376_0==URANGE) && (synpred50_Css3())) {
				alt376=1;
			}
			else if ( (LA376_0==PERCENTAGE) && (synpred50_Css3())) {
				alt376=1;
			}
			else if ( (LA376_0==LENGTH) && (synpred50_Css3())) {
				alt376=1;
			}
			else if ( (LA376_0==EMS) && (synpred50_Css3())) {
				alt376=1;
			}
			else if ( (LA376_0==REM) && (synpred50_Css3())) {
				alt376=1;
			}
			else if ( (LA376_0==EXS) && (synpred50_Css3())) {
				alt376=1;
			}
			else if ( (LA376_0==ANGLE) && (synpred50_Css3())) {
				alt376=1;
			}
			else if ( (LA376_0==TIME) && (synpred50_Css3())) {
				alt376=1;
			}
			else if ( (LA376_0==FREQ) && (synpred50_Css3())) {
				alt376=1;
			}
			else if ( (LA376_0==RESOLUTION) && (synpred50_Css3())) {
				alt376=1;
			}
			else if ( (LA376_0==DIMENSION) && (synpred50_Css3())) {
				alt376=1;
			}
			else if ( (LA376_0==STRING) && (synpred50_Css3())) {
				alt376=1;
			}
			else if ( (LA376_0==TILDE) && (synpred50_Css3())) {
				alt376=1;
			}
			else if ( (LA376_0==LESS_JS_STRING) && (synpred50_Css3())) {
				alt376=1;
			}
			else if ( (LA376_0==GEN) && (synpred50_Css3())) {
				alt376=1;
			}
			else if ( (LA376_0==URI) && (synpred50_Css3())) {
				alt376=1;
			}
			else if ( (LA376_0==HASH) && (synpred50_Css3())) {
				alt376=1;
			}
			else if ( (LA376_0==AT_IDENT||(LA376_0 >= BOTTOMCENTER_SYM && LA376_0 <= BOTTOMRIGHT_SYM)||LA376_0==CHARSET_SYM||LA376_0==COUNTER_STYLE_SYM||LA376_0==FONT_FACE_SYM||LA376_0==IMPORT_SYM||(LA376_0 >= LEFTBOTTOM_SYM && LA376_0 <= LEFTTOP_SYM)||LA376_0==MEDIA_SYM||LA376_0==MOZ_DOCUMENT_SYM||LA376_0==NAMESPACE_SYM||LA376_0==PAGE_SYM||(LA376_0 >= RIGHTBOTTOM_SYM && LA376_0 <= RIGHTTOP_SYM)||(LA376_0 >= SASS_AT_ROOT && LA376_0 <= SASS_DEBUG)||(LA376_0 >= SASS_EACH && LA376_0 <= SASS_ELSE)||LA376_0==SASS_EXTEND||(LA376_0 >= SASS_FOR && LA376_0 <= SASS_FUNCTION)||(LA376_0 >= SASS_IF && LA376_0 <= SASS_MIXIN)||(LA376_0 >= SASS_RETURN && LA376_0 <= SASS_USE)||(LA376_0 >= SASS_WARN && LA376_0 <= SASS_WHILE)||(LA376_0 >= TOPCENTER_SYM && LA376_0 <= TOPRIGHT_SYM)||LA376_0==WEBKIT_KEYFRAMES_SYM) && (synpred50_Css3())) {
				alt376=1;
			}
			else if ( (LA376_0==SASS_VAR) && (synpred50_Css3())) {
				alt376=1;
			}
			else if ( (LA376_0==LESS_AND) && (synpred50_Css3())) {
				alt376=1;
			}
			else if ( (LA376_0==HASH_SYMBOL) && (synpred50_Css3())) {
				alt376=1;
			}
			else if ( (LA376_0==AT_SIGN) && (synpred50_Css3())) {
				alt376=1;
			}
			else if ( (LA376_0==PERCENTAGE_SYMBOL) && (synpred50_Css3())) {
				alt376=1;
			}
			else if ( (LA376_0==IMPORTANT_SYM) && (synpred50_Css3())) {
				alt376=1;
			}
			else if ( (LA376_0==LPAREN) ) {
				int LA376_30 = input.LA(2);
				if ( (synpred50_Css3()) ) {
					alt376=1;
				}
				else if ( (true) ) {
					alt376=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 376, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(376);}

			switch (alt376) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1183:13: ( cp_math_expression )=> cp_math_expression
					{
					dbg.location(1183,35);
					pushFollow(FOLLOW_cp_math_expression_in_cp_expression_atom8304);
					cp_math_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1184:15: LPAREN ( ws )? ( cp_expression_list ( ws )? )? RPAREN
					{
					dbg.location(1184,15);
					match(input,LPAREN,FOLLOW_LPAREN_in_cp_expression_atom8320); if (state.failed) return;dbg.location(1184,22);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1184:22: ( ws )?
					int alt373=2;
					try { dbg.enterSubRule(373);
					try { dbg.enterDecision(373, decisionCanBacktrack[373]);

					int LA373_0 = input.LA(1);
					if ( (LA373_0==COMMENT||LA373_0==NL||LA373_0==WS) ) {
						alt373=1;
					}
					} finally {dbg.exitDecision(373);}

					switch (alt373) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1184:22: ws
							{
							dbg.location(1184,22);
							pushFollow(FOLLOW_ws_in_cp_expression_atom8322);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(373);}
					dbg.location(1184,26);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1184:26: ( cp_expression_list ( ws )? )?
					int alt375=2;
					try { dbg.enterSubRule(375);
					try { dbg.enterDecision(375, decisionCanBacktrack[375]);

					int LA375_0 = input.LA(1);
					if ( ((LA375_0 >= ANGLE && LA375_0 <= AT_SIGN)||(LA375_0 >= BOTTOMCENTER_SYM && LA375_0 <= BOTTOMRIGHT_SYM)||LA375_0==CHARSET_SYM||LA375_0==COUNTER_STYLE_SYM||LA375_0==DIMENSION||LA375_0==EMS||LA375_0==EXS||(LA375_0 >= FONT_FACE_SYM && LA375_0 <= FREQ)||LA375_0==GEN||(LA375_0 >= HASH && LA375_0 <= HASH_SYMBOL)||(LA375_0 >= IDENT && LA375_0 <= IMPORT_SYM)||(LA375_0 >= LBRACE && LA375_0 <= LENGTH)||(LA375_0 >= LESS_AND && LA375_0 <= LESS_JS_STRING)||LA375_0==LPAREN||(LA375_0 >= MEDIA_SYM && LA375_0 <= MOZ_DOCUMENT_SYM)||LA375_0==NAMESPACE_SYM||(LA375_0 >= NOT && LA375_0 <= NUMBER)||(LA375_0 >= PAGE_SYM && LA375_0 <= PERCENTAGE_SYMBOL)||LA375_0==PLUS||(LA375_0 >= REM && LA375_0 <= RIGHTTOP_SYM)||(LA375_0 >= SASS_AT_ROOT && LA375_0 <= SASS_DEBUG)||(LA375_0 >= SASS_EACH && LA375_0 <= SASS_ELSE)||LA375_0==SASS_EXTEND||(LA375_0 >= SASS_FOR && LA375_0 <= SASS_FUNCTION)||(LA375_0 >= SASS_IF && LA375_0 <= SASS_MIXIN)||(LA375_0 >= SASS_RETURN && LA375_0 <= SASS_WHILE)||LA375_0==STRING||(LA375_0 >= TILDE && LA375_0 <= TOPRIGHT_SYM)||(LA375_0 >= URANGE && LA375_0 <= URI)||LA375_0==VARIABLE||LA375_0==WEBKIT_KEYFRAMES_SYM) ) {
						alt375=1;
					}
					} finally {dbg.exitDecision(375);}

					switch (alt375) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1184:27: cp_expression_list ( ws )?
							{
							dbg.location(1184,27);
							pushFollow(FOLLOW_cp_expression_list_in_cp_expression_atom8326);
							cp_expression_list();
							state._fsp--;
							if (state.failed) return;dbg.location(1184,46);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1184:46: ( ws )?
							int alt374=2;
							try { dbg.enterSubRule(374);
							try { dbg.enterDecision(374, decisionCanBacktrack[374]);

							int LA374_0 = input.LA(1);
							if ( (LA374_0==COMMENT||LA374_0==NL||LA374_0==WS) ) {
								alt374=1;
							}
							} finally {dbg.exitDecision(374);}

							switch (alt374) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1184:46: ws
									{
									dbg.location(1184,46);
									pushFollow(FOLLOW_ws_in_cp_expression_atom8328);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(374);}

							}
							break;

					}
					} finally {dbg.exitSubRule(375);}
					dbg.location(1184,52);
					match(input,RPAREN,FOLLOW_RPAREN_in_cp_expression_atom8333); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(376);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1186, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_expression_atom");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_expression_atom"



	// $ANTLR start "cp_math_expressions"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1189:1: cp_math_expressions : cp_math_expression ( ws cp_math_expression )* ;
	public final void cp_math_expressions() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_math_expressions");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1189, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1190:5: ( cp_math_expression ( ws cp_math_expression )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1191:5: cp_math_expression ( ws cp_math_expression )*
			{
			dbg.location(1191,5);
			pushFollow(FOLLOW_cp_math_expression_in_cp_math_expressions8365);
			cp_math_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(1192,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1192:5: ( ws cp_math_expression )*
			try { dbg.enterSubRule(377);

			loop377:
			while (true) {
				int alt377=2;
				try { dbg.enterDecision(377, decisionCanBacktrack[377]);

				int LA377_0 = input.LA(1);
				if ( (LA377_0==COMMENT||LA377_0==NL||LA377_0==WS) ) {
					alt377=1;
				}

				} finally {dbg.exitDecision(377);}

				switch (alt377) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1192:6: ws cp_math_expression
					{
					dbg.location(1192,6);
					pushFollow(FOLLOW_ws_in_cp_math_expressions8372);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(1192,9);
					pushFollow(FOLLOW_cp_math_expression_in_cp_math_expressions8374);
					cp_math_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop377;
				}
			}
			} finally {dbg.exitSubRule(377);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1193, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_math_expressions");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_math_expressions"



	// $ANTLR start "cp_math_expression"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1207:1: cp_math_expression : cp_math_expression_atom ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )* ;
	public final void cp_math_expression() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_math_expression");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1207, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1208:5: ( cp_math_expression_atom ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1208:10: cp_math_expression_atom ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )*
			{
			dbg.location(1208,10);
			pushFollow(FOLLOW_cp_math_expression_atom_in_cp_math_expression8408);
			cp_math_expression_atom();
			state._fsp--;
			if (state.failed) return;dbg.location(1209,10);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1209:10: ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )*
			try { dbg.enterSubRule(380);

			loop380:
			while (true) {
				int alt380=2;
				try { dbg.enterDecision(380, decisionCanBacktrack[380]);

				try {
					isCyclicDecision = true;
					alt380 = dfa380.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(380);}

				switch (alt380) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1210:13: ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom
					{
					dbg.location(1210,48);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1210:48: ( ws )?
					int alt378=2;
					try { dbg.enterSubRule(378);
					try { dbg.enterDecision(378, decisionCanBacktrack[378]);

					int LA378_0 = input.LA(1);
					if ( (LA378_0==COMMENT||LA378_0==NL||LA378_0==WS) ) {
						alt378=1;
					}
					} finally {dbg.exitDecision(378);}

					switch (alt378) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1210:48: ws
							{
							dbg.location(1210,48);
							pushFollow(FOLLOW_ws_in_cp_math_expression8450);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(378);}
					dbg.location(1210,52);
					if ( input.LA(1)==MINUS||input.LA(1)==PLUS||(input.LA(1) >= SOLIDUS && input.LA(1) <= STAR) ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}dbg.location(1210,78);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1210:78: ( ws )?
					int alt379=2;
					try { dbg.enterSubRule(379);
					try { dbg.enterDecision(379, decisionCanBacktrack[379]);

					int LA379_0 = input.LA(1);
					if ( (LA379_0==COMMENT||LA379_0==NL||LA379_0==WS) ) {
						alt379=1;
					}
					} finally {dbg.exitDecision(379);}

					switch (alt379) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1210:78: ws
							{
							dbg.location(1210,78);
							pushFollow(FOLLOW_ws_in_cp_math_expression8463);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(379);}
					dbg.location(1210,82);
					pushFollow(FOLLOW_cp_math_expression_atom_in_cp_math_expression8466);
					cp_math_expression_atom();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop380;
				}
			}
			} finally {dbg.exitSubRule(380);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1212, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_math_expression");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_math_expression"



	// $ANTLR start "cp_math_expression_atom"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1214:1: cp_math_expression_atom : ( term | IMPORTANT_SYM | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN );
	public final void cp_math_expression_atom() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_math_expression_atom");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1214, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1215:5: ( term | IMPORTANT_SYM | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN )
			int alt385=3;
			try { dbg.enterDecision(385, decisionCanBacktrack[385]);

			try {
				isCyclicDecision = true;
				alt385 = dfa385.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(385);}

			switch (alt385) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1216:5: term
					{
					dbg.location(1216,5);
					pushFollow(FOLLOW_term_in_cp_math_expression_atom8499);
					term();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1217:7: IMPORTANT_SYM
					{
					dbg.location(1217,7);
					match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_cp_math_expression_atom8507); if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1218:7: ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN
					{
					dbg.location(1218,7);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1218:7: ( unaryOperator ( ws )? )?
					int alt382=2;
					try { dbg.enterSubRule(382);
					try { dbg.enterDecision(382, decisionCanBacktrack[382]);

					int LA382_0 = input.LA(1);
					if ( (LA382_0==MINUS||LA382_0==PLUS) ) {
						alt382=1;
					}
					} finally {dbg.exitDecision(382);}

					switch (alt382) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1218:9: unaryOperator ( ws )?
							{
							dbg.location(1218,9);
							pushFollow(FOLLOW_unaryOperator_in_cp_math_expression_atom8518);
							unaryOperator();
							state._fsp--;
							if (state.failed) return;dbg.location(1218,23);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1218:23: ( ws )?
							int alt381=2;
							try { dbg.enterSubRule(381);
							try { dbg.enterDecision(381, decisionCanBacktrack[381]);

							int LA381_0 = input.LA(1);
							if ( (LA381_0==COMMENT||LA381_0==NL||LA381_0==WS) ) {
								alt381=1;
							}
							} finally {dbg.exitDecision(381);}

							switch (alt381) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1218:23: ws
									{
									dbg.location(1218,23);
									pushFollow(FOLLOW_ws_in_cp_math_expression_atom8520);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(381);}

							}
							break;

					}
					} finally {dbg.exitSubRule(382);}
					dbg.location(1218,30);
					match(input,LPAREN,FOLLOW_LPAREN_in_cp_math_expression_atom8526); if (state.failed) return;dbg.location(1218,37);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1218:37: ( ws )?
					int alt383=2;
					try { dbg.enterSubRule(383);
					try { dbg.enterDecision(383, decisionCanBacktrack[383]);

					int LA383_0 = input.LA(1);
					if ( (LA383_0==COMMENT||LA383_0==NL||LA383_0==WS) ) {
						alt383=1;
					}
					} finally {dbg.exitDecision(383);}

					switch (alt383) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1218:37: ws
							{
							dbg.location(1218,37);
							pushFollow(FOLLOW_ws_in_cp_math_expression_atom8528);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(383);}
					dbg.location(1218,41);
					pushFollow(FOLLOW_cp_math_expression_in_cp_math_expression_atom8531);
					cp_math_expression();
					state._fsp--;
					if (state.failed) return;dbg.location(1218,60);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1218:60: ( ws )?
					int alt384=2;
					try { dbg.enterSubRule(384);
					try { dbg.enterDecision(384, decisionCanBacktrack[384]);

					int LA384_0 = input.LA(1);
					if ( (LA384_0==COMMENT||LA384_0==NL||LA384_0==WS) ) {
						alt384=1;
					}
					} finally {dbg.exitDecision(384);}

					switch (alt384) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1218:60: ws
							{
							dbg.location(1218,60);
							pushFollow(FOLLOW_ws_in_cp_math_expression_atom8533);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(384);}
					dbg.location(1218,64);
					match(input,RPAREN,FOLLOW_RPAREN_in_cp_math_expression_atom8536); if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1219, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_math_expression_atom");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_math_expression_atom"



	// $ANTLR start "cp_mixin_declaration"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:1: cp_mixin_declaration : ({...}? ( LESS_AND | ( ( ( DOT cp_mixin_name ) | HASH ) ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ) ) ( ( ws )? less_mixin_guarded )? |{...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? ) ( ws )? cp_mixin_block ;
	public final void cp_mixin_declaration() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_mixin_declaration");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1227, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1228:5: ( ({...}? ( LESS_AND | ( ( ( DOT cp_mixin_name ) | HASH ) ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ) ) ( ( ws )? less_mixin_guarded )? |{...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? ) ( ws )? cp_mixin_block )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1229:5: ({...}? ( LESS_AND | ( ( ( DOT cp_mixin_name ) | HASH ) ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ) ) ( ( ws )? less_mixin_guarded )? |{...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? ) ( ws )? cp_mixin_block
			{
			dbg.location(1229,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1229:5: ({...}? ( LESS_AND | ( ( ( DOT cp_mixin_name ) | HASH ) ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ) ) ( ( ws )? less_mixin_guarded )? |{...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? )
			int alt397=2;
			try { dbg.enterSubRule(397);
			try { dbg.enterDecision(397, decisionCanBacktrack[397]);

			int LA397_0 = input.LA(1);
			if ( (LA397_0==DOT||LA397_0==HASH||LA397_0==LESS_AND) ) {
				alt397=1;
			}
			else if ( (LA397_0==SASS_MIXIN) ) {
				alt397=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 397, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(397);}

			switch (alt397) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1230:9: {...}? ( LESS_AND | ( ( ( DOT cp_mixin_name ) | HASH ) ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ) ) ( ( ws )? less_mixin_guarded )?
					{
					dbg.location(1230,9);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_mixin_declaration", "isLessSource()");
					}dbg.location(1230,27);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1230:27: ( LESS_AND | ( ( ( DOT cp_mixin_name ) | HASH ) ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ) )
					int alt390=2;
					try { dbg.enterSubRule(390);
					try { dbg.enterDecision(390, decisionCanBacktrack[390]);

					int LA390_0 = input.LA(1);
					if ( (LA390_0==LESS_AND) ) {
						alt390=1;
					}
					else if ( (LA390_0==DOT||LA390_0==HASH) ) {
						alt390=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 390, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(390);}

					switch (alt390) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1230:28: LESS_AND
							{
							dbg.location(1230,28);
							match(input,LESS_AND,FOLLOW_LESS_AND_in_cp_mixin_declaration8576); if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1230:39: ( ( ( DOT cp_mixin_name ) | HASH ) ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )
							{
							dbg.location(1230,39);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1230:39: ( ( ( DOT cp_mixin_name ) | HASH ) ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1230:40: ( ( DOT cp_mixin_name ) | HASH ) ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN
							{
							dbg.location(1230,40);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1230:40: ( ( DOT cp_mixin_name ) | HASH )
							int alt386=2;
							try { dbg.enterSubRule(386);
							try { dbg.enterDecision(386, decisionCanBacktrack[386]);

							int LA386_0 = input.LA(1);
							if ( (LA386_0==DOT) ) {
								alt386=1;
							}
							else if ( (LA386_0==HASH) ) {
								alt386=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return;}
								NoViableAltException nvae =
									new NoViableAltException("", 386, 0, input);
								dbg.recognitionException(nvae);
								throw nvae;
							}

							} finally {dbg.exitDecision(386);}

							switch (alt386) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1230:41: ( DOT cp_mixin_name )
									{
									dbg.location(1230,41);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1230:41: ( DOT cp_mixin_name )
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1230:42: DOT cp_mixin_name
									{
									dbg.location(1230,42);
									match(input,DOT,FOLLOW_DOT_in_cp_mixin_declaration8583); if (state.failed) return;dbg.location(1230,46);
									pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_declaration8585);
									cp_mixin_name();
									state._fsp--;
									if (state.failed) return;
									}

									}
									break;
								case 2 :
									dbg.enterAlt(2);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1230:63: HASH
									{
									dbg.location(1230,63);
									match(input,HASH,FOLLOW_HASH_in_cp_mixin_declaration8590); if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(386);}
							dbg.location(1230,69);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1230:69: ( ws )?
							int alt387=2;
							try { dbg.enterSubRule(387);
							try { dbg.enterDecision(387, decisionCanBacktrack[387]);

							int LA387_0 = input.LA(1);
							if ( (LA387_0==COMMENT||LA387_0==NL||LA387_0==WS) ) {
								alt387=1;
							}
							} finally {dbg.exitDecision(387);}

							switch (alt387) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1230:69: ws
									{
									dbg.location(1230,69);
									pushFollow(FOLLOW_ws_in_cp_mixin_declaration8593);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(387);}
							dbg.location(1230,73);
							match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_declaration8596); if (state.failed) return;dbg.location(1230,80);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1230:80: ( ws )?
							int alt388=2;
							try { dbg.enterSubRule(388);
							try { dbg.enterDecision(388, decisionCanBacktrack[388]);

							int LA388_0 = input.LA(1);
							if ( (LA388_0==COMMENT||LA388_0==NL||LA388_0==WS) ) {
								alt388=1;
							}
							} finally {dbg.exitDecision(388);}

							switch (alt388) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1230:80: ws
									{
									dbg.location(1230,80);
									pushFollow(FOLLOW_ws_in_cp_mixin_declaration8598);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(388);}
							dbg.location(1230,84);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1230:84: ( cp_args_list )?
							int alt389=2;
							try { dbg.enterSubRule(389);
							try { dbg.enterDecision(389, decisionCanBacktrack[389]);

							int LA389_0 = input.LA(1);
							if ( (LA389_0==AT_IDENT||(LA389_0 >= BOTTOMCENTER_SYM && LA389_0 <= BOTTOMRIGHT_SYM)||LA389_0==CHARSET_SYM||(LA389_0 >= COUNTER_STYLE_SYM && LA389_0 <= CP_DOTS)||LA389_0==FONT_FACE_SYM||LA389_0==IDENT||LA389_0==IMPORT_SYM||(LA389_0 >= LEFTBOTTOM_SYM && LA389_0 <= LEFTTOP_SYM)||LA389_0==LESS_REST||LA389_0==MEDIA_SYM||LA389_0==MOZ_DOCUMENT_SYM||LA389_0==NAMESPACE_SYM||LA389_0==PAGE_SYM||(LA389_0 >= RIGHTBOTTOM_SYM && LA389_0 <= RIGHTTOP_SYM)||(LA389_0 >= SASS_AT_ROOT && LA389_0 <= SASS_DEBUG)||(LA389_0 >= SASS_EACH && LA389_0 <= SASS_ELSE)||LA389_0==SASS_EXTEND||(LA389_0 >= SASS_FOR && LA389_0 <= SASS_FUNCTION)||(LA389_0 >= SASS_IF && LA389_0 <= SASS_MIXIN)||(LA389_0 >= SASS_RETURN && LA389_0 <= SASS_WHILE)||(LA389_0 >= TOPCENTER_SYM && LA389_0 <= TOPRIGHT_SYM)||LA389_0==WEBKIT_KEYFRAMES_SYM) ) {
								alt389=1;
							}
							} finally {dbg.exitDecision(389);}

							switch (alt389) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1230:84: cp_args_list
									{
									dbg.location(1230,84);
									pushFollow(FOLLOW_cp_args_list_in_cp_mixin_declaration8601);
									cp_args_list();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(389);}
							dbg.location(1230,98);
							match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_declaration8604); if (state.failed) return;
							}

							}
							break;

					}
					} finally {dbg.exitSubRule(390);}
					dbg.location(1230,107);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1230:107: ( ( ws )? less_mixin_guarded )?
					int alt392=2;
					try { dbg.enterSubRule(392);
					try { dbg.enterDecision(392, decisionCanBacktrack[392]);

					try {
						isCyclicDecision = true;
						alt392 = dfa392.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(392);}

					switch (alt392) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1230:108: ( ws )? less_mixin_guarded
							{
							dbg.location(1230,108);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1230:108: ( ws )?
							int alt391=2;
							try { dbg.enterSubRule(391);
							try { dbg.enterDecision(391, decisionCanBacktrack[391]);

							int LA391_0 = input.LA(1);
							if ( (LA391_0==COMMENT||LA391_0==NL||LA391_0==WS) ) {
								alt391=1;
							}
							} finally {dbg.exitDecision(391);}

							switch (alt391) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1230:108: ws
									{
									dbg.location(1230,108);
									pushFollow(FOLLOW_ws_in_cp_mixin_declaration8609);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(391);}
							dbg.location(1230,112);
							pushFollow(FOLLOW_less_mixin_guarded_in_cp_mixin_declaration8612);
							less_mixin_guarded();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(392);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1232:9: {...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )?
					{
					dbg.location(1232,9);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_mixin_declaration", "isScssSource()");
					}dbg.location(1232,27);
					match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_cp_mixin_declaration8636); if (state.failed) return;dbg.location(1232,38);
					pushFollow(FOLLOW_ws_in_cp_mixin_declaration8638);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(1232,41);
					pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_declaration8640);
					cp_mixin_name();
					state._fsp--;
					if (state.failed) return;dbg.location(1232,55);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1232:55: ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )?
					int alt396=2;
					try { dbg.enterSubRule(396);
					try { dbg.enterDecision(396, decisionCanBacktrack[396]);

					try {
						isCyclicDecision = true;
						alt396 = dfa396.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(396);}

					switch (alt396) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1232:56: ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN
							{
							dbg.location(1232,56);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1232:56: ( ws )?
							int alt393=2;
							try { dbg.enterSubRule(393);
							try { dbg.enterDecision(393, decisionCanBacktrack[393]);

							int LA393_0 = input.LA(1);
							if ( (LA393_0==COMMENT||LA393_0==NL||LA393_0==WS) ) {
								alt393=1;
							}
							} finally {dbg.exitDecision(393);}

							switch (alt393) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1232:56: ws
									{
									dbg.location(1232,56);
									pushFollow(FOLLOW_ws_in_cp_mixin_declaration8643);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(393);}
							dbg.location(1232,60);
							match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_declaration8646); if (state.failed) return;dbg.location(1232,67);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1232:67: ( ws )?
							int alt394=2;
							try { dbg.enterSubRule(394);
							try { dbg.enterDecision(394, decisionCanBacktrack[394]);

							int LA394_0 = input.LA(1);
							if ( (LA394_0==COMMENT||LA394_0==NL||LA394_0==WS) ) {
								alt394=1;
							}
							} finally {dbg.exitDecision(394);}

							switch (alt394) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1232:67: ws
									{
									dbg.location(1232,67);
									pushFollow(FOLLOW_ws_in_cp_mixin_declaration8648);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(394);}
							dbg.location(1232,71);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1232:71: ( cp_args_list )?
							int alt395=2;
							try { dbg.enterSubRule(395);
							try { dbg.enterDecision(395, decisionCanBacktrack[395]);

							int LA395_0 = input.LA(1);
							if ( (LA395_0==AT_IDENT||(LA395_0 >= BOTTOMCENTER_SYM && LA395_0 <= BOTTOMRIGHT_SYM)||LA395_0==CHARSET_SYM||(LA395_0 >= COUNTER_STYLE_SYM && LA395_0 <= CP_DOTS)||LA395_0==FONT_FACE_SYM||LA395_0==IDENT||LA395_0==IMPORT_SYM||(LA395_0 >= LEFTBOTTOM_SYM && LA395_0 <= LEFTTOP_SYM)||LA395_0==LESS_REST||LA395_0==MEDIA_SYM||LA395_0==MOZ_DOCUMENT_SYM||LA395_0==NAMESPACE_SYM||LA395_0==PAGE_SYM||(LA395_0 >= RIGHTBOTTOM_SYM && LA395_0 <= RIGHTTOP_SYM)||(LA395_0 >= SASS_AT_ROOT && LA395_0 <= SASS_DEBUG)||(LA395_0 >= SASS_EACH && LA395_0 <= SASS_ELSE)||LA395_0==SASS_EXTEND||(LA395_0 >= SASS_FOR && LA395_0 <= SASS_FUNCTION)||(LA395_0 >= SASS_IF && LA395_0 <= SASS_MIXIN)||(LA395_0 >= SASS_RETURN && LA395_0 <= SASS_WHILE)||(LA395_0 >= TOPCENTER_SYM && LA395_0 <= TOPRIGHT_SYM)||LA395_0==WEBKIT_KEYFRAMES_SYM) ) {
								alt395=1;
							}
							} finally {dbg.exitDecision(395);}

							switch (alt395) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1232:71: cp_args_list
									{
									dbg.location(1232,71);
									pushFollow(FOLLOW_cp_args_list_in_cp_mixin_declaration8651);
									cp_args_list();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(395);}
							dbg.location(1232,85);
							match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_declaration8654); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(396);}

					}
					break;

			}
			} finally {dbg.exitSubRule(397);}
			dbg.location(1234,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1234:5: ( ws )?
			int alt398=2;
			try { dbg.enterSubRule(398);
			try { dbg.enterDecision(398, decisionCanBacktrack[398]);

			int LA398_0 = input.LA(1);
			if ( (LA398_0==COMMENT||LA398_0==NL||LA398_0==WS) ) {
				alt398=1;
			}
			} finally {dbg.exitDecision(398);}

			switch (alt398) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1234:5: ws
					{
					dbg.location(1234,5);
					pushFollow(FOLLOW_ws_in_cp_mixin_declaration8668);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(398);}
			dbg.location(1234,9);
			pushFollow(FOLLOW_cp_mixin_block_in_cp_mixin_declaration8671);
			cp_mixin_block();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1235, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_mixin_declaration");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_mixin_declaration"



	// $ANTLR start "cp_mixin_call"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1239:1: cp_mixin_call : ({...}? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) ( ( ( ws )? combinator ( ws )? )=> ( ws )? combinator ( ws )? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) )* ( ( pseudo )=> pseudo | ( ( ws )? LPAREN )=> ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN ) )? |{...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? ) ;
	public final void cp_mixin_call() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1239, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1240:5: ( ({...}? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) ( ( ( ws )? combinator ( ws )? )=> ( ws )? combinator ( ws )? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) )* ( ( pseudo )=> pseudo | ( ( ws )? LPAREN )=> ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN ) )? |{...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1241:5: ({...}? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) ( ( ( ws )? combinator ( ws )? )=> ( ws )? combinator ( ws )? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) )* ( ( pseudo )=> pseudo | ( ( ws )? LPAREN )=> ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN ) )? |{...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? )
			{
			dbg.location(1241,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1241:5: ({...}? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) ( ( ( ws )? combinator ( ws )? )=> ( ws )? combinator ( ws )? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) )* ( ( pseudo )=> pseudo | ( ( ws )? LPAREN )=> ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN ) )? |{...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? )
			int alt414=2;
			try { dbg.enterSubRule(414);
			try { dbg.enterDecision(414, decisionCanBacktrack[414]);

			int LA414_0 = input.LA(1);
			if ( (LA414_0==AT_IDENT||LA414_0==DOT||LA414_0==HASH||LA414_0==LESS_AND) ) {
				alt414=1;
			}
			else if ( (LA414_0==SASS_INCLUDE) ) {
				alt414=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 414, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(414);}

			switch (alt414) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:9: {...}? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) ( ( ( ws )? combinator ( ws )? )=> ( ws )? combinator ( ws )? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) )* ( ( pseudo )=> pseudo | ( ( ws )? LPAREN )=> ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN ) )?
					{
					dbg.location(1242,9);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_mixin_call", "isLessSource()");
					}dbg.location(1242,27);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:27: ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND )
					int alt399=4;
					try { dbg.enterSubRule(399);
					try { dbg.enterDecision(399, decisionCanBacktrack[399]);

					switch ( input.LA(1) ) {
					case DOT:
						{
						alt399=1;
						}
						break;
					case HASH:
						{
						alt399=2;
						}
						break;
					case AT_IDENT:
						{
						alt399=3;
						}
						break;
					case LESS_AND:
						{
						alt399=4;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 399, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(399);}

					switch (alt399) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:28: DOT cp_mixin_name
							{
							dbg.location(1242,28);
							match(input,DOT,FOLLOW_DOT_in_cp_mixin_call8707); if (state.failed) return;dbg.location(1242,32);
							pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_call8709);
							cp_mixin_name();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:48: HASH
							{
							dbg.location(1242,48);
							match(input,HASH,FOLLOW_HASH_in_cp_mixin_call8713); if (state.failed) return;
							}
							break;
						case 3 :
							dbg.enterAlt(3);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:55: AT_IDENT
							{
							dbg.location(1242,55);
							match(input,AT_IDENT,FOLLOW_AT_IDENT_in_cp_mixin_call8717); if (state.failed) return;
							}
							break;
						case 4 :
							dbg.enterAlt(4);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:66: LESS_AND
							{
							dbg.location(1242,66);
							match(input,LESS_AND,FOLLOW_LESS_AND_in_cp_mixin_call8721); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(399);}
					dbg.location(1242,76);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:76: ( ( ( ws )? combinator ( ws )? )=> ( ws )? combinator ( ws )? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) )*
					try { dbg.enterSubRule(403);

					loop403:
					while (true) {
						int alt403=2;
						try { dbg.enterDecision(403, decisionCanBacktrack[403]);

						int LA403_0 = input.LA(1);
						if ( (LA403_0==COMMENT||LA403_0==NL||LA403_0==WS) ) {
							int LA403_2 = input.LA(2);
							if ( (synpred52_Css3()) ) {
								alt403=1;
							}

						}
						else if ( (LA403_0==GREATER||LA403_0==PLUS||LA403_0==TILDE) ) {
							int LA403_14 = input.LA(2);
							if ( (synpred52_Css3()) ) {
								alt403=1;
							}

						}

						} finally {dbg.exitDecision(403);}

						switch (alt403) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:77: ( ( ws )? combinator ( ws )? )=> ( ws )? combinator ( ws )? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND )
							{
							dbg.location(1242,101);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:101: ( ws )?
							int alt400=2;
							try { dbg.enterSubRule(400);
							try { dbg.enterDecision(400, decisionCanBacktrack[400]);

							int LA400_0 = input.LA(1);
							if ( (LA400_0==COMMENT||LA400_0==NL||LA400_0==WS) ) {
								alt400=1;
							}
							} finally {dbg.exitDecision(400);}

							switch (alt400) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:101: ws
									{
									dbg.location(1242,101);
									pushFollow(FOLLOW_ws_in_cp_mixin_call8737);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(400);}
							dbg.location(1242,105);
							pushFollow(FOLLOW_combinator_in_cp_mixin_call8740);
							combinator();
							state._fsp--;
							if (state.failed) return;dbg.location(1242,116);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:116: ( ws )?
							int alt401=2;
							try { dbg.enterSubRule(401);
							try { dbg.enterDecision(401, decisionCanBacktrack[401]);

							int LA401_0 = input.LA(1);
							if ( (LA401_0==COMMENT||LA401_0==NL||LA401_0==WS) ) {
								alt401=1;
							}
							} finally {dbg.exitDecision(401);}

							switch (alt401) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:116: ws
									{
									dbg.location(1242,116);
									pushFollow(FOLLOW_ws_in_cp_mixin_call8742);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(401);}
							dbg.location(1242,120);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:120: ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND )
							int alt402=4;
							try { dbg.enterSubRule(402);
							try { dbg.enterDecision(402, decisionCanBacktrack[402]);

							switch ( input.LA(1) ) {
							case DOT:
								{
								alt402=1;
								}
								break;
							case HASH:
								{
								alt402=2;
								}
								break;
							case AT_IDENT:
								{
								alt402=3;
								}
								break;
							case LESS_AND:
								{
								alt402=4;
								}
								break;
							default:
								if (state.backtracking>0) {state.failed=true; return;}
								NoViableAltException nvae =
									new NoViableAltException("", 402, 0, input);
								dbg.recognitionException(nvae);
								throw nvae;
							}
							} finally {dbg.exitDecision(402);}

							switch (alt402) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:121: DOT cp_mixin_name
									{
									dbg.location(1242,121);
									match(input,DOT,FOLLOW_DOT_in_cp_mixin_call8746); if (state.failed) return;dbg.location(1242,125);
									pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_call8748);
									cp_mixin_name();
									state._fsp--;
									if (state.failed) return;
									}
									break;
								case 2 :
									dbg.enterAlt(2);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:141: HASH
									{
									dbg.location(1242,141);
									match(input,HASH,FOLLOW_HASH_in_cp_mixin_call8752); if (state.failed) return;
									}
									break;
								case 3 :
									dbg.enterAlt(3);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:148: AT_IDENT
									{
									dbg.location(1242,148);
									match(input,AT_IDENT,FOLLOW_AT_IDENT_in_cp_mixin_call8756); if (state.failed) return;
									}
									break;
								case 4 :
									dbg.enterAlt(4);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:159: LESS_AND
									{
									dbg.location(1242,159);
									match(input,LESS_AND,FOLLOW_LESS_AND_in_cp_mixin_call8760); if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(402);}

							}
							break;

						default :
							break loop403;
						}
					}
					} finally {dbg.exitSubRule(403);}
					dbg.location(1242,171);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:171: ( ( pseudo )=> pseudo | ( ( ws )? LPAREN )=> ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN ) )?
					int alt407=3;
					try { dbg.enterSubRule(407);
					try { dbg.enterDecision(407, decisionCanBacktrack[407]);

					int LA407_0 = input.LA(1);
					if ( (LA407_0==COLON||LA407_0==DCOLON) ) {
						int LA407_1 = input.LA(2);
						if ( (synpred53_Css3()) ) {
							alt407=1;
						}
					}
					else if ( (LA407_0==COMMENT||LA407_0==NL||LA407_0==WS) ) {
						int LA407_2 = input.LA(2);
						if ( (synpred54_Css3()) ) {
							alt407=2;
						}
					}
					else if ( (LA407_0==LPAREN) && (synpred54_Css3())) {
						alt407=2;
					}
					} finally {dbg.exitDecision(407);}

					switch (alt407) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:172: ( pseudo )=> pseudo
							{
							dbg.location(1242,182);
							pushFollow(FOLLOW_pseudo_in_cp_mixin_call8770);
							pseudo();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:191: ( ( ws )? LPAREN )=> ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )
							{
							dbg.location(1242,205);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:205: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:206: ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN
							{
							dbg.location(1242,206);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:206: ( ws )?
							int alt404=2;
							try { dbg.enterSubRule(404);
							try { dbg.enterDecision(404, decisionCanBacktrack[404]);

							int LA404_0 = input.LA(1);
							if ( (LA404_0==COMMENT||LA404_0==NL||LA404_0==WS) ) {
								alt404=1;
							}
							} finally {dbg.exitDecision(404);}

							switch (alt404) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:206: ws
									{
									dbg.location(1242,206);
									pushFollow(FOLLOW_ws_in_cp_mixin_call8782);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(404);}
							dbg.location(1242,210);
							match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_call8785); if (state.failed) return;dbg.location(1242,217);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:217: ( ws )?
							int alt405=2;
							try { dbg.enterSubRule(405);
							try { dbg.enterDecision(405, decisionCanBacktrack[405]);

							int LA405_0 = input.LA(1);
							if ( (LA405_0==COMMENT||LA405_0==NL||LA405_0==WS) ) {
								alt405=1;
							}
							} finally {dbg.exitDecision(405);}

							switch (alt405) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:217: ws
									{
									dbg.location(1242,217);
									pushFollow(FOLLOW_ws_in_cp_mixin_call8787);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(405);}
							dbg.location(1242,221);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:221: ( cp_mixin_call_args )?
							int alt406=2;
							try { dbg.enterSubRule(406);
							try { dbg.enterDecision(406, decisionCanBacktrack[406]);

							int LA406_0 = input.LA(1);
							if ( ((LA406_0 >= ANGLE && LA406_0 <= AT_SIGN)||(LA406_0 >= BOTTOMCENTER_SYM && LA406_0 <= BOTTOMRIGHT_SYM)||LA406_0==CHARSET_SYM||LA406_0==COUNTER_STYLE_SYM||LA406_0==DIMENSION||LA406_0==EMS||LA406_0==EXS||(LA406_0 >= FONT_FACE_SYM && LA406_0 <= FREQ)||LA406_0==GEN||(LA406_0 >= HASH && LA406_0 <= HASH_SYMBOL)||(LA406_0 >= IDENT && LA406_0 <= IMPORT_SYM)||(LA406_0 >= LBRACE && LA406_0 <= LENGTH)||(LA406_0 >= LESS_AND && LA406_0 <= LESS_JS_STRING)||LA406_0==LPAREN||(LA406_0 >= MEDIA_SYM && LA406_0 <= MOZ_DOCUMENT_SYM)||LA406_0==NAMESPACE_SYM||(LA406_0 >= NOT && LA406_0 <= NUMBER)||(LA406_0 >= PAGE_SYM && LA406_0 <= PERCENTAGE_SYMBOL)||LA406_0==PLUS||(LA406_0 >= REM && LA406_0 <= RIGHTTOP_SYM)||(LA406_0 >= SASS_AT_ROOT && LA406_0 <= SASS_DEBUG)||(LA406_0 >= SASS_EACH && LA406_0 <= SASS_ELSE)||LA406_0==SASS_EXTEND||(LA406_0 >= SASS_FOR && LA406_0 <= SASS_FUNCTION)||(LA406_0 >= SASS_IF && LA406_0 <= SASS_MIXIN)||(LA406_0 >= SASS_RETURN && LA406_0 <= SASS_WHILE)||LA406_0==STRING||(LA406_0 >= TILDE && LA406_0 <= TOPRIGHT_SYM)||(LA406_0 >= URANGE && LA406_0 <= URI)||LA406_0==VARIABLE||LA406_0==WEBKIT_KEYFRAMES_SYM) ) {
								alt406=1;
							}
							} finally {dbg.exitDecision(406);}

							switch (alt406) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:221: cp_mixin_call_args
									{
									dbg.location(1242,221);
									pushFollow(FOLLOW_cp_mixin_call_args_in_cp_mixin_call8790);
									cp_mixin_call_args();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(406);}
							dbg.location(1242,241);
							match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_call8793); if (state.failed) return;
							}

							}
							break;

					}
					} finally {dbg.exitSubRule(407);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1244:9: {...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )?
					{
					dbg.location(1244,9);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_mixin_call", "isScssSource()");
					}dbg.location(1244,27);
					match(input,SASS_INCLUDE,FOLLOW_SASS_INCLUDE_in_cp_mixin_call8818); if (state.failed) return;dbg.location(1244,40);
					pushFollow(FOLLOW_ws_in_cp_mixin_call8820);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(1244,43);
					pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_call8822);
					cp_mixin_name();
					state._fsp--;
					if (state.failed) return;dbg.location(1244,57);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1244:57: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?
					int alt411=2;
					try { dbg.enterSubRule(411);
					try { dbg.enterDecision(411, decisionCanBacktrack[411]);

					try {
						isCyclicDecision = true;
						alt411 = dfa411.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(411);}

					switch (alt411) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1244:58: ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN
							{
							dbg.location(1244,58);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1244:58: ( ws )?
							int alt408=2;
							try { dbg.enterSubRule(408);
							try { dbg.enterDecision(408, decisionCanBacktrack[408]);

							int LA408_0 = input.LA(1);
							if ( (LA408_0==COMMENT||LA408_0==NL||LA408_0==WS) ) {
								alt408=1;
							}
							} finally {dbg.exitDecision(408);}

							switch (alt408) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1244:58: ws
									{
									dbg.location(1244,58);
									pushFollow(FOLLOW_ws_in_cp_mixin_call8825);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(408);}
							dbg.location(1244,62);
							match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_call8828); if (state.failed) return;dbg.location(1244,69);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1244:69: ( ws )?
							int alt409=2;
							try { dbg.enterSubRule(409);
							try { dbg.enterDecision(409, decisionCanBacktrack[409]);

							int LA409_0 = input.LA(1);
							if ( (LA409_0==COMMENT||LA409_0==NL||LA409_0==WS) ) {
								alt409=1;
							}
							} finally {dbg.exitDecision(409);}

							switch (alt409) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1244:69: ws
									{
									dbg.location(1244,69);
									pushFollow(FOLLOW_ws_in_cp_mixin_call8830);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(409);}
							dbg.location(1244,73);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1244:73: ( cp_mixin_call_args )?
							int alt410=2;
							try { dbg.enterSubRule(410);
							try { dbg.enterDecision(410, decisionCanBacktrack[410]);

							int LA410_0 = input.LA(1);
							if ( ((LA410_0 >= ANGLE && LA410_0 <= AT_SIGN)||(LA410_0 >= BOTTOMCENTER_SYM && LA410_0 <= BOTTOMRIGHT_SYM)||LA410_0==CHARSET_SYM||LA410_0==COUNTER_STYLE_SYM||LA410_0==DIMENSION||LA410_0==EMS||LA410_0==EXS||(LA410_0 >= FONT_FACE_SYM && LA410_0 <= FREQ)||LA410_0==GEN||(LA410_0 >= HASH && LA410_0 <= HASH_SYMBOL)||(LA410_0 >= IDENT && LA410_0 <= IMPORT_SYM)||(LA410_0 >= LBRACE && LA410_0 <= LENGTH)||(LA410_0 >= LESS_AND && LA410_0 <= LESS_JS_STRING)||LA410_0==LPAREN||(LA410_0 >= MEDIA_SYM && LA410_0 <= MOZ_DOCUMENT_SYM)||LA410_0==NAMESPACE_SYM||(LA410_0 >= NOT && LA410_0 <= NUMBER)||(LA410_0 >= PAGE_SYM && LA410_0 <= PERCENTAGE_SYMBOL)||LA410_0==PLUS||(LA410_0 >= REM && LA410_0 <= RIGHTTOP_SYM)||(LA410_0 >= SASS_AT_ROOT && LA410_0 <= SASS_DEBUG)||(LA410_0 >= SASS_EACH && LA410_0 <= SASS_ELSE)||LA410_0==SASS_EXTEND||(LA410_0 >= SASS_FOR && LA410_0 <= SASS_FUNCTION)||(LA410_0 >= SASS_IF && LA410_0 <= SASS_MIXIN)||(LA410_0 >= SASS_RETURN && LA410_0 <= SASS_WHILE)||LA410_0==STRING||(LA410_0 >= TILDE && LA410_0 <= TOPRIGHT_SYM)||(LA410_0 >= URANGE && LA410_0 <= URI)||LA410_0==VARIABLE||LA410_0==WEBKIT_KEYFRAMES_SYM) ) {
								alt410=1;
							}
							} finally {dbg.exitDecision(410);}

							switch (alt410) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1244:73: cp_mixin_call_args
									{
									dbg.location(1244,73);
									pushFollow(FOLLOW_cp_mixin_call_args_in_cp_mixin_call8833);
									cp_mixin_call_args();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(410);}
							dbg.location(1244,93);
							match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_call8836); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(411);}
					dbg.location(1244,102);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1244:102: ( ( ws )? cp_mixin_block )?
					int alt413=2;
					try { dbg.enterSubRule(413);
					try { dbg.enterDecision(413, decisionCanBacktrack[413]);

					try {
						isCyclicDecision = true;
						alt413 = dfa413.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(413);}

					switch (alt413) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1244:103: ( ws )? cp_mixin_block
							{
							dbg.location(1244,103);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1244:103: ( ws )?
							int alt412=2;
							try { dbg.enterSubRule(412);
							try { dbg.enterDecision(412, decisionCanBacktrack[412]);

							int LA412_0 = input.LA(1);
							if ( (LA412_0==COMMENT||LA412_0==NL||LA412_0==WS) ) {
								alt412=1;
							}
							} finally {dbg.exitDecision(412);}

							switch (alt412) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1244:103: ws
									{
									dbg.location(1244,103);
									pushFollow(FOLLOW_ws_in_cp_mixin_call8841);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(412);}
							dbg.location(1244,107);
							pushFollow(FOLLOW_cp_mixin_block_in_cp_mixin_call8844);
							cp_mixin_block();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(413);}

					}
					break;

			}
			} finally {dbg.exitSubRule(414);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1246, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_mixin_call");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_mixin_call"



	// $ANTLR start "cp_mixin_block"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1248:1: cp_mixin_block : LBRACE ( ws )? syncToFollow ( declarations | ( webkitKeyframeSelectors )=> ( webkitKeyframesBlock ( ws )? )* )? RBRACE ;
	public final void cp_mixin_block() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_mixin_block");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1248, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1249:5: ( LBRACE ( ws )? syncToFollow ( declarations | ( webkitKeyframeSelectors )=> ( webkitKeyframesBlock ( ws )? )* )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1250:5: LBRACE ( ws )? syncToFollow ( declarations | ( webkitKeyframeSelectors )=> ( webkitKeyframesBlock ( ws )? )* )? RBRACE
			{
			dbg.location(1250,5);
			match(input,LBRACE,FOLLOW_LBRACE_in_cp_mixin_block8873); if (state.failed) return;dbg.location(1250,12);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1250:12: ( ws )?
			int alt415=2;
			try { dbg.enterSubRule(415);
			try { dbg.enterDecision(415, decisionCanBacktrack[415]);

			int LA415_0 = input.LA(1);
			if ( (LA415_0==COMMENT||LA415_0==NL||LA415_0==WS) ) {
				alt415=1;
			}
			} finally {dbg.exitDecision(415);}

			switch (alt415) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1250:12: ws
					{
					dbg.location(1250,12);
					pushFollow(FOLLOW_ws_in_cp_mixin_block8875);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(415);}
			dbg.location(1250,16);
			pushFollow(FOLLOW_syncToFollow_in_cp_mixin_block8878);
			syncToFollow();
			state._fsp--;
			if (state.failed) return;dbg.location(1251,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1251:9: ( declarations | ( webkitKeyframeSelectors )=> ( webkitKeyframesBlock ( ws )? )* )?
			int alt418=3;
			try { dbg.enterSubRule(418);
			try { dbg.enterDecision(418, decisionCanBacktrack[418]);

			int LA418_0 = input.LA(1);
			if ( ((LA418_0 >= AT_IDENT && LA418_0 <= AT_SIGN)||(LA418_0 >= BOTTOMCENTER_SYM && LA418_0 <= BOTTOMRIGHT_SYM)||(LA418_0 >= CHARSET_SYM && LA418_0 <= COLON)||LA418_0==COUNTER_STYLE_SYM||(LA418_0 >= DCOLON && LA418_0 <= DOT)||LA418_0==FONT_FACE_SYM||(LA418_0 >= GEN && LA418_0 <= GREATER)||(LA418_0 >= HASH && LA418_0 <= HASH_SYMBOL)||LA418_0==IMPORT_SYM||LA418_0==LAYER_SYM||(LA418_0 >= LBRACKET && LA418_0 <= LEFTTOP_SYM)||LA418_0==LESS_AND||(LA418_0 >= MEDIA_SYM && LA418_0 <= MOZ_DOCUMENT_SYM)||LA418_0==NAMESPACE_SYM||LA418_0==PAGE_SYM||(LA418_0 >= PIPE && LA418_0 <= PLUS)||(LA418_0 >= RIGHTBOTTOM_SYM && LA418_0 <= RIGHTTOP_SYM)||LA418_0==SASS_AT_ROOT||LA418_0==SASS_DEBUG||(LA418_0 >= SASS_EACH && LA418_0 <= SASS_ELSE)||(LA418_0 >= SASS_ERROR && LA418_0 <= SASS_FUNCTION)||(LA418_0 >= SASS_IF && LA418_0 <= SASS_MIXIN)||(LA418_0 >= SASS_RETURN && LA418_0 <= SEMI)||LA418_0==STAR||LA418_0==SUPPORTS_SYM||LA418_0==TILDE||(LA418_0 >= TOPCENTER_SYM && LA418_0 <= TOPRIGHT_SYM)||LA418_0==VARIABLE||LA418_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt418=1;
			}
			else if ( (LA418_0==IDENT) ) {
				int LA418_4 = input.LA(2);
				if ( (true) ) {
					alt418=1;
				}
				else if ( (((evalPredicate(tokenNameEquals("from"),"tokenNameEquals(\"from\")")||evalPredicate(tokenNameEquals("to"),"tokenNameEquals(\"to\")"))&&synpred55_Css3())) ) {
					alt418=2;
				}
			}
			else if ( (LA418_0==SASS_CONTENT) ) {
				int LA418_37 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt418=1;
				}
				else if ( ((synpred55_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt418=2;
				}
			}
			else if ( (LA418_0==PERCENTAGE) && (synpred55_Css3())) {
				alt418=2;
			}
			else if ( (LA418_0==RBRACE) ) {
				int LA418_43 = input.LA(2);
				if ( (synpred55_Css3()) ) {
					alt418=2;
				}
			}
			} finally {dbg.exitDecision(418);}

			switch (alt418) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1251:10: declarations
					{
					dbg.location(1251,10);
					pushFollow(FOLLOW_declarations_in_cp_mixin_block8889);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1251:25: ( webkitKeyframeSelectors )=> ( webkitKeyframesBlock ( ws )? )*
					{
					dbg.location(1252,3);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1252:3: ( webkitKeyframesBlock ( ws )? )*
					try { dbg.enterSubRule(417);

					loop417:
					while (true) {
						int alt417=2;
						try { dbg.enterDecision(417, decisionCanBacktrack[417]);

						int LA417_0 = input.LA(1);
						if ( (LA417_0==IDENT||LA417_0==PERCENTAGE||LA417_0==SASS_CONTENT) ) {
							alt417=1;
						}

						} finally {dbg.exitDecision(417);}

						switch (alt417) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1252:5: webkitKeyframesBlock ( ws )?
							{
							dbg.location(1252,5);
							pushFollow(FOLLOW_webkitKeyframesBlock_in_cp_mixin_block8904);
							webkitKeyframesBlock();
							state._fsp--;
							if (state.failed) return;dbg.location(1252,26);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1252:26: ( ws )?
							int alt416=2;
							try { dbg.enterSubRule(416);
							try { dbg.enterDecision(416, decisionCanBacktrack[416]);

							int LA416_0 = input.LA(1);
							if ( (LA416_0==COMMENT||LA416_0==NL||LA416_0==WS) ) {
								alt416=1;
							}
							} finally {dbg.exitDecision(416);}

							switch (alt416) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1252:26: ws
									{
									dbg.location(1252,26);
									pushFollow(FOLLOW_ws_in_cp_mixin_block8906);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(416);}

							}
							break;

						default :
							break loop417;
						}
					}
					} finally {dbg.exitSubRule(417);}

					}
					break;

			}
			} finally {dbg.exitSubRule(418);}
			dbg.location(1253,5);
			match(input,RBRACE,FOLLOW_RBRACE_in_cp_mixin_block8918); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1254, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_mixin_block");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_mixin_block"



	// $ANTLR start "cp_mixin_name"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1256:1: cp_mixin_name : IDENT ;
	public final void cp_mixin_name() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_mixin_name");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1256, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1257:5: ( IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1258:5: IDENT
			{
			dbg.location(1258,5);
			match(input,IDENT,FOLLOW_IDENT_in_cp_mixin_name8939); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1259, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_mixin_name");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_mixin_name"



	// $ANTLR start "cp_mixin_call_args"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1261:1: cp_mixin_call_args : cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )* ( CP_DOTS ( ws )? )? ( SEMI )? ;
	public final void cp_mixin_call_args() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call_args");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1261, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1262:5: ( cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )* ( CP_DOTS ( ws )? )? ( SEMI )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1265:5: cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )* ( CP_DOTS ( ws )? )? ( SEMI )?
			{
			dbg.location(1265,5);
			pushFollow(FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args8970);
			cp_mixin_call_arg();
			state._fsp--;
			if (state.failed) return;dbg.location(1265,23);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1265:23: ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )*
			try { dbg.enterSubRule(420);

			loop420:
			while (true) {
				int alt420=2;
				try { dbg.enterDecision(420, decisionCanBacktrack[420]);

				int LA420_0 = input.LA(1);
				if ( (LA420_0==SEMI) ) {
					int LA420_2 = input.LA(2);
					if ( ((LA420_2 >= ANGLE && LA420_2 <= AT_SIGN)||(LA420_2 >= BOTTOMCENTER_SYM && LA420_2 <= BOTTOMRIGHT_SYM)||LA420_2==CHARSET_SYM||LA420_2==COMMENT||LA420_2==COUNTER_STYLE_SYM||LA420_2==DIMENSION||LA420_2==EMS||LA420_2==EXS||(LA420_2 >= FONT_FACE_SYM && LA420_2 <= FREQ)||LA420_2==GEN||(LA420_2 >= HASH && LA420_2 <= HASH_SYMBOL)||(LA420_2 >= IDENT && LA420_2 <= IMPORT_SYM)||(LA420_2 >= LBRACE && LA420_2 <= LENGTH)||(LA420_2 >= LESS_AND && LA420_2 <= LESS_JS_STRING)||LA420_2==LPAREN||(LA420_2 >= MEDIA_SYM && LA420_2 <= MOZ_DOCUMENT_SYM)||(LA420_2 >= NAMESPACE_SYM && LA420_2 <= NL)||(LA420_2 >= NOT && LA420_2 <= NUMBER)||(LA420_2 >= PAGE_SYM && LA420_2 <= PERCENTAGE_SYMBOL)||LA420_2==PLUS||(LA420_2 >= REM && LA420_2 <= RIGHTTOP_SYM)||(LA420_2 >= SASS_AT_ROOT && LA420_2 <= SASS_DEBUG)||(LA420_2 >= SASS_EACH && LA420_2 <= SASS_ELSE)||LA420_2==SASS_EXTEND||(LA420_2 >= SASS_FOR && LA420_2 <= SASS_FUNCTION)||(LA420_2 >= SASS_IF && LA420_2 <= SASS_MIXIN)||(LA420_2 >= SASS_RETURN && LA420_2 <= SASS_WHILE)||LA420_2==STRING||(LA420_2 >= TILDE && LA420_2 <= TOPRIGHT_SYM)||(LA420_2 >= URANGE && LA420_2 <= URI)||LA420_2==VARIABLE||(LA420_2 >= WEBKIT_KEYFRAMES_SYM && LA420_2 <= WS)) ) {
						alt420=1;
					}

				}
				else if ( (LA420_0==COMMA) ) {
					alt420=1;
				}

				} finally {dbg.exitDecision(420);}

				switch (alt420) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1265:25: ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg
					{
					dbg.location(1265,25);
					if ( input.LA(1)==COMMA||input.LA(1)==SEMI ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}dbg.location(1265,40);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1265:40: ( ws )?
					int alt419=2;
					try { dbg.enterSubRule(419);
					try { dbg.enterDecision(419, decisionCanBacktrack[419]);

					int LA419_0 = input.LA(1);
					if ( (LA419_0==COMMENT||LA419_0==NL||LA419_0==WS) ) {
						alt419=1;
					}
					} finally {dbg.exitDecision(419);}

					switch (alt419) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1265:40: ws
							{
							dbg.location(1265,40);
							pushFollow(FOLLOW_ws_in_cp_mixin_call_args8982);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(419);}
					dbg.location(1265,44);
					pushFollow(FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args8985);
					cp_mixin_call_arg();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop420;
				}
			}
			} finally {dbg.exitSubRule(420);}
			dbg.location(1265,65);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1265:65: ( CP_DOTS ( ws )? )?
			int alt422=2;
			try { dbg.enterSubRule(422);
			try { dbg.enterDecision(422, decisionCanBacktrack[422]);

			int LA422_0 = input.LA(1);
			if ( (LA422_0==CP_DOTS) ) {
				alt422=1;
			}
			} finally {dbg.exitDecision(422);}

			switch (alt422) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1265:66: CP_DOTS ( ws )?
					{
					dbg.location(1265,66);
					match(input,CP_DOTS,FOLLOW_CP_DOTS_in_cp_mixin_call_args8991); if (state.failed) return;dbg.location(1265,74);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1265:74: ( ws )?
					int alt421=2;
					try { dbg.enterSubRule(421);
					try { dbg.enterDecision(421, decisionCanBacktrack[421]);

					int LA421_0 = input.LA(1);
					if ( (LA421_0==COMMENT||LA421_0==NL||LA421_0==WS) ) {
						alt421=1;
					}
					} finally {dbg.exitDecision(421);}

					switch (alt421) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1265:74: ws
							{
							dbg.location(1265,74);
							pushFollow(FOLLOW_ws_in_cp_mixin_call_args8993);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(421);}

					}
					break;

			}
			} finally {dbg.exitSubRule(422);}
			dbg.location(1265,80);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1265:80: ( SEMI )?
			int alt423=2;
			try { dbg.enterSubRule(423);
			try { dbg.enterDecision(423, decisionCanBacktrack[423]);

			int LA423_0 = input.LA(1);
			if ( (LA423_0==SEMI) ) {
				alt423=1;
			}
			} finally {dbg.exitDecision(423);}

			switch (alt423) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1265:80: SEMI
					{
					dbg.location(1265,80);
					match(input,SEMI,FOLLOW_SEMI_in_cp_mixin_call_args8998); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(423);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1266, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_mixin_call_args");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_mixin_call_args"



	// $ANTLR start "cp_mixin_call_arg"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1268:1: cp_mixin_call_arg : ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )? ;
	public final void cp_mixin_call_arg() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call_arg");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1268, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1269:5: ( ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1270:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )?
			{
			dbg.location(1270,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1270:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression )
			int alt426=2;
			try { dbg.enterSubRule(426);
			try { dbg.enterDecision(426, decisionCanBacktrack[426]);

			try {
				isCyclicDecision = true;
				alt426 = dfa426.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(426);}

			switch (alt426) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1271:9: cp_variable ( ws )? COLON ( ws )? cp_expression
					{
					dbg.location(1271,9);
					pushFollow(FOLLOW_cp_variable_in_cp_mixin_call_arg9030);
					cp_variable();
					state._fsp--;
					if (state.failed) return;dbg.location(1271,21);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1271:21: ( ws )?
					int alt424=2;
					try { dbg.enterSubRule(424);
					try { dbg.enterDecision(424, decisionCanBacktrack[424]);

					int LA424_0 = input.LA(1);
					if ( (LA424_0==COMMENT||LA424_0==NL||LA424_0==WS) ) {
						alt424=1;
					}
					} finally {dbg.exitDecision(424);}

					switch (alt424) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1271:21: ws
							{
							dbg.location(1271,21);
							pushFollow(FOLLOW_ws_in_cp_mixin_call_arg9032);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(424);}
					dbg.location(1271,25);
					match(input,COLON,FOLLOW_COLON_in_cp_mixin_call_arg9035); if (state.failed) return;dbg.location(1271,31);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1271:31: ( ws )?
					int alt425=2;
					try { dbg.enterSubRule(425);
					try { dbg.enterDecision(425, decisionCanBacktrack[425]);

					int LA425_0 = input.LA(1);
					if ( (LA425_0==COMMENT||LA425_0==NL||LA425_0==WS) ) {
						alt425=1;
					}
					} finally {dbg.exitDecision(425);}

					switch (alt425) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1271:31: ws
							{
							dbg.location(1271,31);
							pushFollow(FOLLOW_ws_in_cp_mixin_call_arg9037);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(425);}
					dbg.location(1271,35);
					pushFollow(FOLLOW_cp_expression_in_cp_mixin_call_arg9040);
					cp_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1272:11: cp_expression
					{
					dbg.location(1272,11);
					pushFollow(FOLLOW_cp_expression_in_cp_mixin_call_arg9052);
					cp_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(426);}
			dbg.location(1273,7);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1273:7: ( ws )?
			int alt427=2;
			try { dbg.enterSubRule(427);
			try { dbg.enterDecision(427, decisionCanBacktrack[427]);

			int LA427_0 = input.LA(1);
			if ( (LA427_0==COMMENT||LA427_0==NL||LA427_0==WS) ) {
				alt427=1;
			}
			} finally {dbg.exitDecision(427);}

			switch (alt427) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1273:7: ws
					{
					dbg.location(1273,7);
					pushFollow(FOLLOW_ws_in_cp_mixin_call_arg9060);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(427);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1274, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_mixin_call_arg");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_mixin_call_arg"



	// $ANTLR start "cp_args_list"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1277:1: cp_args_list : ( ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? )? ( ( CP_DOTS | LESS_REST ) ( ws )? )? ) | ( CP_DOTS | LESS_REST ) ( ws )? );
	public final void cp_args_list() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_args_list");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1277, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1278:5: ( ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? )? ( ( CP_DOTS | LESS_REST ) ( ws )? )? ) | ( CP_DOTS | LESS_REST ) ( ws )? )
			int alt435=2;
			try { dbg.enterDecision(435, decisionCanBacktrack[435]);

			int LA435_0 = input.LA(1);
			if ( (LA435_0==AT_IDENT||(LA435_0 >= BOTTOMCENTER_SYM && LA435_0 <= BOTTOMRIGHT_SYM)||LA435_0==CHARSET_SYM||LA435_0==COUNTER_STYLE_SYM||LA435_0==FONT_FACE_SYM||LA435_0==IDENT||LA435_0==IMPORT_SYM||(LA435_0 >= LEFTBOTTOM_SYM && LA435_0 <= LEFTTOP_SYM)||LA435_0==MEDIA_SYM||LA435_0==MOZ_DOCUMENT_SYM||LA435_0==NAMESPACE_SYM||LA435_0==PAGE_SYM||(LA435_0 >= RIGHTBOTTOM_SYM && LA435_0 <= RIGHTTOP_SYM)||(LA435_0 >= SASS_AT_ROOT && LA435_0 <= SASS_DEBUG)||(LA435_0 >= SASS_EACH && LA435_0 <= SASS_ELSE)||LA435_0==SASS_EXTEND||(LA435_0 >= SASS_FOR && LA435_0 <= SASS_FUNCTION)||(LA435_0 >= SASS_IF && LA435_0 <= SASS_MIXIN)||(LA435_0 >= SASS_RETURN && LA435_0 <= SASS_WHILE)||(LA435_0 >= TOPCENTER_SYM && LA435_0 <= TOPRIGHT_SYM)||LA435_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt435=1;
			}
			else if ( (LA435_0==CP_DOTS||LA435_0==LESS_REST) ) {
				alt435=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 435, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(435);}

			switch (alt435) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1285:5: ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? )? ( ( CP_DOTS | LESS_REST ) ( ws )? )? )
					{
					dbg.location(1285,5);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1285:5: ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? )? ( ( CP_DOTS | LESS_REST ) ( ws )? )? )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1285:7: cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? )? ( ( CP_DOTS | LESS_REST ) ( ws )? )?
					{
					dbg.location(1285,7);
					pushFollow(FOLLOW_cp_arg_in_cp_args_list9107);
					cp_arg();
					state._fsp--;
					if (state.failed) return;dbg.location(1285,14);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1285:14: ( ( COMMA | SEMI ) ( ws )? cp_arg )*
					try { dbg.enterSubRule(429);

					loop429:
					while (true) {
						int alt429=2;
						try { dbg.enterDecision(429, decisionCanBacktrack[429]);

						try {
							isCyclicDecision = true;
							alt429 = dfa429.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(429);}

						switch (alt429) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1285:16: ( COMMA | SEMI ) ( ws )? cp_arg
							{
							dbg.location(1285,16);
							if ( input.LA(1)==COMMA||input.LA(1)==SEMI ) {
								input.consume();
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								dbg.recognitionException(mse);
								throw mse;
							}dbg.location(1285,33);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1285:33: ( ws )?
							int alt428=2;
							try { dbg.enterSubRule(428);
							try { dbg.enterDecision(428, decisionCanBacktrack[428]);

							int LA428_0 = input.LA(1);
							if ( (LA428_0==COMMENT||LA428_0==NL||LA428_0==WS) ) {
								alt428=1;
							}
							} finally {dbg.exitDecision(428);}

							switch (alt428) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1285:33: ws
									{
									dbg.location(1285,33);
									pushFollow(FOLLOW_ws_in_cp_args_list9121);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(428);}
							dbg.location(1285,37);
							pushFollow(FOLLOW_cp_arg_in_cp_args_list9124);
							cp_arg();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop429;
						}
					}
					} finally {dbg.exitSubRule(429);}
					dbg.location(1285,47);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1285:47: ( ( COMMA | SEMI ) ( ws )? )?
					int alt431=2;
					try { dbg.enterSubRule(431);
					try { dbg.enterDecision(431, decisionCanBacktrack[431]);

					int LA431_0 = input.LA(1);
					if ( (LA431_0==COMMA||LA431_0==SEMI) ) {
						alt431=1;
					}
					} finally {dbg.exitDecision(431);}

					switch (alt431) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1285:49: ( COMMA | SEMI ) ( ws )?
							{
							dbg.location(1285,49);
							if ( input.LA(1)==COMMA||input.LA(1)==SEMI ) {
								input.consume();
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								dbg.recognitionException(mse);
								throw mse;
							}dbg.location(1285,64);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1285:64: ( ws )?
							int alt430=2;
							try { dbg.enterSubRule(430);
							try { dbg.enterDecision(430, decisionCanBacktrack[430]);

							int LA430_0 = input.LA(1);
							if ( (LA430_0==COMMENT||LA430_0==NL||LA430_0==WS) ) {
								alt430=1;
							}
							} finally {dbg.exitDecision(430);}

							switch (alt430) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1285:64: ws
									{
									dbg.location(1285,64);
									pushFollow(FOLLOW_ws_in_cp_args_list9139);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(430);}

							}
							break;

					}
					} finally {dbg.exitSubRule(431);}
					dbg.location(1285,71);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1285:71: ( ( CP_DOTS | LESS_REST ) ( ws )? )?
					int alt433=2;
					try { dbg.enterSubRule(433);
					try { dbg.enterDecision(433, decisionCanBacktrack[433]);

					int LA433_0 = input.LA(1);
					if ( (LA433_0==CP_DOTS||LA433_0==LESS_REST) ) {
						alt433=1;
					}
					} finally {dbg.exitDecision(433);}

					switch (alt433) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1285:73: ( CP_DOTS | LESS_REST ) ( ws )?
							{
							dbg.location(1285,73);
							if ( input.LA(1)==CP_DOTS||input.LA(1)==LESS_REST ) {
								input.consume();
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								dbg.recognitionException(mse);
								throw mse;
							}dbg.location(1285,95);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1285:95: ( ws )?
							int alt432=2;
							try { dbg.enterSubRule(432);
							try { dbg.enterDecision(432, decisionCanBacktrack[432]);

							int LA432_0 = input.LA(1);
							if ( (LA432_0==COMMENT||LA432_0==NL||LA432_0==WS) ) {
								alt432=1;
							}
							} finally {dbg.exitDecision(432);}

							switch (alt432) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1285:95: ws
									{
									dbg.location(1285,95);
									pushFollow(FOLLOW_ws_in_cp_args_list9155);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(432);}

							}
							break;

					}
					} finally {dbg.exitSubRule(433);}

					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1287:5: ( CP_DOTS | LESS_REST ) ( ws )?
					{
					dbg.location(1287,5);
					if ( input.LA(1)==CP_DOTS||input.LA(1)==LESS_REST ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}dbg.location(1287,27);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1287:27: ( ws )?
					int alt434=2;
					try { dbg.enterSubRule(434);
					try { dbg.enterDecision(434, decisionCanBacktrack[434]);

					int LA434_0 = input.LA(1);
					if ( (LA434_0==COMMENT||LA434_0==NL||LA434_0==WS) ) {
						alt434=1;
					}
					} finally {dbg.exitDecision(434);}

					switch (alt434) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1287:27: ws
							{
							dbg.location(1287,27);
							pushFollow(FOLLOW_ws_in_cp_args_list9180);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(434);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1288, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_args_list");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_args_list"



	// $ANTLR start "cp_arg"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1291:1: cp_arg : ( cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )? |{...}? IDENT );
	public final void cp_arg() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_arg");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1291, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1292:5: ( cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )? |{...}? IDENT )
			int alt440=2;
			try { dbg.enterDecision(440, decisionCanBacktrack[440]);

			int LA440_0 = input.LA(1);
			if ( (LA440_0==AT_IDENT||(LA440_0 >= BOTTOMCENTER_SYM && LA440_0 <= BOTTOMRIGHT_SYM)||LA440_0==CHARSET_SYM||LA440_0==COUNTER_STYLE_SYM||LA440_0==FONT_FACE_SYM||LA440_0==IMPORT_SYM||(LA440_0 >= LEFTBOTTOM_SYM && LA440_0 <= LEFTTOP_SYM)||LA440_0==MEDIA_SYM||LA440_0==MOZ_DOCUMENT_SYM||LA440_0==NAMESPACE_SYM||LA440_0==PAGE_SYM||(LA440_0 >= RIGHTBOTTOM_SYM && LA440_0 <= RIGHTTOP_SYM)||(LA440_0 >= SASS_AT_ROOT && LA440_0 <= SASS_DEBUG)||(LA440_0 >= SASS_EACH && LA440_0 <= SASS_ELSE)||LA440_0==SASS_EXTEND||(LA440_0 >= SASS_FOR && LA440_0 <= SASS_FUNCTION)||(LA440_0 >= SASS_IF && LA440_0 <= SASS_MIXIN)||(LA440_0 >= SASS_RETURN && LA440_0 <= SASS_WHILE)||(LA440_0 >= TOPCENTER_SYM && LA440_0 <= TOPRIGHT_SYM)||LA440_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt440=1;
			}
			else if ( (LA440_0==IDENT) ) {
				int LA440_2 = input.LA(2);
				if ( (LA440_2==DOT) ) {
					alt440=1;
				}
				else if ( (LA440_2==COMMA||LA440_2==CP_DOTS||LA440_2==LESS_REST||LA440_2==RPAREN||LA440_2==SEMI) ) {
					alt440=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 440, 2, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 440, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(440);}

			switch (alt440) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1293:5: cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )?
					{
					dbg.location(1293,5);
					pushFollow(FOLLOW_cp_variable_in_cp_arg9203);
					cp_variable();
					state._fsp--;
					if (state.failed) return;dbg.location(1293,17);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1293:17: ( ws )?
					int alt436=2;
					try { dbg.enterSubRule(436);
					try { dbg.enterDecision(436, decisionCanBacktrack[436]);

					int LA436_0 = input.LA(1);
					if ( (LA436_0==COMMENT||LA436_0==NL||LA436_0==WS) ) {
						alt436=1;
					}
					} finally {dbg.exitDecision(436);}

					switch (alt436) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1293:17: ws
							{
							dbg.location(1293,17);
							pushFollow(FOLLOW_ws_in_cp_arg9205);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(436);}
					dbg.location(1293,21);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1293:21: ( COLON ( ws )? cp_expression ( ws )? )?
					int alt439=2;
					try { dbg.enterSubRule(439);
					try { dbg.enterDecision(439, decisionCanBacktrack[439]);

					int LA439_0 = input.LA(1);
					if ( (LA439_0==COLON) ) {
						alt439=1;
					}
					} finally {dbg.exitDecision(439);}

					switch (alt439) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1293:23: COLON ( ws )? cp_expression ( ws )?
							{
							dbg.location(1293,23);
							match(input,COLON,FOLLOW_COLON_in_cp_arg9210); if (state.failed) return;dbg.location(1293,29);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1293:29: ( ws )?
							int alt437=2;
							try { dbg.enterSubRule(437);
							try { dbg.enterDecision(437, decisionCanBacktrack[437]);

							int LA437_0 = input.LA(1);
							if ( (LA437_0==COMMENT||LA437_0==NL||LA437_0==WS) ) {
								alt437=1;
							}
							} finally {dbg.exitDecision(437);}

							switch (alt437) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1293:29: ws
									{
									dbg.location(1293,29);
									pushFollow(FOLLOW_ws_in_cp_arg9212);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(437);}
							dbg.location(1293,33);
							pushFollow(FOLLOW_cp_expression_in_cp_arg9215);
							cp_expression();
							state._fsp--;
							if (state.failed) return;dbg.location(1293,47);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1293:47: ( ws )?
							int alt438=2;
							try { dbg.enterSubRule(438);
							try { dbg.enterDecision(438, decisionCanBacktrack[438]);

							int LA438_0 = input.LA(1);
							if ( (LA438_0==COMMENT||LA438_0==NL||LA438_0==WS) ) {
								alt438=1;
							}
							} finally {dbg.exitDecision(438);}

							switch (alt438) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1293:47: ws
									{
									dbg.location(1293,47);
									pushFollow(FOLLOW_ws_in_cp_arg9217);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(438);}

							}
							break;

					}
					} finally {dbg.exitSubRule(439);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1294:7: {...}? IDENT
					{
					dbg.location(1294,7);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_arg", "isLessSource()");
					}dbg.location(1294,25);
					match(input,IDENT,FOLLOW_IDENT_in_cp_arg9230); if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1295, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_arg");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_arg"



	// $ANTLR start "less_mixin_guarded"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1299:1: less_mixin_guarded : less_when ( ws )? less_condition ( ( ws )? ( COMMA | key_and ) ( ws )? less_condition )* ;
	public final void less_mixin_guarded() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_mixin_guarded");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1299, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1300:5: ( less_when ( ws )? less_condition ( ( ws )? ( COMMA | key_and ) ( ws )? less_condition )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1301:5: less_when ( ws )? less_condition ( ( ws )? ( COMMA | key_and ) ( ws )? less_condition )*
			{
			dbg.location(1301,5);
			pushFollow(FOLLOW_less_when_in_less_mixin_guarded9253);
			less_when();
			state._fsp--;
			if (state.failed) return;dbg.location(1301,15);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1301:15: ( ws )?
			int alt441=2;
			try { dbg.enterSubRule(441);
			try { dbg.enterDecision(441, decisionCanBacktrack[441]);

			int LA441_0 = input.LA(1);
			if ( (LA441_0==COMMENT||LA441_0==NL||LA441_0==WS) ) {
				alt441=1;
			}
			} finally {dbg.exitDecision(441);}

			switch (alt441) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1301:15: ws
					{
					dbg.location(1301,15);
					pushFollow(FOLLOW_ws_in_less_mixin_guarded9255);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(441);}
			dbg.location(1301,19);
			pushFollow(FOLLOW_less_condition_in_less_mixin_guarded9258);
			less_condition();
			state._fsp--;
			if (state.failed) return;dbg.location(1301,34);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1301:34: ( ( ws )? ( COMMA | key_and ) ( ws )? less_condition )*
			try { dbg.enterSubRule(445);

			loop445:
			while (true) {
				int alt445=2;
				try { dbg.enterDecision(445, decisionCanBacktrack[445]);

				try {
					isCyclicDecision = true;
					alt445 = dfa445.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(445);}

				switch (alt445) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1301:35: ( ws )? ( COMMA | key_and ) ( ws )? less_condition
					{
					dbg.location(1301,35);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1301:35: ( ws )?
					int alt442=2;
					try { dbg.enterSubRule(442);
					try { dbg.enterDecision(442, decisionCanBacktrack[442]);

					int LA442_0 = input.LA(1);
					if ( (LA442_0==COMMENT||LA442_0==NL||LA442_0==WS) ) {
						alt442=1;
					}
					} finally {dbg.exitDecision(442);}

					switch (alt442) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1301:35: ws
							{
							dbg.location(1301,35);
							pushFollow(FOLLOW_ws_in_less_mixin_guarded9261);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(442);}
					dbg.location(1301,39);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1301:39: ( COMMA | key_and )
					int alt443=2;
					try { dbg.enterSubRule(443);
					try { dbg.enterDecision(443, decisionCanBacktrack[443]);

					int LA443_0 = input.LA(1);
					if ( (LA443_0==COMMA) ) {
						alt443=1;
					}
					else if ( (LA443_0==IDENT) ) {
						alt443=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 443, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(443);}

					switch (alt443) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1301:40: COMMA
							{
							dbg.location(1301,40);
							match(input,COMMA,FOLLOW_COMMA_in_less_mixin_guarded9265); if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1301:48: key_and
							{
							dbg.location(1301,48);
							pushFollow(FOLLOW_key_and_in_less_mixin_guarded9269);
							key_and();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(443);}
					dbg.location(1301,57);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1301:57: ( ws )?
					int alt444=2;
					try { dbg.enterSubRule(444);
					try { dbg.enterDecision(444, decisionCanBacktrack[444]);

					int LA444_0 = input.LA(1);
					if ( (LA444_0==COMMENT||LA444_0==NL||LA444_0==WS) ) {
						alt444=1;
					}
					} finally {dbg.exitDecision(444);}

					switch (alt444) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1301:57: ws
							{
							dbg.location(1301,57);
							pushFollow(FOLLOW_ws_in_less_mixin_guarded9272);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(444);}
					dbg.location(1301,61);
					pushFollow(FOLLOW_less_condition_in_less_mixin_guarded9275);
					less_condition();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop445;
				}
			}
			} finally {dbg.exitSubRule(445);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1302, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_mixin_guarded");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_mixin_guarded"



	// $ANTLR start "less_condition"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1306:1: less_condition : ( NOT ( ws )? )? LPAREN ( ws )? ( ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )? ) RPAREN ;
	public final void less_condition() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_condition");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1306, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1307:5: ( ( NOT ( ws )? )? LPAREN ( ws )? ( ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )? ) RPAREN )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1308:5: ( NOT ( ws )? )? LPAREN ( ws )? ( ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )? ) RPAREN
			{
			dbg.location(1308,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1308:5: ( NOT ( ws )? )?
			int alt447=2;
			try { dbg.enterSubRule(447);
			try { dbg.enterDecision(447, decisionCanBacktrack[447]);

			int LA447_0 = input.LA(1);
			if ( (LA447_0==NOT) ) {
				alt447=1;
			}
			} finally {dbg.exitDecision(447);}

			switch (alt447) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1308:6: NOT ( ws )?
					{
					dbg.location(1308,6);
					match(input,NOT,FOLLOW_NOT_in_less_condition9301); if (state.failed) return;dbg.location(1308,10);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1308:10: ( ws )?
					int alt446=2;
					try { dbg.enterSubRule(446);
					try { dbg.enterDecision(446, decisionCanBacktrack[446]);

					int LA446_0 = input.LA(1);
					if ( (LA446_0==COMMENT||LA446_0==NL||LA446_0==WS) ) {
						alt446=1;
					}
					} finally {dbg.exitDecision(446);}

					switch (alt446) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1308:10: ws
							{
							dbg.location(1308,10);
							pushFollow(FOLLOW_ws_in_less_condition9303);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(446);}

					}
					break;

			}
			} finally {dbg.exitSubRule(447);}
			dbg.location(1309,5);
			match(input,LPAREN,FOLLOW_LPAREN_in_less_condition9312); if (state.failed) return;dbg.location(1309,12);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1309:12: ( ws )?
			int alt448=2;
			try { dbg.enterSubRule(448);
			try { dbg.enterDecision(448, decisionCanBacktrack[448]);

			int LA448_0 = input.LA(1);
			if ( (LA448_0==COMMENT||LA448_0==NL||LA448_0==WS) ) {
				alt448=1;
			}
			} finally {dbg.exitDecision(448);}

			switch (alt448) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1309:12: ws
					{
					dbg.location(1309,12);
					pushFollow(FOLLOW_ws_in_less_condition9314);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(448);}
			dbg.location(1310,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1310:9: ( ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1311:14: ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )?
			{
			dbg.location(1311,14);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1311:14: ( cp_variable | less_function_in_condition )
			int alt449=2;
			try { dbg.enterSubRule(449);
			try { dbg.enterDecision(449, decisionCanBacktrack[449]);

			int LA449_0 = input.LA(1);
			if ( (LA449_0==AT_IDENT||(LA449_0 >= BOTTOMCENTER_SYM && LA449_0 <= BOTTOMRIGHT_SYM)||LA449_0==CHARSET_SYM||LA449_0==COUNTER_STYLE_SYM||LA449_0==FONT_FACE_SYM||LA449_0==IMPORT_SYM||(LA449_0 >= LEFTBOTTOM_SYM && LA449_0 <= LEFTTOP_SYM)||LA449_0==MEDIA_SYM||LA449_0==MOZ_DOCUMENT_SYM||LA449_0==NAMESPACE_SYM||LA449_0==PAGE_SYM||(LA449_0 >= RIGHTBOTTOM_SYM && LA449_0 <= RIGHTTOP_SYM)||(LA449_0 >= SASS_AT_ROOT && LA449_0 <= SASS_DEBUG)||(LA449_0 >= SASS_EACH && LA449_0 <= SASS_ELSE)||LA449_0==SASS_EXTEND||(LA449_0 >= SASS_FOR && LA449_0 <= SASS_FUNCTION)||(LA449_0 >= SASS_IF && LA449_0 <= SASS_MIXIN)||(LA449_0 >= SASS_RETURN && LA449_0 <= SASS_WHILE)||(LA449_0 >= TOPCENTER_SYM && LA449_0 <= TOPRIGHT_SYM)||LA449_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt449=1;
			}
			else if ( (LA449_0==IDENT) ) {
				int LA449_2 = input.LA(2);
				if ( (LA449_2==DOT) ) {
					alt449=1;
				}
				else if ( (LA449_2==COMMENT||LA449_2==LPAREN||LA449_2==NL||LA449_2==WS) ) {
					alt449=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 449, 2, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 449, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(449);}

			switch (alt449) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1311:15: cp_variable
					{
					dbg.location(1311,15);
					pushFollow(FOLLOW_cp_variable_in_less_condition9341);
					cp_variable();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1311:29: less_function_in_condition
					{
					dbg.location(1311,29);
					pushFollow(FOLLOW_less_function_in_condition_in_less_condition9345);
					less_function_in_condition();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(449);}
			dbg.location(1311,57);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1311:57: ( ws )?
			int alt450=2;
			try { dbg.enterSubRule(450);
			try { dbg.enterDecision(450, decisionCanBacktrack[450]);

			int LA450_0 = input.LA(1);
			if ( (LA450_0==COMMENT||LA450_0==NL||LA450_0==WS) ) {
				alt450=1;
			}
			} finally {dbg.exitDecision(450);}

			switch (alt450) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1311:57: ws
					{
					dbg.location(1311,57);
					pushFollow(FOLLOW_ws_in_less_condition9348);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(450);}
			dbg.location(1311,61);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1311:61: ( less_condition_operator ( ws )? cp_math_expression )?
			int alt452=2;
			try { dbg.enterSubRule(452);
			try { dbg.enterDecision(452, decisionCanBacktrack[452]);

			int LA452_0 = input.LA(1);
			if ( ((LA452_0 >= GREATER && LA452_0 <= GREATER_OR_EQ)||LA452_0==LESS||LA452_0==LESS_OR_EQ||LA452_0==OPEQ) ) {
				alt452=1;
			}
			} finally {dbg.exitDecision(452);}

			switch (alt452) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1311:62: less_condition_operator ( ws )? cp_math_expression
					{
					dbg.location(1311,62);
					pushFollow(FOLLOW_less_condition_operator_in_less_condition9352);
					less_condition_operator();
					state._fsp--;
					if (state.failed) return;dbg.location(1311,86);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1311:86: ( ws )?
					int alt451=2;
					try { dbg.enterSubRule(451);
					try { dbg.enterDecision(451, decisionCanBacktrack[451]);

					int LA451_0 = input.LA(1);
					if ( (LA451_0==COMMENT||LA451_0==NL||LA451_0==WS) ) {
						alt451=1;
					}
					} finally {dbg.exitDecision(451);}

					switch (alt451) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1311:86: ws
							{
							dbg.location(1311,86);
							pushFollow(FOLLOW_ws_in_less_condition9354);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(451);}
					dbg.location(1311,90);
					pushFollow(FOLLOW_cp_math_expression_in_less_condition9357);
					cp_math_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(452);}

			}
			dbg.location(1313,5);
			match(input,RPAREN,FOLLOW_RPAREN_in_less_condition9375); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1314, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_condition");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_condition"



	// $ANTLR start "less_function_in_condition"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1317:1: less_function_in_condition : less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN ;
	public final void less_function_in_condition() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_function_in_condition");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1317, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1318:5: ( less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1319:5: less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN
			{
			dbg.location(1319,5);
			pushFollow(FOLLOW_less_fn_name_in_less_function_in_condition9397);
			less_fn_name();
			state._fsp--;
			if (state.failed) return;dbg.location(1319,18);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1319:18: ( ws )?
			int alt453=2;
			try { dbg.enterSubRule(453);
			try { dbg.enterDecision(453, decisionCanBacktrack[453]);

			int LA453_0 = input.LA(1);
			if ( (LA453_0==COMMENT||LA453_0==NL||LA453_0==WS) ) {
				alt453=1;
			}
			} finally {dbg.exitDecision(453);}

			switch (alt453) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1319:18: ws
					{
					dbg.location(1319,18);
					pushFollow(FOLLOW_ws_in_less_function_in_condition9399);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(453);}
			dbg.location(1319,22);
			match(input,LPAREN,FOLLOW_LPAREN_in_less_function_in_condition9402); if (state.failed) return;dbg.location(1319,29);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1319:29: ( ws )?
			int alt454=2;
			try { dbg.enterSubRule(454);
			try { dbg.enterDecision(454, decisionCanBacktrack[454]);

			int LA454_0 = input.LA(1);
			if ( (LA454_0==COMMENT||LA454_0==NL||LA454_0==WS) ) {
				alt454=1;
			}
			} finally {dbg.exitDecision(454);}

			switch (alt454) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1319:29: ws
					{
					dbg.location(1319,29);
					pushFollow(FOLLOW_ws_in_less_function_in_condition9404);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(454);}
			dbg.location(1319,33);
			pushFollow(FOLLOW_cp_variable_in_less_function_in_condition9407);
			cp_variable();
			state._fsp--;
			if (state.failed) return;dbg.location(1319,45);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1319:45: ( ws )?
			int alt455=2;
			try { dbg.enterSubRule(455);
			try { dbg.enterDecision(455, decisionCanBacktrack[455]);

			int LA455_0 = input.LA(1);
			if ( (LA455_0==COMMENT||LA455_0==NL||LA455_0==WS) ) {
				alt455=1;
			}
			} finally {dbg.exitDecision(455);}

			switch (alt455) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1319:45: ws
					{
					dbg.location(1319,45);
					pushFollow(FOLLOW_ws_in_less_function_in_condition9409);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(455);}
			dbg.location(1319,49);
			match(input,RPAREN,FOLLOW_RPAREN_in_less_function_in_condition9412); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1320, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_function_in_condition");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_function_in_condition"



	// $ANTLR start "less_fn_name"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1323:1: less_fn_name : IDENT ;
	public final void less_fn_name() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_fn_name");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1323, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1324:5: ( IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1325:5: IDENT
			{
			dbg.location(1325,5);
			match(input,IDENT,FOLLOW_IDENT_in_less_fn_name9434); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1326, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_fn_name");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_fn_name"



	// $ANTLR start "less_condition_operator"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1328:1: less_condition_operator : ( GREATER | GREATER_OR_EQ | OPEQ | LESS | LESS_OR_EQ );
	public final void less_condition_operator() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_condition_operator");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1328, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1329:5: ( GREATER | GREATER_OR_EQ | OPEQ | LESS | LESS_OR_EQ )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(1329,5);
			if ( (input.LA(1) >= GREATER && input.LA(1) <= GREATER_OR_EQ)||input.LA(1)==LESS||input.LA(1)==LESS_OR_EQ||input.LA(1)==OPEQ ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1331, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_condition_operator");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_condition_operator"



	// $ANTLR start "less_selector_interpolation_exp"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1333:1: less_selector_interpolation_exp : ( IDENT | MINUS )? less_selector_interpolation ( less_selector_interpolation_exp | ( IDENT | MINUS | DIMENSION | LENGTH )+ )? ;
	public final void less_selector_interpolation_exp() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_selector_interpolation_exp");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1333, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1333:33: ( ( IDENT | MINUS )? less_selector_interpolation ( less_selector_interpolation_exp | ( IDENT | MINUS | DIMENSION | LENGTH )+ )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1334:5: ( IDENT | MINUS )? less_selector_interpolation ( less_selector_interpolation_exp | ( IDENT | MINUS | DIMENSION | LENGTH )+ )?
			{
			dbg.location(1334,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1334:5: ( IDENT | MINUS )?
			int alt456=2;
			try { dbg.enterSubRule(456);
			try { dbg.enterDecision(456, decisionCanBacktrack[456]);

			int LA456_0 = input.LA(1);
			if ( (LA456_0==IDENT||LA456_0==MINUS) ) {
				alt456=1;
			}
			} finally {dbg.exitDecision(456);}

			switch (alt456) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
					{
					dbg.location(1334,5);
					if ( input.LA(1)==IDENT||input.LA(1)==MINUS ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}
					}
					break;

			}
			} finally {dbg.exitSubRule(456);}
			dbg.location(1334,22);
			pushFollow(FOLLOW_less_selector_interpolation_in_less_selector_interpolation_exp9497);
			less_selector_interpolation();
			state._fsp--;
			if (state.failed) return;dbg.location(1334,50);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1334:50: ( less_selector_interpolation_exp | ( IDENT | MINUS | DIMENSION | LENGTH )+ )?
			int alt458=3;
			try { dbg.enterSubRule(458);
			try { dbg.enterDecision(458, decisionCanBacktrack[458]);

			switch ( input.LA(1) ) {
				case IDENT:
				case MINUS:
					{
					int LA458_1 = input.LA(2);
					if ( (LA458_1==AT_SIGN) ) {
						alt458=1;
					}
					else if ( ((LA458_1 >= COLON && LA458_1 <= COMMENT)||(LA458_1 >= DCOLON && LA458_1 <= DOT)||LA458_1==GREATER||(LA458_1 >= HASH && LA458_1 <= HASH_SYMBOL)||LA458_1==IDENT||(LA458_1 >= LBRACE && LA458_1 <= LBRACKET)||LA458_1==LENGTH||LA458_1==LESS_AND||LA458_1==MINUS||LA458_1==NL||LA458_1==PLUS||LA458_1==RBRACE||LA458_1==RPAREN||LA458_1==SASS_EXTEND_ONLY_SELECTOR||LA458_1==SEMI||LA458_1==TILDE||LA458_1==WS) ) {
						alt458=2;
					}
					}
					break;
				case AT_SIGN:
					{
					alt458=1;
					}
					break;
				case DIMENSION:
					{
					int LA458_3 = input.LA(2);
					if ( (!(evalPredicate(evalPredicate(tokenNameStartsWith("."),"tokenNameStartsWith(\".\")"),""))) ) {
						alt458=2;
					}
					}
					break;
				case LENGTH:
					{
					alt458=2;
					}
					break;
			}
			} finally {dbg.exitDecision(458);}

			switch (alt458) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1334:51: less_selector_interpolation_exp
					{
					dbg.location(1334,51);
					pushFollow(FOLLOW_less_selector_interpolation_exp_in_less_selector_interpolation_exp9500);
					less_selector_interpolation_exp();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1334:85: ( IDENT | MINUS | DIMENSION | LENGTH )+
					{
					dbg.location(1334,85);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1334:85: ( IDENT | MINUS | DIMENSION | LENGTH )+
					int cnt457=0;
					try { dbg.enterSubRule(457);

					loop457:
					while (true) {
						int alt457=2;
						try { dbg.enterDecision(457, decisionCanBacktrack[457]);

						int LA457_0 = input.LA(1);
						if ( (LA457_0==DIMENSION) ) {
							int LA457_2 = input.LA(2);
							if ( (!(evalPredicate(evalPredicate(tokenNameStartsWith("."),"tokenNameStartsWith(\".\")"),""))) ) {
								alt457=1;
							}

						}
						else if ( (LA457_0==IDENT||LA457_0==LENGTH||LA457_0==MINUS) ) {
							alt457=1;
						}

						} finally {dbg.exitDecision(457);}

						switch (alt457) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
							{
							dbg.location(1334,85);
							if ( input.LA(1)==DIMENSION||input.LA(1)==IDENT||input.LA(1)==LENGTH||input.LA(1)==MINUS ) {
								input.consume();
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								dbg.recognitionException(mse);
								throw mse;
							}
							}
							break;

						default :
							if ( cnt457 >= 1 ) break loop457;
							if (state.backtracking>0) {state.failed=true; return;}
							EarlyExitException eee = new EarlyExitException(457, input);
							dbg.recognitionException(eee);

							throw eee;
						}
						cnt457++;
					}
					} finally {dbg.exitSubRule(457);}

					}
					break;

			}
			} finally {dbg.exitSubRule(458);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1335, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_selector_interpolation_exp");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_selector_interpolation_exp"



	// $ANTLR start "less_selector_interpolation"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1337:1: less_selector_interpolation : AT_SIGN LBRACE ( ws )? IDENT ( ws )? RBRACE ;
	public final void less_selector_interpolation() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_selector_interpolation");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1337, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1338:5: ( AT_SIGN LBRACE ( ws )? IDENT ( ws )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1339:5: AT_SIGN LBRACE ( ws )? IDENT ( ws )? RBRACE
			{
			dbg.location(1339,5);
			match(input,AT_SIGN,FOLLOW_AT_SIGN_in_less_selector_interpolation9543); if (state.failed) return;dbg.location(1339,13);
			match(input,LBRACE,FOLLOW_LBRACE_in_less_selector_interpolation9545); if (state.failed) return;dbg.location(1339,20);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1339:20: ( ws )?
			int alt459=2;
			try { dbg.enterSubRule(459);
			try { dbg.enterDecision(459, decisionCanBacktrack[459]);

			int LA459_0 = input.LA(1);
			if ( (LA459_0==COMMENT||LA459_0==NL||LA459_0==WS) ) {
				alt459=1;
			}
			} finally {dbg.exitDecision(459);}

			switch (alt459) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1339:20: ws
					{
					dbg.location(1339,20);
					pushFollow(FOLLOW_ws_in_less_selector_interpolation9547);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(459);}
			dbg.location(1339,24);
			match(input,IDENT,FOLLOW_IDENT_in_less_selector_interpolation9550); if (state.failed) return;dbg.location(1339,30);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1339:30: ( ws )?
			int alt460=2;
			try { dbg.enterSubRule(460);
			try { dbg.enterDecision(460, decisionCanBacktrack[460]);

			int LA460_0 = input.LA(1);
			if ( (LA460_0==COMMENT||LA460_0==NL||LA460_0==WS) ) {
				alt460=1;
			}
			} finally {dbg.exitDecision(460);}

			switch (alt460) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1339:30: ws
					{
					dbg.location(1339,30);
					pushFollow(FOLLOW_ws_in_less_selector_interpolation9552);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(460);}
			dbg.location(1339,34);
			match(input,RBRACE,FOLLOW_RBRACE_in_less_selector_interpolation9555); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1340, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_selector_interpolation");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_selector_interpolation"



	// $ANTLR start "sass_selector_interpolation_exp"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1343:1: sass_selector_interpolation_exp : ( IDENT | MINUS )? sass_interpolation_expression_var ( sass_selector_interpolation_exp | ( IDENT | MINUS | DIMENSION | LENGTH )+ )? ;
	public final void sass_selector_interpolation_exp() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_selector_interpolation_exp");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1343, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1343:33: ( ( IDENT | MINUS )? sass_interpolation_expression_var ( sass_selector_interpolation_exp | ( IDENT | MINUS | DIMENSION | LENGTH )+ )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1344:5: ( IDENT | MINUS )? sass_interpolation_expression_var ( sass_selector_interpolation_exp | ( IDENT | MINUS | DIMENSION | LENGTH )+ )?
			{
			dbg.location(1344,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1344:5: ( IDENT | MINUS )?
			int alt461=2;
			try { dbg.enterSubRule(461);
			try { dbg.enterDecision(461, decisionCanBacktrack[461]);

			int LA461_0 = input.LA(1);
			if ( (LA461_0==IDENT||LA461_0==MINUS) ) {
				alt461=1;
			}
			} finally {dbg.exitDecision(461);}

			switch (alt461) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
					{
					dbg.location(1344,5);
					if ( input.LA(1)==IDENT||input.LA(1)==MINUS ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}
					}
					break;

			}
			} finally {dbg.exitSubRule(461);}
			dbg.location(1344,22);
			pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_exp9582);
			sass_interpolation_expression_var();
			state._fsp--;
			if (state.failed) return;dbg.location(1344,56);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1344:56: ( sass_selector_interpolation_exp | ( IDENT | MINUS | DIMENSION | LENGTH )+ )?
			int alt463=3;
			try { dbg.enterSubRule(463);
			try { dbg.enterDecision(463, decisionCanBacktrack[463]);

			switch ( input.LA(1) ) {
				case IDENT:
				case MINUS:
					{
					int LA463_1 = input.LA(2);
					if ( (LA463_1==HASH_SYMBOL) ) {
						int LA463_6 = input.LA(3);
						if ( (LA463_6==LBRACE) ) {
							alt463=1;
						}
						else if ( (LA463_6==AT_SIGN||LA463_6==IDENT||LA463_6==MINUS||LA463_6==NAME) ) {
							alt463=2;
						}
					}
					else if ( ((LA463_1 >= COLON && LA463_1 <= COMMENT)||(LA463_1 >= DCOLON && LA463_1 <= DOT)||LA463_1==GREATER||LA463_1==HASH||LA463_1==IDENT||(LA463_1 >= LBRACE && LA463_1 <= LBRACKET)||LA463_1==LENGTH||LA463_1==LESS_AND||LA463_1==MINUS||LA463_1==NL||LA463_1==PLUS||LA463_1==RBRACE||LA463_1==RPAREN||LA463_1==SASS_EXTEND_ONLY_SELECTOR||LA463_1==SEMI||LA463_1==TILDE||LA463_1==WS) ) {
						alt463=2;
					}
					}
					break;
				case HASH_SYMBOL:
					{
					int LA463_2 = input.LA(2);
					if ( (LA463_2==LBRACE) ) {
						alt463=1;
					}
					}
					break;
				case DIMENSION:
					{
					int LA463_3 = input.LA(2);
					if ( (!(evalPredicate(evalPredicate(tokenNameStartsWith("."),"tokenNameStartsWith(\".\")"),""))) ) {
						alt463=2;
					}
					}
					break;
				case LENGTH:
					{
					alt463=2;
					}
					break;
			}
			} finally {dbg.exitDecision(463);}

			switch (alt463) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1344:57: sass_selector_interpolation_exp
					{
					dbg.location(1344,57);
					pushFollow(FOLLOW_sass_selector_interpolation_exp_in_sass_selector_interpolation_exp9585);
					sass_selector_interpolation_exp();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1344:91: ( IDENT | MINUS | DIMENSION | LENGTH )+
					{
					dbg.location(1344,91);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1344:91: ( IDENT | MINUS | DIMENSION | LENGTH )+
					int cnt462=0;
					try { dbg.enterSubRule(462);

					loop462:
					while (true) {
						int alt462=2;
						try { dbg.enterDecision(462, decisionCanBacktrack[462]);

						int LA462_0 = input.LA(1);
						if ( (LA462_0==DIMENSION) ) {
							int LA462_2 = input.LA(2);
							if ( (!(evalPredicate(evalPredicate(tokenNameStartsWith("."),"tokenNameStartsWith(\".\")"),""))) ) {
								alt462=1;
							}

						}
						else if ( (LA462_0==IDENT||LA462_0==LENGTH||LA462_0==MINUS) ) {
							alt462=1;
						}

						} finally {dbg.exitDecision(462);}

						switch (alt462) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
							{
							dbg.location(1344,91);
							if ( input.LA(1)==DIMENSION||input.LA(1)==IDENT||input.LA(1)==LENGTH||input.LA(1)==MINUS ) {
								input.consume();
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								dbg.recognitionException(mse);
								throw mse;
							}
							}
							break;

						default :
							if ( cnt462 >= 1 ) break loop462;
							if (state.backtracking>0) {state.failed=true; return;}
							EarlyExitException eee = new EarlyExitException(462, input);
							dbg.recognitionException(eee);

							throw eee;
						}
						cnt462++;
					}
					} finally {dbg.exitSubRule(462);}

					}
					break;

			}
			} finally {dbg.exitSubRule(463);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1345, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_selector_interpolation_exp");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_selector_interpolation_exp"



	// $ANTLR start "sass_interpolation_expression_var"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1347:1: sass_interpolation_expression_var : HASH_SYMBOL LBRACE ( WS )? cp_expression ( WS )? RBRACE ;
	public final void sass_interpolation_expression_var() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_interpolation_expression_var");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1347, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1348:5: ( HASH_SYMBOL LBRACE ( WS )? cp_expression ( WS )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1349:9: HASH_SYMBOL LBRACE ( WS )? cp_expression ( WS )? RBRACE
			{
			dbg.location(1349,9);
			match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_sass_interpolation_expression_var9632); if (state.failed) return;dbg.location(1349,21);
			match(input,LBRACE,FOLLOW_LBRACE_in_sass_interpolation_expression_var9634); if (state.failed) return;dbg.location(1349,28);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1349:28: ( WS )?
			int alt464=2;
			try { dbg.enterSubRule(464);
			try { dbg.enterDecision(464, decisionCanBacktrack[464]);

			int LA464_0 = input.LA(1);
			if ( (LA464_0==WS) ) {
				alt464=1;
			}
			} finally {dbg.exitDecision(464);}

			switch (alt464) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1349:28: WS
					{
					dbg.location(1349,28);
					match(input,WS,FOLLOW_WS_in_sass_interpolation_expression_var9636); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(464);}
			dbg.location(1349,32);
			pushFollow(FOLLOW_cp_expression_in_sass_interpolation_expression_var9639);
			cp_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(1349,46);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1349:46: ( WS )?
			int alt465=2;
			try { dbg.enterSubRule(465);
			try { dbg.enterDecision(465, decisionCanBacktrack[465]);

			int LA465_0 = input.LA(1);
			if ( (LA465_0==WS) ) {
				alt465=1;
			}
			} finally {dbg.exitDecision(465);}

			switch (alt465) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1349:46: WS
					{
					dbg.location(1349,46);
					match(input,WS,FOLLOW_WS_in_sass_interpolation_expression_var9641); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(465);}
			dbg.location(1349,50);
			match(input,RBRACE,FOLLOW_RBRACE_in_sass_interpolation_expression_var9644); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1350, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_interpolation_expression_var");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_interpolation_expression_var"



	// $ANTLR start "sass_nested_properties"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1370:1: sass_nested_properties : property ( ws )? COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
	public final void sass_nested_properties() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_nested_properties");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1370, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1371:5: ( property ( ws )? COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1372:5: property ( ws )? COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
			{
			dbg.location(1372,5);
			pushFollow(FOLLOW_property_in_sass_nested_properties9684);
			property();
			state._fsp--;
			if (state.failed) return;dbg.location(1372,14);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1372:14: ( ws )?
			int alt466=2;
			try { dbg.enterSubRule(466);
			try { dbg.enterDecision(466, decisionCanBacktrack[466]);

			int LA466_0 = input.LA(1);
			if ( (LA466_0==COMMENT||LA466_0==NL||LA466_0==WS) ) {
				alt466=1;
			}
			} finally {dbg.exitDecision(466);}

			switch (alt466) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1372:14: ws
					{
					dbg.location(1372,14);
					pushFollow(FOLLOW_ws_in_sass_nested_properties9686);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(466);}
			dbg.location(1372,18);
			match(input,COLON,FOLLOW_COLON_in_sass_nested_properties9689); if (state.failed) return;dbg.location(1372,24);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1372:24: ( ws )?
			int alt467=2;
			try { dbg.enterSubRule(467);
			try { dbg.enterDecision(467, decisionCanBacktrack[467]);

			int LA467_0 = input.LA(1);
			if ( (LA467_0==COMMENT||LA467_0==NL||LA467_0==WS) ) {
				alt467=1;
			}
			} finally {dbg.exitDecision(467);}

			switch (alt467) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1372:24: ws
					{
					dbg.location(1372,24);
					pushFollow(FOLLOW_ws_in_sass_nested_properties9691);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(467);}
			dbg.location(1372,28);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1372:28: ( propertyValue ( ws )? )?
			int alt469=2;
			try { dbg.enterSubRule(469);
			try { dbg.enterDecision(469, decisionCanBacktrack[469]);

			int LA469_0 = input.LA(1);
			if ( ((LA469_0 >= ANGLE && LA469_0 <= AT_SIGN)||(LA469_0 >= BOTTOMCENTER_SYM && LA469_0 <= BOTTOMRIGHT_SYM)||LA469_0==CHARSET_SYM||LA469_0==COUNTER_STYLE_SYM||LA469_0==DIMENSION||LA469_0==EMS||LA469_0==EXS||(LA469_0 >= FONT_FACE_SYM && LA469_0 <= FREQ)||LA469_0==GEN||(LA469_0 >= HASH && LA469_0 <= HASH_SYMBOL)||LA469_0==IDENT||LA469_0==IMPORT_SYM||(LA469_0 >= LBRACKET && LA469_0 <= LENGTH)||(LA469_0 >= LESS_AND && LA469_0 <= LESS_JS_STRING)||(LA469_0 >= MEDIA_SYM && LA469_0 <= MOZ_DOCUMENT_SYM)||LA469_0==NAMESPACE_SYM||LA469_0==NUMBER||(LA469_0 >= PAGE_SYM && LA469_0 <= PERCENTAGE_SYMBOL)||LA469_0==PLUS||(LA469_0 >= REM && LA469_0 <= RIGHTTOP_SYM)||(LA469_0 >= SASS_AT_ROOT && LA469_0 <= SASS_DEBUG)||(LA469_0 >= SASS_EACH && LA469_0 <= SASS_ELSE)||LA469_0==SASS_EXTEND||(LA469_0 >= SASS_FOR && LA469_0 <= SASS_FUNCTION)||(LA469_0 >= SASS_IF && LA469_0 <= SASS_MIXIN)||(LA469_0 >= SASS_RETURN && LA469_0 <= SASS_WHILE)||LA469_0==STRING||(LA469_0 >= TILDE && LA469_0 <= TOPRIGHT_SYM)||(LA469_0 >= URANGE && LA469_0 <= URI)||LA469_0==VARIABLE||LA469_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt469=1;
			}
			} finally {dbg.exitDecision(469);}

			switch (alt469) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1372:29: propertyValue ( ws )?
					{
					dbg.location(1372,29);
					pushFollow(FOLLOW_propertyValue_in_sass_nested_properties9695);
					propertyValue();
					state._fsp--;
					if (state.failed) return;dbg.location(1372,43);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1372:43: ( ws )?
					int alt468=2;
					try { dbg.enterSubRule(468);
					try { dbg.enterDecision(468, decisionCanBacktrack[468]);

					int LA468_0 = input.LA(1);
					if ( (LA468_0==COMMENT||LA468_0==NL||LA468_0==WS) ) {
						alt468=1;
					}
					} finally {dbg.exitDecision(468);}

					switch (alt468) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1372:43: ws
							{
							dbg.location(1372,43);
							pushFollow(FOLLOW_ws_in_sass_nested_properties9697);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(468);}

					}
					break;

			}
			} finally {dbg.exitSubRule(469);}
			dbg.location(1372,49);
			match(input,LBRACE,FOLLOW_LBRACE_in_sass_nested_properties9702); if (state.failed) return;dbg.location(1372,56);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1372:56: ( ws )?
			int alt470=2;
			try { dbg.enterSubRule(470);
			try { dbg.enterDecision(470, decisionCanBacktrack[470]);

			int LA470_0 = input.LA(1);
			if ( (LA470_0==COMMENT||LA470_0==NL||LA470_0==WS) ) {
				alt470=1;
			}
			} finally {dbg.exitDecision(470);}

			switch (alt470) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1372:56: ws
					{
					dbg.location(1372,56);
					pushFollow(FOLLOW_ws_in_sass_nested_properties9704);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(470);}
			dbg.location(1372,60);
			pushFollow(FOLLOW_syncToFollow_in_sass_nested_properties9707);
			syncToFollow();
			state._fsp--;
			if (state.failed) return;dbg.location(1372,73);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1372:73: ( declarations )?
			int alt471=2;
			try { dbg.enterSubRule(471);
			try { dbg.enterDecision(471, decisionCanBacktrack[471]);

			int LA471_0 = input.LA(1);
			if ( ((LA471_0 >= AT_IDENT && LA471_0 <= AT_SIGN)||(LA471_0 >= BOTTOMCENTER_SYM && LA471_0 <= BOTTOMRIGHT_SYM)||(LA471_0 >= CHARSET_SYM && LA471_0 <= COLON)||LA471_0==COUNTER_STYLE_SYM||(LA471_0 >= DCOLON && LA471_0 <= DOT)||LA471_0==FONT_FACE_SYM||(LA471_0 >= GEN && LA471_0 <= GREATER)||(LA471_0 >= HASH && LA471_0 <= HASH_SYMBOL)||LA471_0==IDENT||LA471_0==IMPORT_SYM||LA471_0==LAYER_SYM||(LA471_0 >= LBRACKET && LA471_0 <= LEFTTOP_SYM)||LA471_0==LESS_AND||(LA471_0 >= MEDIA_SYM && LA471_0 <= MOZ_DOCUMENT_SYM)||LA471_0==NAMESPACE_SYM||LA471_0==PAGE_SYM||(LA471_0 >= PIPE && LA471_0 <= PLUS)||(LA471_0 >= RIGHTBOTTOM_SYM && LA471_0 <= RIGHTTOP_SYM)||(LA471_0 >= SASS_AT_ROOT && LA471_0 <= SASS_DEBUG)||(LA471_0 >= SASS_EACH && LA471_0 <= SASS_ELSE)||(LA471_0 >= SASS_ERROR && LA471_0 <= SASS_FUNCTION)||(LA471_0 >= SASS_IF && LA471_0 <= SASS_MIXIN)||(LA471_0 >= SASS_RETURN && LA471_0 <= SEMI)||LA471_0==STAR||LA471_0==SUPPORTS_SYM||LA471_0==TILDE||(LA471_0 >= TOPCENTER_SYM && LA471_0 <= TOPRIGHT_SYM)||LA471_0==VARIABLE||LA471_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt471=1;
			}
			} finally {dbg.exitDecision(471);}

			switch (alt471) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1372:73: declarations
					{
					dbg.location(1372,73);
					pushFollow(FOLLOW_declarations_in_sass_nested_properties9709);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(471);}
			dbg.location(1372,87);
			match(input,RBRACE,FOLLOW_RBRACE_in_sass_nested_properties9712); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1373, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_nested_properties");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_nested_properties"



	// $ANTLR start "sass_extend"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1375:1: sass_extend : SASS_EXTEND ws simpleSelectorSequence ( ( ws )? COMMA ( ws )? simpleSelectorSequence )* ( ws SASS_OPTIONAL )? ;
	public final void sass_extend() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_extend");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1375, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1376:5: ( SASS_EXTEND ws simpleSelectorSequence ( ( ws )? COMMA ( ws )? simpleSelectorSequence )* ( ws SASS_OPTIONAL )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1377:5: SASS_EXTEND ws simpleSelectorSequence ( ( ws )? COMMA ( ws )? simpleSelectorSequence )* ( ws SASS_OPTIONAL )?
			{
			dbg.location(1377,5);
			match(input,SASS_EXTEND,FOLLOW_SASS_EXTEND_in_sass_extend9733); if (state.failed) return;dbg.location(1377,17);
			pushFollow(FOLLOW_ws_in_sass_extend9735);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1377,20);
			pushFollow(FOLLOW_simpleSelectorSequence_in_sass_extend9737);
			simpleSelectorSequence();
			state._fsp--;
			if (state.failed) return;dbg.location(1377,43);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1377:43: ( ( ws )? COMMA ( ws )? simpleSelectorSequence )*
			try { dbg.enterSubRule(474);

			loop474:
			while (true) {
				int alt474=2;
				try { dbg.enterDecision(474, decisionCanBacktrack[474]);

				try {
					isCyclicDecision = true;
					alt474 = dfa474.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(474);}

				switch (alt474) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1377:44: ( ws )? COMMA ( ws )? simpleSelectorSequence
					{
					dbg.location(1377,44);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1377:44: ( ws )?
					int alt472=2;
					try { dbg.enterSubRule(472);
					try { dbg.enterDecision(472, decisionCanBacktrack[472]);

					int LA472_0 = input.LA(1);
					if ( (LA472_0==COMMENT||LA472_0==NL||LA472_0==WS) ) {
						alt472=1;
					}
					} finally {dbg.exitDecision(472);}

					switch (alt472) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1377:44: ws
							{
							dbg.location(1377,44);
							pushFollow(FOLLOW_ws_in_sass_extend9740);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(472);}
					dbg.location(1377,48);
					match(input,COMMA,FOLLOW_COMMA_in_sass_extend9743); if (state.failed) return;dbg.location(1377,54);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1377:54: ( ws )?
					int alt473=2;
					try { dbg.enterSubRule(473);
					try { dbg.enterDecision(473, decisionCanBacktrack[473]);

					int LA473_0 = input.LA(1);
					if ( (LA473_0==COMMENT||LA473_0==NL||LA473_0==WS) ) {
						alt473=1;
					}
					} finally {dbg.exitDecision(473);}

					switch (alt473) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1377:54: ws
							{
							dbg.location(1377,54);
							pushFollow(FOLLOW_ws_in_sass_extend9745);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(473);}
					dbg.location(1377,58);
					pushFollow(FOLLOW_simpleSelectorSequence_in_sass_extend9748);
					simpleSelectorSequence();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop474;
				}
			}
			} finally {dbg.exitSubRule(474);}
			dbg.location(1377,83);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1377:83: ( ws SASS_OPTIONAL )?
			int alt475=2;
			try { dbg.enterSubRule(475);
			try { dbg.enterDecision(475, decisionCanBacktrack[475]);

			try {
				isCyclicDecision = true;
				alt475 = dfa475.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(475);}

			switch (alt475) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1377:84: ws SASS_OPTIONAL
					{
					dbg.location(1377,84);
					pushFollow(FOLLOW_ws_in_sass_extend9753);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(1377,87);
					match(input,SASS_OPTIONAL,FOLLOW_SASS_OPTIONAL_in_sass_extend9755); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(475);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1378, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_extend");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_extend"



	// $ANTLR start "sass_extend_only_selector"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1380:1: sass_extend_only_selector : SASS_EXTEND_ONLY_SELECTOR ( sass_selector_interpolation_exp )? ;
	public final void sass_extend_only_selector() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_extend_only_selector");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1380, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1381:5: ( SASS_EXTEND_ONLY_SELECTOR ( sass_selector_interpolation_exp )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1382:5: SASS_EXTEND_ONLY_SELECTOR ( sass_selector_interpolation_exp )?
			{
			dbg.location(1382,5);
			match(input,SASS_EXTEND_ONLY_SELECTOR,FOLLOW_SASS_EXTEND_ONLY_SELECTOR_in_sass_extend_only_selector9778); if (state.failed) return;dbg.location(1382,31);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1382:31: ( sass_selector_interpolation_exp )?
			int alt476=2;
			try { dbg.enterSubRule(476);
			try { dbg.enterDecision(476, decisionCanBacktrack[476]);

			int LA476_0 = input.LA(1);
			if ( (LA476_0==IDENT||LA476_0==MINUS) ) {
				alt476=1;
			}
			else if ( (LA476_0==HASH_SYMBOL) ) {
				int LA476_2 = input.LA(2);
				if ( (LA476_2==LBRACE) ) {
					alt476=1;
				}
			}
			} finally {dbg.exitDecision(476);}

			switch (alt476) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1382:31: sass_selector_interpolation_exp
					{
					dbg.location(1382,31);
					pushFollow(FOLLOW_sass_selector_interpolation_exp_in_sass_extend_only_selector9780);
					sass_selector_interpolation_exp();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(476);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1383, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_extend_only_selector");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_extend_only_selector"



	// $ANTLR start "sass_debug"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1385:1: sass_debug : ( SASS_DEBUG | SASS_WARN ) ws cp_expression ;
	public final void sass_debug() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_debug");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1385, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1386:5: ( ( SASS_DEBUG | SASS_WARN ) ws cp_expression )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1387:5: ( SASS_DEBUG | SASS_WARN ) ws cp_expression
			{
			dbg.location(1387,5);
			if ( input.LA(1)==SASS_DEBUG||input.LA(1)==SASS_WARN ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}dbg.location(1387,32);
			pushFollow(FOLLOW_ws_in_sass_debug9812);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1387,35);
			pushFollow(FOLLOW_cp_expression_in_sass_debug9814);
			cp_expression();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1388, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_debug");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_debug"



	// $ANTLR start "sass_error"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1390:1: sass_error : SASS_ERROR ws STRING ;
	public final void sass_error() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_error");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1390, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1391:5: ( SASS_ERROR ws STRING )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1392:5: SASS_ERROR ws STRING
			{
			dbg.location(1392,5);
			match(input,SASS_ERROR,FOLLOW_SASS_ERROR_in_sass_error9835); if (state.failed) return;dbg.location(1392,16);
			pushFollow(FOLLOW_ws_in_sass_error9837);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1392,19);
			match(input,STRING,FOLLOW_STRING_in_sass_error9839); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1393, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_error");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_error"



	// $ANTLR start "sass_control"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1395:1: sass_control : ( sass_if | sass_for | sass_each | sass_while );
	public final void sass_control() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_control");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1395, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1396:5: ( sass_if | sass_for | sass_each | sass_while )
			int alt477=4;
			try { dbg.enterDecision(477, decisionCanBacktrack[477]);

			switch ( input.LA(1) ) {
			case SASS_IF:
				{
				alt477=1;
				}
				break;
			case SASS_FOR:
				{
				alt477=2;
				}
				break;
			case SASS_EACH:
				{
				alt477=3;
				}
				break;
			case SASS_WHILE:
				{
				alt477=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 477, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(477);}

			switch (alt477) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1397:5: sass_if
					{
					dbg.location(1397,5);
					pushFollow(FOLLOW_sass_if_in_sass_control9860);
					sass_if();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1397:15: sass_for
					{
					dbg.location(1397,15);
					pushFollow(FOLLOW_sass_for_in_sass_control9864);
					sass_for();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1397:26: sass_each
					{
					dbg.location(1397,26);
					pushFollow(FOLLOW_sass_each_in_sass_control9868);
					sass_each();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1397:38: sass_while
					{
					dbg.location(1397,38);
					pushFollow(FOLLOW_sass_while_in_sass_control9872);
					sass_while();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1398, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_control");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_control"



	// $ANTLR start "sass_if"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1400:1: sass_if : SASS_IF ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? ;
	public final void sass_if() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_if");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1400, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1401:5: ( SASS_IF ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1402:5: SASS_IF ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )?
			{
			dbg.location(1402,5);
			match(input,SASS_IF,FOLLOW_SASS_IF_in_sass_if9893); if (state.failed) return;dbg.location(1402,13);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1402:13: ( ws )?
			int alt478=2;
			try { dbg.enterSubRule(478);
			try { dbg.enterDecision(478, decisionCanBacktrack[478]);

			int LA478_0 = input.LA(1);
			if ( (LA478_0==COMMENT||LA478_0==NL||LA478_0==WS) ) {
				alt478=1;
			}
			} finally {dbg.exitDecision(478);}

			switch (alt478) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1402:13: ws
					{
					dbg.location(1402,13);
					pushFollow(FOLLOW_ws_in_sass_if9895);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(478);}
			dbg.location(1402,17);
			pushFollow(FOLLOW_sass_control_expression_in_sass_if9898);
			sass_control_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(1402,41);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1402:41: ( ws )?
			int alt479=2;
			try { dbg.enterSubRule(479);
			try { dbg.enterDecision(479, decisionCanBacktrack[479]);

			int LA479_0 = input.LA(1);
			if ( (LA479_0==COMMENT||LA479_0==NL||LA479_0==WS) ) {
				alt479=1;
			}
			} finally {dbg.exitDecision(479);}

			switch (alt479) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1402:41: ws
					{
					dbg.location(1402,41);
					pushFollow(FOLLOW_ws_in_sass_if9900);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(479);}
			dbg.location(1402,45);
			pushFollow(FOLLOW_sass_control_block_in_sass_if9903);
			sass_control_block();
			state._fsp--;
			if (state.failed) return;dbg.location(1402,64);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1402:64: ( ( ws )? sass_else )?
			int alt481=2;
			try { dbg.enterSubRule(481);
			try { dbg.enterDecision(481, decisionCanBacktrack[481]);

			try {
				isCyclicDecision = true;
				alt481 = dfa481.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(481);}

			switch (alt481) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1402:65: ( ws )? sass_else
					{
					dbg.location(1402,65);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1402:65: ( ws )?
					int alt480=2;
					try { dbg.enterSubRule(480);
					try { dbg.enterDecision(480, decisionCanBacktrack[480]);

					int LA480_0 = input.LA(1);
					if ( (LA480_0==COMMENT||LA480_0==NL||LA480_0==WS) ) {
						alt480=1;
					}
					} finally {dbg.exitDecision(480);}

					switch (alt480) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1402:65: ws
							{
							dbg.location(1402,65);
							pushFollow(FOLLOW_ws_in_sass_if9906);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(480);}
					dbg.location(1402,69);
					pushFollow(FOLLOW_sass_else_in_sass_if9909);
					sass_else();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(481);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1403, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_if");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_if"



	// $ANTLR start "sass_else"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1405:1: sass_else : ( SASS_ELSE ( ws )? sass_control_block | ( ( SASS_ELSE ( ws )? {...}? IDENT ) | SASS_ELSEIF ) ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? );
	public final void sass_else() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_else");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1405, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1406:5: ( SASS_ELSE ( ws )? sass_control_block | ( ( SASS_ELSE ( ws )? {...}? IDENT ) | SASS_ELSEIF ) ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? )
			int alt489=2;
			try { dbg.enterDecision(489, decisionCanBacktrack[489]);

			try {
				isCyclicDecision = true;
				alt489 = dfa489.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(489);}

			switch (alt489) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1407:5: SASS_ELSE ( ws )? sass_control_block
					{
					dbg.location(1407,5);
					match(input,SASS_ELSE,FOLLOW_SASS_ELSE_in_sass_else9932); if (state.failed) return;dbg.location(1407,15);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1407:15: ( ws )?
					int alt482=2;
					try { dbg.enterSubRule(482);
					try { dbg.enterDecision(482, decisionCanBacktrack[482]);

					int LA482_0 = input.LA(1);
					if ( (LA482_0==COMMENT||LA482_0==NL||LA482_0==WS) ) {
						alt482=1;
					}
					} finally {dbg.exitDecision(482);}

					switch (alt482) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1407:15: ws
							{
							dbg.location(1407,15);
							pushFollow(FOLLOW_ws_in_sass_else9934);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(482);}
					dbg.location(1407,19);
					pushFollow(FOLLOW_sass_control_block_in_sass_else9937);
					sass_control_block();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1409:5: ( ( SASS_ELSE ( ws )? {...}? IDENT ) | SASS_ELSEIF ) ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )?
					{
					dbg.location(1409,5);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1409:5: ( ( SASS_ELSE ( ws )? {...}? IDENT ) | SASS_ELSEIF )
					int alt484=2;
					try { dbg.enterSubRule(484);
					try { dbg.enterDecision(484, decisionCanBacktrack[484]);

					int LA484_0 = input.LA(1);
					if ( (LA484_0==SASS_ELSE) ) {
						alt484=1;
					}
					else if ( (LA484_0==SASS_ELSEIF) ) {
						alt484=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 484, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(484);}

					switch (alt484) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1409:6: ( SASS_ELSE ( ws )? {...}? IDENT )
							{
							dbg.location(1409,6);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1409:6: ( SASS_ELSE ( ws )? {...}? IDENT )
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1409:7: SASS_ELSE ( ws )? {...}? IDENT
							{
							dbg.location(1409,7);
							match(input,SASS_ELSE,FOLLOW_SASS_ELSE_in_sass_else9951); if (state.failed) return;dbg.location(1409,17);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1409:17: ( ws )?
							int alt483=2;
							try { dbg.enterSubRule(483);
							try { dbg.enterDecision(483, decisionCanBacktrack[483]);

							int LA483_0 = input.LA(1);
							if ( (LA483_0==COMMENT||LA483_0==NL||LA483_0==WS) ) {
								alt483=1;
							}
							} finally {dbg.exitDecision(483);}

							switch (alt483) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1409:17: ws
									{
									dbg.location(1409,17);
									pushFollow(FOLLOW_ws_in_sass_else9953);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(483);}
							dbg.location(1409,21);
							if ( !(evalPredicate(tokenNameEquals("if"),"tokenNameEquals(\"if\")")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "sass_else", "tokenNameEquals(\"if\")");
							}dbg.location(1409,46);
							match(input,IDENT,FOLLOW_IDENT_in_sass_else9958); if (state.failed) return;
							}

							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1409:64: SASS_ELSEIF
							{
							dbg.location(1409,64);
							match(input,SASS_ELSEIF,FOLLOW_SASS_ELSEIF_in_sass_else9965); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(484);}
					dbg.location(1409,77);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1409:77: ( ws )?
					int alt485=2;
					try { dbg.enterSubRule(485);
					try { dbg.enterDecision(485, decisionCanBacktrack[485]);

					int LA485_0 = input.LA(1);
					if ( (LA485_0==COMMENT||LA485_0==NL||LA485_0==WS) ) {
						alt485=1;
					}
					} finally {dbg.exitDecision(485);}

					switch (alt485) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1409:77: ws
							{
							dbg.location(1409,77);
							pushFollow(FOLLOW_ws_in_sass_else9968);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(485);}
					dbg.location(1409,81);
					pushFollow(FOLLOW_sass_control_expression_in_sass_else9971);
					sass_control_expression();
					state._fsp--;
					if (state.failed) return;dbg.location(1409,105);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1409:105: ( ws )?
					int alt486=2;
					try { dbg.enterSubRule(486);
					try { dbg.enterDecision(486, decisionCanBacktrack[486]);

					int LA486_0 = input.LA(1);
					if ( (LA486_0==COMMENT||LA486_0==NL||LA486_0==WS) ) {
						alt486=1;
					}
					} finally {dbg.exitDecision(486);}

					switch (alt486) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1409:105: ws
							{
							dbg.location(1409,105);
							pushFollow(FOLLOW_ws_in_sass_else9973);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(486);}
					dbg.location(1409,109);
					pushFollow(FOLLOW_sass_control_block_in_sass_else9976);
					sass_control_block();
					state._fsp--;
					if (state.failed) return;dbg.location(1409,128);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1409:128: ( ( ws )? sass_else )?
					int alt488=2;
					try { dbg.enterSubRule(488);
					try { dbg.enterDecision(488, decisionCanBacktrack[488]);

					try {
						isCyclicDecision = true;
						alt488 = dfa488.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(488);}

					switch (alt488) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1409:129: ( ws )? sass_else
							{
							dbg.location(1409,129);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1409:129: ( ws )?
							int alt487=2;
							try { dbg.enterSubRule(487);
							try { dbg.enterDecision(487, decisionCanBacktrack[487]);

							int LA487_0 = input.LA(1);
							if ( (LA487_0==COMMENT||LA487_0==NL||LA487_0==WS) ) {
								alt487=1;
							}
							} finally {dbg.exitDecision(487);}

							switch (alt487) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1409:129: ws
									{
									dbg.location(1409,129);
									pushFollow(FOLLOW_ws_in_sass_else9979);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(487);}
							dbg.location(1409,133);
							pushFollow(FOLLOW_sass_else_in_sass_else9982);
							sass_else();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(488);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1410, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_else");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_else"



	// $ANTLR start "sass_control_expression"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1412:1: sass_control_expression : cp_expression ;
	public final void sass_control_expression() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_control_expression");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1412, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1413:5: ( cp_expression )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1414:5: cp_expression
			{
			dbg.location(1414,5);
			pushFollow(FOLLOW_cp_expression_in_sass_control_expression10005);
			cp_expression();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1415, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_control_expression");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_control_expression"



	// $ANTLR start "sass_for"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1417:1: sass_for : SASS_FOR ws cp_variable ws {...}? IDENT ws cp_math_expression ws {...}? IDENT ws cp_math_expression ( ws )? sass_control_block ;
	public final void sass_for() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_for");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1417, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1418:5: ( SASS_FOR ws cp_variable ws {...}? IDENT ws cp_math_expression ws {...}? IDENT ws cp_math_expression ( ws )? sass_control_block )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1419:5: SASS_FOR ws cp_variable ws {...}? IDENT ws cp_math_expression ws {...}? IDENT ws cp_math_expression ( ws )? sass_control_block
			{
			dbg.location(1419,5);
			match(input,SASS_FOR,FOLLOW_SASS_FOR_in_sass_for10026); if (state.failed) return;dbg.location(1419,14);
			pushFollow(FOLLOW_ws_in_sass_for10028);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1419,17);
			pushFollow(FOLLOW_cp_variable_in_sass_for10030);
			cp_variable();
			state._fsp--;
			if (state.failed) return;dbg.location(1419,29);
			pushFollow(FOLLOW_ws_in_sass_for10032);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1419,32);
			if ( !(evalPredicate(tokenNameEquals("from"),"tokenNameEquals(\"from\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "sass_for", "tokenNameEquals(\"from\")");
			}dbg.location(1419,59);
			match(input,IDENT,FOLLOW_IDENT_in_sass_for10036); if (state.failed) return;dbg.location(1419,74);
			pushFollow(FOLLOW_ws_in_sass_for10040);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1419,77);
			pushFollow(FOLLOW_cp_math_expression_in_sass_for10042);
			cp_math_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(1419,96);
			pushFollow(FOLLOW_ws_in_sass_for10044);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1419,99);
			if ( !(evalPredicate(tokenNameEquals("to")|tokenNameEquals("through"),"tokenNameEquals(\"to\")|tokenNameEquals(\"through\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "sass_for", "tokenNameEquals(\"to\")|tokenNameEquals(\"through\")");
			}dbg.location(1419,151);
			match(input,IDENT,FOLLOW_IDENT_in_sass_for10048); if (state.failed) return;dbg.location(1419,173);
			pushFollow(FOLLOW_ws_in_sass_for10052);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1419,176);
			pushFollow(FOLLOW_cp_math_expression_in_sass_for10054);
			cp_math_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(1419,195);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1419:195: ( ws )?
			int alt490=2;
			try { dbg.enterSubRule(490);
			try { dbg.enterDecision(490, decisionCanBacktrack[490]);

			int LA490_0 = input.LA(1);
			if ( (LA490_0==COMMENT||LA490_0==NL||LA490_0==WS) ) {
				alt490=1;
			}
			} finally {dbg.exitDecision(490);}

			switch (alt490) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1419:195: ws
					{
					dbg.location(1419,195);
					pushFollow(FOLLOW_ws_in_sass_for10056);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(490);}
			dbg.location(1419,199);
			pushFollow(FOLLOW_sass_control_block_in_sass_for10059);
			sass_control_block();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1420, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_for");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_for"



	// $ANTLR start "sass_each"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1422:1: sass_each : SASS_EACH ws sass_each_variables ws {...}? IDENT ws ( cp_expression_list ( ( ws )? COMMA )? ( ws )? )+ sass_control_block ;
	public final void sass_each() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_each");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1422, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1423:5: ( SASS_EACH ws sass_each_variables ws {...}? IDENT ws ( cp_expression_list ( ( ws )? COMMA )? ( ws )? )+ sass_control_block )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1424:5: SASS_EACH ws sass_each_variables ws {...}? IDENT ws ( cp_expression_list ( ( ws )? COMMA )? ( ws )? )+ sass_control_block
			{
			dbg.location(1424,5);
			match(input,SASS_EACH,FOLLOW_SASS_EACH_in_sass_each10080); if (state.failed) return;dbg.location(1424,15);
			pushFollow(FOLLOW_ws_in_sass_each10082);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1424,18);
			pushFollow(FOLLOW_sass_each_variables_in_sass_each10084);
			sass_each_variables();
			state._fsp--;
			if (state.failed) return;dbg.location(1424,38);
			pushFollow(FOLLOW_ws_in_sass_each10086);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1424,41);
			if ( !(evalPredicate(tokenNameEquals("in"),"tokenNameEquals(\"in\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "sass_each", "tokenNameEquals(\"in\")");
			}dbg.location(1424,66);
			match(input,IDENT,FOLLOW_IDENT_in_sass_each10090); if (state.failed) return;dbg.location(1424,79);
			pushFollow(FOLLOW_ws_in_sass_each10094);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1424,82);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1424:82: ( cp_expression_list ( ( ws )? COMMA )? ( ws )? )+
			int cnt494=0;
			try { dbg.enterSubRule(494);

			loop494:
			while (true) {
				int alt494=2;
				try { dbg.enterDecision(494, decisionCanBacktrack[494]);

				int LA494_0 = input.LA(1);
				if ( (LA494_0==LBRACE) ) {
					int LA494_1 = input.LA(2);
					if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
						alt494=1;
					}

				}
				else if ( ((LA494_0 >= ANGLE && LA494_0 <= AT_SIGN)||(LA494_0 >= BOTTOMCENTER_SYM && LA494_0 <= BOTTOMRIGHT_SYM)||LA494_0==CHARSET_SYM||LA494_0==COUNTER_STYLE_SYM||LA494_0==DIMENSION||LA494_0==EMS||LA494_0==EXS||(LA494_0 >= FONT_FACE_SYM && LA494_0 <= FREQ)||LA494_0==GEN||(LA494_0 >= HASH && LA494_0 <= HASH_SYMBOL)||(LA494_0 >= IDENT && LA494_0 <= IMPORT_SYM)||(LA494_0 >= LBRACKET && LA494_0 <= LENGTH)||(LA494_0 >= LESS_AND && LA494_0 <= LESS_JS_STRING)||LA494_0==LPAREN||(LA494_0 >= MEDIA_SYM && LA494_0 <= MOZ_DOCUMENT_SYM)||LA494_0==NAMESPACE_SYM||(LA494_0 >= NOT && LA494_0 <= NUMBER)||(LA494_0 >= PAGE_SYM && LA494_0 <= PERCENTAGE_SYMBOL)||LA494_0==PLUS||(LA494_0 >= REM && LA494_0 <= RIGHTTOP_SYM)||(LA494_0 >= SASS_AT_ROOT && LA494_0 <= SASS_DEBUG)||(LA494_0 >= SASS_EACH && LA494_0 <= SASS_ELSE)||LA494_0==SASS_EXTEND||(LA494_0 >= SASS_FOR && LA494_0 <= SASS_FUNCTION)||(LA494_0 >= SASS_IF && LA494_0 <= SASS_MIXIN)||(LA494_0 >= SASS_RETURN && LA494_0 <= SASS_WHILE)||LA494_0==STRING||(LA494_0 >= TILDE && LA494_0 <= TOPRIGHT_SYM)||(LA494_0 >= URANGE && LA494_0 <= URI)||LA494_0==VARIABLE||LA494_0==WEBKIT_KEYFRAMES_SYM) ) {
					alt494=1;
				}

				} finally {dbg.exitDecision(494);}

				switch (alt494) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1424:83: cp_expression_list ( ( ws )? COMMA )? ( ws )?
					{
					dbg.location(1424,83);
					pushFollow(FOLLOW_cp_expression_list_in_sass_each10097);
					cp_expression_list();
					state._fsp--;
					if (state.failed) return;dbg.location(1424,102);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1424:102: ( ( ws )? COMMA )?
					int alt492=2;
					try { dbg.enterSubRule(492);
					try { dbg.enterDecision(492, decisionCanBacktrack[492]);

					try {
						isCyclicDecision = true;
						alt492 = dfa492.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(492);}

					switch (alt492) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1424:103: ( ws )? COMMA
							{
							dbg.location(1424,103);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1424:103: ( ws )?
							int alt491=2;
							try { dbg.enterSubRule(491);
							try { dbg.enterDecision(491, decisionCanBacktrack[491]);

							int LA491_0 = input.LA(1);
							if ( (LA491_0==COMMENT||LA491_0==NL||LA491_0==WS) ) {
								alt491=1;
							}
							} finally {dbg.exitDecision(491);}

							switch (alt491) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1424:103: ws
									{
									dbg.location(1424,103);
									pushFollow(FOLLOW_ws_in_sass_each10100);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(491);}
							dbg.location(1424,107);
							match(input,COMMA,FOLLOW_COMMA_in_sass_each10103); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(492);}
					dbg.location(1424,115);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1424:115: ( ws )?
					int alt493=2;
					try { dbg.enterSubRule(493);
					try { dbg.enterDecision(493, decisionCanBacktrack[493]);

					int LA493_0 = input.LA(1);
					if ( (LA493_0==COMMENT||LA493_0==NL||LA493_0==WS) ) {
						alt493=1;
					}
					} finally {dbg.exitDecision(493);}

					switch (alt493) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1424:115: ws
							{
							dbg.location(1424,115);
							pushFollow(FOLLOW_ws_in_sass_each10107);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(493);}

					}
					break;

				default :
					if ( cnt494 >= 1 ) break loop494;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(494, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt494++;
			}
			} finally {dbg.exitSubRule(494);}
			dbg.location(1424,122);
			pushFollow(FOLLOW_sass_control_block_in_sass_each10113);
			sass_control_block();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1425, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_each");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_each"



	// $ANTLR start "sass_each_variables"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1427:1: sass_each_variables : cp_variable ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? cp_variable )* ;
	public final void sass_each_variables() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_each_variables");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1427, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1428:5: ( cp_variable ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? cp_variable )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1429:5: cp_variable ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? cp_variable )*
			{
			dbg.location(1429,5);
			pushFollow(FOLLOW_cp_variable_in_sass_each_variables10134);
			cp_variable();
			state._fsp--;
			if (state.failed) return;dbg.location(1429,17);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1429:17: ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? cp_variable )*
			try { dbg.enterSubRule(497);

			loop497:
			while (true) {
				int alt497=2;
				try { dbg.enterDecision(497, decisionCanBacktrack[497]);

				try {
					isCyclicDecision = true;
					alt497 = dfa497.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(497);}

				switch (alt497) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1429:19: ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? cp_variable
					{
					dbg.location(1429,33);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1429:33: ( ws )?
					int alt495=2;
					try { dbg.enterSubRule(495);
					try { dbg.enterDecision(495, decisionCanBacktrack[495]);

					int LA495_0 = input.LA(1);
					if ( (LA495_0==COMMENT||LA495_0==NL||LA495_0==WS) ) {
						alt495=1;
					}
					} finally {dbg.exitDecision(495);}

					switch (alt495) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1429:33: ws
							{
							dbg.location(1429,33);
							pushFollow(FOLLOW_ws_in_sass_each_variables10146);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(495);}
					dbg.location(1429,37);
					match(input,COMMA,FOLLOW_COMMA_in_sass_each_variables10149); if (state.failed) return;dbg.location(1429,43);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1429:43: ( ws )?
					int alt496=2;
					try { dbg.enterSubRule(496);
					try { dbg.enterDecision(496, decisionCanBacktrack[496]);

					int LA496_0 = input.LA(1);
					if ( (LA496_0==COMMENT||LA496_0==NL||LA496_0==WS) ) {
						alt496=1;
					}
					} finally {dbg.exitDecision(496);}

					switch (alt496) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1429:43: ws
							{
							dbg.location(1429,43);
							pushFollow(FOLLOW_ws_in_sass_each_variables10151);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(496);}
					dbg.location(1429,47);
					pushFollow(FOLLOW_cp_variable_in_sass_each_variables10154);
					cp_variable();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop497;
				}
			}
			} finally {dbg.exitSubRule(497);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1430, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_each_variables");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_each_variables"



	// $ANTLR start "sass_while"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1432:1: sass_while : SASS_WHILE ws sass_control_expression ( ws )? sass_control_block ;
	public final void sass_while() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_while");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1432, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1433:5: ( SASS_WHILE ws sass_control_expression ( ws )? sass_control_block )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1434:5: SASS_WHILE ws sass_control_expression ( ws )? sass_control_block
			{
			dbg.location(1434,5);
			match(input,SASS_WHILE,FOLLOW_SASS_WHILE_in_sass_while10179); if (state.failed) return;dbg.location(1434,16);
			pushFollow(FOLLOW_ws_in_sass_while10181);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1434,19);
			pushFollow(FOLLOW_sass_control_expression_in_sass_while10183);
			sass_control_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(1434,43);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1434:43: ( ws )?
			int alt498=2;
			try { dbg.enterSubRule(498);
			try { dbg.enterDecision(498, decisionCanBacktrack[498]);

			int LA498_0 = input.LA(1);
			if ( (LA498_0==COMMENT||LA498_0==NL||LA498_0==WS) ) {
				alt498=1;
			}
			} finally {dbg.exitDecision(498);}

			switch (alt498) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1434:43: ws
					{
					dbg.location(1434,43);
					pushFollow(FOLLOW_ws_in_sass_while10185);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(498);}
			dbg.location(1434,47);
			pushFollow(FOLLOW_sass_control_block_in_sass_while10188);
			sass_control_block();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1435, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_while");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_while"



	// $ANTLR start "sass_control_block"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1437:1: sass_control_block : LBRACE ( ws )? ( declarations )? RBRACE ;
	public final void sass_control_block() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_control_block");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1437, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1438:5: ( LBRACE ( ws )? ( declarations )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1439:5: LBRACE ( ws )? ( declarations )? RBRACE
			{
			dbg.location(1439,5);
			match(input,LBRACE,FOLLOW_LBRACE_in_sass_control_block10209); if (state.failed) return;dbg.location(1439,12);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1439:12: ( ws )?
			int alt499=2;
			try { dbg.enterSubRule(499);
			try { dbg.enterDecision(499, decisionCanBacktrack[499]);

			int LA499_0 = input.LA(1);
			if ( (LA499_0==COMMENT||LA499_0==NL||LA499_0==WS) ) {
				alt499=1;
			}
			} finally {dbg.exitDecision(499);}

			switch (alt499) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1439:12: ws
					{
					dbg.location(1439,12);
					pushFollow(FOLLOW_ws_in_sass_control_block10211);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(499);}
			dbg.location(1439,16);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1439:16: ( declarations )?
			int alt500=2;
			try { dbg.enterSubRule(500);
			try { dbg.enterDecision(500, decisionCanBacktrack[500]);

			int LA500_0 = input.LA(1);
			if ( ((LA500_0 >= AT_IDENT && LA500_0 <= AT_SIGN)||(LA500_0 >= BOTTOMCENTER_SYM && LA500_0 <= BOTTOMRIGHT_SYM)||(LA500_0 >= CHARSET_SYM && LA500_0 <= COLON)||LA500_0==COUNTER_STYLE_SYM||(LA500_0 >= DCOLON && LA500_0 <= DOT)||LA500_0==FONT_FACE_SYM||(LA500_0 >= GEN && LA500_0 <= GREATER)||(LA500_0 >= HASH && LA500_0 <= HASH_SYMBOL)||LA500_0==IDENT||LA500_0==IMPORT_SYM||LA500_0==LAYER_SYM||(LA500_0 >= LBRACKET && LA500_0 <= LEFTTOP_SYM)||LA500_0==LESS_AND||(LA500_0 >= MEDIA_SYM && LA500_0 <= MOZ_DOCUMENT_SYM)||LA500_0==NAMESPACE_SYM||LA500_0==PAGE_SYM||(LA500_0 >= PIPE && LA500_0 <= PLUS)||(LA500_0 >= RIGHTBOTTOM_SYM && LA500_0 <= RIGHTTOP_SYM)||(LA500_0 >= SASS_AT_ROOT && LA500_0 <= SASS_DEBUG)||(LA500_0 >= SASS_EACH && LA500_0 <= SASS_ELSE)||(LA500_0 >= SASS_ERROR && LA500_0 <= SASS_FUNCTION)||(LA500_0 >= SASS_IF && LA500_0 <= SASS_MIXIN)||(LA500_0 >= SASS_RETURN && LA500_0 <= SEMI)||LA500_0==STAR||LA500_0==SUPPORTS_SYM||LA500_0==TILDE||(LA500_0 >= TOPCENTER_SYM && LA500_0 <= TOPRIGHT_SYM)||LA500_0==VARIABLE||LA500_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt500=1;
			}
			} finally {dbg.exitDecision(500);}

			switch (alt500) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1439:16: declarations
					{
					dbg.location(1439,16);
					pushFollow(FOLLOW_declarations_in_sass_control_block10214);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(500);}
			dbg.location(1439,30);
			match(input,RBRACE,FOLLOW_RBRACE_in_sass_control_block10217); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1440, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_control_block");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_control_block"



	// $ANTLR start "sass_function_declaration"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1442:1: sass_function_declaration : SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? ( declarations )? RBRACE ;
	public final void sass_function_declaration() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_function_declaration");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1442, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1443:5: ( SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? ( declarations )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1448:5: SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? ( declarations )? RBRACE
			{
			dbg.location(1448,5);
			match(input,SASS_FUNCTION,FOLLOW_SASS_FUNCTION_in_sass_function_declaration10259); if (state.failed) return;dbg.location(1448,19);
			pushFollow(FOLLOW_ws_in_sass_function_declaration10261);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1448,22);
			pushFollow(FOLLOW_sass_function_name_in_sass_function_declaration10263);
			sass_function_name();
			state._fsp--;
			if (state.failed) return;dbg.location(1448,41);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1448:41: ( ws )?
			int alt501=2;
			try { dbg.enterSubRule(501);
			try { dbg.enterDecision(501, decisionCanBacktrack[501]);

			int LA501_0 = input.LA(1);
			if ( (LA501_0==COMMENT||LA501_0==NL||LA501_0==WS) ) {
				alt501=1;
			}
			} finally {dbg.exitDecision(501);}

			switch (alt501) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1448:41: ws
					{
					dbg.location(1448,41);
					pushFollow(FOLLOW_ws_in_sass_function_declaration10265);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(501);}
			dbg.location(1448,45);
			match(input,LPAREN,FOLLOW_LPAREN_in_sass_function_declaration10268); if (state.failed) return;dbg.location(1448,52);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1448:52: ( ws )?
			int alt502=2;
			try { dbg.enterSubRule(502);
			try { dbg.enterDecision(502, decisionCanBacktrack[502]);

			int LA502_0 = input.LA(1);
			if ( (LA502_0==COMMENT||LA502_0==NL||LA502_0==WS) ) {
				alt502=1;
			}
			} finally {dbg.exitDecision(502);}

			switch (alt502) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1448:52: ws
					{
					dbg.location(1448,52);
					pushFollow(FOLLOW_ws_in_sass_function_declaration10270);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(502);}
			dbg.location(1448,56);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1448:56: ( cp_args_list )?
			int alt503=2;
			try { dbg.enterSubRule(503);
			try { dbg.enterDecision(503, decisionCanBacktrack[503]);

			int LA503_0 = input.LA(1);
			if ( (LA503_0==AT_IDENT||(LA503_0 >= BOTTOMCENTER_SYM && LA503_0 <= BOTTOMRIGHT_SYM)||LA503_0==CHARSET_SYM||(LA503_0 >= COUNTER_STYLE_SYM && LA503_0 <= CP_DOTS)||LA503_0==FONT_FACE_SYM||LA503_0==IDENT||LA503_0==IMPORT_SYM||(LA503_0 >= LEFTBOTTOM_SYM && LA503_0 <= LEFTTOP_SYM)||LA503_0==LESS_REST||LA503_0==MEDIA_SYM||LA503_0==MOZ_DOCUMENT_SYM||LA503_0==NAMESPACE_SYM||LA503_0==PAGE_SYM||(LA503_0 >= RIGHTBOTTOM_SYM && LA503_0 <= RIGHTTOP_SYM)||(LA503_0 >= SASS_AT_ROOT && LA503_0 <= SASS_DEBUG)||(LA503_0 >= SASS_EACH && LA503_0 <= SASS_ELSE)||LA503_0==SASS_EXTEND||(LA503_0 >= SASS_FOR && LA503_0 <= SASS_FUNCTION)||(LA503_0 >= SASS_IF && LA503_0 <= SASS_MIXIN)||(LA503_0 >= SASS_RETURN && LA503_0 <= SASS_WHILE)||(LA503_0 >= TOPCENTER_SYM && LA503_0 <= TOPRIGHT_SYM)||LA503_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt503=1;
			}
			} finally {dbg.exitDecision(503);}

			switch (alt503) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1448:56: cp_args_list
					{
					dbg.location(1448,56);
					pushFollow(FOLLOW_cp_args_list_in_sass_function_declaration10273);
					cp_args_list();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(503);}
			dbg.location(1448,70);
			match(input,RPAREN,FOLLOW_RPAREN_in_sass_function_declaration10276); if (state.failed) return;dbg.location(1448,77);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1448:77: ( ws )?
			int alt504=2;
			try { dbg.enterSubRule(504);
			try { dbg.enterDecision(504, decisionCanBacktrack[504]);

			int LA504_0 = input.LA(1);
			if ( (LA504_0==COMMENT||LA504_0==NL||LA504_0==WS) ) {
				alt504=1;
			}
			} finally {dbg.exitDecision(504);}

			switch (alt504) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1448:77: ws
					{
					dbg.location(1448,77);
					pushFollow(FOLLOW_ws_in_sass_function_declaration10278);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(504);}
			dbg.location(1448,81);
			match(input,LBRACE,FOLLOW_LBRACE_in_sass_function_declaration10281); if (state.failed) return;dbg.location(1448,88);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1448:88: ( ws )?
			int alt505=2;
			try { dbg.enterSubRule(505);
			try { dbg.enterDecision(505, decisionCanBacktrack[505]);

			int LA505_0 = input.LA(1);
			if ( (LA505_0==COMMENT||LA505_0==NL||LA505_0==WS) ) {
				alt505=1;
			}
			} finally {dbg.exitDecision(505);}

			switch (alt505) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1448:88: ws
					{
					dbg.location(1448,88);
					pushFollow(FOLLOW_ws_in_sass_function_declaration10283);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(505);}
			dbg.location(1448,92);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1448:92: ( declarations )?
			int alt506=2;
			try { dbg.enterSubRule(506);
			try { dbg.enterDecision(506, decisionCanBacktrack[506]);

			int LA506_0 = input.LA(1);
			if ( ((LA506_0 >= AT_IDENT && LA506_0 <= AT_SIGN)||(LA506_0 >= BOTTOMCENTER_SYM && LA506_0 <= BOTTOMRIGHT_SYM)||(LA506_0 >= CHARSET_SYM && LA506_0 <= COLON)||LA506_0==COUNTER_STYLE_SYM||(LA506_0 >= DCOLON && LA506_0 <= DOT)||LA506_0==FONT_FACE_SYM||(LA506_0 >= GEN && LA506_0 <= GREATER)||(LA506_0 >= HASH && LA506_0 <= HASH_SYMBOL)||LA506_0==IDENT||LA506_0==IMPORT_SYM||LA506_0==LAYER_SYM||(LA506_0 >= LBRACKET && LA506_0 <= LEFTTOP_SYM)||LA506_0==LESS_AND||(LA506_0 >= MEDIA_SYM && LA506_0 <= MOZ_DOCUMENT_SYM)||LA506_0==NAMESPACE_SYM||LA506_0==PAGE_SYM||(LA506_0 >= PIPE && LA506_0 <= PLUS)||(LA506_0 >= RIGHTBOTTOM_SYM && LA506_0 <= RIGHTTOP_SYM)||(LA506_0 >= SASS_AT_ROOT && LA506_0 <= SASS_DEBUG)||(LA506_0 >= SASS_EACH && LA506_0 <= SASS_ELSE)||(LA506_0 >= SASS_ERROR && LA506_0 <= SASS_FUNCTION)||(LA506_0 >= SASS_IF && LA506_0 <= SASS_MIXIN)||(LA506_0 >= SASS_RETURN && LA506_0 <= SEMI)||LA506_0==STAR||LA506_0==SUPPORTS_SYM||LA506_0==TILDE||(LA506_0 >= TOPCENTER_SYM && LA506_0 <= TOPRIGHT_SYM)||LA506_0==VARIABLE||LA506_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt506=1;
			}
			} finally {dbg.exitDecision(506);}

			switch (alt506) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1448:92: declarations
					{
					dbg.location(1448,92);
					pushFollow(FOLLOW_declarations_in_sass_function_declaration10286);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(506);}
			dbg.location(1448,106);
			match(input,RBRACE,FOLLOW_RBRACE_in_sass_function_declaration10289); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1449, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_function_declaration");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_function_declaration"



	// $ANTLR start "sass_function_name"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1451:1: sass_function_name : IDENT ;
	public final void sass_function_name() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_function_name");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1451, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1452:5: ( IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1453:5: IDENT
			{
			dbg.location(1453,5);
			match(input,IDENT,FOLLOW_IDENT_in_sass_function_name10310); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1454, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_function_name");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_function_name"



	// $ANTLR start "sass_function_return"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1456:1: sass_function_return : SASS_RETURN ws cp_expression ;
	public final void sass_function_return() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_function_return");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1456, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1457:5: ( SASS_RETURN ws cp_expression )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1458:5: SASS_RETURN ws cp_expression
			{
			dbg.location(1458,5);
			match(input,SASS_RETURN,FOLLOW_SASS_RETURN_in_sass_function_return10331); if (state.failed) return;dbg.location(1458,17);
			pushFollow(FOLLOW_ws_in_sass_function_return10333);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1458,20);
			pushFollow(FOLLOW_cp_expression_in_sass_function_return10335);
			cp_expression();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1459, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_function_return");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_function_return"



	// $ANTLR start "sass_content"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1461:1: sass_content : SASS_CONTENT ;
	public final void sass_content() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_content");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1461, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1462:5: ( SASS_CONTENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1463:5: SASS_CONTENT
			{
			dbg.location(1463,5);
			match(input,SASS_CONTENT,FOLLOW_SASS_CONTENT_in_sass_content10356); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1464, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_content");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_content"



	// $ANTLR start "less_import_types"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1466:1: less_import_types :{...}? IDENT ;
	public final void less_import_types() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_import_types");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1466, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1466:18: ({...}? IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1467:5: {...}? IDENT
			{
			dbg.location(1467,5);
			if ( !(evalPredicate(tokenNameIs(new String[]{"LESS", "CSS", "REFERENCE", "INLINE", "ONCE", "MULTIPLE"}),"tokenNameIs(new String[]{\"LESS\", \"CSS\", \"REFERENCE\", \"INLINE\", \"ONCE\", \"MULTIPLE\"})")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "less_import_types", "tokenNameIs(new String[]{\"LESS\", \"CSS\", \"REFERENCE\", \"INLINE\", \"ONCE\", \"MULTIPLE\"})");
			}dbg.location(1467,92);
			match(input,IDENT,FOLLOW_IDENT_in_less_import_types10375); if (state.failed) return;
			}

		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        input.consume();
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(1468, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_import_types");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_import_types"



	// $ANTLR start "less_when"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1473:1: less_when :{...}? IDENT ;
	public final void less_when() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_when");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1473, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1473:10: ({...}? IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1474:5: {...}? IDENT
			{
			dbg.location(1474,5);
			if ( !(evalPredicate(tokenNameEquals("when"),"tokenNameEquals(\"when\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "less_when", "tokenNameEquals(\"when\")");
			}dbg.location(1474,32);
			match(input,IDENT,FOLLOW_IDENT_in_less_when10398); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1475, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_when");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_when"



	// $ANTLR start "key_and"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1477:1: key_and :{...}? IDENT ;
	public final void key_and() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "key_and");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1477, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1477:8: ({...}? IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1478:5: {...}? IDENT
			{
			dbg.location(1478,5);
			if ( !(evalPredicate(tokenNameEquals("and"),"tokenNameEquals(\"and\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "key_and", "tokenNameEquals(\"and\")");
			}dbg.location(1478,31);
			match(input,IDENT,FOLLOW_IDENT_in_key_and10417); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1479, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "key_and");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "key_and"



	// $ANTLR start "key_or"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1481:1: key_or :{...}? IDENT ;
	public final void key_or() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "key_or");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1481, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1481:7: ({...}? IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1482:5: {...}? IDENT
			{
			dbg.location(1482,5);
			if ( !(evalPredicate(tokenNameEquals("or"),"tokenNameEquals(\"or\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "key_or", "tokenNameEquals(\"or\")");
			}dbg.location(1482,30);
			match(input,IDENT,FOLLOW_IDENT_in_key_or10435); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1483, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "key_or");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "key_or"



	// $ANTLR start "key_only"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1485:1: key_only :{...}? IDENT ;
	public final void key_only() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "key_only");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1485, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1485:9: ({...}? IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1486:5: {...}? IDENT
			{
			dbg.location(1486,5);
			if ( !(evalPredicate(tokenNameEquals("only"),"tokenNameEquals(\"only\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "key_only", "tokenNameEquals(\"only\")");
			}dbg.location(1486,32);
			match(input,IDENT,FOLLOW_IDENT_in_key_only10453); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1487, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "key_only");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "key_only"

	// $ANTLR start synpred1_Css3
	public final void synpred1_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:61: ( ( ws )? mediaQueryList )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:62: ( ws )? mediaQueryList
		{
		dbg.location(333,62);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:62: ( ws )?
		int alt507=2;
		try { dbg.enterSubRule(507);
		try { dbg.enterDecision(507, decisionCanBacktrack[507]);

		int LA507_0 = input.LA(1);
		if ( (LA507_0==COMMENT||LA507_0==NL||LA507_0==WS) ) {
			alt507=1;
		}
		} finally {dbg.exitDecision(507);}

		switch (alt507) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:62: ws
				{
				dbg.location(333,62);
				pushFollow(FOLLOW_ws_in_synpred1_Css3470);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(507);}
		dbg.location(333,66);
		pushFollow(FOLLOW_mediaQueryList_in_synpred1_Css3473);
		mediaQueryList();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred1_Css3

	// $ANTLR start synpred2_Css3
	public final void synpred2_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:115: ( ( ws )? mediaQueryList )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:116: ( ws )? mediaQueryList
		{
		dbg.location(336,116);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:116: ( ws )?
		int alt508=2;
		try { dbg.enterSubRule(508);
		try { dbg.enterDecision(508, decisionCanBacktrack[508]);

		int LA508_0 = input.LA(1);
		if ( (LA508_0==COMMENT||LA508_0==NL||LA508_0==WS) ) {
			alt508=1;
		}
		} finally {dbg.exitDecision(508);}

		switch (alt508) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:116: ws
				{
				dbg.location(336,116);
				pushFollow(FOLLOW_ws_in_synpred2_Css3540);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(508);}
		dbg.location(336,120);
		pushFollow(FOLLOW_mediaQueryList_in_synpred2_Css3543);
		mediaQueryList();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred2_Css3

	// $ANTLR start synpred3_Css3
	public final void synpred3_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:118: ( ( ws )? mediaQueryList )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:119: ( ws )? mediaQueryList
		{
		dbg.location(338,119);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:119: ( ws )?
		int alt509=2;
		try { dbg.enterSubRule(509);
		try { dbg.enterDecision(509, decisionCanBacktrack[509]);

		int LA509_0 = input.LA(1);
		if ( (LA509_0==COMMENT||LA509_0==NL||LA509_0==WS) ) {
			alt509=1;
		}
		} finally {dbg.exitDecision(509);}

		switch (alt509) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:119: ws
				{
				dbg.location(338,119);
				pushFollow(FOLLOW_ws_in_synpred3_Css3600);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(509);}
		dbg.location(338,123);
		pushFollow(FOLLOW_mediaQueryList_in_synpred3_Css3603);
		mediaQueryList();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred3_Css3

	// $ANTLR start synpred4_Css3
	public final void synpred4_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:27: ( ( ws )? SEMI )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:28: ( ws )? SEMI
		{
		dbg.location(410,28);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:28: ( ws )?
		int alt510=2;
		try { dbg.enterSubRule(510);
		try { dbg.enterDecision(510, decisionCanBacktrack[510]);

		int LA510_0 = input.LA(1);
		if ( (LA510_0==COMMENT||LA510_0==NL||LA510_0==WS) ) {
			alt510=1;
		}
		} finally {dbg.exitDecision(510);}

		switch (alt510) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:28: ws
				{
				dbg.location(410,28);
				pushFollow(FOLLOW_ws_in_synpred4_Css31170);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(510);}
		dbg.location(410,32);
		match(input,SEMI,FOLLOW_SEMI_in_synpred4_Css31173); if (state.failed) return;
		}

	}
	// $ANTLR end synpred4_Css3

	// $ANTLR start synpred5_Css3
	public final void synpred5_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:5: ( SASS_MIXIN | ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )
		int alt515=2;
		try { dbg.enterDecision(515, decisionCanBacktrack[515]);

		int LA515_0 = input.LA(1);
		if ( (LA515_0==SASS_MIXIN) ) {
			alt515=1;
		}
		else if ( (LA515_0==DOT||LA515_0==HASH) ) {
			alt515=2;
		}

		else {
			if (state.backtracking>0) {state.failed=true; return;}
			NoViableAltException nvae =
				new NoViableAltException("", 515, 0, input);
			dbg.recognitionException(nvae);
			throw nvae;
		}

		} finally {dbg.exitDecision(515);}

		switch (alt515) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:6: SASS_MIXIN
				{
				dbg.location(419,6);
				match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_synpred5_Css31271); if (state.failed) return;
				}
				break;
			case 2 :
				dbg.enterAlt(2);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:19: ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE )
				{
				dbg.location(419,19);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:19: ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE )
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:20: ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE
				{
				dbg.location(419,20);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:20: ( ( DOT IDENT ) | HASH )
				int alt511=2;
				try { dbg.enterSubRule(511);
				try { dbg.enterDecision(511, decisionCanBacktrack[511]);

				int LA511_0 = input.LA(1);
				if ( (LA511_0==DOT) ) {
					alt511=1;
				}
				else if ( (LA511_0==HASH) ) {
					alt511=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae =
						new NoViableAltException("", 511, 0, input);
					dbg.recognitionException(nvae);
					throw nvae;
				}

				} finally {dbg.exitDecision(511);}

				switch (alt511) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:21: ( DOT IDENT )
						{
						dbg.location(419,21);
						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:21: ( DOT IDENT )
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:22: DOT IDENT
						{
						dbg.location(419,22);
						match(input,DOT,FOLLOW_DOT_in_synpred5_Css31278); if (state.failed) return;dbg.location(419,26);
						match(input,IDENT,FOLLOW_IDENT_in_synpred5_Css31280); if (state.failed) return;
						}

						}
						break;
					case 2 :
						dbg.enterAlt(2);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:35: HASH
						{
						dbg.location(419,35);
						match(input,HASH,FOLLOW_HASH_in_synpred5_Css31285); if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(511);}
				dbg.location(419,41);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:41: ( ws )?
				int alt512=2;
				try { dbg.enterSubRule(512);
				try { dbg.enterDecision(512, decisionCanBacktrack[512]);

				int LA512_0 = input.LA(1);
				if ( (LA512_0==COMMENT||LA512_0==NL||LA512_0==WS) ) {
					alt512=1;
				}
				} finally {dbg.exitDecision(512);}

				switch (alt512) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:41: ws
						{
						dbg.location(419,41);
						pushFollow(FOLLOW_ws_in_synpred5_Css31288);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(512);}
				dbg.location(419,45);
				match(input,LPAREN,FOLLOW_LPAREN_in_synpred5_Css31291); if (state.failed) return;dbg.location(419,52);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:52: (~ RPAREN )*
				try { dbg.enterSubRule(513);

				loop513:
				while (true) {
					int alt513=2;
					try { dbg.enterDecision(513, decisionCanBacktrack[513]);

					int LA513_0 = input.LA(1);
					if ( ((LA513_0 >= A && LA513_0 <= RIGHTTOP_SYM)||(LA513_0 >= S && LA513_0 <= Z)) ) {
						alt513=1;
					}

					} finally {dbg.exitDecision(513);}

					switch (alt513) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
						{
						dbg.location(419,52);
						if ( (input.LA(1) >= A && input.LA(1) <= RIGHTTOP_SYM)||(input.LA(1) >= S && input.LA(1) <= Z) ) {
							input.consume();
							state.errorRecovery=false;
							state.failed=false;
						}
						else {
							if (state.backtracking>0) {state.failed=true; return;}
							MismatchedSetException mse = new MismatchedSetException(null,input);
							dbg.recognitionException(mse);
							throw mse;
						}
						}
						break;

					default :
						break loop513;
					}
				}
				} finally {dbg.exitSubRule(513);}
				dbg.location(419,63);
				match(input,RPAREN,FOLLOW_RPAREN_in_synpred5_Css31299); if (state.failed) return;dbg.location(419,70);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:70: (~ ( LBRACE | SEMI ) )*
				try { dbg.enterSubRule(514);

				loop514:
				while (true) {
					int alt514=2;
					try { dbg.enterDecision(514, decisionCanBacktrack[514]);

					int LA514_0 = input.LA(1);
					if ( ((LA514_0 >= A && LA514_0 <= LAYER_SYM)||(LA514_0 >= LBRACKET && LA514_0 <= SASS_WHILE)||(LA514_0 >= SOLIDUS && LA514_0 <= Z)) ) {
						alt514=1;
					}

					} finally {dbg.exitDecision(514);}

					switch (alt514) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
						{
						dbg.location(419,70);
						if ( (input.LA(1) >= A && input.LA(1) <= LAYER_SYM)||(input.LA(1) >= LBRACKET && input.LA(1) <= SASS_WHILE)||(input.LA(1) >= SOLIDUS && input.LA(1) <= Z) ) {
							input.consume();
							state.errorRecovery=false;
							state.failed=false;
						}
						else {
							if (state.backtracking>0) {state.failed=true; return;}
							MismatchedSetException mse = new MismatchedSetException(null,input);
							dbg.recognitionException(mse);
							throw mse;
						}
						}
						break;

					default :
						break loop514;
					}
				}
				} finally {dbg.exitSubRule(514);}
				dbg.location(419,86);
				match(input,LBRACE,FOLLOW_LBRACE_in_synpred5_Css31309); if (state.failed) return;
				}

				}
				break;

		}
	}
	// $ANTLR end synpred5_Css3

	// $ANTLR start synpred6_Css3
	public final void synpred6_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:421:7: ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:421:8: cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI
		{
		dbg.location(421,8);
		pushFollow(FOLLOW_cp_mixin_call_in_synpred6_Css31327);
		cp_mixin_call();
		state._fsp--;
		if (state.failed) return;dbg.location(421,22);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:421:22: ( ( ws )? IMPORTANT_SYM )?
		int alt517=2;
		try { dbg.enterSubRule(517);
		try { dbg.enterDecision(517, decisionCanBacktrack[517]);

		try {
			isCyclicDecision = true;
			alt517 = dfa517.predict(input);
		}
		catch (NoViableAltException nvae) {
			dbg.recognitionException(nvae);
			throw nvae;
		}
		} finally {dbg.exitDecision(517);}

		switch (alt517) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:421:23: ( ws )? IMPORTANT_SYM
				{
				dbg.location(421,23);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:421:23: ( ws )?
				int alt516=2;
				try { dbg.enterSubRule(516);
				try { dbg.enterDecision(516, decisionCanBacktrack[516]);

				int LA516_0 = input.LA(1);
				if ( (LA516_0==COMMENT||LA516_0==NL||LA516_0==WS) ) {
					alt516=1;
				}
				} finally {dbg.exitDecision(516);}

				switch (alt516) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:421:23: ws
						{
						dbg.location(421,23);
						pushFollow(FOLLOW_ws_in_synpred6_Css31330);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(516);}
				dbg.location(421,27);
				match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_synpred6_Css31333); if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(517);}
		dbg.location(421,43);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:421:43: ( ws )?
		int alt518=2;
		try { dbg.enterSubRule(518);
		try { dbg.enterDecision(518, decisionCanBacktrack[518]);

		int LA518_0 = input.LA(1);
		if ( (LA518_0==COMMENT||LA518_0==NL||LA518_0==WS) ) {
			alt518=1;
		}
		} finally {dbg.exitDecision(518);}

		switch (alt518) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:421:43: ws
				{
				dbg.location(421,43);
				pushFollow(FOLLOW_ws_in_synpred6_Css31337);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(518);}
		dbg.location(421,47);
		match(input,SEMI,FOLLOW_SEMI_in_synpred6_Css31340); if (state.failed) return;
		}

	}
	// $ANTLR end synpred6_Css3

	// $ANTLR start synpred7_Css3
	public final void synpred7_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:422:7: ( cp_mixin_call )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:422:8: cp_mixin_call
		{
		dbg.location(422,8);
		pushFollow(FOLLOW_cp_mixin_call_in_synpred7_Css31363);
		cp_mixin_call();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred7_Css3

	// $ANTLR start synpred8_Css3
	public final void synpred8_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:7: ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:8: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE
		{
		dbg.location(423,8);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:8: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup )
		int alt524=3;
		try { dbg.enterSubRule(524);
		try { dbg.enterDecision(524, decisionCanBacktrack[524]);

		try {
			isCyclicDecision = true;
			alt524 = dfa524.predict(input);
		}
		catch (NoViableAltException nvae) {
			dbg.recognitionException(nvae);
			throw nvae;
		}
		} finally {dbg.exitDecision(524);}

		switch (alt524) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:9: ( SASS_AT_ROOT ( ws selectorsGroup )? )
				{
				dbg.location(423,9);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:9: ( SASS_AT_ROOT ( ws selectorsGroup )? )
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:10: SASS_AT_ROOT ( ws selectorsGroup )?
				{
				dbg.location(423,10);
				match(input,SASS_AT_ROOT,FOLLOW_SASS_AT_ROOT_in_synpred8_Css31388); if (state.failed) return;dbg.location(423,23);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:23: ( ws selectorsGroup )?
				int alt519=2;
				try { dbg.enterSubRule(519);
				try { dbg.enterDecision(519, decisionCanBacktrack[519]);

				try {
					isCyclicDecision = true;
					alt519 = dfa519.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(519);}

				switch (alt519) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:24: ws selectorsGroup
						{
						dbg.location(423,24);
						pushFollow(FOLLOW_ws_in_synpred8_Css31391);
						ws();
						state._fsp--;
						if (state.failed) return;dbg.location(423,27);
						pushFollow(FOLLOW_selectorsGroup_in_synpred8_Css31393);
						selectorsGroup();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(519);}

				}

				}
				break;
			case 2 :
				dbg.enterAlt(2);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:48: ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN )
				{
				dbg.location(423,48);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:48: ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN )
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:49: SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN
				{
				dbg.location(423,49);
				match(input,SASS_AT_ROOT,FOLLOW_SASS_AT_ROOT_in_synpred8_Css31402); if (state.failed) return;dbg.location(423,62);
				pushFollow(FOLLOW_ws_in_synpred8_Css31404);
				ws();
				state._fsp--;
				if (state.failed) return;dbg.location(423,65);
				match(input,LPAREN,FOLLOW_LPAREN_in_synpred8_Css31406); if (state.failed) return;dbg.location(423,72);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:72: ( ws )?
				int alt520=2;
				try { dbg.enterSubRule(520);
				try { dbg.enterDecision(520, decisionCanBacktrack[520]);

				int LA520_0 = input.LA(1);
				if ( (LA520_0==COMMENT||LA520_0==NL||LA520_0==WS) ) {
					alt520=1;
				}
				} finally {dbg.exitDecision(520);}

				switch (alt520) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:72: ws
						{
						dbg.location(423,72);
						pushFollow(FOLLOW_ws_in_synpred8_Css31408);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(520);}
				dbg.location(423,76);
				match(input,IDENT,FOLLOW_IDENT_in_synpred8_Css31411); if (state.failed) return;dbg.location(423,82);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:82: ( ws )?
				int alt521=2;
				try { dbg.enterSubRule(521);
				try { dbg.enterDecision(521, decisionCanBacktrack[521]);

				int LA521_0 = input.LA(1);
				if ( (LA521_0==COMMENT||LA521_0==NL||LA521_0==WS) ) {
					alt521=1;
				}
				} finally {dbg.exitDecision(521);}

				switch (alt521) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:82: ws
						{
						dbg.location(423,82);
						pushFollow(FOLLOW_ws_in_synpred8_Css31413);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(521);}
				dbg.location(423,86);
				match(input,COLON,FOLLOW_COLON_in_synpred8_Css31416); if (state.failed) return;dbg.location(423,92);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:92: ( ws )?
				int alt522=2;
				try { dbg.enterSubRule(522);
				try { dbg.enterDecision(522, decisionCanBacktrack[522]);

				int LA522_0 = input.LA(1);
				if ( (LA522_0==COMMENT||LA522_0==NL||LA522_0==WS) ) {
					alt522=1;
				}
				} finally {dbg.exitDecision(522);}

				switch (alt522) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:92: ws
						{
						dbg.location(423,92);
						pushFollow(FOLLOW_ws_in_synpred8_Css31418);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(522);}
				dbg.location(423,96);
				match(input,IDENT,FOLLOW_IDENT_in_synpred8_Css31421); if (state.failed) return;dbg.location(423,102);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:102: ( ws )?
				int alt523=2;
				try { dbg.enterSubRule(523);
				try { dbg.enterDecision(523, decisionCanBacktrack[523]);

				int LA523_0 = input.LA(1);
				if ( (LA523_0==COMMENT||LA523_0==NL||LA523_0==WS) ) {
					alt523=1;
				}
				} finally {dbg.exitDecision(523);}

				switch (alt523) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:102: ws
						{
						dbg.location(423,102);
						pushFollow(FOLLOW_ws_in_synpred8_Css31423);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(523);}
				dbg.location(423,106);
				match(input,RPAREN,FOLLOW_RPAREN_in_synpred8_Css31426); if (state.failed) return;
				}

				}
				break;
			case 3 :
				dbg.enterAlt(3);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:116: selectorsGroup
				{
				dbg.location(423,116);
				pushFollow(FOLLOW_selectorsGroup_in_synpred8_Css31431);
				selectorsGroup();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(524);}
		dbg.location(423,132);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:132: ( ws )?
		int alt525=2;
		try { dbg.enterSubRule(525);
		try { dbg.enterDecision(525, decisionCanBacktrack[525]);

		int LA525_0 = input.LA(1);
		if ( (LA525_0==COMMENT||LA525_0==NL||LA525_0==WS) ) {
			alt525=1;
		}
		} finally {dbg.exitDecision(525);}

		switch (alt525) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:132: ws
				{
				dbg.location(423,132);
				pushFollow(FOLLOW_ws_in_synpred8_Css31434);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(525);}
		dbg.location(423,136);
		match(input,LBRACE,FOLLOW_LBRACE_in_synpred8_Css31437); if (state.failed) return;
		}

	}
	// $ANTLR end synpred8_Css3

	// $ANTLR start synpred9_Css3
	public final void synpred9_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:424:7: ( propertyDeclaration )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:424:8: propertyDeclaration
		{
		dbg.location(424,8);
		pushFollow(FOLLOW_propertyDeclaration_in_synpred9_Css31449);
		propertyDeclaration();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred9_Css3

	// $ANTLR start synpred10_Css3
	public final void synpred10_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:439:17: ( ( ws )? COMMA )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:439:18: ( ws )? COMMA
		{
		dbg.location(439,18);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:439:18: ( ws )?
		int alt526=2;
		try { dbg.enterSubRule(526);
		try { dbg.enterDecision(526, decisionCanBacktrack[526]);

		int LA526_0 = input.LA(1);
		if ( (LA526_0==COMMENT||LA526_0==NL||LA526_0==WS) ) {
			alt526=1;
		}
		} finally {dbg.exitDecision(526);}

		switch (alt526) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:439:18: ws
				{
				dbg.location(439,18);
				pushFollow(FOLLOW_ws_in_synpred10_Css31564);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(526);}
		dbg.location(439,22);
		match(input,COMMA,FOLLOW_COMMA_in_synpred10_Css31567); if (state.failed) return;
		}

	}
	// $ANTLR end synpred10_Css3

	// $ANTLR start synpred11_Css3
	public final void synpred11_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:44: ( ( ws )? key_and )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:45: ( ws )? key_and
		{
		dbg.location(444,45);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:45: ( ws )?
		int alt527=2;
		try { dbg.enterSubRule(527);
		try { dbg.enterDecision(527, decisionCanBacktrack[527]);

		int LA527_0 = input.LA(1);
		if ( (LA527_0==COMMENT||LA527_0==NL||LA527_0==WS) ) {
			alt527=1;
		}
		} finally {dbg.exitDecision(527);}

		switch (alt527) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:45: ws
				{
				dbg.location(444,45);
				pushFollow(FOLLOW_ws_in_synpred11_Css31611);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(527);}
		dbg.location(444,49);
		pushFollow(FOLLOW_key_and_in_synpred11_Css31614);
		key_and();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred11_Css3

	// $ANTLR start synpred12_Css3
	public final void synpred12_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:24: ( ( ws )? key_and )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:25: ( ws )? key_and
		{
		dbg.location(445,25);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:25: ( ws )?
		int alt528=2;
		try { dbg.enterSubRule(528);
		try { dbg.enterDecision(528, decisionCanBacktrack[528]);

		int LA528_0 = input.LA(1);
		if ( (LA528_0==COMMENT||LA528_0==NL||LA528_0==WS) ) {
			alt528=1;
		}
		} finally {dbg.exitDecision(528);}

		switch (alt528) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:25: ws
				{
				dbg.location(445,25);
				pushFollow(FOLLOW_ws_in_synpred12_Css31641);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(528);}
		dbg.location(445,29);
		pushFollow(FOLLOW_key_and_in_synpred12_Css31644);
		key_and();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred12_Css3

	// $ANTLR start synpred13_Css3
	public final void synpred13_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:5: ( LPAREN )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:6: LPAREN
		{
		dbg.location(459,6);
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred13_Css31726); if (state.failed) return;
		}

	}
	// $ANTLR end synpred13_Css3

	// $ANTLR start synpred14_Css3
	public final void synpred14_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:460:7: ( HASH )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:460:8: HASH
		{
		dbg.location(460,8);
		match(input,HASH,FOLLOW_HASH_in_synpred14_Css31755); if (state.failed) return;
		}

	}
	// $ANTLR end synpred14_Css3

	// $ANTLR start synpred15_Css3
	public final void synpred15_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:480:22: ( ( ws )? SEMI )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:480:23: ( ws )? SEMI
		{
		dbg.location(480,23);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:480:23: ( ws )?
		int alt529=2;
		try { dbg.enterSubRule(529);
		try { dbg.enterDecision(529, decisionCanBacktrack[529]);

		int LA529_0 = input.LA(1);
		if ( (LA529_0==COMMENT||LA529_0==NL||LA529_0==WS) ) {
			alt529=1;
		}
		} finally {dbg.exitDecision(529);}

		switch (alt529) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:480:23: ws
				{
				dbg.location(480,23);
				pushFollow(FOLLOW_ws_in_synpred15_Css31901);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(529);}
		dbg.location(480,27);
		match(input,SEMI,FOLLOW_SEMI_in_synpred15_Css31904); if (state.failed) return;
		}

	}
	// $ANTLR end synpred15_Css3

	// $ANTLR start synpred16_Css3
	public final void synpred16_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:488:9: ( SASS_MIXIN | ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )
		int alt534=2;
		try { dbg.enterDecision(534, decisionCanBacktrack[534]);

		int LA534_0 = input.LA(1);
		if ( (LA534_0==SASS_MIXIN) ) {
			alt534=1;
		}
		else if ( (LA534_0==DOT||LA534_0==HASH) ) {
			alt534=2;
		}

		else {
			if (state.backtracking>0) {state.failed=true; return;}
			NoViableAltException nvae =
				new NoViableAltException("", 534, 0, input);
			dbg.recognitionException(nvae);
			throw nvae;
		}

		} finally {dbg.exitDecision(534);}

		switch (alt534) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:488:10: SASS_MIXIN
				{
				dbg.location(488,10);
				match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_synpred16_Css31979); if (state.failed) return;
				}
				break;
			case 2 :
				dbg.enterAlt(2);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:488:23: ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE )
				{
				dbg.location(488,23);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:488:23: ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE )
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:488:24: ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE
				{
				dbg.location(488,24);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:488:24: ( ( DOT IDENT ) | HASH )
				int alt530=2;
				try { dbg.enterSubRule(530);
				try { dbg.enterDecision(530, decisionCanBacktrack[530]);

				int LA530_0 = input.LA(1);
				if ( (LA530_0==DOT) ) {
					alt530=1;
				}
				else if ( (LA530_0==HASH) ) {
					alt530=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae =
						new NoViableAltException("", 530, 0, input);
					dbg.recognitionException(nvae);
					throw nvae;
				}

				} finally {dbg.exitDecision(530);}

				switch (alt530) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:488:25: ( DOT IDENT )
						{
						dbg.location(488,25);
						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:488:25: ( DOT IDENT )
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:488:26: DOT IDENT
						{
						dbg.location(488,26);
						match(input,DOT,FOLLOW_DOT_in_synpred16_Css31986); if (state.failed) return;dbg.location(488,30);
						match(input,IDENT,FOLLOW_IDENT_in_synpred16_Css31988); if (state.failed) return;
						}

						}
						break;
					case 2 :
						dbg.enterAlt(2);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:488:39: HASH
						{
						dbg.location(488,39);
						match(input,HASH,FOLLOW_HASH_in_synpred16_Css31993); if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(530);}
				dbg.location(488,45);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:488:45: ( ws )?
				int alt531=2;
				try { dbg.enterSubRule(531);
				try { dbg.enterDecision(531, decisionCanBacktrack[531]);

				int LA531_0 = input.LA(1);
				if ( (LA531_0==COMMENT||LA531_0==NL||LA531_0==WS) ) {
					alt531=1;
				}
				} finally {dbg.exitDecision(531);}

				switch (alt531) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:488:45: ws
						{
						dbg.location(488,45);
						pushFollow(FOLLOW_ws_in_synpred16_Css31996);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(531);}
				dbg.location(488,49);
				match(input,LPAREN,FOLLOW_LPAREN_in_synpred16_Css31999); if (state.failed) return;dbg.location(488,56);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:488:56: (~ RPAREN )*
				try { dbg.enterSubRule(532);

				loop532:
				while (true) {
					int alt532=2;
					try { dbg.enterDecision(532, decisionCanBacktrack[532]);

					int LA532_0 = input.LA(1);
					if ( ((LA532_0 >= A && LA532_0 <= RIGHTTOP_SYM)||(LA532_0 >= S && LA532_0 <= Z)) ) {
						alt532=1;
					}

					} finally {dbg.exitDecision(532);}

					switch (alt532) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
						{
						dbg.location(488,56);
						if ( (input.LA(1) >= A && input.LA(1) <= RIGHTTOP_SYM)||(input.LA(1) >= S && input.LA(1) <= Z) ) {
							input.consume();
							state.errorRecovery=false;
							state.failed=false;
						}
						else {
							if (state.backtracking>0) {state.failed=true; return;}
							MismatchedSetException mse = new MismatchedSetException(null,input);
							dbg.recognitionException(mse);
							throw mse;
						}
						}
						break;

					default :
						break loop532;
					}
				}
				} finally {dbg.exitSubRule(532);}
				dbg.location(488,67);
				match(input,RPAREN,FOLLOW_RPAREN_in_synpred16_Css32007); if (state.failed) return;dbg.location(488,74);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:488:74: (~ ( LBRACE | RBRACE | SEMI ) )*
				try { dbg.enterSubRule(533);

				loop533:
				while (true) {
					int alt533=2;
					try { dbg.enterDecision(533, decisionCanBacktrack[533]);

					int LA533_0 = input.LA(1);
					if ( ((LA533_0 >= A && LA533_0 <= LAYER_SYM)||(LA533_0 >= LBRACKET && LA533_0 <= R)||(LA533_0 >= RBRACKET && LA533_0 <= SASS_WHILE)||(LA533_0 >= SOLIDUS && LA533_0 <= Z)) ) {
						alt533=1;
					}

					} finally {dbg.exitDecision(533);}

					switch (alt533) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
						{
						dbg.location(488,74);
						if ( (input.LA(1) >= A && input.LA(1) <= LAYER_SYM)||(input.LA(1) >= LBRACKET && input.LA(1) <= R)||(input.LA(1) >= RBRACKET && input.LA(1) <= SASS_WHILE)||(input.LA(1) >= SOLIDUS && input.LA(1) <= Z) ) {
							input.consume();
							state.errorRecovery=false;
							state.failed=false;
						}
						else {
							if (state.backtracking>0) {state.failed=true; return;}
							MismatchedSetException mse = new MismatchedSetException(null,input);
							dbg.recognitionException(mse);
							throw mse;
						}
						}
						break;

					default :
						break loop533;
					}
				}
				} finally {dbg.exitSubRule(533);}
				dbg.location(488,97);
				match(input,LBRACE,FOLLOW_LBRACE_in_synpred16_Css32019); if (state.failed) return;
				}

				}
				break;

		}
	}
	// $ANTLR end synpred16_Css3

	// $ANTLR start synpred17_Css3
	public final void synpred17_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:490:11: ( cp_mixin_call ( ws )? SEMI )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:490:12: cp_mixin_call ( ws )? SEMI
		{
		dbg.location(490,12);
		pushFollow(FOLLOW_cp_mixin_call_in_synpred17_Css32045);
		cp_mixin_call();
		state._fsp--;
		if (state.failed) return;dbg.location(490,26);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:490:26: ( ws )?
		int alt535=2;
		try { dbg.enterSubRule(535);
		try { dbg.enterDecision(535, decisionCanBacktrack[535]);

		int LA535_0 = input.LA(1);
		if ( (LA535_0==COMMENT||LA535_0==NL||LA535_0==WS) ) {
			alt535=1;
		}
		} finally {dbg.exitDecision(535);}

		switch (alt535) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:490:26: ws
				{
				dbg.location(490,26);
				pushFollow(FOLLOW_ws_in_synpred17_Css32047);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(535);}
		dbg.location(490,30);
		match(input,SEMI,FOLLOW_SEMI_in_synpred17_Css32050); if (state.failed) return;
		}

	}
	// $ANTLR end synpred17_Css3

	// $ANTLR start synpred18_Css3
	public final void synpred18_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:491:11: ( cp_mixin_call )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:491:12: cp_mixin_call
		{
		dbg.location(491,12);
		pushFollow(FOLLOW_cp_mixin_call_in_synpred18_Css32069);
		cp_mixin_call();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred18_Css3

	// $ANTLR start synpred19_Css3
	public final void synpred19_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:493:11: ( cp_variable ( ws )? COLON )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:493:12: cp_variable ( ws )? COLON
		{
		dbg.location(493,12);
		pushFollow(FOLLOW_cp_variable_in_synpred19_Css32097);
		cp_variable();
		state._fsp--;
		if (state.failed) return;dbg.location(493,24);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:493:24: ( ws )?
		int alt536=2;
		try { dbg.enterSubRule(536);
		try { dbg.enterDecision(536, decisionCanBacktrack[536]);

		int LA536_0 = input.LA(1);
		if ( (LA536_0==COMMENT||LA536_0==NL||LA536_0==WS) ) {
			alt536=1;
		}
		} finally {dbg.exitDecision(536);}

		switch (alt536) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:493:24: ws
				{
				dbg.location(493,24);
				pushFollow(FOLLOW_ws_in_synpred19_Css32099);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(536);}
		dbg.location(493,28);
		match(input,COLON,FOLLOW_COLON_in_synpred19_Css32102); if (state.failed) return;
		}

	}
	// $ANTLR end synpred19_Css3

	// $ANTLR start synpred20_Css3
	public final void synpred20_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:494:11: ( sass_map )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:494:12: sass_map
		{
		dbg.location(494,12);
		pushFollow(FOLLOW_sass_map_in_synpred20_Css32119);
		sass_map();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred20_Css3

	// $ANTLR start synpred21_Css3
	public final void synpred21_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:2: ( LPAREN ( ws )? supportsCondition ( ws )? RPAREN )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:2: LPAREN ( ws )? supportsCondition ( ws )? RPAREN
		{
		dbg.location(534,2);
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred21_Css32409); if (state.failed) return;dbg.location(534,9);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:9: ( ws )?
		int alt537=2;
		try { dbg.enterSubRule(537);
		try { dbg.enterDecision(537, decisionCanBacktrack[537]);

		int LA537_0 = input.LA(1);
		if ( (LA537_0==COMMENT||LA537_0==NL||LA537_0==WS) ) {
			alt537=1;
		}
		} finally {dbg.exitDecision(537);}

		switch (alt537) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:9: ws
				{
				dbg.location(534,9);
				pushFollow(FOLLOW_ws_in_synpred21_Css32411);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(537);}
		dbg.location(534,13);
		pushFollow(FOLLOW_supportsCondition_in_synpred21_Css32414);
		supportsCondition();
		state._fsp--;
		if (state.failed) return;dbg.location(534,31);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:31: ( ws )?
		int alt538=2;
		try { dbg.enterSubRule(538);
		try { dbg.enterDecision(538, decisionCanBacktrack[538]);

		int LA538_0 = input.LA(1);
		if ( (LA538_0==COMMENT||LA538_0==NL||LA538_0==WS) ) {
			alt538=1;
		}
		} finally {dbg.exitDecision(538);}

		switch (alt538) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:31: ws
				{
				dbg.location(534,31);
				pushFollow(FOLLOW_ws_in_synpred21_Css32416);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(538);}
		dbg.location(534,35);
		match(input,RPAREN,FOLLOW_RPAREN_in_synpred21_Css32419); if (state.failed) return;
		}

	}
	// $ANTLR end synpred21_Css3

	// $ANTLR start synpred22_Css3
	public final void synpred22_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:535:4: ( supportsFeature )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:535:4: supportsFeature
		{
		dbg.location(535,4);
		pushFollow(FOLLOW_supportsFeature_in_synpred22_Css32424);
		supportsFeature();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred22_Css3

	// $ANTLR start synpred23_Css3
	public final void synpred23_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:738:27: ( ( ws )? COMMA )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:738:28: ( ws )? COMMA
		{
		dbg.location(738,28);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:738:28: ( ws )?
		int alt539=2;
		try { dbg.enterSubRule(539);
		try { dbg.enterDecision(539, decisionCanBacktrack[539]);

		int LA539_0 = input.LA(1);
		if ( (LA539_0==COMMENT||LA539_0==NL||LA539_0==WS) ) {
			alt539=1;
		}
		} finally {dbg.exitDecision(539);}

		switch (alt539) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:738:28: ws
				{
				dbg.location(738,28);
				pushFollow(FOLLOW_ws_in_synpred23_Css33909);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(539);}
		dbg.location(738,32);
		match(input,COMMA,FOLLOW_COMMA_in_synpred23_Css33912); if (state.failed) return;
		}

	}
	// $ANTLR end synpred23_Css3

	// $ANTLR start synpred24_Css3
	public final void synpred24_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:746:41: ( function )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:746:42: function
		{
		dbg.location(746,42);
		pushFollow(FOLLOW_function_in_synpred24_Css34003);
		function();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred24_Css3

	// $ANTLR start synpred25_Css3
	public final void synpred25_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:774:5: ( cp_variable_declaration )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:774:6: cp_variable_declaration
		{
		dbg.location(774,6);
		pushFollow(FOLLOW_cp_variable_declaration_in_synpred25_Css34303);
		cp_variable_declaration();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred25_Css3

	// $ANTLR start synpred26_Css3
	public final void synpred26_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:775:7: ( sass_map )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:775:8: sass_map
		{
		dbg.location(775,8);
		pushFollow(FOLLOW_sass_map_in_synpred26_Css34315);
		sass_map();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred26_Css3

	// $ANTLR start synpred27_Css3
	public final void synpred27_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:776:7: ( sass_nested_properties )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:776:8: sass_nested_properties
		{
		dbg.location(776,8);
		pushFollow(FOLLOW_sass_nested_properties_in_synpred27_Css34328);
		sass_nested_properties();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred27_Css3

	// $ANTLR start synpred28_Css3
	public final void synpred28_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:777:7: ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:777:8: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE
		{
		dbg.location(777,8);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:777:8: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup )
		int alt545=3;
		try { dbg.enterSubRule(545);
		try { dbg.enterDecision(545, decisionCanBacktrack[545]);

		try {
			isCyclicDecision = true;
			alt545 = dfa545.predict(input);
		}
		catch (NoViableAltException nvae) {
			dbg.recognitionException(nvae);
			throw nvae;
		}
		} finally {dbg.exitDecision(545);}

		switch (alt545) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:777:9: ( SASS_AT_ROOT ( ws selectorsGroup )? )
				{
				dbg.location(777,9);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:777:9: ( SASS_AT_ROOT ( ws selectorsGroup )? )
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:777:10: SASS_AT_ROOT ( ws selectorsGroup )?
				{
				dbg.location(777,10);
				match(input,SASS_AT_ROOT,FOLLOW_SASS_AT_ROOT_in_synpred28_Css34342); if (state.failed) return;dbg.location(777,23);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:777:23: ( ws selectorsGroup )?
				int alt540=2;
				try { dbg.enterSubRule(540);
				try { dbg.enterDecision(540, decisionCanBacktrack[540]);

				try {
					isCyclicDecision = true;
					alt540 = dfa540.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(540);}

				switch (alt540) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:777:24: ws selectorsGroup
						{
						dbg.location(777,24);
						pushFollow(FOLLOW_ws_in_synpred28_Css34345);
						ws();
						state._fsp--;
						if (state.failed) return;dbg.location(777,27);
						pushFollow(FOLLOW_selectorsGroup_in_synpred28_Css34347);
						selectorsGroup();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(540);}

				}

				}
				break;
			case 2 :
				dbg.enterAlt(2);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:777:48: ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN )
				{
				dbg.location(777,48);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:777:48: ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN )
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:777:49: SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN
				{
				dbg.location(777,49);
				match(input,SASS_AT_ROOT,FOLLOW_SASS_AT_ROOT_in_synpred28_Css34356); if (state.failed) return;dbg.location(777,62);
				pushFollow(FOLLOW_ws_in_synpred28_Css34358);
				ws();
				state._fsp--;
				if (state.failed) return;dbg.location(777,65);
				match(input,LPAREN,FOLLOW_LPAREN_in_synpred28_Css34360); if (state.failed) return;dbg.location(777,72);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:777:72: ( ws )?
				int alt541=2;
				try { dbg.enterSubRule(541);
				try { dbg.enterDecision(541, decisionCanBacktrack[541]);

				int LA541_0 = input.LA(1);
				if ( (LA541_0==COMMENT||LA541_0==NL||LA541_0==WS) ) {
					alt541=1;
				}
				} finally {dbg.exitDecision(541);}

				switch (alt541) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:777:72: ws
						{
						dbg.location(777,72);
						pushFollow(FOLLOW_ws_in_synpred28_Css34362);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(541);}
				dbg.location(777,76);
				match(input,IDENT,FOLLOW_IDENT_in_synpred28_Css34365); if (state.failed) return;dbg.location(777,82);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:777:82: ( ws )?
				int alt542=2;
				try { dbg.enterSubRule(542);
				try { dbg.enterDecision(542, decisionCanBacktrack[542]);

				int LA542_0 = input.LA(1);
				if ( (LA542_0==COMMENT||LA542_0==NL||LA542_0==WS) ) {
					alt542=1;
				}
				} finally {dbg.exitDecision(542);}

				switch (alt542) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:777:82: ws
						{
						dbg.location(777,82);
						pushFollow(FOLLOW_ws_in_synpred28_Css34367);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(542);}
				dbg.location(777,86);
				match(input,COLON,FOLLOW_COLON_in_synpred28_Css34370); if (state.failed) return;dbg.location(777,92);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:777:92: ( ws )?
				int alt543=2;
				try { dbg.enterSubRule(543);
				try { dbg.enterDecision(543, decisionCanBacktrack[543]);

				int LA543_0 = input.LA(1);
				if ( (LA543_0==COMMENT||LA543_0==NL||LA543_0==WS) ) {
					alt543=1;
				}
				} finally {dbg.exitDecision(543);}

				switch (alt543) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:777:92: ws
						{
						dbg.location(777,92);
						pushFollow(FOLLOW_ws_in_synpred28_Css34372);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(543);}
				dbg.location(777,96);
				match(input,IDENT,FOLLOW_IDENT_in_synpred28_Css34375); if (state.failed) return;dbg.location(777,102);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:777:102: ( ws )?
				int alt544=2;
				try { dbg.enterSubRule(544);
				try { dbg.enterDecision(544, decisionCanBacktrack[544]);

				int LA544_0 = input.LA(1);
				if ( (LA544_0==COMMENT||LA544_0==NL||LA544_0==WS) ) {
					alt544=1;
				}
				} finally {dbg.exitDecision(544);}

				switch (alt544) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:777:102: ws
						{
						dbg.location(777,102);
						pushFollow(FOLLOW_ws_in_synpred28_Css34377);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(544);}
				dbg.location(777,106);
				match(input,RPAREN,FOLLOW_RPAREN_in_synpred28_Css34380); if (state.failed) return;
				}

				}
				break;
			case 3 :
				dbg.enterAlt(3);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:777:116: selectorsGroup
				{
				dbg.location(777,116);
				pushFollow(FOLLOW_selectorsGroup_in_synpred28_Css34385);
				selectorsGroup();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(545);}
		dbg.location(777,132);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:777:132: ( ws )?
		int alt546=2;
		try { dbg.enterSubRule(546);
		try { dbg.enterDecision(546, decisionCanBacktrack[546]);

		int LA546_0 = input.LA(1);
		if ( (LA546_0==COMMENT||LA546_0==NL||LA546_0==WS) ) {
			alt546=1;
		}
		} finally {dbg.exitDecision(546);}

		switch (alt546) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:777:132: ws
				{
				dbg.location(777,132);
				pushFollow(FOLLOW_ws_in_synpred28_Css34388);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(546);}
		dbg.location(777,136);
		match(input,LBRACE,FOLLOW_LBRACE_in_synpred28_Css34391); if (state.failed) return;
		}

	}
	// $ANTLR end synpred28_Css3

	// $ANTLR start synpred29_Css3
	public final void synpred29_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:778:7: ( propertyDeclaration )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:778:8: propertyDeclaration
		{
		dbg.location(778,8);
		pushFollow(FOLLOW_propertyDeclaration_in_synpred29_Css34403);
		propertyDeclaration();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred29_Css3

	// $ANTLR start synpred30_Css3
	public final void synpred30_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:780:7: ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:780:8: property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI )
		{
		dbg.location(780,8);
		pushFollow(FOLLOW_property_in_synpred30_Css34420);
		property();
		state._fsp--;
		if (state.failed) return;dbg.location(780,17);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:780:17: ( ws )?
		int alt547=2;
		try { dbg.enterSubRule(547);
		try { dbg.enterDecision(547, decisionCanBacktrack[547]);

		int LA547_0 = input.LA(1);
		if ( (LA547_0==COMMENT||LA547_0==NL||LA547_0==WS) ) {
			alt547=1;
		}
		} finally {dbg.exitDecision(547);}

		switch (alt547) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:780:17: ws
				{
				dbg.location(780,17);
				pushFollow(FOLLOW_ws_in_synpred30_Css34422);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(547);}
		dbg.location(780,21);
		match(input,COLON,FOLLOW_COLON_in_synpred30_Css34425); if (state.failed) return;dbg.location(780,27);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:780:27: (~ ( LBRACE | SEMI | RBRACE ) )*
		try { dbg.enterSubRule(548);

		loop548:
		while (true) {
			int alt548=2;
			try { dbg.enterDecision(548, decisionCanBacktrack[548]);

			int LA548_0 = input.LA(1);
			if ( ((LA548_0 >= A && LA548_0 <= LAYER_SYM)||(LA548_0 >= LBRACKET && LA548_0 <= R)||(LA548_0 >= RBRACKET && LA548_0 <= SASS_WHILE)||(LA548_0 >= SOLIDUS && LA548_0 <= Z)) ) {
				alt548=1;
			}

			} finally {dbg.exitDecision(548);}

			switch (alt548) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
				{
				dbg.location(780,27);
				if ( (input.LA(1) >= A && input.LA(1) <= LAYER_SYM)||(input.LA(1) >= LBRACKET && input.LA(1) <= R)||(input.LA(1) >= RBRACKET && input.LA(1) <= SASS_WHILE)||(input.LA(1) >= SOLIDUS && input.LA(1) <= Z) ) {
					input.consume();
					state.errorRecovery=false;
					state.failed=false;
				}
				else {
					if (state.backtracking>0) {state.failed=true; return;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					dbg.recognitionException(mse);
					throw mse;
				}
				}
				break;

			default :
				break loop548;
			}
		}
		} finally {dbg.exitSubRule(548);}
		dbg.location(780,50);
		if ( input.LA(1)==RBRACE||input.LA(1)==SEMI ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			dbg.recognitionException(mse);
			throw mse;
		}
		}

	}
	// $ANTLR end synpred30_Css3

	// $ANTLR start synpred31_Css3
	public final void synpred31_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:781:7: ( cp_mixin_declaration )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:781:8: cp_mixin_declaration
		{
		dbg.location(781,8);
		pushFollow(FOLLOW_cp_mixin_declaration_in_synpred31_Css34454);
		cp_mixin_declaration();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred31_Css3

	// $ANTLR start synpred32_Css3
	public final void synpred32_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:782:7: ( cp_mixin_call )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:782:8: cp_mixin_call
		{
		dbg.location(782,8);
		pushFollow(FOLLOW_cp_mixin_call_in_synpred32_Css34466);
		cp_mixin_call();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred32_Css3

	// $ANTLR start synpred33_Css3
	public final void synpred33_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:783:7: ( cp_mixin_call )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:783:8: cp_mixin_call
		{
		dbg.location(783,8);
		pushFollow(FOLLOW_cp_mixin_call_in_synpred33_Css34487);
		cp_mixin_call();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred33_Css3

	// $ANTLR start synpred34_Css3
	public final void synpred34_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:817:65: ( ( ws )? esPred )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:817:66: ( ws )? esPred
		{
		dbg.location(817,66);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:817:66: ( ws )?
		int alt549=2;
		try { dbg.enterSubRule(549);
		try { dbg.enterDecision(549, decisionCanBacktrack[549]);

		int LA549_0 = input.LA(1);
		if ( (LA549_0==COMMENT||LA549_0==NL||LA549_0==WS) ) {
			alt549=1;
		}
		} finally {dbg.exitDecision(549);}

		switch (alt549) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:817:66: ws
				{
				dbg.location(817,66);
				pushFollow(FOLLOW_ws_in_synpred34_Css34785);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(549);}
		dbg.location(817,70);
		pushFollow(FOLLOW_esPred_in_synpred34_Css34788);
		esPred();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred34_Css3

	// $ANTLR start synpred35_Css3
	public final void synpred35_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:818:4: ( typeSelector )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:818:5: typeSelector
		{
		dbg.location(818,5);
		pushFollow(FOLLOW_typeSelector_in_synpred35_Css34823);
		typeSelector();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred35_Css3

	// $ANTLR start synpred36_Css3
	public final void synpred36_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:818:34: ( ( ws )? esPred )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:818:35: ( ws )? esPred
		{
		dbg.location(818,35);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:818:35: ( ws )?
		int alt550=2;
		try { dbg.enterSubRule(550);
		try { dbg.enterDecision(550, decisionCanBacktrack[550]);

		int LA550_0 = input.LA(1);
		if ( (LA550_0==COMMENT||LA550_0==NL||LA550_0==WS) ) {
			alt550=1;
		}
		} finally {dbg.exitDecision(550);}

		switch (alt550) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:818:35: ws
				{
				dbg.location(818,35);
				pushFollow(FOLLOW_ws_in_synpred36_Css34830);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(550);}
		dbg.location(818,39);
		pushFollow(FOLLOW_esPred_in_synpred36_Css34833);
		esPred();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred36_Css3

	// $ANTLR start synpred37_Css3
	public final void synpred37_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:832:7: ( ( IDENT | STAR )? PIPE )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:832:8: ( IDENT | STAR )? PIPE
		{
		dbg.location(832,8);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:832:8: ( IDENT | STAR )?
		int alt551=2;
		try { dbg.enterSubRule(551);
		try { dbg.enterDecision(551, decisionCanBacktrack[551]);

		int LA551_0 = input.LA(1);
		if ( (LA551_0==IDENT||LA551_0==STAR) ) {
			alt551=1;
		}
		} finally {dbg.exitDecision(551);}

		switch (alt551) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
				{
				dbg.location(832,8);
				if ( input.LA(1)==IDENT||input.LA(1)==STAR ) {
					input.consume();
					state.errorRecovery=false;
					state.failed=false;
				}
				else {
					if (state.backtracking>0) {state.failed=true; return;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					dbg.recognitionException(mse);
					throw mse;
				}
				}
				break;

		}
		} finally {dbg.exitSubRule(551);}
		dbg.location(832,24);
		match(input,PIPE,FOLLOW_PIPE_in_synpred37_Css34944); if (state.failed) return;
		}

	}
	// $ANTLR end synpred37_Css3

	// $ANTLR start synpred38_Css3
	public final void synpred38_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:987:58: ( functionName ( ws )? LPAREN )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:987:59: functionName ( ws )? LPAREN
		{
		dbg.location(987,59);
		pushFollow(FOLLOW_functionName_in_synpred38_Css36505);
		functionName();
		state._fsp--;
		if (state.failed) return;dbg.location(987,72);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:987:72: ( ws )?
		int alt552=2;
		try { dbg.enterSubRule(552);
		try { dbg.enterDecision(552, decisionCanBacktrack[552]);

		int LA552_0 = input.LA(1);
		if ( (LA552_0==COMMENT||LA552_0==NL||LA552_0==WS) ) {
			alt552=1;
		}
		} finally {dbg.exitDecision(552);}

		switch (alt552) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:987:72: ws
				{
				dbg.location(987,72);
				pushFollow(FOLLOW_ws_in_synpred38_Css36507);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(552);}
		dbg.location(987,76);
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred38_Css36510); if (state.failed) return;
		}

	}
	// $ANTLR end synpred38_Css3

	// $ANTLR start synpred39_Css3
	public final void synpred39_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:989:64: ( functionName ( ws )? LPAREN )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:989:65: functionName ( ws )? LPAREN
		{
		dbg.location(989,65);
		pushFollow(FOLLOW_functionName_in_synpred39_Css36540);
		functionName();
		state._fsp--;
		if (state.failed) return;dbg.location(989,78);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:989:78: ( ws )?
		int alt553=2;
		try { dbg.enterSubRule(553);
		try { dbg.enterDecision(553, decisionCanBacktrack[553]);

		int LA553_0 = input.LA(1);
		if ( (LA553_0==COMMENT||LA553_0==NL||LA553_0==WS) ) {
			alt553=1;
		}
		} finally {dbg.exitDecision(553);}

		switch (alt553) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:989:78: ws
				{
				dbg.location(989,78);
				pushFollow(FOLLOW_ws_in_synpred39_Css36542);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(553);}
		dbg.location(989,82);
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred39_Css36545); if (state.failed) return;
		}

	}
	// $ANTLR end synpred39_Css3

	// $ANTLR start synpred40_Css3
	public final void synpred40_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1029:14: ( ( ws | ( ( ws )? operator ( ws )? ) |) term )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1029:15: ( ws | ( ( ws )? operator ( ws )? ) |) term
		{
		dbg.location(1029,15);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1029:15: ( ws | ( ( ws )? operator ( ws )? ) |)
		int alt556=3;
		try { dbg.enterSubRule(556);
		try { dbg.enterDecision(556, decisionCanBacktrack[556]);

		try {
			isCyclicDecision = true;
			alt556 = dfa556.predict(input);
		}
		catch (NoViableAltException nvae) {
			dbg.recognitionException(nvae);
			throw nvae;
		}
		} finally {dbg.exitDecision(556);}

		switch (alt556) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1029:17: ws
				{
				dbg.location(1029,17);
				pushFollow(FOLLOW_ws_in_synpred40_Css36715);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;
			case 2 :
				dbg.enterAlt(2);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1029:22: ( ( ws )? operator ( ws )? )
				{
				dbg.location(1029,22);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1029:22: ( ( ws )? operator ( ws )? )
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1029:23: ( ws )? operator ( ws )?
				{
				dbg.location(1029,23);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1029:23: ( ws )?
				int alt554=2;
				try { dbg.enterSubRule(554);
				try { dbg.enterDecision(554, decisionCanBacktrack[554]);

				int LA554_0 = input.LA(1);
				if ( (LA554_0==COMMENT||LA554_0==NL||LA554_0==WS) ) {
					alt554=1;
				}
				} finally {dbg.exitDecision(554);}

				switch (alt554) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1029:23: ws
						{
						dbg.location(1029,23);
						pushFollow(FOLLOW_ws_in_synpred40_Css36720);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(554);}
				dbg.location(1029,27);
				pushFollow(FOLLOW_operator_in_synpred40_Css36723);
				operator();
				state._fsp--;
				if (state.failed) return;dbg.location(1029,36);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1029:36: ( ws )?
				int alt555=2;
				try { dbg.enterSubRule(555);
				try { dbg.enterDecision(555, decisionCanBacktrack[555]);

				int LA555_0 = input.LA(1);
				if ( (LA555_0==COMMENT||LA555_0==NL||LA555_0==WS) ) {
					alt555=1;
				}
				} finally {dbg.exitDecision(555);}

				switch (alt555) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1029:36: ws
						{
						dbg.location(1029,36);
						pushFollow(FOLLOW_ws_in_synpred40_Css36725);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(555);}

				}

				}
				break;
			case 3 :
				dbg.enterAlt(3);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1029:56: 
				{
				}
				break;

		}
		} finally {dbg.exitSubRule(556);}
		dbg.location(1029,58);
		pushFollow(FOLLOW_term_in_synpred40_Css36734);
		term();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred40_Css3

	// $ANTLR start synpred41_Css3
	public final void synpred41_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1036:9: ( functionName ( ws )? LPAREN )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1036:10: functionName ( ws )? LPAREN
		{
		dbg.location(1036,10);
		pushFollow(FOLLOW_functionName_in_synpred41_Css36807);
		functionName();
		state._fsp--;
		if (state.failed) return;dbg.location(1036,23);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1036:23: ( ws )?
		int alt557=2;
		try { dbg.enterSubRule(557);
		try { dbg.enterDecision(557, decisionCanBacktrack[557]);

		int LA557_0 = input.LA(1);
		if ( (LA557_0==COMMENT||LA557_0==NL||LA557_0==WS) ) {
			alt557=1;
		}
		} finally {dbg.exitDecision(557);}

		switch (alt557) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1036:23: ws
				{
				dbg.location(1036,23);
				pushFollow(FOLLOW_ws_in_synpred41_Css36809);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(557);}
		dbg.location(1036,27);
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred41_Css36812); if (state.failed) return;
		}

	}
	// $ANTLR end synpred41_Css3

	// $ANTLR start synpred42_Css3
	public final void synpred42_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1102:9: ( fnAttributeName ( ws )? ( OPEQ | COLON ) )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1102:10: fnAttributeName ( ws )? ( OPEQ | COLON )
		{
		dbg.location(1102,10);
		pushFollow(FOLLOW_fnAttributeName_in_synpred42_Css37422);
		fnAttributeName();
		state._fsp--;
		if (state.failed) return;dbg.location(1102,26);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1102:26: ( ws )?
		int alt558=2;
		try { dbg.enterSubRule(558);
		try { dbg.enterDecision(558, decisionCanBacktrack[558]);

		int LA558_0 = input.LA(1);
		if ( (LA558_0==COMMENT||LA558_0==NL||LA558_0==WS) ) {
			alt558=1;
		}
		} finally {dbg.exitDecision(558);}

		switch (alt558) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1102:26: ws
				{
				dbg.location(1102,26);
				pushFollow(FOLLOW_ws_in_synpred42_Css37424);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(558);}
		dbg.location(1102,30);
		if ( input.LA(1)==COLON||input.LA(1)==OPEQ ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			dbg.recognitionException(mse);
			throw mse;
		}
		}

	}
	// $ANTLR end synpred42_Css3

	// $ANTLR start synpred43_Css3
	public final void synpred43_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1103:11: ( cp_expression )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1103:12: cp_expression
		{
		dbg.location(1103,12);
		pushFollow(FOLLOW_cp_expression_in_synpred43_Css37462);
		cp_expression();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred43_Css3

	// $ANTLR start synpred44_Css3
	public final void synpred44_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:20: ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:21: ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term
		{
		dbg.location(1115,21);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:21: ( ws | ( ( ws )? SOLIDUS ( ws )? ) |)
		int alt561=3;
		try { dbg.enterSubRule(561);
		try { dbg.enterDecision(561, decisionCanBacktrack[561]);

		try {
			isCyclicDecision = true;
			alt561 = dfa561.predict(input);
		}
		catch (NoViableAltException nvae) {
			dbg.recognitionException(nvae);
			throw nvae;
		}
		} finally {dbg.exitDecision(561);}

		switch (alt561) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:23: ws
				{
				dbg.location(1115,23);
				pushFollow(FOLLOW_ws_in_synpred44_Css37556);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;
			case 2 :
				dbg.enterAlt(2);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:28: ( ( ws )? SOLIDUS ( ws )? )
				{
				dbg.location(1115,28);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:28: ( ( ws )? SOLIDUS ( ws )? )
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:29: ( ws )? SOLIDUS ( ws )?
				{
				dbg.location(1115,29);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:29: ( ws )?
				int alt559=2;
				try { dbg.enterSubRule(559);
				try { dbg.enterDecision(559, decisionCanBacktrack[559]);

				int LA559_0 = input.LA(1);
				if ( (LA559_0==COMMENT||LA559_0==NL||LA559_0==WS) ) {
					alt559=1;
				}
				} finally {dbg.exitDecision(559);}

				switch (alt559) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:29: ws
						{
						dbg.location(1115,29);
						pushFollow(FOLLOW_ws_in_synpred44_Css37561);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(559);}
				dbg.location(1115,33);
				match(input,SOLIDUS,FOLLOW_SOLIDUS_in_synpred44_Css37564); if (state.failed) return;dbg.location(1115,41);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:41: ( ws )?
				int alt560=2;
				try { dbg.enterSubRule(560);
				try { dbg.enterDecision(560, decisionCanBacktrack[560]);

				int LA560_0 = input.LA(1);
				if ( (LA560_0==COMMENT||LA560_0==NL||LA560_0==WS) ) {
					alt560=1;
				}
				} finally {dbg.exitDecision(560);}

				switch (alt560) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:41: ws
						{
						dbg.location(1115,41);
						pushFollow(FOLLOW_ws_in_synpred44_Css37566);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(560);}

				}

				}
				break;
			case 3 :
				dbg.enterAlt(3);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:61: 
				{
				}
				break;

		}
		} finally {dbg.exitSubRule(561);}
		dbg.location(1115,63);
		pushFollow(FOLLOW_term_in_synpred44_Css37575);
		term();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred44_Css3

	// $ANTLR start synpred46_Css3
	public final void synpred46_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1150:6: ( ( ws )? COMMA ( ws )? cp_expression )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1150:7: ( ws )? COMMA ( ws )? cp_expression
		{
		dbg.location(1150,7);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1150:7: ( ws )?
		int alt562=2;
		try { dbg.enterSubRule(562);
		try { dbg.enterDecision(562, decisionCanBacktrack[562]);

		int LA562_0 = input.LA(1);
		if ( (LA562_0==COMMENT||LA562_0==NL||LA562_0==WS) ) {
			alt562=1;
		}
		} finally {dbg.exitDecision(562);}

		switch (alt562) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1150:7: ws
				{
				dbg.location(1150,7);
				pushFollow(FOLLOW_ws_in_synpred46_Css38031);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(562);}
		dbg.location(1150,11);
		match(input,COMMA,FOLLOW_COMMA_in_synpred46_Css38034); if (state.failed) return;dbg.location(1150,17);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1150:17: ( ws )?
		int alt563=2;
		try { dbg.enterSubRule(563);
		try { dbg.enterDecision(563, decisionCanBacktrack[563]);

		int LA563_0 = input.LA(1);
		if ( (LA563_0==COMMENT||LA563_0==NL||LA563_0==WS) ) {
			alt563=1;
		}
		} finally {dbg.exitDecision(563);}

		switch (alt563) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1150:17: ws
				{
				dbg.location(1150,17);
				pushFollow(FOLLOW_ws_in_synpred46_Css38036);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(563);}
		dbg.location(1150,21);
		pushFollow(FOLLOW_cp_expression_in_synpred46_Css38039);
		cp_expression();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred46_Css3

	// $ANTLR start synpred47_Css3
	public final void synpred47_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1166:7: ( cp_expression_atom )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1166:8: cp_expression_atom
		{
		dbg.location(1166,8);
		pushFollow(FOLLOW_cp_expression_atom_in_synpred47_Css38106);
		cp_expression_atom();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred47_Css3

	// $ANTLR start synpred48_Css3
	public final void synpred48_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1168:9: ( ( ws )? cp_expression_operator )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1168:10: ( ws )? cp_expression_operator
		{
		dbg.location(1168,10);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1168:10: ( ws )?
		int alt564=2;
		try { dbg.enterSubRule(564);
		try { dbg.enterDecision(564, decisionCanBacktrack[564]);

		int LA564_0 = input.LA(1);
		if ( (LA564_0==COMMENT||LA564_0==NL||LA564_0==WS) ) {
			alt564=1;
		}
		} finally {dbg.exitDecision(564);}

		switch (alt564) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1168:10: ws
				{
				dbg.location(1168,10);
				pushFollow(FOLLOW_ws_in_synpred48_Css38129);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(564);}
		dbg.location(1168,14);
		pushFollow(FOLLOW_cp_expression_operator_in_synpred48_Css38132);
		cp_expression_operator();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred48_Css3

	// $ANTLR start synpred49_Css3
	public final void synpred49_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1169:11: ( ( ws )? cp_expression_atom )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1169:12: ( ws )? cp_expression_atom
		{
		dbg.location(1169,12);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1169:12: ( ws )?
		int alt565=2;
		try { dbg.enterSubRule(565);
		try { dbg.enterDecision(565, decisionCanBacktrack[565]);

		int LA565_0 = input.LA(1);
		if ( (LA565_0==COMMENT||LA565_0==NL||LA565_0==WS) ) {
			alt565=1;
		}
		} finally {dbg.exitDecision(565);}

		switch (alt565) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1169:12: ws
				{
				dbg.location(1169,12);
				pushFollow(FOLLOW_ws_in_synpred49_Css38158);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(565);}
		dbg.location(1169,16);
		pushFollow(FOLLOW_cp_expression_atom_in_synpred49_Css38161);
		cp_expression_atom();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred49_Css3

	// $ANTLR start synpred50_Css3
	public final void synpred50_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1183:13: ( cp_math_expression )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1183:14: cp_math_expression
		{
		dbg.location(1183,14);
		pushFollow(FOLLOW_cp_math_expression_in_synpred50_Css38301);
		cp_math_expression();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred50_Css3

	// $ANTLR start synpred51_Css3
	public final void synpred51_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1210:13: ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1210:14: ( ws )? ( PLUS | MINUS | STAR | SOLIDUS )
		{
		dbg.location(1210,14);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1210:14: ( ws )?
		int alt566=2;
		try { dbg.enterSubRule(566);
		try { dbg.enterDecision(566, decisionCanBacktrack[566]);

		int LA566_0 = input.LA(1);
		if ( (LA566_0==COMMENT||LA566_0==NL||LA566_0==WS) ) {
			alt566=1;
		}
		} finally {dbg.exitDecision(566);}

		switch (alt566) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1210:14: ws
				{
				dbg.location(1210,14);
				pushFollow(FOLLOW_ws_in_synpred51_Css38434);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(566);}
		dbg.location(1210,18);
		if ( input.LA(1)==MINUS||input.LA(1)==PLUS||(input.LA(1) >= SOLIDUS && input.LA(1) <= STAR) ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			dbg.recognitionException(mse);
			throw mse;
		}
		}

	}
	// $ANTLR end synpred51_Css3

	// $ANTLR start synpred52_Css3
	public final void synpred52_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:77: ( ( ws )? combinator ( ws )? )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:78: ( ws )? combinator ( ws )?
		{
		dbg.location(1242,78);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:78: ( ws )?
		int alt567=2;
		try { dbg.enterSubRule(567);
		try { dbg.enterDecision(567, decisionCanBacktrack[567]);

		int LA567_0 = input.LA(1);
		if ( (LA567_0==COMMENT||LA567_0==NL||LA567_0==WS) ) {
			alt567=1;
		}
		} finally {dbg.exitDecision(567);}

		switch (alt567) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:78: ws
				{
				dbg.location(1242,78);
				pushFollow(FOLLOW_ws_in_synpred52_Css38726);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(567);}
		dbg.location(1242,82);
		pushFollow(FOLLOW_combinator_in_synpred52_Css38729);
		combinator();
		state._fsp--;
		if (state.failed) return;dbg.location(1242,93);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:93: ( ws )?
		int alt568=2;
		try { dbg.enterSubRule(568);
		try { dbg.enterDecision(568, decisionCanBacktrack[568]);

		int LA568_0 = input.LA(1);
		if ( (LA568_0==COMMENT||LA568_0==NL||LA568_0==WS) ) {
			alt568=1;
		}
		} finally {dbg.exitDecision(568);}

		switch (alt568) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:93: ws
				{
				dbg.location(1242,93);
				pushFollow(FOLLOW_ws_in_synpred52_Css38731);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(568);}

		}

	}
	// $ANTLR end synpred52_Css3

	// $ANTLR start synpred53_Css3
	public final void synpred53_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:172: ( pseudo )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:173: pseudo
		{
		dbg.location(1242,173);
		pushFollow(FOLLOW_pseudo_in_synpred53_Css38767);
		pseudo();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred53_Css3

	// $ANTLR start synpred54_Css3
	public final void synpred54_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:191: ( ( ws )? LPAREN )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:192: ( ws )? LPAREN
		{
		dbg.location(1242,192);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:192: ( ws )?
		int alt569=2;
		try { dbg.enterSubRule(569);
		try { dbg.enterDecision(569, decisionCanBacktrack[569]);

		int LA569_0 = input.LA(1);
		if ( (LA569_0==COMMENT||LA569_0==NL||LA569_0==WS) ) {
			alt569=1;
		}
		} finally {dbg.exitDecision(569);}

		switch (alt569) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:192: ws
				{
				dbg.location(1242,192);
				pushFollow(FOLLOW_ws_in_synpred54_Css38775);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(569);}
		dbg.location(1242,196);
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred54_Css38778); if (state.failed) return;
		}

	}
	// $ANTLR end synpred54_Css3

	// $ANTLR start synpred55_Css3
	public final void synpred55_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1251:25: ( webkitKeyframeSelectors )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1251:26: webkitKeyframeSelectors
		{
		dbg.location(1251,26);
		pushFollow(FOLLOW_webkitKeyframeSelectors_in_synpred55_Css38894);
		webkitKeyframeSelectors();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred55_Css3

	// $ANTLR start synpred56_Css3
	public final void synpred56_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1429:19: ( ( ws )? COMMA )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1429:20: ( ws )? COMMA
		{
		dbg.location(1429,20);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1429:20: ( ws )?
		int alt570=2;
		try { dbg.enterSubRule(570);
		try { dbg.enterDecision(570, decisionCanBacktrack[570]);

		int LA570_0 = input.LA(1);
		if ( (LA570_0==COMMENT||LA570_0==NL||LA570_0==WS) ) {
			alt570=1;
		}
		} finally {dbg.exitDecision(570);}

		switch (alt570) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1429:20: ws
				{
				dbg.location(1429,20);
				pushFollow(FOLLOW_ws_in_synpred56_Css310139);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(570);}
		dbg.location(1429,24);
		match(input,COMMA,FOLLOW_COMMA_in_synpred56_Css310142); if (state.failed) return;
		}

	}
	// $ANTLR end synpred56_Css3

	// Delegated rules

	public final boolean synpred53_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred53_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred14_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred14_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred22_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred22_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred9_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred9_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred4_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred4_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred37_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred37_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred19_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred19_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred23_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred23_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred31_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred31_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred54_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred54_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred15_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred15_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred32_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred32_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred35_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred35_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred38_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred38_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred43_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred43_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred46_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred46_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred18_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred18_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred27_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred27_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred21_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred21_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred29_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred29_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred40_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred40_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred16_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred16_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred24_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred24_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred13_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred13_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred10_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred10_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred6_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred6_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred3_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred3_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred11_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred11_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred50_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred50_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred56_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred56_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred17_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred17_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred42_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred42_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred48_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred48_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred7_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred7_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred34_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred34_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred51_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred51_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred1_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred1_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred26_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred26_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred12_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred12_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred49_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred49_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred20_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred20_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred8_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred8_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred2_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred2_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred5_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred5_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred41_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred41_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred44_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred44_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred30_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred30_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred55_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred55_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred47_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred47_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred36_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred36_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred39_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred39_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred33_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred33_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred25_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred25_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred52_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred52_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred28_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred28_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}


	protected DFA3 dfa3 = new DFA3(this);
	protected DFA5 dfa5 = new DFA5(this);
	protected DFA7 dfa7 = new DFA7(this);
	protected DFA10 dfa10 = new DFA10(this);
	protected DFA44 dfa44 = new DFA44(this);
	protected DFA32 dfa32 = new DFA32(this);
	protected DFA47 dfa47 = new DFA47(this);
	protected DFA48 dfa48 = new DFA48(this);
	protected DFA49 dfa49 = new DFA49(this);
	protected DFA54 dfa54 = new DFA54(this);
	protected DFA59 dfa59 = new DFA59(this);
	protected DFA58 dfa58 = new DFA58(this);
	protected DFA60 dfa60 = new DFA60(this);
	protected DFA61 dfa61 = new DFA61(this);
	protected DFA66 dfa66 = new DFA66(this);
	protected DFA72 dfa72 = new DFA72(this);
	protected DFA75 dfa75 = new DFA75(this);
	protected DFA81 dfa81 = new DFA81(this);
	protected DFA87 dfa87 = new DFA87(this);
	protected DFA89 dfa89 = new DFA89(this);
	protected DFA93 dfa93 = new DFA93(this);
	protected DFA106 dfa106 = new DFA106(this);
	protected DFA115 dfa115 = new DFA115(this);
	protected DFA124 dfa124 = new DFA124(this);
	protected DFA126 dfa126 = new DFA126(this);
	protected DFA127 dfa127 = new DFA127(this);
	protected DFA134 dfa134 = new DFA134(this);
	protected DFA172 dfa172 = new DFA172(this);
	protected DFA184 dfa184 = new DFA184(this);
	protected DFA183 dfa183 = new DFA183(this);
	protected DFA203 dfa203 = new DFA203(this);
	protected DFA205 dfa205 = new DFA205(this);
	protected DFA210 dfa210 = new DFA210(this);
	protected DFA215 dfa215 = new DFA215(this);
	protected DFA221 dfa221 = new DFA221(this);
	protected DFA216 dfa216 = new DFA216(this);
	protected DFA238 dfa238 = new DFA238(this);
	protected DFA231 dfa231 = new DFA231(this);
	protected DFA230 dfa230 = new DFA230(this);
	protected DFA235 dfa235 = new DFA235(this);
	protected DFA240 dfa240 = new DFA240(this);
	protected DFA242 dfa242 = new DFA242(this);
	protected DFA246 dfa246 = new DFA246(this);
	protected DFA254 dfa254 = new DFA254(this);
	protected DFA253 dfa253 = new DFA253(this);
	protected DFA252 dfa252 = new DFA252(this);
	protected DFA258 dfa258 = new DFA258(this);
	protected DFA261 dfa261 = new DFA261(this);
	protected DFA284 dfa284 = new DFA284(this);
	protected DFA307 dfa307 = new DFA307(this);
	protected DFA320 dfa320 = new DFA320(this);
	protected DFA319 dfa319 = new DFA319(this);
	protected DFA335 dfa335 = new DFA335(this);
	protected DFA345 dfa345 = new DFA345(this);
	protected DFA344 dfa344 = new DFA344(this);
	protected DFA354 dfa354 = new DFA354(this);
	protected DFA360 dfa360 = new DFA360(this);
	protected DFA366 dfa366 = new DFA366(this);
	protected DFA380 dfa380 = new DFA380(this);
	protected DFA385 dfa385 = new DFA385(this);
	protected DFA392 dfa392 = new DFA392(this);
	protected DFA396 dfa396 = new DFA396(this);
	protected DFA411 dfa411 = new DFA411(this);
	protected DFA413 dfa413 = new DFA413(this);
	protected DFA426 dfa426 = new DFA426(this);
	protected DFA429 dfa429 = new DFA429(this);
	protected DFA445 dfa445 = new DFA445(this);
	protected DFA474 dfa474 = new DFA474(this);
	protected DFA475 dfa475 = new DFA475(this);
	protected DFA481 dfa481 = new DFA481(this);
	protected DFA489 dfa489 = new DFA489(this);
	protected DFA488 dfa488 = new DFA488(this);
	protected DFA492 dfa492 = new DFA492(this);
	protected DFA497 dfa497 = new DFA497(this);
	protected DFA517 dfa517 = new DFA517(this);
	protected DFA524 dfa524 = new DFA524(this);
	protected DFA519 dfa519 = new DFA519(this);
	protected DFA545 dfa545 = new DFA545(this);
	protected DFA540 dfa540 = new DFA540(this);
	protected DFA556 dfa556 = new DFA556(this);
	protected DFA561 dfa561 = new DFA561(this);
	static final String DFA3_eotS =
		"\5\uffff";
	static final String DFA3_eofS =
		"\1\2\4\uffff";
	static final String DFA3_minS =
		"\1\6\1\23\1\uffff\1\23\1\uffff";
	static final String DFA3_maxS =
		"\1\u0098\1\u0099\1\uffff\1\u0099\1\uffff";
	static final String DFA3_acceptS =
		"\2\uffff\1\2\1\uffff\1\1";
	static final String DFA3_specialS =
		"\5\uffff}>";
	static final String[] DFA3_transitionS = {
			"\2\2\2\uffff\5\2\3\uffff\1\1\1\2\3\uffff\1\2\5\uffff\3\2\7\uffff\1\2"+
			"\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\4\2\2\uffff\1\2\6\uffff\3\2\5\uffff\1\2\11\uffff\1\2\2\uffff\2\2\6\uffff"+
			"\3\2\2\uffff\3\2\1\uffff\2\2\2\uffff\5\2\1\uffff\3\2\1\uffff\6\2\1\uffff"+
			"\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\10\uffff\1\2",
			"\1\2\1\uffff\1\3\75\uffff\1\3\62\uffff\1\4\22\uffff\1\3",
			"",
			"\1\2\1\uffff\1\3\75\uffff\1\3\62\uffff\1\4\22\uffff\1\3",
			""
	};

	static final short[] DFA3_eot = DFA.unpackEncodedString(DFA3_eotS);
	static final short[] DFA3_eof = DFA.unpackEncodedString(DFA3_eofS);
	static final char[] DFA3_min = DFA.unpackEncodedStringToUnsignedChars(DFA3_minS);
	static final char[] DFA3_max = DFA.unpackEncodedStringToUnsignedChars(DFA3_maxS);
	static final short[] DFA3_accept = DFA.unpackEncodedString(DFA3_acceptS);
	static final short[] DFA3_special = DFA.unpackEncodedString(DFA3_specialS);
	static final short[][] DFA3_transition;

	static {
		int numStates = DFA3_transitionS.length;
		DFA3_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA3_transition[i] = DFA.unpackEncodedString(DFA3_transitionS[i]);
		}
	}

	protected class DFA3 extends DFA {

		public DFA3(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 3;
			this.eot = DFA3_eot;
			this.eof = DFA3_eof;
			this.min = DFA3_min;
			this.max = DFA3_max;
			this.accept = DFA3_accept;
			this.special = DFA3_special;
			this.transition = DFA3_transition;
		}
		@Override
		public String getDescription() {
			return "287:6: ( charSet ( ws )? )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA5_eotS =
		"\20\uffff";
	static final String DFA5_eofS =
		"\1\2\17\uffff";
	static final String DFA5_minS =
		"\1\6\1\25\1\uffff\1\25\1\24\1\25\1\63\1\24\1\25\1\uffff\1\24\1\25\1\24"+
		"\1\63\2\24";
	static final String DFA5_maxS =
		"\1\u0098\1\u0099\1\uffff\3\u0099\1\63\2\u0099\1\uffff\3\u0099\1\63\2\u0099";
	static final String DFA5_acceptS =
		"\2\uffff\1\2\6\uffff\1\1\6\uffff";
	static final String DFA5_specialS =
		"\20\uffff}>";
	static final String[] DFA5_transitionS = {
			"\2\2\2\uffff\5\2\3\uffff\2\2\3\uffff\1\2\5\uffff\3\2\7\uffff\1\2\2\uffff"+
			"\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\5\uffff\1\1\1\uffff\4\2\2\uffff"+
			"\1\2\6\uffff\3\2\5\uffff\1\2\11\uffff\1\2\2\uffff\2\2\6\uffff\3\2\2\uffff"+
			"\3\2\1\uffff\2\2\2\uffff\5\2\1\uffff\3\2\1\uffff\6\2\1\uffff\1\2\1\uffff"+
			"\1\2\1\uffff\1\2\1\uffff\5\2\10\uffff\1\2",
			"\1\3\75\uffff\1\3\105\uffff\1\3",
			"",
			"\1\5\35\uffff\1\4\10\uffff\1\2\26\uffff\1\5\105\uffff\1\5",
			"\1\10\1\7\11\uffff\1\6\34\uffff\1\2\26\uffff\1\7\57\uffff\1\11\25\uffff"+
			"\1\7",
			"\1\5\35\uffff\1\4\10\uffff\1\2\26\uffff\1\5\105\uffff\1\5",
			"\1\12",
			"\1\10\1\7\46\uffff\1\2\26\uffff\1\7\105\uffff\1\7",
			"\1\13\35\uffff\1\14\37\uffff\1\13\105\uffff\1\13",
			"",
			"\1\10\1\7\11\uffff\1\6\34\uffff\1\2\26\uffff\1\7\57\uffff\1\11\25\uffff"+
			"\1\7",
			"\1\13\35\uffff\1\14\37\uffff\1\13\105\uffff\1\13",
			"\1\10\1\16\11\uffff\1\15\63\uffff\1\16\57\uffff\1\11\25\uffff\1\16",
			"\1\17",
			"\1\10\1\16\75\uffff\1\16\105\uffff\1\16",
			"\1\10\1\16\11\uffff\1\15\63\uffff\1\16\57\uffff\1\11\25\uffff\1\16"
	};

	static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_eotS);
	static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_eofS);
	static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_minS);
	static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_maxS);
	static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_acceptS);
	static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_specialS);
	static final short[][] DFA5_transition;

	static {
		int numStates = DFA5_transitionS.length;
		DFA5_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA5_transition[i] = DFA.unpackEncodedString(DFA5_transitionS[i]);
		}
	}

	protected class DFA5 extends DFA {

		public DFA5(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 5;
			this.eot = DFA5_eot;
			this.eof = DFA5_eof;
			this.min = DFA5_min;
			this.max = DFA5_max;
			this.accept = DFA5_accept;
			this.special = DFA5_special;
			this.transition = DFA5_transition;
		}
		@Override
		public String getDescription() {
			return "288:9: ( layerStatement ( ws )? )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA7_eotS =
		"\5\uffff";
	static final String DFA7_eofS =
		"\1\2\4\uffff";
	static final String DFA7_minS =
		"\1\6\1\23\1\uffff\1\23\1\uffff";
	static final String DFA7_maxS =
		"\1\u0098\1\u0099\1\uffff\1\u0099\1\uffff";
	static final String DFA7_acceptS =
		"\2\uffff\1\2\1\uffff\1\1";
	static final String DFA7_specialS =
		"\5\uffff}>";
	static final String[] DFA7_transitionS = {
			"\2\2\2\uffff\5\2\3\uffff\2\2\3\uffff\1\2\5\uffff\3\2\7\uffff\1\2\2\uffff"+
			"\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\5\uffff\1\2\1\uffff\4\2\2\uffff"+
			"\1\2\6\uffff\3\2\5\uffff\1\1\11\uffff\1\2\2\uffff\2\2\6\uffff\3\2\2\uffff"+
			"\3\2\1\uffff\2\2\2\uffff\5\2\1\uffff\3\2\1\uffff\6\2\1\uffff\1\2\1\uffff"+
			"\1\2\1\uffff\1\2\1\uffff\5\2\10\uffff\1\2",
			"\1\2\1\uffff\1\3\35\uffff\1\4\37\uffff\1\3\62\uffff\1\4\14\uffff\1\4"+
			"\5\uffff\1\3",
			"",
			"\1\2\1\uffff\1\3\35\uffff\1\4\37\uffff\1\3\62\uffff\1\4\14\uffff\1\4"+
			"\5\uffff\1\3",
			""
	};

	static final short[] DFA7_eot = DFA.unpackEncodedString(DFA7_eotS);
	static final short[] DFA7_eof = DFA.unpackEncodedString(DFA7_eofS);
	static final char[] DFA7_min = DFA.unpackEncodedStringToUnsignedChars(DFA7_minS);
	static final char[] DFA7_max = DFA.unpackEncodedStringToUnsignedChars(DFA7_maxS);
	static final short[] DFA7_accept = DFA.unpackEncodedString(DFA7_acceptS);
	static final short[] DFA7_special = DFA.unpackEncodedString(DFA7_specialS);
	static final short[][] DFA7_transition;

	static {
		int numStates = DFA7_transitionS.length;
		DFA7_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA7_transition[i] = DFA.unpackEncodedString(DFA7_transitionS[i]);
		}
	}

	protected class DFA7 extends DFA {

		public DFA7(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 7;
			this.eot = DFA7_eot;
			this.eof = DFA7_eof;
			this.min = DFA7_min;
			this.max = DFA7_max;
			this.accept = DFA7_accept;
			this.special = DFA7_special;
			this.transition = DFA7_transition;
		}
		@Override
		public String getDescription() {
			return "290:9: ( namespaces )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA10_eotS =
		"\5\uffff";
	static final String DFA10_eofS =
		"\1\1\4\uffff";
	static final String DFA10_minS =
		"\1\6\1\uffff\2\23\1\uffff";
	static final String DFA10_maxS =
		"\1\u0098\1\uffff\2\u0099\1\uffff";
	static final String DFA10_acceptS =
		"\1\uffff\1\2\2\uffff\1\1";
	static final String DFA10_specialS =
		"\5\uffff}>";
	static final String[] DFA10_transitionS = {
			"\2\1\2\uffff\5\1\3\uffff\2\1\3\uffff\1\1\5\uffff\3\1\7\uffff\1\1\2\uffff"+
			"\2\1\2\uffff\2\1\3\uffff\1\1\1\uffff\1\1\5\uffff\1\1\1\uffff\4\1\2\uffff"+
			"\1\1\6\uffff\3\1\5\uffff\1\2\11\uffff\1\1\2\uffff\2\1\6\uffff\3\1\2\uffff"+
			"\3\1\1\uffff\2\1\2\uffff\5\1\1\uffff\3\1\1\uffff\6\1\1\uffff\1\1\1\uffff"+
			"\1\1\1\uffff\1\1\1\uffff\5\1\10\uffff\1\1",
			"",
			"\1\1\1\uffff\1\3\35\uffff\1\4\37\uffff\1\3\62\uffff\1\4\14\uffff\1\4"+
			"\5\uffff\1\3",
			"\1\1\1\uffff\1\3\35\uffff\1\4\37\uffff\1\3\62\uffff\1\4\14\uffff\1\4"+
			"\5\uffff\1\3",
			""
	};

	static final short[] DFA10_eot = DFA.unpackEncodedString(DFA10_eotS);
	static final short[] DFA10_eof = DFA.unpackEncodedString(DFA10_eofS);
	static final char[] DFA10_min = DFA.unpackEncodedStringToUnsignedChars(DFA10_minS);
	static final char[] DFA10_max = DFA.unpackEncodedStringToUnsignedChars(DFA10_maxS);
	static final short[] DFA10_accept = DFA.unpackEncodedString(DFA10_acceptS);
	static final short[] DFA10_special = DFA.unpackEncodedString(DFA10_specialS);
	static final short[][] DFA10_transition;

	static {
		int numStates = DFA10_transitionS.length;
		DFA10_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA10_transition[i] = DFA.unpackEncodedString(DFA10_transitionS[i]);
		}
	}

	protected class DFA10 extends DFA {

		public DFA10(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 10;
			this.eot = DFA10_eot;
			this.eof = DFA10_eof;
			this.min = DFA10_min;
			this.max = DFA10_max;
			this.accept = DFA10_accept;
			this.special = DFA10_special;
			this.transition = DFA10_transition;
		}
		@Override
		public String getDescription() {
			return "()+ loopback of 297:2: ( namespace ( ws )? )+";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA44_eotS =
		"\10\uffff";
	static final String DFA44_eofS =
		"\10\uffff";
	static final String DFA44_minS =
		"\1\65\2\25\1\0\1\uffff\1\0\2\uffff";
	static final String DFA44_maxS =
		"\1\65\2\u0099\1\0\1\uffff\1\0\2\uffff";
	static final String DFA44_acceptS =
		"\4\uffff\1\3\1\uffff\1\1\1\2";
	static final String DFA44_specialS =
		"\3\uffff\1\0\1\uffff\1\1\2\uffff}>";
	static final String[] DFA44_transitionS = {
			"\1\1",
			"\1\2\62\uffff\1\4\12\uffff\1\2\62\uffff\1\3\14\uffff\1\3\5\uffff\1\2",
			"\1\2\62\uffff\1\4\12\uffff\1\2\62\uffff\1\5\14\uffff\1\5\5\uffff\1\2",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			""
	};

	static final short[] DFA44_eot = DFA.unpackEncodedString(DFA44_eotS);
	static final short[] DFA44_eof = DFA.unpackEncodedString(DFA44_eofS);
	static final char[] DFA44_min = DFA.unpackEncodedStringToUnsignedChars(DFA44_minS);
	static final char[] DFA44_max = DFA.unpackEncodedStringToUnsignedChars(DFA44_maxS);
	static final short[] DFA44_accept = DFA.unpackEncodedString(DFA44_acceptS);
	static final short[] DFA44_special = DFA.unpackEncodedString(DFA44_specialS);
	static final short[][] DFA44_transition;

	static {
		int numStates = DFA44_transitionS.length;
		DFA44_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA44_transition[i] = DFA.unpackEncodedString(DFA44_transitionS[i]);
		}
	}

	protected class DFA44 extends DFA {

		public DFA44(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 44;
			this.eot = DFA44_eot;
			this.eof = DFA44_eof;
			this.min = DFA44_min;
			this.max = DFA44_max;
			this.accept = DFA44_accept;
			this.special = DFA44_special;
			this.transition = DFA44_transition;
		}
		@Override
		public String getDescription() {
			return "331:1: importItem : ( IMPORT_SYM ( ws )? resourceIdentifier ( ws )? ( importLayer )? ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? |{...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ws )? ( importLayer )? ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? |{...}? IMPORT_SYM ( ws )? ( LPAREN less_import_types RPAREN ( ws )? )? resourceIdentifier ( ws )? ( importLayer )? ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? );";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA44_3 = input.LA(1);
						 
						int index44_3 = input.index();
						input.rewind();
						s = -1;
						if ( (!(evalPredicate((evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")),""))) ) {s = 6;}
						else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 7;}
						else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 4;}
						 
						input.seek(index44_3);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA44_5 = input.LA(1);
						 
						int index44_5 = input.index();
						input.rewind();
						s = -1;
						if ( (!(evalPredicate((evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")),""))) ) {s = 6;}
						else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 7;}
						else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 4;}
						 
						input.seek(index44_5);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 44, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA32_eotS =
		"\4\uffff";
	static final String DFA32_eofS =
		"\2\2\2\uffff";
	static final String DFA32_minS =
		"\2\6\2\uffff";
	static final String DFA32_maxS =
		"\2\u0099\2\uffff";
	static final String DFA32_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA32_specialS =
		"\4\uffff}>";
	static final String[] DFA32_transitionS = {
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\3\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\4\2\2\uffff\1\2\4\uffff\1\2\1\uffff\3\2\5\uffff\1\2\1\1\3\uffff\1\2"+
			"\4\uffff\1\2\2\uffff\2\2\2\uffff\1\2\3\uffff\4\2\1\uffff\3\2\1\uffff"+
			"\2\2\2\uffff\5\2\1\uffff\3\2\1\uffff\6\2\1\uffff\1\2\1\uffff\1\2\1\uffff"+
			"\1\2\1\uffff\5\2\6\uffff\1\2\1\uffff\1\2\1\1",
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\3\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\4\2\2\uffff\1\2\4\uffff\1\2\1\uffff\3\2\5\uffff\1\2\1\1\3\uffff\1\2"+
			"\4\uffff\1\2\2\uffff\2\2\2\uffff\1\2\3\uffff\4\2\1\uffff\3\2\1\uffff"+
			"\2\2\1\uffff\6\2\1\uffff\3\2\1\uffff\6\2\1\uffff\1\2\1\uffff\1\2\1\uffff"+
			"\1\2\1\uffff\5\2\6\uffff\1\2\1\uffff\1\2\1\1",
			"",
			""
	};

	static final short[] DFA32_eot = DFA.unpackEncodedString(DFA32_eotS);
	static final short[] DFA32_eof = DFA.unpackEncodedString(DFA32_eofS);
	static final char[] DFA32_min = DFA.unpackEncodedStringToUnsignedChars(DFA32_minS);
	static final char[] DFA32_max = DFA.unpackEncodedStringToUnsignedChars(DFA32_maxS);
	static final short[] DFA32_accept = DFA.unpackEncodedString(DFA32_acceptS);
	static final short[] DFA32_special = DFA.unpackEncodedString(DFA32_specialS);
	static final short[][] DFA32_transition;

	static {
		int numStates = DFA32_transitionS.length;
		DFA32_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA32_transition[i] = DFA.unpackEncodedString(DFA32_transitionS[i]);
		}
	}

	protected class DFA32 extends DFA {

		public DFA32(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 32;
			this.eot = DFA32_eot;
			this.eof = DFA32_eof;
			this.min = DFA32_min;
			this.max = DFA32_max;
			this.accept = DFA32_accept;
			this.special = DFA32_special;
			this.transition = DFA32_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 336:61: ( ( ws )? COMMA ( ws )? resourceIdentifier )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA47_eotS =
		"\10\uffff";
	static final String DFA47_eofS =
		"\1\2\7\uffff";
	static final String DFA47_minS =
		"\2\6\1\uffff\1\6\1\23\1\63\1\23\1\uffff";
	static final String DFA47_maxS =
		"\2\u0099\1\uffff\2\u0099\1\u0080\1\u0099\1\uffff";
	static final String DFA47_acceptS =
		"\2\uffff\1\2\4\uffff\1\1";
	static final String DFA47_specialS =
		"\10\uffff}>";
	static final String[] DFA47_transitionS = {
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\uffff\1\2\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\4\2\2\uffff\1\2\4\uffff\1\1\1\uffff\3\2\5\uffff\2\2\3\uffff\1\2\4\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\1\2\3\uffff\4\2\1\uffff\3\2\1\uffff\2\2\2\uffff"+
			"\5\2\1\uffff\3\2\1\uffff\6\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff"+
			"\5\2\6\uffff\1\2\1\uffff\2\2",
			"\1\2\3\uffff\5\2\3\uffff\1\2\2\uffff\1\3\1\uffff\1\2\17\uffff\1\2\2"+
			"\uffff\1\2\4\uffff\1\2\3\uffff\1\4\1\uffff\1\2\10\uffff\3\2\11\uffff"+
			"\1\2\1\uffff\1\2\5\uffff\1\2\1\3\10\uffff\1\2\12\uffff\3\2\2\uffff\3"+
			"\2\1\uffff\2\2\2\uffff\1\2\1\uffff\3\2\1\uffff\3\2\1\uffff\5\2\10\uffff"+
			"\5\2\10\uffff\1\2\1\3",
			"",
			"\1\2\3\uffff\5\2\3\uffff\1\2\2\uffff\1\3\1\uffff\1\2\17\uffff\1\2\2"+
			"\uffff\1\2\4\uffff\1\2\3\uffff\1\4\1\uffff\1\2\10\uffff\3\2\11\uffff"+
			"\1\2\1\uffff\1\2\5\uffff\1\2\1\3\10\uffff\1\2\12\uffff\3\2\2\uffff\3"+
			"\2\1\uffff\2\2\2\uffff\1\2\1\uffff\3\2\1\uffff\3\2\1\uffff\5\2\10\uffff"+
			"\5\2\10\uffff\1\2\1\3",
			"\1\2\1\uffff\1\6\11\uffff\1\5\63\uffff\1\6\26\uffff\1\7\56\uffff\1\6",
			"\1\7\114\uffff\1\2",
			"\1\2\1\uffff\1\6\75\uffff\1\6\26\uffff\1\7\56\uffff\1\6",
			""
	};

	static final short[] DFA47_eot = DFA.unpackEncodedString(DFA47_eotS);
	static final short[] DFA47_eof = DFA.unpackEncodedString(DFA47_eofS);
	static final char[] DFA47_min = DFA.unpackEncodedStringToUnsignedChars(DFA47_minS);
	static final char[] DFA47_max = DFA.unpackEncodedStringToUnsignedChars(DFA47_maxS);
	static final short[] DFA47_accept = DFA.unpackEncodedString(DFA47_acceptS);
	static final short[] DFA47_special = DFA.unpackEncodedString(DFA47_specialS);
	static final short[][] DFA47_transition;

	static {
		int numStates = DFA47_transitionS.length;
		DFA47_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA47_transition[i] = DFA.unpackEncodedString(DFA47_transitionS[i]);
		}
	}

	protected class DFA47 extends DFA {

		public DFA47(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 47;
			this.eot = DFA47_eot;
			this.eof = DFA47_eof;
			this.min = DFA47_min;
			this.max = DFA47_max;
			this.accept = DFA47_accept;
			this.special = DFA47_special;
			this.transition = DFA47_transition;
		}
		@Override
		public String getDescription() {
			return "343:39: ( LPAREN ( ws )? layerName ( ws )? RPAREN )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA48_eotS =
		"\6\uffff";
	static final String DFA48_eofS =
		"\6\uffff";
	static final String DFA48_minS =
		"\2\25\1\uffff\2\25\1\uffff";
	static final String DFA48_maxS =
		"\2\u0099\1\uffff\2\u0099\1\uffff";
	static final String DFA48_acceptS =
		"\2\uffff\1\2\2\uffff\1\1";
	static final String DFA48_specialS =
		"\6\uffff}>";
	static final String[] DFA48_transitionS = {
			"\1\1\75\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"\1\1\35\uffff\1\3\37\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"",
			"\1\4\62\uffff\1\2\12\uffff\1\4\105\uffff\1\4",
			"\1\4\35\uffff\1\5\24\uffff\1\2\12\uffff\1\4\105\uffff\1\4",
			""
	};

	static final short[] DFA48_eot = DFA.unpackEncodedString(DFA48_eotS);
	static final short[] DFA48_eof = DFA.unpackEncodedString(DFA48_eofS);
	static final char[] DFA48_min = DFA.unpackEncodedStringToUnsignedChars(DFA48_minS);
	static final char[] DFA48_max = DFA.unpackEncodedStringToUnsignedChars(DFA48_maxS);
	static final short[] DFA48_accept = DFA.unpackEncodedString(DFA48_acceptS);
	static final short[] DFA48_special = DFA.unpackEncodedString(DFA48_specialS);
	static final short[][] DFA48_transition;

	static {
		int numStates = DFA48_transitionS.length;
		DFA48_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA48_transition[i] = DFA.unpackEncodedString(DFA48_transitionS[i]);
		}
	}

	protected class DFA48 extends DFA {

		public DFA48(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 48;
			this.eot = DFA48_eot;
			this.eof = DFA48_eof;
			this.min = DFA48_min;
			this.max = DFA48_max;
			this.accept = DFA48_accept;
			this.special = DFA48_special;
			this.transition = DFA48_transition;
		}
		@Override
		public String getDescription() {
			return "348:40: ( ws sass_use_as )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA49_eotS =
		"\4\uffff";
	static final String DFA49_eofS =
		"\4\uffff";
	static final String DFA49_minS =
		"\2\25\2\uffff";
	static final String DFA49_maxS =
		"\2\u0099\2\uffff";
	static final String DFA49_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA49_specialS =
		"\4\uffff}>";
	static final String[] DFA49_transitionS = {
			"\1\1\75\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"\1\1\35\uffff\1\3\37\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"",
			""
	};

	static final short[] DFA49_eot = DFA.unpackEncodedString(DFA49_eotS);
	static final short[] DFA49_eof = DFA.unpackEncodedString(DFA49_eofS);
	static final char[] DFA49_min = DFA.unpackEncodedStringToUnsignedChars(DFA49_minS);
	static final char[] DFA49_max = DFA.unpackEncodedStringToUnsignedChars(DFA49_maxS);
	static final short[] DFA49_accept = DFA.unpackEncodedString(DFA49_acceptS);
	static final short[] DFA49_special = DFA.unpackEncodedString(DFA49_specialS);
	static final short[][] DFA49_transition;

	static {
		int numStates = DFA49_transitionS.length;
		DFA49_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA49_transition[i] = DFA.unpackEncodedString(DFA49_transitionS[i]);
		}
	}

	protected class DFA49 extends DFA {

		public DFA49(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 49;
			this.eot = DFA49_eot;
			this.eof = DFA49_eof;
			this.min = DFA49_min;
			this.max = DFA49_max;
			this.accept = DFA49_accept;
			this.special = DFA49_special;
			this.transition = DFA49_transition;
		}
		@Override
		public String getDescription() {
			return "348:58: ( ws sass_use_with )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA54_eotS =
		"\4\uffff";
	static final String DFA54_eofS =
		"\4\uffff";
	static final String DFA54_minS =
		"\2\24\2\uffff";
	static final String DFA54_maxS =
		"\2\u0099\2\uffff";
	static final String DFA54_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA54_specialS =
		"\4\uffff}>";
	static final String[] DFA54_transitionS = {
			"\1\3\1\1\75\uffff\1\1\26\uffff\1\2\56\uffff\1\1",
			"\1\3\1\1\75\uffff\1\1\26\uffff\1\2\56\uffff\1\1",
			"",
			""
	};

	static final short[] DFA54_eot = DFA.unpackEncodedString(DFA54_eotS);
	static final short[] DFA54_eof = DFA.unpackEncodedString(DFA54_eofS);
	static final char[] DFA54_min = DFA.unpackEncodedStringToUnsignedChars(DFA54_minS);
	static final char[] DFA54_max = DFA.unpackEncodedStringToUnsignedChars(DFA54_maxS);
	static final short[] DFA54_accept = DFA.unpackEncodedString(DFA54_acceptS);
	static final short[] DFA54_special = DFA.unpackEncodedString(DFA54_specialS);
	static final short[][] DFA54_transition;

	static {
		int numStates = DFA54_transitionS.length;
		DFA54_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA54_transition[i] = DFA.unpackEncodedString(DFA54_transitionS[i]);
		}
	}

	protected class DFA54 extends DFA {

		public DFA54(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 54;
			this.eot = DFA54_eot;
			this.eof = DFA54_eof;
			this.min = DFA54_min;
			this.max = DFA54_max;
			this.accept = DFA54_accept;
			this.special = DFA54_special;
			this.transition = DFA54_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 358:80: ( ( ws )? COMMA ( ws )? sass_use_with_declaration )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA59_eotS =
		"\7\uffff";
	static final String DFA59_eofS =
		"\7\uffff";
	static final String DFA59_minS =
		"\2\25\1\uffff\2\25\1\0\1\uffff";
	static final String DFA59_maxS =
		"\2\u0099\1\uffff\2\u0099\1\0\1\uffff";
	static final String DFA59_acceptS =
		"\2\uffff\1\2\3\uffff\1\1";
	static final String DFA59_specialS =
		"\5\uffff\1\0\1\uffff}>";
	static final String[] DFA59_transitionS = {
			"\1\1\75\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"\1\1\35\uffff\1\3\37\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"",
			"\1\4\62\uffff\1\2\12\uffff\1\4\105\uffff\1\4",
			"\1\4\35\uffff\1\5\24\uffff\1\2\12\uffff\1\4\105\uffff\1\4",
			"\1\uffff",
			""
	};

	static final short[] DFA59_eot = DFA.unpackEncodedString(DFA59_eotS);
	static final short[] DFA59_eof = DFA.unpackEncodedString(DFA59_eofS);
	static final char[] DFA59_min = DFA.unpackEncodedStringToUnsignedChars(DFA59_minS);
	static final char[] DFA59_max = DFA.unpackEncodedStringToUnsignedChars(DFA59_maxS);
	static final short[] DFA59_accept = DFA.unpackEncodedString(DFA59_acceptS);
	static final short[] DFA59_special = DFA.unpackEncodedString(DFA59_specialS);
	static final short[][] DFA59_transition;

	static {
		int numStates = DFA59_transitionS.length;
		DFA59_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA59_transition[i] = DFA.unpackEncodedString(DFA59_transitionS[i]);
		}
	}

	protected class DFA59 extends DFA {

		public DFA59(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 59;
			this.eot = DFA59_eot;
			this.eof = DFA59_eof;
			this.min = DFA59_min;
			this.max = DFA59_max;
			this.accept = DFA59_accept;
			this.special = DFA59_special;
			this.transition = DFA59_transition;
		}
		@Override
		public String getDescription() {
			return "369:44: ( ws ( sass_forward_hide | sass_forward_show ) )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA59_5 = input.LA(1);
						 
						int index59_5 = input.index();
						input.rewind();
						s = -1;
						if ( (!(evalPredicate(evalPredicate(tokenNameEquals2("as"),"tokenNameEquals2(\"as\")"),""))) ) {s = 6;}
						else if ( (evalPredicate(tokenNameEquals2("as"),"tokenNameEquals2(\"as\")")) ) {s = 2;}
						 
						input.seek(index59_5);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 59, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA58_eotS =
		"\6\uffff";
	static final String DFA58_eofS =
		"\6\uffff";
	static final String DFA58_minS =
		"\1\63\2\25\1\0\2\uffff";
	static final String DFA58_maxS =
		"\1\63\2\u0099\1\0\2\uffff";
	static final String DFA58_acceptS =
		"\4\uffff\1\1\1\2";
	static final String DFA58_specialS =
		"\3\uffff\1\0\2\uffff}>";
	static final String[] DFA58_transitionS = {
			"\1\1",
			"\1\2\75\uffff\1\2\105\uffff\1\2",
			"\1\2\35\uffff\1\3\37\uffff\1\2\105\uffff\1\2",
			"\1\uffff",
			"",
			""
	};

	static final short[] DFA58_eot = DFA.unpackEncodedString(DFA58_eotS);
	static final short[] DFA58_eof = DFA.unpackEncodedString(DFA58_eofS);
	static final char[] DFA58_min = DFA.unpackEncodedStringToUnsignedChars(DFA58_minS);
	static final char[] DFA58_max = DFA.unpackEncodedStringToUnsignedChars(DFA58_maxS);
	static final short[] DFA58_accept = DFA.unpackEncodedString(DFA58_acceptS);
	static final short[] DFA58_special = DFA.unpackEncodedString(DFA58_specialS);
	static final short[][] DFA58_transition;

	static {
		int numStates = DFA58_transitionS.length;
		DFA58_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA58_transition[i] = DFA.unpackEncodedString(DFA58_transitionS[i]);
		}
	}

	protected class DFA58 extends DFA {

		public DFA58(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 58;
			this.eot = DFA58_eot;
			this.eof = DFA58_eof;
			this.min = DFA58_min;
			this.max = DFA58_max;
			this.accept = DFA58_accept;
			this.special = DFA58_special;
			this.transition = DFA58_transition;
		}
		@Override
		public String getDescription() {
			return "369:49: ( sass_forward_hide | sass_forward_show )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA58_3 = input.LA(1);
						 
						int index58_3 = input.index();
						input.rewind();
						s = -1;
						if ( (evalPredicate(tokenNameEquals("hide"),"tokenNameEquals(\"hide\")")) ) {s = 4;}
						else if ( (evalPredicate(tokenNameEquals("show"),"tokenNameEquals(\"show\")")) ) {s = 5;}
						 
						input.seek(index58_3);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 58, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA60_eotS =
		"\6\uffff";
	static final String DFA60_eofS =
		"\6\uffff";
	static final String DFA60_minS =
		"\2\25\1\uffff\2\25\1\uffff";
	static final String DFA60_maxS =
		"\2\u0099\1\uffff\2\u0099\1\uffff";
	static final String DFA60_acceptS =
		"\2\uffff\1\2\2\uffff\1\1";
	static final String DFA60_specialS =
		"\6\uffff}>";
	static final String[] DFA60_transitionS = {
			"\1\1\75\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"\1\1\35\uffff\1\3\37\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"",
			"\1\4\62\uffff\1\2\12\uffff\1\4\105\uffff\1\4",
			"\1\4\35\uffff\1\5\24\uffff\1\2\12\uffff\1\4\105\uffff\1\4",
			""
	};

	static final short[] DFA60_eot = DFA.unpackEncodedString(DFA60_eotS);
	static final short[] DFA60_eof = DFA.unpackEncodedString(DFA60_eofS);
	static final char[] DFA60_min = DFA.unpackEncodedStringToUnsignedChars(DFA60_minS);
	static final char[] DFA60_max = DFA.unpackEncodedStringToUnsignedChars(DFA60_maxS);
	static final short[] DFA60_accept = DFA.unpackEncodedString(DFA60_acceptS);
	static final short[] DFA60_special = DFA.unpackEncodedString(DFA60_specialS);
	static final short[][] DFA60_transition;

	static {
		int numStates = DFA60_transitionS.length;
		DFA60_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA60_transition[i] = DFA.unpackEncodedString(DFA60_transitionS[i]);
		}
	}

	protected class DFA60 extends DFA {

		public DFA60(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 60;
			this.eot = DFA60_eot;
			this.eof = DFA60_eof;
			this.min = DFA60_min;
			this.max = DFA60_max;
			this.accept = DFA60_accept;
			this.special = DFA60_special;
			this.transition = DFA60_transition;
		}
		@Override
		public String getDescription() {
			return "369:93: ({...}? ws sass_forward_as )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA61_eotS =
		"\4\uffff";
	static final String DFA61_eofS =
		"\4\uffff";
	static final String DFA61_minS =
		"\2\25\2\uffff";
	static final String DFA61_maxS =
		"\2\u0099\2\uffff";
	static final String DFA61_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA61_specialS =
		"\4\uffff}>";
	static final String[] DFA61_transitionS = {
			"\1\1\75\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"\1\1\35\uffff\1\3\37\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"",
			""
	};

	static final short[] DFA61_eot = DFA.unpackEncodedString(DFA61_eotS);
	static final short[] DFA61_eof = DFA.unpackEncodedString(DFA61_eofS);
	static final char[] DFA61_min = DFA.unpackEncodedStringToUnsignedChars(DFA61_minS);
	static final char[] DFA61_max = DFA.unpackEncodedStringToUnsignedChars(DFA61_maxS);
	static final short[] DFA61_accept = DFA.unpackEncodedString(DFA61_acceptS);
	static final short[] DFA61_special = DFA.unpackEncodedString(DFA61_specialS);
	static final short[][] DFA61_transition;

	static {
		int numStates = DFA61_transitionS.length;
		DFA61_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA61_transition[i] = DFA.unpackEncodedString(DFA61_transitionS[i]);
		}
	}

	protected class DFA61 extends DFA {

		public DFA61(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 61;
			this.eot = DFA61_eot;
			this.eof = DFA61_eof;
			this.min = DFA61_min;
			this.max = DFA61_max;
			this.accept = DFA61_accept;
			this.special = DFA61_special;
			this.transition = DFA61_transition;
		}
		@Override
		public String getDescription() {
			return "369:141: ({...}? ws sass_forward_with )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA66_eotS =
		"\4\uffff";
	static final String DFA66_eofS =
		"\4\uffff";
	static final String DFA66_minS =
		"\2\24\2\uffff";
	static final String DFA66_maxS =
		"\2\u0099\2\uffff";
	static final String DFA66_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA66_specialS =
		"\4\uffff}>";
	static final String[] DFA66_transitionS = {
			"\1\3\1\1\75\uffff\1\1\26\uffff\1\2\56\uffff\1\1",
			"\1\3\1\1\75\uffff\1\1\26\uffff\1\2\56\uffff\1\1",
			"",
			""
	};

	static final short[] DFA66_eot = DFA.unpackEncodedString(DFA66_eotS);
	static final short[] DFA66_eof = DFA.unpackEncodedString(DFA66_eofS);
	static final char[] DFA66_min = DFA.unpackEncodedStringToUnsignedChars(DFA66_minS);
	static final char[] DFA66_max = DFA.unpackEncodedStringToUnsignedChars(DFA66_maxS);
	static final short[] DFA66_accept = DFA.unpackEncodedString(DFA66_acceptS);
	static final short[] DFA66_special = DFA.unpackEncodedString(DFA66_specialS);
	static final short[][] DFA66_transition;

	static {
		int numStates = DFA66_transitionS.length;
		DFA66_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA66_transition[i] = DFA.unpackEncodedString(DFA66_transitionS[i]);
		}
	}

	protected class DFA66 extends DFA {

		public DFA66(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 66;
			this.eot = DFA66_eot;
			this.eof = DFA66_eof;
			this.min = DFA66_min;
			this.max = DFA66_max;
			this.accept = DFA66_accept;
			this.special = DFA66_special;
			this.transition = DFA66_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 379:84: ( ( ws )? COMMA ( ws )? sass_forward_with_declaration )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA72_eotS =
		"\4\uffff";
	static final String DFA72_eofS =
		"\4\uffff";
	static final String DFA72_minS =
		"\2\24\2\uffff";
	static final String DFA72_maxS =
		"\2\u0099\2\uffff";
	static final String DFA72_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA72_specialS =
		"\4\uffff}>";
	static final String[] DFA72_transitionS = {
			"\1\3\1\1\75\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"\1\3\1\1\35\uffff\1\2\37\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"",
			""
	};

	static final short[] DFA72_eot = DFA.unpackEncodedString(DFA72_eotS);
	static final short[] DFA72_eof = DFA.unpackEncodedString(DFA72_eofS);
	static final char[] DFA72_min = DFA.unpackEncodedStringToUnsignedChars(DFA72_minS);
	static final char[] DFA72_max = DFA.unpackEncodedStringToUnsignedChars(DFA72_maxS);
	static final short[] DFA72_accept = DFA.unpackEncodedString(DFA72_acceptS);
	static final short[] DFA72_special = DFA.unpackEncodedString(DFA72_specialS);
	static final short[][] DFA72_transition;

	static {
		int numStates = DFA72_transitionS.length;
		DFA72_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA72_transition[i] = DFA.unpackEncodedString(DFA72_transitionS[i]);
		}
	}

	protected class DFA72 extends DFA {

		public DFA72(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 72;
			this.eot = DFA72_eot;
			this.eof = DFA72_eof;
			this.min = DFA72_min;
			this.max = DFA72_max;
			this.accept = DFA72_accept;
			this.special = DFA72_special;
			this.transition = DFA72_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 389:47: ( ( ws )? COMMA ( ws )? IDENT )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA75_eotS =
		"\4\uffff";
	static final String DFA75_eofS =
		"\4\uffff";
	static final String DFA75_minS =
		"\2\24\2\uffff";
	static final String DFA75_maxS =
		"\2\u0099\2\uffff";
	static final String DFA75_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA75_specialS =
		"\4\uffff}>";
	static final String[] DFA75_transitionS = {
			"\1\3\1\1\75\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"\1\3\1\1\35\uffff\1\2\37\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"",
			""
	};

	static final short[] DFA75_eot = DFA.unpackEncodedString(DFA75_eotS);
	static final short[] DFA75_eof = DFA.unpackEncodedString(DFA75_eofS);
	static final char[] DFA75_min = DFA.unpackEncodedStringToUnsignedChars(DFA75_minS);
	static final char[] DFA75_max = DFA.unpackEncodedStringToUnsignedChars(DFA75_maxS);
	static final short[] DFA75_accept = DFA.unpackEncodedString(DFA75_acceptS);
	static final short[] DFA75_special = DFA.unpackEncodedString(DFA75_specialS);
	static final short[][] DFA75_transition;

	static {
		int numStates = DFA75_transitionS.length;
		DFA75_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA75_transition[i] = DFA.unpackEncodedString(DFA75_transitionS[i]);
		}
	}

	protected class DFA75 extends DFA {

		public DFA75(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 75;
			this.eot = DFA75_eot;
			this.eof = DFA75_eof;
			this.min = DFA75_min;
			this.max = DFA75_max;
			this.accept = DFA75_accept;
			this.special = DFA75_special;
			this.transition = DFA75_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 394:47: ( ( ws )? COMMA ( ws )? IDENT )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA81_eotS =
		"\6\uffff";
	static final String DFA81_eofS =
		"\6\uffff";
	static final String DFA81_minS =
		"\2\6\1\0\1\uffff\1\0\1\uffff";
	static final String DFA81_maxS =
		"\2\u0099\1\0\1\uffff\1\0\1\uffff";
	static final String DFA81_acceptS =
		"\3\uffff\1\2\1\uffff\1\1";
	static final String DFA81_specialS =
		"\2\uffff\1\0\1\uffff\1\1\1\uffff}>";
	static final String[] DFA81_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\uffff\1\3\7\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\3\3\2\uffff\3\3\1\uffff\2\3\2\uffff\5\3\1\uffff\3\3\1\uffff"+
			"\5\3\1\2\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3"+
			"\1\uffff\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\uffff\1\3\7\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\3\3\2\uffff\3\3\1\uffff\2\3\2\uffff\5\3\1\uffff\3\3\1\uffff"+
			"\5\3\1\4\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3"+
			"\1\uffff\1\3\1\1",
			"\1\uffff",
			"",
			"\1\uffff",
			""
	};

	static final short[] DFA81_eot = DFA.unpackEncodedString(DFA81_eotS);
	static final short[] DFA81_eof = DFA.unpackEncodedString(DFA81_eofS);
	static final char[] DFA81_min = DFA.unpackEncodedStringToUnsignedChars(DFA81_minS);
	static final char[] DFA81_max = DFA.unpackEncodedStringToUnsignedChars(DFA81_maxS);
	static final short[] DFA81_accept = DFA.unpackEncodedString(DFA81_acceptS);
	static final short[] DFA81_special = DFA.unpackEncodedString(DFA81_specialS);
	static final short[][] DFA81_transition;

	static {
		int numStates = DFA81_transitionS.length;
		DFA81_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA81_transition[i] = DFA.unpackEncodedString(DFA81_transitionS[i]);
		}
	}

	protected class DFA81 extends DFA {

		public DFA81(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 81;
			this.eot = DFA81_eot;
			this.eof = DFA81_eof;
			this.min = DFA81_min;
			this.max = DFA81_max;
			this.accept = DFA81_accept;
			this.special = DFA81_special;
			this.transition = DFA81_transition;
		}
		@Override
		public String getDescription() {
			return "410:26: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA81_2 = input.LA(1);
						 
						int index81_2 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred4_Css3()) ) {s = 5;}
						else if ( (true) ) {s = 3;}
						 
						input.seek(index81_2);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA81_4 = input.LA(1);
						 
						int index81_4 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred4_Css3()) ) {s = 5;}
						else if ( (true) ) {s = 3;}
						 
						input.seek(index81_4);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 81, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA87_eotS =
		"\4\uffff";
	static final String DFA87_eofS =
		"\4\uffff";
	static final String DFA87_minS =
		"\2\6\2\uffff";
	static final String DFA87_maxS =
		"\2\u0099\2\uffff";
	static final String DFA87_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA87_specialS =
		"\4\uffff}>";
	static final String[] DFA87_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\2\1\3\7\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\3\3\2\uffff\3\3\1\uffff\2\3\2\uffff\5\3\1\uffff\3\3\1\uffff"+
			"\6\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\2\1\3\7\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\3\3\2\uffff\3\3\1\uffff\2\3\2\uffff\5\3\1\uffff\3\3\1\uffff"+
			"\6\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"",
			""
	};

	static final short[] DFA87_eot = DFA.unpackEncodedString(DFA87_eotS);
	static final short[] DFA87_eof = DFA.unpackEncodedString(DFA87_eofS);
	static final char[] DFA87_min = DFA.unpackEncodedStringToUnsignedChars(DFA87_minS);
	static final char[] DFA87_max = DFA.unpackEncodedStringToUnsignedChars(DFA87_maxS);
	static final short[] DFA87_accept = DFA.unpackEncodedString(DFA87_acceptS);
	static final short[] DFA87_special = DFA.unpackEncodedString(DFA87_specialS);
	static final short[][] DFA87_transition;

	static {
		int numStates = DFA87_transitionS.length;
		DFA87_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA87_transition[i] = DFA.unpackEncodedString(DFA87_transitionS[i]);
		}
	}

	protected class DFA87 extends DFA {

		public DFA87(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 87;
			this.eot = DFA87_eot;
			this.eof = DFA87_eof;
			this.min = DFA87_min;
			this.max = DFA87_max;
			this.accept = DFA87_accept;
			this.special = DFA87_special;
			this.transition = DFA87_transition;
		}
		@Override
		public String getDescription() {
			return "421:87: ( ( ws )? IMPORTANT_SYM )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA89_eotS =
		"\4\uffff";
	static final String DFA89_eofS =
		"\4\uffff";
	static final String DFA89_minS =
		"\2\6\2\uffff";
	static final String DFA89_maxS =
		"\2\u0099\2\uffff";
	static final String DFA89_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA89_specialS =
		"\4\uffff}>";
	static final String[] DFA89_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\2\1\3\7\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\3\3\2\uffff\3\3\1\uffff\2\3\2\uffff\5\3\1\uffff\3\3\1\uffff"+
			"\6\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\2\1\3\7\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\3\3\2\uffff\3\3\1\uffff\2\3\2\uffff\5\3\1\uffff\3\3\1\uffff"+
			"\6\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"",
			""
	};

	static final short[] DFA89_eot = DFA.unpackEncodedString(DFA89_eotS);
	static final short[] DFA89_eof = DFA.unpackEncodedString(DFA89_eofS);
	static final char[] DFA89_min = DFA.unpackEncodedStringToUnsignedChars(DFA89_minS);
	static final char[] DFA89_max = DFA.unpackEncodedStringToUnsignedChars(DFA89_maxS);
	static final short[] DFA89_accept = DFA.unpackEncodedString(DFA89_acceptS);
	static final short[] DFA89_special = DFA.unpackEncodedString(DFA89_specialS);
	static final short[][] DFA89_transition;

	static {
		int numStates = DFA89_transitionS.length;
		DFA89_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA89_transition[i] = DFA.unpackEncodedString(DFA89_transitionS[i]);
		}
	}

	protected class DFA89 extends DFA {

		public DFA89(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 89;
			this.eot = DFA89_eot;
			this.eof = DFA89_eof;
			this.min = DFA89_min;
			this.max = DFA89_max;
			this.accept = DFA89_accept;
			this.special = DFA89_special;
			this.transition = DFA89_transition;
		}
		@Override
		public String getDescription() {
			return "422:57: ( ( ws )? IMPORTANT_SYM )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA93_eotS =
		"\4\uffff";
	static final String DFA93_eofS =
		"\2\2\2\uffff";
	static final String DFA93_minS =
		"\2\6\2\uffff";
	static final String DFA93_maxS =
		"\2\u0099\2\uffff";
	static final String DFA93_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA93_specialS =
		"\1\0\1\1\2\uffff}>";
	static final String[] DFA93_transitionS = {
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\3\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\5\uffff\6\2\2\uffff"+
			"\1\2\6\uffff\3\2\5\uffff\1\2\1\1\10\uffff\1\2\2\uffff\2\2\2\uffff\1\2"+
			"\3\uffff\4\2\1\uffff\3\2\1\uffff\2\2\2\uffff\5\2\1\uffff\3\2\1\uffff"+
			"\6\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\6\uffff\1\2\1\uffff"+
			"\1\2\1\1",
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\3\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\5\uffff\6\2\2\uffff"+
			"\1\2\6\uffff\3\2\5\uffff\1\2\1\1\10\uffff\1\2\2\uffff\2\2\2\uffff\1\2"+
			"\3\uffff\4\2\1\uffff\3\2\1\uffff\2\2\1\uffff\6\2\1\uffff\3\2\1\uffff"+
			"\6\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\6\uffff\1\2\1\uffff"+
			"\1\2\1\1",
			"",
			""
	};

	static final short[] DFA93_eot = DFA.unpackEncodedString(DFA93_eotS);
	static final short[] DFA93_eof = DFA.unpackEncodedString(DFA93_eofS);
	static final char[] DFA93_min = DFA.unpackEncodedStringToUnsignedChars(DFA93_minS);
	static final char[] DFA93_max = DFA.unpackEncodedStringToUnsignedChars(DFA93_maxS);
	static final short[] DFA93_accept = DFA.unpackEncodedString(DFA93_acceptS);
	static final short[] DFA93_special = DFA.unpackEncodedString(DFA93_specialS);
	static final short[][] DFA93_transition;

	static {
		int numStates = DFA93_transitionS.length;
		DFA93_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA93_transition[i] = DFA.unpackEncodedString(DFA93_transitionS[i]);
		}
	}

	protected class DFA93 extends DFA {

		public DFA93(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 93;
			this.eot = DFA93_eot;
			this.eof = DFA93_eof;
			this.min = DFA93_min;
			this.max = DFA93_max;
			this.accept = DFA93_accept;
			this.special = DFA93_special;
			this.transition = DFA93_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 439:15: ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA93_0 = input.LA(1);
						 
						int index93_0 = input.index();
						input.rewind();
						s = -1;
						if ( (LA93_0==COMMENT||LA93_0==NL||LA93_0==WS) ) {s = 1;}
						else if ( (LA93_0==EOF||(LA93_0 >= AT_IDENT && LA93_0 <= AT_SIGN)||(LA93_0 >= BOTTOMCENTER_SYM && LA93_0 <= BOTTOMRIGHT_SYM)||(LA93_0 >= CHARSET_SYM && LA93_0 <= COLON)||LA93_0==COUNTER_STYLE_SYM||(LA93_0 >= DCOLON && LA93_0 <= DOT)||LA93_0==FONT_FACE_SYM||(LA93_0 >= GEN && LA93_0 <= GREATER)||(LA93_0 >= HASH && LA93_0 <= HASH_SYMBOL)||LA93_0==IDENT||LA93_0==IMPORT_SYM||(LA93_0 >= LAYER_SYM && LA93_0 <= LEFTTOP_SYM)||LA93_0==LESS_AND||(LA93_0 >= MEDIA_SYM && LA93_0 <= MOZ_DOCUMENT_SYM)||LA93_0==NAMESPACE_SYM||LA93_0==PAGE_SYM||(LA93_0 >= PIPE && LA93_0 <= PLUS)||LA93_0==RBRACE||(LA93_0 >= RIGHTBOTTOM_SYM && LA93_0 <= RPAREN)||(LA93_0 >= SASS_AT_ROOT && LA93_0 <= SASS_DEBUG)||(LA93_0 >= SASS_EACH && LA93_0 <= SASS_ELSE)||(LA93_0 >= SASS_EXTEND && LA93_0 <= SASS_FUNCTION)||(LA93_0 >= SASS_IF && LA93_0 <= SASS_MIXIN)||(LA93_0 >= SASS_RETURN && LA93_0 <= SEMI)||LA93_0==STAR||LA93_0==SUPPORTS_SYM||LA93_0==TILDE||(LA93_0 >= TOPCENTER_SYM && LA93_0 <= TOPRIGHT_SYM)||LA93_0==VARIABLE||LA93_0==WEBKIT_KEYFRAMES_SYM) ) {s = 2;}
						else if ( (LA93_0==COMMA) && (synpred10_Css3())) {s = 3;}
						 
						input.seek(index93_0);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA93_1 = input.LA(1);
						 
						int index93_1 = input.index();
						input.rewind();
						s = -1;
						if ( (LA93_1==EOF||(LA93_1 >= AT_IDENT && LA93_1 <= AT_SIGN)||(LA93_1 >= BOTTOMCENTER_SYM && LA93_1 <= BOTTOMRIGHT_SYM)||(LA93_1 >= CHARSET_SYM && LA93_1 <= COLON)||LA93_1==COUNTER_STYLE_SYM||(LA93_1 >= DCOLON && LA93_1 <= DOT)||LA93_1==FONT_FACE_SYM||(LA93_1 >= GEN && LA93_1 <= GREATER)||(LA93_1 >= HASH && LA93_1 <= HASH_SYMBOL)||LA93_1==IDENT||LA93_1==IMPORT_SYM||(LA93_1 >= LAYER_SYM && LA93_1 <= LEFTTOP_SYM)||LA93_1==LESS_AND||(LA93_1 >= MEDIA_SYM && LA93_1 <= MOZ_DOCUMENT_SYM)||LA93_1==NAMESPACE_SYM||LA93_1==PAGE_SYM||(LA93_1 >= PIPE && LA93_1 <= PLUS)||LA93_1==RBRACE||(LA93_1 >= RIGHTBOTTOM_SYM && LA93_1 <= RPAREN)||(LA93_1 >= SASS_AT_ROOT && LA93_1 <= SASS_DEBUG)||(LA93_1 >= SASS_EACH && LA93_1 <= SASS_ELSE)||(LA93_1 >= SASS_ERROR && LA93_1 <= SASS_FUNCTION)||(LA93_1 >= SASS_IF && LA93_1 <= SASS_MIXIN)||(LA93_1 >= SASS_RETURN && LA93_1 <= SEMI)||LA93_1==STAR||LA93_1==SUPPORTS_SYM||LA93_1==TILDE||(LA93_1 >= TOPCENTER_SYM && LA93_1 <= TOPRIGHT_SYM)||LA93_1==VARIABLE||LA93_1==WEBKIT_KEYFRAMES_SYM) ) {s = 2;}
						else if ( (LA93_1==COMMENT||LA93_1==NL||LA93_1==WS) ) {s = 1;}
						else if ( (LA93_1==COMMA) && (synpred10_Css3())) {s = 3;}
						 
						input.seek(index93_1);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 93, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA106_eotS =
		"\4\uffff";
	static final String DFA106_eofS =
		"\4\uffff";
	static final String DFA106_minS =
		"\2\23\2\uffff";
	static final String DFA106_maxS =
		"\2\u0099\2\uffff";
	static final String DFA106_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA106_specialS =
		"\4\uffff}>";
	static final String[] DFA106_transitionS = {
			"\1\2\1\uffff\1\1\75\uffff\1\1\26\uffff\1\3\56\uffff\1\1",
			"\1\2\1\uffff\1\1\75\uffff\1\1\26\uffff\1\3\56\uffff\1\1",
			"",
			""
	};

	static final short[] DFA106_eot = DFA.unpackEncodedString(DFA106_eotS);
	static final short[] DFA106_eof = DFA.unpackEncodedString(DFA106_eofS);
	static final char[] DFA106_min = DFA.unpackEncodedStringToUnsignedChars(DFA106_minS);
	static final char[] DFA106_max = DFA.unpackEncodedStringToUnsignedChars(DFA106_maxS);
	static final short[] DFA106_accept = DFA.unpackEncodedString(DFA106_acceptS);
	static final short[] DFA106_special = DFA.unpackEncodedString(DFA106_specialS);
	static final short[][] DFA106_transition;

	static {
		int numStates = DFA106_transitionS.length;
		DFA106_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA106_transition[i] = DFA.unpackEncodedString(DFA106_transitionS[i]);
		}
	}

	protected class DFA106 extends DFA {

		public DFA106(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 106;
			this.eot = DFA106_eot;
			this.eof = DFA106_eof;
			this.min = DFA106_min;
			this.max = DFA106_max;
			this.accept = DFA106_accept;
			this.special = DFA106_special;
			this.transition = DFA106_transition;
		}
		@Override
		public String getDescription() {
			return "459:42: ( mediaFeatureValue )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA115_eotS =
		"\6\uffff";
	static final String DFA115_eofS =
		"\2\3\4\uffff";
	static final String DFA115_minS =
		"\2\6\1\0\1\uffff\1\0\1\uffff";
	static final String DFA115_maxS =
		"\2\u0099\1\0\1\uffff\1\0\1\uffff";
	static final String DFA115_acceptS =
		"\3\uffff\1\2\1\uffff\1\1";
	static final String DFA115_specialS =
		"\2\uffff\1\0\1\uffff\1\1\1\uffff}>";
	static final String[] DFA115_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\uffff\1\3\5\uffff\1\3\1\uffff"+
			"\4\3\2\uffff\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3"+
			"\2\uffff\1\3\3\uffff\3\3\2\uffff\3\3\1\uffff\2\3\2\uffff\5\3\1\uffff"+
			"\3\3\1\uffff\5\3\1\2\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3"+
			"\10\uffff\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\uffff\1\3\5\uffff\1\3\1\uffff"+
			"\4\3\2\uffff\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3"+
			"\2\uffff\1\3\3\uffff\3\3\2\uffff\3\3\1\uffff\2\3\2\uffff\5\3\1\uffff"+
			"\3\3\1\uffff\5\3\1\4\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3"+
			"\10\uffff\1\3\1\1",
			"\1\uffff",
			"",
			"\1\uffff",
			""
	};

	static final short[] DFA115_eot = DFA.unpackEncodedString(DFA115_eotS);
	static final short[] DFA115_eof = DFA.unpackEncodedString(DFA115_eofS);
	static final char[] DFA115_min = DFA.unpackEncodedStringToUnsignedChars(DFA115_minS);
	static final char[] DFA115_max = DFA.unpackEncodedStringToUnsignedChars(DFA115_maxS);
	static final short[] DFA115_accept = DFA.unpackEncodedString(DFA115_acceptS);
	static final short[] DFA115_special = DFA.unpackEncodedString(DFA115_specialS);
	static final short[][] DFA115_transition;

	static {
		int numStates = DFA115_transitionS.length;
		DFA115_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA115_transition[i] = DFA.unpackEncodedString(DFA115_transitionS[i]);
		}
	}

	protected class DFA115 extends DFA {

		public DFA115(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 115;
			this.eot = DFA115_eot;
			this.eof = DFA115_eof;
			this.min = DFA115_min;
			this.max = DFA115_max;
			this.accept = DFA115_accept;
			this.special = DFA115_special;
			this.transition = DFA115_transition;
		}
		@Override
		public String getDescription() {
			return "480:21: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA115_2 = input.LA(1);
						 
						int index115_2 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred15_Css3()) ) {s = 5;}
						else if ( (true) ) {s = 3;}
						 
						input.seek(index115_2);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA115_4 = input.LA(1);
						 
						int index115_4 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred15_Css3()) ) {s = 5;}
						else if ( (true) ) {s = 3;}
						 
						input.seek(index115_4);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 115, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA124_eotS =
		"\4\uffff";
	static final String DFA124_eofS =
		"\4\uffff";
	static final String DFA124_minS =
		"\2\25\2\uffff";
	static final String DFA124_maxS =
		"\2\u0099\2\uffff";
	static final String DFA124_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA124_specialS =
		"\4\uffff}>";
	static final String[] DFA124_transitionS = {
			"\1\1\46\uffff\1\2\26\uffff\1\1\26\uffff\1\2\56\uffff\1\1",
			"\1\1\35\uffff\1\3\10\uffff\1\2\26\uffff\1\1\26\uffff\1\2\56\uffff\1"+
			"\1",
			"",
			""
	};

	static final short[] DFA124_eot = DFA.unpackEncodedString(DFA124_eotS);
	static final short[] DFA124_eof = DFA.unpackEncodedString(DFA124_eofS);
	static final char[] DFA124_min = DFA.unpackEncodedStringToUnsignedChars(DFA124_minS);
	static final char[] DFA124_max = DFA.unpackEncodedStringToUnsignedChars(DFA124_maxS);
	static final short[] DFA124_accept = DFA.unpackEncodedString(DFA124_acceptS);
	static final short[] DFA124_special = DFA.unpackEncodedString(DFA124_specialS);
	static final short[][] DFA124_transition;

	static {
		int numStates = DFA124_transitionS.length;
		DFA124_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA124_transition[i] = DFA.unpackEncodedString(DFA124_transitionS[i]);
		}
	}

	protected class DFA124 extends DFA {

		public DFA124(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 124;
			this.eot = DFA124_eot;
			this.eof = DFA124_eof;
			this.min = DFA124_min;
			this.max = DFA124_max;
			this.accept = DFA124_accept;
			this.special = DFA124_special;
			this.transition = DFA124_transition;
		}
		@Override
		public String getDescription() {
			return "515:21: ( ws supportsWithOperator )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA126_eotS =
		"\4\uffff";
	static final String DFA126_eofS =
		"\4\uffff";
	static final String DFA126_minS =
		"\2\25\2\uffff";
	static final String DFA126_maxS =
		"\2\u0099\2\uffff";
	static final String DFA126_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA126_specialS =
		"\4\uffff}>";
	static final String[] DFA126_transitionS = {
			"\1\1\46\uffff\1\2\26\uffff\1\1\26\uffff\1\2\56\uffff\1\1",
			"\1\1\35\uffff\1\3\10\uffff\1\2\26\uffff\1\1\26\uffff\1\2\56\uffff\1"+
			"\1",
			"",
			""
	};

	static final short[] DFA126_eot = DFA.unpackEncodedString(DFA126_eotS);
	static final short[] DFA126_eof = DFA.unpackEncodedString(DFA126_eofS);
	static final char[] DFA126_min = DFA.unpackEncodedStringToUnsignedChars(DFA126_minS);
	static final char[] DFA126_max = DFA.unpackEncodedStringToUnsignedChars(DFA126_maxS);
	static final short[] DFA126_accept = DFA.unpackEncodedString(DFA126_acceptS);
	static final short[] DFA126_special = DFA.unpackEncodedString(DFA126_specialS);
	static final short[][] DFA126_transition;

	static {
		int numStates = DFA126_transitionS.length;
		DFA126_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA126_transition[i] = DFA.unpackEncodedString(DFA126_transitionS[i]);
		}
	}

	protected class DFA126 extends DFA {

		public DFA126(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 126;
			this.eot = DFA126_eot;
			this.eof = DFA126_eof;
			this.min = DFA126_min;
			this.max = DFA126_max;
			this.accept = DFA126_accept;
			this.special = DFA126_special;
			this.transition = DFA126_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 520:29: ( ws supportsConjunction )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA127_eotS =
		"\4\uffff";
	static final String DFA127_eofS =
		"\4\uffff";
	static final String DFA127_minS =
		"\2\25\2\uffff";
	static final String DFA127_maxS =
		"\2\u0099\2\uffff";
	static final String DFA127_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA127_specialS =
		"\4\uffff}>";
	static final String[] DFA127_transitionS = {
			"\1\1\46\uffff\1\2\26\uffff\1\1\26\uffff\1\2\56\uffff\1\1",
			"\1\1\35\uffff\1\3\10\uffff\1\2\26\uffff\1\1\26\uffff\1\2\56\uffff\1"+
			"\1",
			"",
			""
	};

	static final short[] DFA127_eot = DFA.unpackEncodedString(DFA127_eotS);
	static final short[] DFA127_eof = DFA.unpackEncodedString(DFA127_eofS);
	static final char[] DFA127_min = DFA.unpackEncodedStringToUnsignedChars(DFA127_minS);
	static final char[] DFA127_max = DFA.unpackEncodedStringToUnsignedChars(DFA127_maxS);
	static final short[] DFA127_accept = DFA.unpackEncodedString(DFA127_acceptS);
	static final short[] DFA127_special = DFA.unpackEncodedString(DFA127_specialS);
	static final short[][] DFA127_transition;

	static {
		int numStates = DFA127_transitionS.length;
		DFA127_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA127_transition[i] = DFA.unpackEncodedString(DFA127_transitionS[i]);
		}
	}

	protected class DFA127 extends DFA {

		public DFA127(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 127;
			this.eot = DFA127_eot;
			this.eof = DFA127_eof;
			this.min = DFA127_min;
			this.max = DFA127_max;
			this.accept = DFA127_accept;
			this.special = DFA127_special;
			this.transition = DFA127_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 521:31: ( ws supportsDisjunction )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA134_eotS =
		"\12\uffff";
	static final String DFA134_eofS =
		"\12\uffff";
	static final String DFA134_minS =
		"\1\73\2\25\1\24\1\25\1\uffff\1\63\1\24\1\uffff\1\24";
	static final String DFA134_maxS =
		"\1\73\4\u0099\1\uffff\1\63\1\u0099\1\uffff\1\u0099";
	static final String DFA134_acceptS =
		"\5\uffff\1\1\2\uffff\1\2\1\uffff";
	static final String DFA134_specialS =
		"\12\uffff}>";
	static final String[] DFA134_transitionS = {
			"\1\1",
			"\1\2\75\uffff\1\2\105\uffff\1\2",
			"\1\4\35\uffff\1\3\10\uffff\1\5\26\uffff\1\4\105\uffff\1\4",
			"\1\10\1\7\11\uffff\1\6\34\uffff\1\5\26\uffff\1\7\57\uffff\1\10\25\uffff"+
			"\1\7",
			"\1\4\35\uffff\1\3\10\uffff\1\5\26\uffff\1\4\105\uffff\1\4",
			"",
			"\1\11",
			"\1\10\1\7\46\uffff\1\5\26\uffff\1\7\105\uffff\1\7",
			"",
			"\1\10\1\7\11\uffff\1\6\34\uffff\1\5\26\uffff\1\7\57\uffff\1\10\25\uffff"+
			"\1\7"
	};

	static final short[] DFA134_eot = DFA.unpackEncodedString(DFA134_eotS);
	static final short[] DFA134_eof = DFA.unpackEncodedString(DFA134_eofS);
	static final char[] DFA134_min = DFA.unpackEncodedStringToUnsignedChars(DFA134_minS);
	static final char[] DFA134_max = DFA.unpackEncodedStringToUnsignedChars(DFA134_maxS);
	static final short[] DFA134_accept = DFA.unpackEncodedString(DFA134_acceptS);
	static final short[] DFA134_special = DFA.unpackEncodedString(DFA134_specialS);
	static final short[][] DFA134_transition;

	static {
		int numStates = DFA134_transitionS.length;
		DFA134_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA134_transition[i] = DFA.unpackEncodedString(DFA134_transitionS[i]);
		}
	}

	protected class DFA134 extends DFA {

		public DFA134(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 134;
			this.eot = DFA134_eot;
			this.eof = DFA134_eof;
			this.min = DFA134_min;
			this.max = DFA134_max;
			this.accept = DFA134_accept;
			this.special = DFA134_special;
			this.transition = DFA134_transition;
		}
		@Override
		public String getDescription() {
			return "551:1: layerAtRule : ( layerBlock | layerStatement );";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA172_eotS =
		"\4\uffff";
	static final String DFA172_eofS =
		"\1\2\3\uffff";
	static final String DFA172_minS =
		"\2\24\2\uffff";
	static final String DFA172_maxS =
		"\2\u0099\2\uffff";
	static final String DFA172_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA172_specialS =
		"\4\uffff}>";
	static final String[] DFA172_transitionS = {
			"\1\3\1\1\46\uffff\1\2\26\uffff\1\1\105\uffff\1\1",
			"\1\3\1\1\46\uffff\1\2\26\uffff\1\1\105\uffff\1\1",
			"",
			""
	};

	static final short[] DFA172_eot = DFA.unpackEncodedString(DFA172_eotS);
	static final short[] DFA172_eof = DFA.unpackEncodedString(DFA172_eofS);
	static final char[] DFA172_min = DFA.unpackEncodedStringToUnsignedChars(DFA172_minS);
	static final char[] DFA172_max = DFA.unpackEncodedStringToUnsignedChars(DFA172_maxS);
	static final short[] DFA172_accept = DFA.unpackEncodedString(DFA172_acceptS);
	static final short[] DFA172_special = DFA.unpackEncodedString(DFA172_specialS);
	static final short[][] DFA172_transition;

	static {
		int numStates = DFA172_transitionS.length;
		DFA172_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA172_transition[i] = DFA.unpackEncodedString(DFA172_transitionS[i]);
		}
	}

	protected class DFA172 extends DFA {

		public DFA172(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 172;
			this.eot = DFA172_eot;
			this.eof = DFA172_eof;
			this.min = DFA172_min;
			this.max = DFA172_max;
			this.accept = DFA172_accept;
			this.special = DFA172_special;
			this.transition = DFA172_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 636:85: ( ( ws )? COMMA ( ws )? ({...}? IDENT |{...}? IDENT | PERCENTAGE ) )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA184_eotS =
		"\6\uffff";
	static final String DFA184_eofS =
		"\6\uffff";
	static final String DFA184_minS =
		"\3\6\2\uffff\1\6";
	static final String DFA184_maxS =
		"\3\u0099\2\uffff\1\u0099";
	static final String DFA184_acceptS =
		"\3\uffff\1\2\1\1\1\uffff";
	static final String DFA184_specialS =
		"\6\uffff}>";
	static final String[] DFA184_transitionS = {
			"\2\4\2\uffff\5\4\3\uffff\1\4\2\uffff\1\2\1\uffff\1\4\17\uffff\1\4\2\uffff"+
			"\1\4\4\uffff\1\4\3\uffff\1\4\1\uffff\1\4\10\uffff\3\4\11\uffff\3\4\5"+
			"\uffff\1\4\1\2\10\uffff\1\4\6\uffff\1\3\3\uffff\3\4\2\uffff\3\4\1\uffff"+
			"\2\4\2\uffff\1\4\1\uffff\3\4\1\uffff\3\4\1\uffff\5\4\1\1\1\uffff\1\4"+
			"\5\uffff\5\4\6\uffff\1\4\1\uffff\1\4\1\2",
			"\2\4\2\uffff\5\4\3\uffff\1\4\2\uffff\1\5\1\uffff\1\4\17\uffff\1\4\2"+
			"\uffff\1\4\4\uffff\1\4\3\uffff\1\4\1\uffff\1\4\10\uffff\3\4\11\uffff"+
			"\3\4\5\uffff\1\4\1\5\10\uffff\1\4\6\uffff\1\3\3\uffff\3\4\2\uffff\3\4"+
			"\1\uffff\2\4\2\uffff\1\4\1\uffff\3\4\1\uffff\3\4\1\uffff\5\4\2\uffff"+
			"\1\4\5\uffff\5\4\6\uffff\1\4\1\uffff\1\4\1\5",
			"\2\4\2\uffff\5\4\3\uffff\1\4\2\uffff\1\2\1\uffff\1\4\17\uffff\1\4\2"+
			"\uffff\1\4\4\uffff\1\4\3\uffff\1\4\1\uffff\1\4\10\uffff\3\4\11\uffff"+
			"\3\4\5\uffff\1\4\1\2\10\uffff\1\4\6\uffff\1\3\3\uffff\3\4\2\uffff\3\4"+
			"\1\uffff\2\4\2\uffff\1\4\1\uffff\3\4\1\uffff\3\4\1\uffff\6\4\1\uffff"+
			"\1\4\5\uffff\5\4\6\uffff\1\4\1\uffff\1\4\1\2",
			"",
			"",
			"\2\4\2\uffff\5\4\3\uffff\1\4\2\uffff\1\5\1\uffff\1\4\17\uffff\1\4\2"+
			"\uffff\1\4\4\uffff\1\4\3\uffff\1\4\1\uffff\1\4\10\uffff\3\4\11\uffff"+
			"\3\4\5\uffff\1\4\1\5\10\uffff\1\4\6\uffff\1\3\3\uffff\3\4\2\uffff\3\4"+
			"\1\uffff\2\4\2\uffff\1\4\1\uffff\3\4\1\uffff\3\4\1\uffff\5\4\2\uffff"+
			"\1\4\5\uffff\5\4\6\uffff\1\4\1\uffff\1\4\1\5"
	};

	static final short[] DFA184_eot = DFA.unpackEncodedString(DFA184_eotS);
	static final short[] DFA184_eof = DFA.unpackEncodedString(DFA184_eofS);
	static final char[] DFA184_min = DFA.unpackEncodedStringToUnsignedChars(DFA184_minS);
	static final char[] DFA184_max = DFA.unpackEncodedStringToUnsignedChars(DFA184_maxS);
	static final short[] DFA184_accept = DFA.unpackEncodedString(DFA184_acceptS);
	static final short[] DFA184_special = DFA.unpackEncodedString(DFA184_specialS);
	static final short[][] DFA184_transition;

	static {
		int numStates = DFA184_transitionS.length;
		DFA184_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA184_transition[i] = DFA.unpackEncodedString(DFA184_transitionS[i]);
		}
	}

	protected class DFA184 extends DFA {

		public DFA184(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 184;
			this.eot = DFA184_eot;
			this.eof = DFA184_eof;
			this.min = DFA184_min;
			this.max = DFA184_max;
			this.accept = DFA184_accept;
			this.special = DFA184_special;
			this.transition = DFA184_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 647:13: ( ( ws )? ({...}? ( SEMI ( ws )? ) | ( SEMI ( ws )? )? ) ( propertyDeclaration | margin ) )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA183_eotS =
		"\5\uffff";
	static final String DFA183_eofS =
		"\5\uffff";
	static final String DFA183_minS =
		"\1\6\1\uffff\2\23\1\uffff";
	static final String DFA183_maxS =
		"\1\u0098\1\uffff\2\u0099\1\uffff";
	static final String DFA183_acceptS =
		"\1\uffff\1\1\2\uffff\1\2";
	static final String DFA183_specialS =
		"\5\uffff}>";
	static final String[] DFA183_transitionS = {
			"\2\1\2\uffff\5\2\3\uffff\1\1\4\uffff\1\1\17\uffff\1\1\2\uffff\1\1\4\uffff"+
			"\1\1\3\uffff\1\1\1\uffff\1\1\10\uffff\3\2\11\uffff\3\1\5\uffff\1\1\11"+
			"\uffff\1\1\12\uffff\3\2\2\uffff\3\1\1\uffff\2\1\2\uffff\1\1\1\uffff\3"+
			"\1\1\uffff\3\1\1\uffff\5\1\2\uffff\1\1\5\uffff\5\2\6\uffff\1\1\1\uffff"+
			"\1\1",
			"",
			"\1\1\1\uffff\1\3\46\uffff\1\4\26\uffff\1\3\105\uffff\1\3",
			"\1\1\1\uffff\1\3\46\uffff\1\4\26\uffff\1\3\105\uffff\1\3",
			""
	};

	static final short[] DFA183_eot = DFA.unpackEncodedString(DFA183_eotS);
	static final short[] DFA183_eof = DFA.unpackEncodedString(DFA183_eofS);
	static final char[] DFA183_min = DFA.unpackEncodedStringToUnsignedChars(DFA183_minS);
	static final char[] DFA183_max = DFA.unpackEncodedStringToUnsignedChars(DFA183_maxS);
	static final short[] DFA183_accept = DFA.unpackEncodedString(DFA183_acceptS);
	static final short[] DFA183_special = DFA.unpackEncodedString(DFA183_specialS);
	static final short[][] DFA183_transition;

	static {
		int numStates = DFA183_transitionS.length;
		DFA183_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA183_transition[i] = DFA.unpackEncodedString(DFA183_transitionS[i]);
		}
	}

	protected class DFA183 extends DFA {

		public DFA183(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 183;
			this.eot = DFA183_eot;
			this.eof = DFA183_eof;
			this.min = DFA183_min;
			this.max = DFA183_max;
			this.accept = DFA183_accept;
			this.special = DFA183_special;
			this.transition = DFA183_transition;
		}
		@Override
		public String getDescription() {
			return "647:62: ( propertyDeclaration | margin )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA203_eotS =
		"\5\uffff";
	static final String DFA203_eofS =
		"\2\2\3\uffff";
	static final String DFA203_minS =
		"\2\6\3\uffff";
	static final String DFA203_maxS =
		"\2\u0099\3\uffff";
	static final String DFA203_acceptS =
		"\2\uffff\1\3\1\1\1\2";
	static final String DFA203_specialS =
		"\5\uffff}>";
	static final String[] DFA203_transitionS = {
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\uffff\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\4\2\2\uffff\1\2\6\uffff\3\2\5\uffff\1\2\1\1\10\uffff\1\2\2\uffff\2\2"+
			"\2\uffff\1\2\3\uffff\4\2\1\uffff\3\2\1\3\2\2\2\uffff\5\2\1\4\3\2\1\uffff"+
			"\6\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\10\uffff\1\2\1\1",
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\uffff\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\4\2\2\uffff\1\2\6\uffff\3\2\5\uffff\1\2\1\1\10\uffff\1\2\2\uffff\2\2"+
			"\2\uffff\1\2\3\uffff\4\2\1\uffff\3\2\1\3\2\2\1\uffff\6\2\1\4\3\2\1\uffff"+
			"\6\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\6\uffff\1\2\1\uffff"+
			"\1\2\1\1",
			"",
			"",
			""
	};

	static final short[] DFA203_eot = DFA.unpackEncodedString(DFA203_eotS);
	static final short[] DFA203_eof = DFA.unpackEncodedString(DFA203_eofS);
	static final char[] DFA203_min = DFA.unpackEncodedStringToUnsignedChars(DFA203_minS);
	static final char[] DFA203_max = DFA.unpackEncodedStringToUnsignedChars(DFA203_maxS);
	static final short[] DFA203_accept = DFA.unpackEncodedString(DFA203_acceptS);
	static final short[] DFA203_special = DFA.unpackEncodedString(DFA203_specialS);
	static final short[][] DFA203_transition;

	static {
		int numStates = DFA203_transitionS.length;
		DFA203_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA203_transition[i] = DFA.unpackEncodedString(DFA203_transitionS[i]);
		}
	}

	protected class DFA203 extends DFA {

		public DFA203(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 203;
			this.eot = DFA203_eot;
			this.eof = DFA203_eof;
			this.min = DFA203_min;
			this.max = DFA203_max;
			this.accept = DFA203_accept;
			this.special = DFA203_special;
			this.transition = DFA203_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 727:12: ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA205_eotS =
		"\6\uffff";
	static final String DFA205_eofS =
		"\6\uffff";
	static final String DFA205_minS =
		"\2\6\1\0\1\uffff\1\0\1\uffff";
	static final String DFA205_maxS =
		"\2\u0099\1\0\1\uffff\1\0\1\uffff";
	static final String DFA205_acceptS =
		"\3\uffff\1\2\1\uffff\1\1";
	static final String DFA205_specialS =
		"\2\uffff\1\0\1\uffff\1\1\1\uffff}>";
	static final String[] DFA205_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\1\3\1\uffff\1\2\1\1\1\uffff\1\3\17\uffff\1\3"+
			"\2\uffff\1\3\4\uffff\1\3\3\uffff\1\3\1\uffff\1\3\10\uffff\3\3\11\uffff"+
			"\3\3\5\uffff\1\3\1\1\4\uffff\1\3\3\uffff\1\3\12\uffff\4\3\1\uffff\3\3"+
			"\1\uffff\2\3\2\uffff\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\5\3\3\uffff"+
			"\1\3\4\uffff\5\3\6\uffff\1\3\1\uffff\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\1\3\1\uffff\1\4\1\1\1\uffff\1\3\17\uffff\1"+
			"\3\2\uffff\1\3\4\uffff\1\3\3\uffff\1\3\1\uffff\1\3\10\uffff\3\3\11\uffff"+
			"\3\3\5\uffff\1\3\1\1\4\uffff\1\3\3\uffff\1\3\12\uffff\4\3\1\uffff\3\3"+
			"\1\uffff\2\3\2\uffff\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\5\3\3\uffff"+
			"\1\3\4\uffff\5\3\6\uffff\1\3\1\uffff\1\3\1\1",
			"\1\uffff",
			"",
			"\1\uffff",
			""
	};

	static final short[] DFA205_eot = DFA.unpackEncodedString(DFA205_eotS);
	static final short[] DFA205_eof = DFA.unpackEncodedString(DFA205_eofS);
	static final char[] DFA205_min = DFA.unpackEncodedStringToUnsignedChars(DFA205_minS);
	static final char[] DFA205_max = DFA.unpackEncodedStringToUnsignedChars(DFA205_maxS);
	static final short[] DFA205_accept = DFA.unpackEncodedString(DFA205_acceptS);
	static final short[] DFA205_special = DFA.unpackEncodedString(DFA205_specialS);
	static final short[][] DFA205_transition;

	static {
		int numStates = DFA205_transitionS.length;
		DFA205_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA205_transition[i] = DFA.unpackEncodedString(DFA205_transitionS[i]);
		}
	}

	protected class DFA205 extends DFA {

		public DFA205(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 205;
			this.eot = DFA205_eot;
			this.eof = DFA205_eof;
			this.min = DFA205_min;
			this.max = DFA205_max;
			this.accept = DFA205_accept;
			this.special = DFA205_special;
			this.transition = DFA205_transition;
		}
		@Override
		public String getDescription() {
			return "738:26: ( ( ( ws )? COMMA )=> ( ws )? COMMA )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA205_2 = input.LA(1);
						 
						int index205_2 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred23_Css3()) ) {s = 5;}
						else if ( (true) ) {s = 3;}
						 
						input.seek(index205_2);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA205_4 = input.LA(1);
						 
						int index205_4 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred23_Css3()) ) {s = 5;}
						else if ( (true) ) {s = 3;}
						 
						input.seek(index205_4);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 205, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA210_eotS =
		"\4\uffff";
	static final String DFA210_eofS =
		"\4\uffff";
	static final String DFA210_minS =
		"\2\23\2\uffff";
	static final String DFA210_maxS =
		"\2\u0099\2\uffff";
	static final String DFA210_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA210_specialS =
		"\4\uffff}>";
	static final String[] DFA210_transitionS = {
			"\1\2\1\uffff\1\1\75\uffff\1\1\62\uffff\1\3\22\uffff\1\1",
			"\1\2\1\uffff\1\1\75\uffff\1\1\62\uffff\1\3\22\uffff\1\1",
			"",
			""
	};

	static final short[] DFA210_eot = DFA.unpackEncodedString(DFA210_eotS);
	static final short[] DFA210_eof = DFA.unpackEncodedString(DFA210_eofS);
	static final char[] DFA210_min = DFA.unpackEncodedStringToUnsignedChars(DFA210_minS);
	static final char[] DFA210_max = DFA.unpackEncodedStringToUnsignedChars(DFA210_maxS);
	static final short[] DFA210_accept = DFA.unpackEncodedString(DFA210_acceptS);
	static final short[] DFA210_special = DFA.unpackEncodedString(DFA210_specialS);
	static final short[][] DFA210_transition;

	static {
		int numStates = DFA210_transitionS.length;
		DFA210_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA210_transition[i] = DFA.unpackEncodedString(DFA210_transitionS[i]);
		}
	}

	protected class DFA210 extends DFA {

		public DFA210(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 210;
			this.eot = DFA210_eot;
			this.eof = DFA210_eof;
			this.min = DFA210_min;
			this.max = DFA210_max;
			this.accept = DFA210_accept;
			this.special = DFA210_special;
			this.transition = DFA210_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 746:25: ( ( ws )? STRING )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA215_eotS =
		"\4\uffff";
	static final String DFA215_eofS =
		"\4\uffff";
	static final String DFA215_minS =
		"\2\6\2\uffff";
	static final String DFA215_maxS =
		"\2\u0099\2\uffff";
	static final String DFA215_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA215_specialS =
		"\4\uffff}>";
	static final String[] DFA215_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\1\3\1\uffff\1\3\1\1\1\uffff\1\3\17\uffff\1\3"+
			"\2\uffff\1\3\4\uffff\1\3\3\uffff\1\3\1\2\1\3\10\uffff\3\3\11\uffff\3"+
			"\3\5\uffff\1\3\1\1\4\uffff\1\3\3\uffff\1\3\12\uffff\4\3\1\uffff\3\3\1"+
			"\uffff\2\3\2\uffff\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\5\3\3\uffff\1"+
			"\3\4\uffff\5\3\6\uffff\1\3\1\uffff\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\1\3\1\uffff\1\3\1\1\1\uffff\1\3\17\uffff\1"+
			"\3\2\uffff\1\3\4\uffff\1\3\3\uffff\1\3\1\2\1\3\10\uffff\3\3\11\uffff"+
			"\3\3\5\uffff\1\3\1\1\4\uffff\1\3\3\uffff\1\3\12\uffff\4\3\1\uffff\3\3"+
			"\1\uffff\2\3\2\uffff\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\5\3\3\uffff"+
			"\1\3\4\uffff\5\3\6\uffff\1\3\1\uffff\1\3\1\1",
			"",
			""
	};

	static final short[] DFA215_eot = DFA.unpackEncodedString(DFA215_eotS);
	static final short[] DFA215_eof = DFA.unpackEncodedString(DFA215_eofS);
	static final char[] DFA215_min = DFA.unpackEncodedStringToUnsignedChars(DFA215_minS);
	static final char[] DFA215_max = DFA.unpackEncodedStringToUnsignedChars(DFA215_maxS);
	static final short[] DFA215_accept = DFA.unpackEncodedString(DFA215_acceptS);
	static final short[] DFA215_special = DFA.unpackEncodedString(DFA215_specialS);
	static final short[][] DFA215_transition;

	static {
		int numStates = DFA215_transitionS.length;
		DFA215_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA215_transition[i] = DFA.unpackEncodedString(DFA215_transitionS[i]);
		}
	}

	protected class DFA215 extends DFA {

		public DFA215(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 215;
			this.eot = DFA215_eot;
			this.eof = DFA215_eof;
			this.min = DFA215_min;
			this.max = DFA215_max;
			this.accept = DFA215_accept;
			this.special = DFA215_special;
			this.transition = DFA215_transition;
		}
		@Override
		public String getDescription() {
			return "746:110: ( ( ws )? prio )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA221_eotS =
		"\6\uffff";
	static final String DFA221_eofS =
		"\6\uffff";
	static final String DFA221_minS =
		"\1\7\1\25\1\uffff\1\7\2\uffff";
	static final String DFA221_maxS =
		"\1\u0089\1\u0099\1\uffff\1\u0099\2\uffff";
	static final String DFA221_acceptS =
		"\2\uffff\1\3\1\uffff\1\1\1\2";
	static final String DFA221_specialS =
		"\6\uffff}>";
	static final String[] DFA221_transitionS = {
			"\1\2\13\uffff\1\2\11\uffff\3\2\12\uffff\2\2\2\uffff\2\2\3\uffff\1\2\11"+
			"\uffff\1\2\5\uffff\1\2\7\uffff\1\2\23\uffff\2\2\13\uffff\1\1\10\uffff"+
			"\1\2\17\uffff\1\2\3\uffff\1\2",
			"\1\3\46\uffff\1\4\26\uffff\1\3\105\uffff\1\3",
			"",
			"\1\4\13\uffff\1\4\1\uffff\1\3\7\uffff\3\4\12\uffff\2\4\2\uffff\2\4\3"+
			"\uffff\1\4\10\uffff\2\4\5\uffff\1\4\4\uffff\1\5\2\uffff\1\4\7\uffff\1"+
			"\3\13\uffff\2\4\24\uffff\1\4\17\uffff\1\4\3\uffff\1\4\17\uffff\1\3",
			"",
			""
	};

	static final short[] DFA221_eot = DFA.unpackEncodedString(DFA221_eotS);
	static final short[] DFA221_eof = DFA.unpackEncodedString(DFA221_eofS);
	static final char[] DFA221_min = DFA.unpackEncodedStringToUnsignedChars(DFA221_minS);
	static final char[] DFA221_max = DFA.unpackEncodedStringToUnsignedChars(DFA221_maxS);
	static final short[] DFA221_accept = DFA.unpackEncodedString(DFA221_acceptS);
	static final short[] DFA221_special = DFA.unpackEncodedString(DFA221_specialS);
	static final short[][] DFA221_transition;

	static {
		int numStates = DFA221_transitionS.length;
		DFA221_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA221_transition[i] = DFA.unpackEncodedString(DFA221_transitionS[i]);
		}
	}

	protected class DFA221 extends DFA {

		public DFA221(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 221;
			this.eot = DFA221_eot;
			this.eof = DFA221_eof;
			this.min = DFA221_min;
			this.max = DFA221_max;
			this.accept = DFA221_accept;
			this.special = DFA221_special;
			this.transition = DFA221_transition;
		}
		@Override
		public String getDescription() {
			return "751:9: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? {...}? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA216_eotS =
		"\4\uffff";
	static final String DFA216_eofS =
		"\4\uffff";
	static final String DFA216_minS =
		"\1\25\1\7\2\uffff";
	static final String DFA216_maxS =
		"\2\u0099\2\uffff";
	static final String DFA216_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA216_specialS =
		"\4\uffff}>";
	static final String[] DFA216_transitionS = {
			"\1\1\46\uffff\1\2\26\uffff\1\1\105\uffff\1\1",
			"\1\3\13\uffff\1\3\1\uffff\1\1\7\uffff\3\3\12\uffff\2\3\2\uffff\2\3\3"+
			"\uffff\1\3\10\uffff\1\2\1\3\5\uffff\1\3\7\uffff\1\3\7\uffff\1\1\13\uffff"+
			"\2\3\24\uffff\1\3\17\uffff\1\3\3\uffff\1\3\17\uffff\1\1",
			"",
			""
	};

	static final short[] DFA216_eot = DFA.unpackEncodedString(DFA216_eotS);
	static final short[] DFA216_eof = DFA.unpackEncodedString(DFA216_eofS);
	static final char[] DFA216_min = DFA.unpackEncodedStringToUnsignedChars(DFA216_minS);
	static final char[] DFA216_max = DFA.unpackEncodedStringToUnsignedChars(DFA216_maxS);
	static final short[] DFA216_accept = DFA.unpackEncodedString(DFA216_acceptS);
	static final short[] DFA216_special = DFA.unpackEncodedString(DFA216_specialS);
	static final short[][] DFA216_transition;

	static {
		int numStates = DFA216_transitionS.length;
		DFA216_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA216_transition[i] = DFA.unpackEncodedString(DFA216_transitionS[i]);
		}
	}

	protected class DFA216 extends DFA {

		public DFA216(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 216;
			this.eot = DFA216_eot;
			this.eof = DFA216_eof;
			this.min = DFA216_min;
			this.max = DFA216_max;
			this.accept = DFA216_accept;
			this.special = DFA216_special;
			this.transition = DFA216_transition;
		}
		@Override
		public String getDescription() {
			return "752:27: ( ws selectorsGroup )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA238_eotS =
		"\5\uffff";
	static final String DFA238_eofS =
		"\5\uffff";
	static final String DFA238_minS =
		"\2\6\1\uffff\1\6\1\uffff";
	static final String DFA238_maxS =
		"\1\u0098\1\u0099\1\uffff\1\u0099\1\uffff";
	static final String DFA238_acceptS =
		"\2\uffff\1\1\1\uffff\1\2";
	static final String DFA238_specialS =
		"\5\uffff}>";
	static final String[] DFA238_transitionS = {
			"\2\2\2\uffff\5\2\3\uffff\2\2\3\uffff\1\2\5\uffff\3\2\7\uffff\1\2\2\uffff"+
			"\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\5\uffff\1\2\1\uffff\4\2\2\uffff"+
			"\1\2\6\uffff\3\2\5\uffff\1\2\11\uffff\1\2\2\uffff\2\2\6\uffff\3\2\2\uffff"+
			"\3\2\1\uffff\2\2\1\uffff\6\2\1\uffff\3\2\1\uffff\5\2\1\1\1\uffff\1\2"+
			"\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\6\uffff\1\2\1\uffff\1\2",
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\uffff\1\3\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\4\2\2\uffff\1\2\6\uffff\3\2\5\uffff\1\2\1\3\10\uffff\1\2\2\uffff\2\2"+
			"\2\uffff\1\4\3\uffff\3\2\2\uffff\3\2\1\uffff\2\2\1\uffff\6\2\1\uffff"+
			"\3\2\1\uffff\5\2\1\1\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2"+
			"\6\uffff\1\2\1\uffff\1\2\1\3",
			"",
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\uffff\1\3\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\4\2\2\uffff\1\2\6\uffff\3\2\5\uffff\1\2\1\3\10\uffff\1\2\2\uffff\2\2"+
			"\2\uffff\1\4\3\uffff\3\2\2\uffff\3\2\1\uffff\2\2\1\uffff\6\2\1\uffff"+
			"\3\2\1\uffff\5\2\1\1\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2"+
			"\6\uffff\1\2\1\uffff\1\2\1\3",
			""
	};

	static final short[] DFA238_eot = DFA.unpackEncodedString(DFA238_eotS);
	static final short[] DFA238_eof = DFA.unpackEncodedString(DFA238_eofS);
	static final char[] DFA238_min = DFA.unpackEncodedStringToUnsignedChars(DFA238_minS);
	static final char[] DFA238_max = DFA.unpackEncodedStringToUnsignedChars(DFA238_maxS);
	static final short[] DFA238_accept = DFA.unpackEncodedString(DFA238_acceptS);
	static final short[] DFA238_special = DFA.unpackEncodedString(DFA238_specialS);
	static final short[][] DFA238_transition;

	static {
		int numStates = DFA238_transitionS.length;
		DFA238_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA238_transition[i] = DFA.unpackEncodedString(DFA238_transitionS[i]);
		}
	}

	protected class DFA238 extends DFA {

		public DFA238(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 238;
			this.eot = DFA238_eot;
			this.eof = DFA238_eof;
			this.min = DFA238_min;
			this.max = DFA238_max;
			this.accept = DFA238_accept;
			this.special = DFA238_special;
			this.transition = DFA238_transition;
		}
		@Override
		public String getDescription() {
			return "766:1: declarations : ( ( SEMI ( ws )? )* declaration ( ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws ) declaration )* ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws )? | ( SEMI ( ws )? )+ );";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA231_eotS =
		"\6\uffff";
	static final String DFA231_eofS =
		"\6\uffff";
	static final String DFA231_minS =
		"\1\25\2\6\2\uffff\1\6";
	static final String DFA231_maxS =
		"\3\u0099\2\uffff\1\u0099";
	static final String DFA231_acceptS =
		"\3\uffff\1\2\1\1\1\uffff";
	static final String DFA231_specialS =
		"\6\uffff}>";
	static final String[] DFA231_transitionS = {
			"\1\1\75\uffff\1\1\17\uffff\1\3\37\uffff\1\2\25\uffff\1\1",
			"\2\4\2\uffff\5\4\3\uffff\2\4\1\uffff\1\1\1\uffff\1\4\5\uffff\3\4\7\uffff"+
			"\1\4\2\uffff\2\4\2\uffff\2\4\3\uffff\1\4\1\uffff\1\4\5\uffff\1\4\1\uffff"+
			"\4\4\2\uffff\1\4\6\uffff\3\4\5\uffff\1\4\1\1\10\uffff\1\4\2\uffff\2\4"+
			"\2\uffff\1\3\3\uffff\3\4\2\uffff\3\4\1\uffff\2\4\1\uffff\6\4\1\uffff"+
			"\3\4\1\uffff\5\4\1\2\1\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\5\4"+
			"\6\uffff\1\4\1\uffff\1\4\1\1",
			"\2\4\2\uffff\5\4\3\uffff\2\4\1\uffff\1\5\1\uffff\1\4\5\uffff\3\4\7\uffff"+
			"\1\4\2\uffff\2\4\2\uffff\2\4\3\uffff\1\4\1\uffff\1\4\5\uffff\1\4\1\uffff"+
			"\4\4\2\uffff\1\4\6\uffff\3\4\5\uffff\1\4\1\5\10\uffff\1\4\2\uffff\2\4"+
			"\2\uffff\1\3\3\uffff\3\4\2\uffff\3\4\1\uffff\2\4\1\uffff\6\4\1\uffff"+
			"\3\4\1\uffff\5\4\1\2\1\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\5\4"+
			"\6\uffff\1\4\1\uffff\1\4\1\5",
			"",
			"",
			"\2\4\2\uffff\5\4\3\uffff\2\4\1\uffff\1\5\1\uffff\1\4\5\uffff\3\4\7\uffff"+
			"\1\4\2\uffff\2\4\2\uffff\2\4\3\uffff\1\4\1\uffff\1\4\5\uffff\1\4\1\uffff"+
			"\4\4\2\uffff\1\4\6\uffff\3\4\5\uffff\1\4\1\5\10\uffff\1\4\2\uffff\2\4"+
			"\2\uffff\1\3\3\uffff\3\4\2\uffff\3\4\1\uffff\2\4\1\uffff\6\4\1\uffff"+
			"\3\4\1\uffff\5\4\1\2\1\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\5\4"+
			"\6\uffff\1\4\1\uffff\1\4\1\5"
	};

	static final short[] DFA231_eot = DFA.unpackEncodedString(DFA231_eotS);
	static final short[] DFA231_eof = DFA.unpackEncodedString(DFA231_eofS);
	static final char[] DFA231_min = DFA.unpackEncodedStringToUnsignedChars(DFA231_minS);
	static final char[] DFA231_max = DFA.unpackEncodedStringToUnsignedChars(DFA231_maxS);
	static final short[] DFA231_accept = DFA.unpackEncodedString(DFA231_acceptS);
	static final short[] DFA231_special = DFA.unpackEncodedString(DFA231_specialS);
	static final short[][] DFA231_transition;

	static {
		int numStates = DFA231_transitionS.length;
		DFA231_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA231_transition[i] = DFA.unpackEncodedString(DFA231_transitionS[i]);
		}
	}

	protected class DFA231 extends DFA {

		public DFA231(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 231;
			this.eot = DFA231_eot;
			this.eof = DFA231_eof;
			this.min = DFA231_min;
			this.max = DFA231_max;
			this.accept = DFA231_accept;
			this.special = DFA231_special;
			this.transition = DFA231_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 768:33: ( ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws ) declaration )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA230_eotS =
		"\4\uffff";
	static final String DFA230_eofS =
		"\4\uffff";
	static final String DFA230_minS =
		"\1\25\1\6\2\uffff";
	static final String DFA230_maxS =
		"\2\u0099\2\uffff";
	static final String DFA230_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA230_specialS =
		"\4\uffff}>";
	static final String[] DFA230_transitionS = {
			"\1\1\75\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\uffff\1\3\5\uffff\1\3\1\uffff"+
			"\4\3\2\uffff\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3"+
			"\6\uffff\3\3\2\uffff\3\3\1\uffff\2\3\1\uffff\6\3\1\uffff\3\3\1\uffff"+
			"\5\3\1\2\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3"+
			"\1\uffff\1\3\1\1",
			"",
			""
	};

	static final short[] DFA230_eot = DFA.unpackEncodedString(DFA230_eotS);
	static final short[] DFA230_eof = DFA.unpackEncodedString(DFA230_eofS);
	static final char[] DFA230_min = DFA.unpackEncodedStringToUnsignedChars(DFA230_minS);
	static final char[] DFA230_max = DFA.unpackEncodedStringToUnsignedChars(DFA230_maxS);
	static final short[] DFA230_accept = DFA.unpackEncodedString(DFA230_acceptS);
	static final short[] DFA230_special = DFA.unpackEncodedString(DFA230_specialS);
	static final short[][] DFA230_transition;

	static {
		int numStates = DFA230_transitionS.length;
		DFA230_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA230_transition[i] = DFA.unpackEncodedString(DFA230_transitionS[i]);
		}
	}

	protected class DFA230 extends DFA {

		public DFA230(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 230;
			this.eot = DFA230_eot;
			this.eof = DFA230_eof;
			this.min = DFA230_min;
			this.max = DFA230_max;
			this.accept = DFA230_accept;
			this.special = DFA230_special;
			this.transition = DFA230_transition;
		}
		@Override
		public String getDescription() {
			return "768:34: ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA235_eotS =
		"\5\uffff";
	static final String DFA235_eofS =
		"\5\uffff";
	static final String DFA235_minS =
		"\2\25\3\uffff";
	static final String DFA235_maxS =
		"\2\u0099\3\uffff";
	static final String DFA235_acceptS =
		"\2\uffff\1\1\1\3\1\2";
	static final String DFA235_specialS =
		"\5\uffff}>";
	static final String[] DFA235_transitionS = {
			"\1\1\75\uffff\1\1\17\uffff\1\3\37\uffff\1\2\25\uffff\1\1",
			"\1\1\75\uffff\1\1\17\uffff\1\4\37\uffff\1\2\25\uffff\1\1",
			"",
			"",
			""
	};

	static final short[] DFA235_eot = DFA.unpackEncodedString(DFA235_eotS);
	static final short[] DFA235_eof = DFA.unpackEncodedString(DFA235_eofS);
	static final char[] DFA235_min = DFA.unpackEncodedStringToUnsignedChars(DFA235_minS);
	static final char[] DFA235_max = DFA.unpackEncodedStringToUnsignedChars(DFA235_maxS);
	static final short[] DFA235_accept = DFA.unpackEncodedString(DFA235_acceptS);
	static final short[] DFA235_special = DFA.unpackEncodedString(DFA235_specialS);
	static final short[][] DFA235_transition;

	static {
		int numStates = DFA235_transitionS.length;
		DFA235_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA235_transition[i] = DFA.unpackEncodedString(DFA235_transitionS[i]);
		}
	}

	protected class DFA235 extends DFA {

		public DFA235(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 235;
			this.eot = DFA235_eot;
			this.eof = DFA235_eof;
			this.min = DFA235_min;
			this.max = DFA235_max;
			this.accept = DFA235_accept;
			this.special = DFA235_special;
			this.transition = DFA235_transition;
		}
		@Override
		public String getDescription() {
			return "768:71: ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA240_eotS =
		"\4\uffff";
	static final String DFA240_eofS =
		"\4\uffff";
	static final String DFA240_minS =
		"\1\25\1\6\2\uffff";
	static final String DFA240_maxS =
		"\2\u0099\2\uffff";
	static final String DFA240_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA240_specialS =
		"\4\uffff}>";
	static final String[] DFA240_transitionS = {
			"\1\1\36\uffff\1\2\36\uffff\1\1\17\uffff\1\3\6\uffff\1\3\30\uffff\1\3"+
			"\25\uffff\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\2\1\3\5\uffff\1\3\1\uffff"+
			"\4\3\2\uffff\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3"+
			"\2\uffff\1\3\3\uffff\4\3\1\uffff\3\3\1\uffff\2\3\1\uffff\6\3\1\uffff"+
			"\3\3\1\uffff\6\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff"+
			"\1\3\1\uffff\1\3\1\1",
			"",
			""
	};

	static final short[] DFA240_eot = DFA.unpackEncodedString(DFA240_eotS);
	static final short[] DFA240_eof = DFA.unpackEncodedString(DFA240_eofS);
	static final char[] DFA240_min = DFA.unpackEncodedStringToUnsignedChars(DFA240_minS);
	static final char[] DFA240_max = DFA.unpackEncodedStringToUnsignedChars(DFA240_maxS);
	static final short[] DFA240_accept = DFA.unpackEncodedString(DFA240_acceptS);
	static final short[] DFA240_special = DFA.unpackEncodedString(DFA240_specialS);
	static final short[][] DFA240_transition;

	static {
		int numStates = DFA240_transitionS.length;
		DFA240_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA240_transition[i] = DFA.unpackEncodedString(DFA240_transitionS[i]);
		}
	}

	protected class DFA240 extends DFA {

		public DFA240(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 240;
			this.eot = DFA240_eot;
			this.eof = DFA240_eof;
			this.min = DFA240_min;
			this.max = DFA240_max;
			this.accept = DFA240_accept;
			this.special = DFA240_special;
			this.transition = DFA240_transition;
		}
		@Override
		public String getDescription() {
			return "782:39: ( ( ws )? IMPORTANT_SYM )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA242_eotS =
		"\4\uffff";
	static final String DFA242_eofS =
		"\4\uffff";
	static final String DFA242_minS =
		"\1\25\1\6\2\uffff";
	static final String DFA242_maxS =
		"\2\u0099\2\uffff";
	static final String DFA242_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA242_specialS =
		"\4\uffff}>";
	static final String[] DFA242_transitionS = {
			"\1\1\36\uffff\1\2\36\uffff\1\1\17\uffff\1\3\6\uffff\1\3\30\uffff\1\3"+
			"\25\uffff\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\2\1\3\5\uffff\1\3\1\uffff"+
			"\4\3\2\uffff\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3"+
			"\2\uffff\1\3\3\uffff\4\3\1\uffff\3\3\1\uffff\2\3\1\uffff\6\3\1\uffff"+
			"\3\3\1\uffff\6\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff"+
			"\1\3\1\uffff\1\3\1\1",
			"",
			""
	};

	static final short[] DFA242_eot = DFA.unpackEncodedString(DFA242_eotS);
	static final short[] DFA242_eof = DFA.unpackEncodedString(DFA242_eofS);
	static final char[] DFA242_min = DFA.unpackEncodedStringToUnsignedChars(DFA242_minS);
	static final char[] DFA242_max = DFA.unpackEncodedStringToUnsignedChars(DFA242_maxS);
	static final short[] DFA242_accept = DFA.unpackEncodedString(DFA242_acceptS);
	static final short[] DFA242_special = DFA.unpackEncodedString(DFA242_specialS);
	static final short[][] DFA242_transition;

	static {
		int numStates = DFA242_transitionS.length;
		DFA242_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA242_transition[i] = DFA.unpackEncodedString(DFA242_transitionS[i]);
		}
	}

	protected class DFA242 extends DFA {

		public DFA242(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 242;
			this.eot = DFA242_eot;
			this.eof = DFA242_eof;
			this.min = DFA242_min;
			this.max = DFA242_max;
			this.accept = DFA242_accept;
			this.special = DFA242_special;
			this.transition = DFA242_transition;
		}
		@Override
		public String getDescription() {
			return "783:57: ( ( ws )? IMPORTANT_SYM )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA246_eotS =
		"\6\uffff";
	static final String DFA246_eofS =
		"\6\uffff";
	static final String DFA246_minS =
		"\1\24\1\7\1\24\1\uffff\1\7\1\uffff";
	static final String DFA246_maxS =
		"\3\u0099\1\uffff\1\u0099\1\uffff";
	static final String DFA246_acceptS =
		"\3\uffff\1\2\1\uffff\1\1";
	static final String DFA246_specialS =
		"\6\uffff}>";
	static final String[] DFA246_transitionS = {
			"\1\1\1\2\46\uffff\1\3\26\uffff\1\2\26\uffff\1\3\56\uffff\1\2",
			"\1\5\13\uffff\1\5\1\uffff\1\4\7\uffff\3\5\12\uffff\2\5\2\uffff\2\5\3"+
			"\uffff\1\5\10\uffff\1\3\1\5\5\uffff\1\5\7\uffff\1\5\7\uffff\1\4\13\uffff"+
			"\2\5\11\uffff\1\3\12\uffff\1\5\17\uffff\1\5\3\uffff\1\5\17\uffff\1\4",
			"\1\5\1\2\46\uffff\1\3\26\uffff\1\2\26\uffff\1\3\56\uffff\1\2",
			"",
			"\1\5\13\uffff\1\5\1\uffff\1\4\7\uffff\3\5\12\uffff\2\5\2\uffff\2\5\3"+
			"\uffff\1\5\10\uffff\1\3\1\5\5\uffff\1\5\7\uffff\1\5\7\uffff\1\4\13\uffff"+
			"\2\5\11\uffff\1\3\12\uffff\1\5\17\uffff\1\5\3\uffff\1\5\17\uffff\1\4",
			""
	};

	static final short[] DFA246_eot = DFA.unpackEncodedString(DFA246_eotS);
	static final short[] DFA246_eof = DFA.unpackEncodedString(DFA246_eofS);
	static final char[] DFA246_min = DFA.unpackEncodedStringToUnsignedChars(DFA246_minS);
	static final char[] DFA246_max = DFA.unpackEncodedStringToUnsignedChars(DFA246_maxS);
	static final short[] DFA246_accept = DFA.unpackEncodedString(DFA246_acceptS);
	static final short[] DFA246_special = DFA.unpackEncodedString(DFA246_specialS);
	static final short[][] DFA246_transition;

	static {
		int numStates = DFA246_transitionS.length;
		DFA246_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA246_transition[i] = DFA.unpackEncodedString(DFA246_transitionS[i]);
		}
	}

	protected class DFA246 extends DFA {

		public DFA246(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 246;
			this.eot = DFA246_eot;
			this.eof = DFA246_eof;
			this.min = DFA246_min;
			this.max = DFA246_max;
			this.accept = DFA246_accept;
			this.special = DFA246_special;
			this.transition = DFA246_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 801:18: ( ( ws )? COMMA ( ws )? selector )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA254_eotS =
		"\5\uffff";
	static final String DFA254_eofS =
		"\5\uffff";
	static final String DFA254_minS =
		"\2\7\1\uffff\1\7\1\uffff";
	static final String DFA254_maxS =
		"\1\u0089\1\u0099\1\uffff\1\u0099\1\uffff";
	static final String DFA254_acceptS =
		"\2\uffff\1\1\1\uffff\1\2";
	static final String DFA254_specialS =
		"\5\uffff}>";
	static final String[] DFA254_transitionS = {
			"\1\2\13\uffff\1\2\11\uffff\3\2\12\uffff\1\2\1\1\2\uffff\2\2\3\uffff\1"+
			"\2\11\uffff\1\2\5\uffff\1\2\7\uffff\1\2\23\uffff\1\2\1\1\24\uffff\1\2"+
			"\17\uffff\1\2\3\uffff\1\1",
			"\1\2\13\uffff\1\2\1\4\1\3\7\uffff\3\2\12\uffff\1\2\3\uffff\2\2\3\uffff"+
			"\1\2\10\uffff\1\4\1\2\5\uffff\1\2\7\uffff\1\2\7\uffff\1\3\13\uffff\1"+
			"\2\12\uffff\1\4\12\uffff\1\2\17\uffff\1\2\23\uffff\1\3",
			"",
			"\1\2\13\uffff\1\2\1\4\1\3\7\uffff\3\2\12\uffff\1\2\3\uffff\2\2\3\uffff"+
			"\1\2\10\uffff\1\4\1\2\5\uffff\1\2\7\uffff\1\2\7\uffff\1\3\13\uffff\1"+
			"\2\12\uffff\1\4\12\uffff\1\2\17\uffff\1\2\23\uffff\1\3",
			""
	};

	static final short[] DFA254_eot = DFA.unpackEncodedString(DFA254_eotS);
	static final short[] DFA254_eof = DFA.unpackEncodedString(DFA254_eofS);
	static final char[] DFA254_min = DFA.unpackEncodedStringToUnsignedChars(DFA254_minS);
	static final char[] DFA254_max = DFA.unpackEncodedStringToUnsignedChars(DFA254_maxS);
	static final short[] DFA254_accept = DFA.unpackEncodedString(DFA254_acceptS);
	static final short[] DFA254_special = DFA.unpackEncodedString(DFA254_specialS);
	static final short[][] DFA254_transition;

	static {
		int numStates = DFA254_transitionS.length;
		DFA254_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA254_transition[i] = DFA.unpackEncodedString(DFA254_transitionS[i]);
		}
	}

	protected class DFA254 extends DFA {

		public DFA254(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 254;
			this.eot = DFA254_eot;
			this.eof = DFA254_eof;
			this.min = DFA254_min;
			this.max = DFA254_max;
			this.accept = DFA254_accept;
			this.special = DFA254_special;
			this.transition = DFA254_transition;
		}
		@Override
		public String getDescription() {
			return "804:1: selector : ( ( combinator ( ws )? )? simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence )* |{...}? combinator );";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA253_eotS =
		"\4\uffff";
	static final String DFA253_eofS =
		"\4\uffff";
	static final String DFA253_minS =
		"\1\24\1\7\2\uffff";
	static final String DFA253_maxS =
		"\2\u0099\2\uffff";
	static final String DFA253_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA253_specialS =
		"\4\uffff}>";
	static final String[] DFA253_transitionS = {
			"\1\2\1\1\25\uffff\1\3\20\uffff\1\2\26\uffff\1\1\14\uffff\1\3\11\uffff"+
			"\1\2\36\uffff\1\3\17\uffff\1\1",
			"\1\3\13\uffff\1\3\1\2\1\1\7\uffff\3\3\12\uffff\2\3\2\uffff\2\3\3\uffff"+
			"\1\3\10\uffff\1\2\1\3\5\uffff\1\3\7\uffff\1\3\7\uffff\1\1\13\uffff\2"+
			"\3\11\uffff\1\2\12\uffff\1\3\17\uffff\1\3\3\uffff\1\3\17\uffff\1\1",
			"",
			""
	};

	static final short[] DFA253_eot = DFA.unpackEncodedString(DFA253_eotS);
	static final short[] DFA253_eof = DFA.unpackEncodedString(DFA253_eofS);
	static final char[] DFA253_min = DFA.unpackEncodedStringToUnsignedChars(DFA253_minS);
	static final char[] DFA253_max = DFA.unpackEncodedStringToUnsignedChars(DFA253_maxS);
	static final short[] DFA253_accept = DFA.unpackEncodedString(DFA253_acceptS);
	static final short[] DFA253_special = DFA.unpackEncodedString(DFA253_specialS);
	static final short[][] DFA253_transition;

	static {
		int numStates = DFA253_transitionS.length;
		DFA253_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA253_transition[i] = DFA.unpackEncodedString(DFA253_transitionS[i]);
		}
	}

	protected class DFA253 extends DFA {

		public DFA253(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 253;
			this.eot = DFA253_eot;
			this.eof = DFA253_eof;
			this.min = DFA253_min;
			this.max = DFA253_max;
			this.accept = DFA253_accept;
			this.special = DFA253_special;
			this.transition = DFA253_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 805:49: ( ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA252_eotS =
		"\4\uffff";
	static final String DFA252_eofS =
		"\4\uffff";
	static final String DFA252_minS =
		"\1\25\1\7\2\uffff";
	static final String DFA252_maxS =
		"\2\u0099\2\uffff";
	static final String DFA252_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA252_specialS =
		"\4\uffff}>";
	static final String[] DFA252_transitionS = {
			"\1\1\25\uffff\1\2\47\uffff\1\1\14\uffff\1\2\50\uffff\1\2\17\uffff\1\1",
			"\1\3\13\uffff\1\3\1\uffff\1\1\7\uffff\3\3\12\uffff\1\3\1\2\2\uffff\2"+
			"\3\3\uffff\1\3\11\uffff\1\3\5\uffff\1\3\7\uffff\1\3\7\uffff\1\1\13\uffff"+
			"\1\3\1\2\24\uffff\1\3\17\uffff\1\3\3\uffff\1\2\17\uffff\1\1",
			"",
			""
	};

	static final short[] DFA252_eot = DFA.unpackEncodedString(DFA252_eotS);
	static final short[] DFA252_eof = DFA.unpackEncodedString(DFA252_eofS);
	static final char[] DFA252_min = DFA.unpackEncodedStringToUnsignedChars(DFA252_minS);
	static final char[] DFA252_max = DFA.unpackEncodedStringToUnsignedChars(DFA252_maxS);
	static final short[] DFA252_accept = DFA.unpackEncodedString(DFA252_acceptS);
	static final short[] DFA252_special = DFA.unpackEncodedString(DFA252_specialS);
	static final short[][] DFA252_transition;

	static {
		int numStates = DFA252_transitionS.length;
		DFA252_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA252_transition[i] = DFA.unpackEncodedString(DFA252_transitionS[i]);
		}
	}

	protected class DFA252 extends DFA {

		public DFA252(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 252;
			this.eot = DFA252_eot;
			this.eof = DFA252_eof;
			this.min = DFA252_min;
			this.max = DFA252_max;
			this.accept = DFA252_accept;
			this.special = DFA252_special;
			this.transition = DFA252_transition;
		}
		@Override
		public String getDescription() {
			return "805:51: ( ( ( ws )? combinator ( ws )? ) | ws )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA258_eotS =
		"\5\uffff";
	static final String DFA258_eofS =
		"\5\uffff";
	static final String DFA258_minS =
		"\1\23\1\7\1\uffff\1\7\1\uffff";
	static final String DFA258_maxS =
		"\2\u0099\1\uffff\1\121\1\uffff";
	static final String DFA258_acceptS =
		"\2\uffff\1\1\1\uffff\1\2";
	static final String DFA258_specialS =
		"\5\uffff}>";
	static final String[] DFA258_transitionS = {
			"\1\2\1\uffff\1\1\7\uffff\3\2\16\uffff\2\2\15\uffff\1\2\5\uffff\1\2\17"+
			"\uffff\1\1\41\uffff\1\2\43\uffff\1\1",
			"\1\4\13\uffff\1\2\1\uffff\1\1\7\uffff\3\2\16\uffff\1\2\1\3\3\uffff\1"+
			"\4\11\uffff\1\2\5\uffff\1\2\7\uffff\1\4\7\uffff\1\1\41\uffff\1\2\43\uffff"+
			"\1\1",
			"",
			"\1\2\53\uffff\1\2\10\uffff\1\4\16\uffff\1\2\5\uffff\1\2",
			""
	};

	static final short[] DFA258_eot = DFA.unpackEncodedString(DFA258_eotS);
	static final short[] DFA258_eof = DFA.unpackEncodedString(DFA258_eofS);
	static final char[] DFA258_min = DFA.unpackEncodedStringToUnsignedChars(DFA258_minS);
	static final char[] DFA258_max = DFA.unpackEncodedStringToUnsignedChars(DFA258_maxS);
	static final short[] DFA258_accept = DFA.unpackEncodedString(DFA258_acceptS);
	static final short[] DFA258_special = DFA.unpackEncodedString(DFA258_specialS);
	static final short[][] DFA258_transition;

	static {
		int numStates = DFA258_transitionS.length;
		DFA258_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA258_transition[i] = DFA.unpackEncodedString(DFA258_transitionS[i]);
		}
	}

	protected class DFA258 extends DFA {

		public DFA258(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 258;
			this.eot = DFA258_eot;
			this.eof = DFA258_eof;
			this.min = DFA258_min;
			this.max = DFA258_max;
			this.accept = DFA258_accept;
			this.special = DFA258_special;
			this.transition = DFA258_transition;
		}
		@Override
		public String getDescription() {
			return "817:79: ( ( ( ws )? elementSubsequent ) | ( ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ) )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA261_eotS =
		"\5\uffff";
	static final String DFA261_eofS =
		"\5\uffff";
	static final String DFA261_minS =
		"\2\23\1\uffff\1\7\1\uffff";
	static final String DFA261_maxS =
		"\2\u0099\1\uffff\1\121\1\uffff";
	static final String DFA261_acceptS =
		"\2\uffff\1\1\1\uffff\1\2";
	static final String DFA261_specialS =
		"\5\uffff}>";
	static final String[] DFA261_transitionS = {
			"\1\2\1\uffff\1\1\7\uffff\3\2\16\uffff\2\2\15\uffff\1\2\5\uffff\1\2\17"+
			"\uffff\1\1\41\uffff\1\2\43\uffff\1\1",
			"\1\2\1\uffff\1\1\7\uffff\3\2\16\uffff\1\2\1\3\3\uffff\1\4\11\uffff\1"+
			"\2\5\uffff\1\2\7\uffff\1\4\7\uffff\1\1\41\uffff\1\2\43\uffff\1\1",
			"",
			"\1\2\53\uffff\1\2\10\uffff\1\4\16\uffff\1\2\5\uffff\1\2",
			""
	};

	static final short[] DFA261_eot = DFA.unpackEncodedString(DFA261_eotS);
	static final short[] DFA261_eof = DFA.unpackEncodedString(DFA261_eofS);
	static final char[] DFA261_min = DFA.unpackEncodedStringToUnsignedChars(DFA261_minS);
	static final char[] DFA261_max = DFA.unpackEncodedStringToUnsignedChars(DFA261_maxS);
	static final short[] DFA261_accept = DFA.unpackEncodedString(DFA261_acceptS);
	static final short[] DFA261_special = DFA.unpackEncodedString(DFA261_specialS);
	static final short[][] DFA261_transition;

	static {
		int numStates = DFA261_transitionS.length;
		DFA261_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA261_transition[i] = DFA.unpackEncodedString(DFA261_transitionS[i]);
		}
	}

	protected class DFA261 extends DFA {

		public DFA261(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 261;
			this.eot = DFA261_eot;
			this.eof = DFA261_eof;
			this.min = DFA261_min;
			this.max = DFA261_max;
			this.accept = DFA261_accept;
			this.special = DFA261_special;
			this.transition = DFA261_transition;
		}
		@Override
		public String getDescription() {
			return "818:48: ( ( ( ws )? elementSubsequent ) |{...}? ws sass_selector_interpolation_exp )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA284_eotS =
		"\4\uffff";
	static final String DFA284_eofS =
		"\2\3\2\uffff";
	static final String DFA284_minS =
		"\2\6\2\uffff";
	static final String DFA284_maxS =
		"\2\u0099\2\uffff";
	static final String DFA284_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA284_specialS =
		"\4\uffff}>";
	static final String[] DFA284_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff\1\3"+
			"\2\uffff\2\3\2\uffff\2\3\3\uffff\3\3\5\uffff\6\3\2\uffff\1\3\4\uffff"+
			"\1\2\1\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\4\3\1\uffff\3\3\1\uffff\2\3\2\uffff\5\3\1\uffff\3\3\1\uffff"+
			"\6\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff\1\3"+
			"\2\uffff\2\3\2\uffff\2\3\3\uffff\3\3\5\uffff\6\3\2\uffff\1\3\4\uffff"+
			"\1\2\1\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\4\3\1\uffff\3\3\1\uffff\2\3\1\uffff\6\3\1\uffff\12\3\1\uffff"+
			"\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\uffff\1\3\1\1",
			"",
			""
	};

	static final short[] DFA284_eot = DFA.unpackEncodedString(DFA284_eotS);
	static final short[] DFA284_eof = DFA.unpackEncodedString(DFA284_eofS);
	static final char[] DFA284_min = DFA.unpackEncodedStringToUnsignedChars(DFA284_minS);
	static final char[] DFA284_max = DFA.unpackEncodedStringToUnsignedChars(DFA284_maxS);
	static final short[] DFA284_accept = DFA.unpackEncodedString(DFA284_acceptS);
	static final short[] DFA284_special = DFA.unpackEncodedString(DFA284_specialS);
	static final short[][] DFA284_transition;

	static {
		int numStates = DFA284_transitionS.length;
		DFA284_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA284_transition[i] = DFA.unpackEncodedString(DFA284_transitionS[i]);
		}
	}

	protected class DFA284 extends DFA {

		public DFA284(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 284;
			this.eot = DFA284_eot;
			this.eof = DFA284_eof;
			this.min = DFA284_min;
			this.max = DFA284_max;
			this.accept = DFA284_accept;
			this.special = DFA284_special;
			this.transition = DFA284_transition;
		}
		@Override
		public String getDescription() {
			return "933:21: ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA307_eotS =
		"\4\uffff";
	static final String DFA307_eofS =
		"\1\3\3\uffff";
	static final String DFA307_minS =
		"\2\6\2\uffff";
	static final String DFA307_maxS =
		"\2\u0099\2\uffff";
	static final String DFA307_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA307_specialS =
		"\4\uffff}>";
	static final String[] DFA307_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\2\1\3\7\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\4\3\1\uffff\3\3\1\uffff\2\3\2\uffff\5\3\1\uffff\3\3\1\uffff"+
			"\6\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\2\1\3\5\uffff\1\3\1\uffff"+
			"\4\3\2\uffff\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3"+
			"\2\uffff\1\3\3\uffff\4\3\1\uffff\3\3\1\uffff\2\3\1\uffff\6\3\1\uffff"+
			"\3\3\1\uffff\6\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff"+
			"\1\3\1\uffff\1\3\1\1",
			"",
			""
	};

	static final short[] DFA307_eot = DFA.unpackEncodedString(DFA307_eotS);
	static final short[] DFA307_eof = DFA.unpackEncodedString(DFA307_eofS);
	static final char[] DFA307_min = DFA.unpackEncodedStringToUnsignedChars(DFA307_minS);
	static final char[] DFA307_max = DFA.unpackEncodedStringToUnsignedChars(DFA307_maxS);
	static final short[] DFA307_accept = DFA.unpackEncodedString(DFA307_acceptS);
	static final short[] DFA307_special = DFA.unpackEncodedString(DFA307_specialS);
	static final short[][] DFA307_transition;

	static {
		int numStates = DFA307_transitionS.length;
		DFA307_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA307_transition[i] = DFA.unpackEncodedString(DFA307_transitionS[i]);
		}
	}

	protected class DFA307 extends DFA {

		public DFA307(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 307;
			this.eot = DFA307_eot;
			this.eof = DFA307_eof;
			this.min = DFA307_min;
			this.max = DFA307_max;
			this.accept = DFA307_accept;
			this.special = DFA307_special;
			this.transition = DFA307_transition;
		}
		@Override
		public String getDescription() {
			return "948:50: ( ( ws )? prio )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA320_eotS =
		"\100\uffff";
	static final String DFA320_eofS =
		"\1\2\77\uffff";
	static final String DFA320_minS =
		"\1\5\1\0\4\uffff\1\0\1\uffff\6\0\1\uffff\3\0\1\uffff\3\0\2\uffff\20\0"+
		"\1\uffff\2\0\2\uffff\1\0\1\uffff\1\0\20\uffff";
	static final String DFA320_maxS =
		"\1\u0099\1\0\4\uffff\1\0\1\uffff\6\0\1\uffff\3\0\1\uffff\3\0\2\uffff\20"+
		"\0\1\uffff\2\0\2\uffff\1\0\1\uffff\1\0\20\uffff";
	static final String DFA320_acceptS =
		"\2\uffff\1\2\53\uffff\1\1\1\uffff\14\1\1\uffff\3\1";
	static final String DFA320_specialS =
		"\1\0\1\1\4\uffff\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\uffff\1\11\1\12"+
		"\1\13\1\uffff\1\14\1\15\1\16\2\uffff\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
		"\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\uffff\1\37\1\40\2\uffff"+
		"\1\41\1\uffff\1\42\20\uffff}>";
	static final String[] DFA320_transitionS = {
			"\1\67\1\12\1\24\2\uffff\5\51\3\uffff\1\52\1\2\1\55\1\1\1\uffff\1\52\5"+
			"\uffff\1\2\1\20\1\2\1\uffff\1\64\3\uffff\1\66\1\uffff\1\43\1\71\1\uffff"+
			"\1\30\1\2\2\uffff\1\10\1\17\3\uffff\1\23\1\2\1\41\6\uffff\1\2\1\21\3"+
			"\51\1\63\1\uffff\1\6\1\75\5\uffff\1\46\1\25\1\44\5\uffff\1\52\1\1\4\uffff"+
			"\1\60\3\uffff\1\42\1\62\1\77\1\2\1\15\2\uffff\1\2\1\uffff\1\65\1\72\3"+
			"\51\1\2\1\uffff\1\14\1\40\1\32\1\uffff\1\36\1\52\2\uffff\1\47\1\2\1\35"+
			"\2\52\1\uffff\1\34\1\13\1\11\1\uffff\2\52\1\33\1\32\1\37\1\2\1\56\1\2"+
			"\1\73\1\2\1\uffff\1\57\1\70\5\51\2\uffff\1\61\1\76\2\uffff\1\31\1\uffff"+
			"\1\45\1\1",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA320_eot = DFA.unpackEncodedString(DFA320_eotS);
	static final short[] DFA320_eof = DFA.unpackEncodedString(DFA320_eofS);
	static final char[] DFA320_min = DFA.unpackEncodedStringToUnsignedChars(DFA320_minS);
	static final char[] DFA320_max = DFA.unpackEncodedStringToUnsignedChars(DFA320_maxS);
	static final short[] DFA320_accept = DFA.unpackEncodedString(DFA320_acceptS);
	static final short[] DFA320_special = DFA.unpackEncodedString(DFA320_specialS);
	static final short[][] DFA320_transition;

	static {
		int numStates = DFA320_transitionS.length;
		DFA320_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA320_transition[i] = DFA.unpackEncodedString(DFA320_transitionS[i]);
		}
	}

	protected class DFA320 extends DFA {

		public DFA320(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 320;
			this.eot = DFA320_eot;
			this.eof = DFA320_eof;
			this.min = DFA320_min;
			this.max = DFA320_max;
			this.accept = DFA320_accept;
			this.special = DFA320_special;
			this.transition = DFA320_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1029:12: ( ( ( ws | ( ( ws )? operator ( ws )? ) |) term )=> ( ws | ( ( ws )? operator ( ws )? ) |) term )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA320_0 = input.LA(1);
						 
						int index320_0 = input.index();
						input.rewind();
						s = -1;
						if ( (LA320_0==COMMENT||LA320_0==NL||LA320_0==WS) ) {s = 1;}
						else if ( (LA320_0==EOF||LA320_0==COLON||LA320_0==DCOLON||LA320_0==DOT||LA320_0==GREATER||LA320_0==IMPORTANT_SYM||LA320_0==LBRACE||LA320_0==PIPE||LA320_0==RBRACE||LA320_0==RPAREN||LA320_0==SASS_EXTEND_ONLY_SELECTOR||LA320_0==SEMI||LA320_0==STAR||LA320_0==SUPPORTS_SYM) ) {s = 2;}
						else if ( (LA320_0==LESS_AND) ) {s = 6;}
						else if ( (LA320_0==HASH) ) {s = 8;}
						else if ( (LA320_0==SASS_MIXIN) ) {s = 9;}
						else if ( (LA320_0==AT_IDENT) ) {s = 10;}
						else if ( (LA320_0==SASS_INCLUDE) ) {s = 11;}
						else if ( (LA320_0==SASS_AT_ROOT) ) {s = 12;}
						else if ( (LA320_0==PLUS) ) {s = 13;}
						else if ( (LA320_0==HASH_SYMBOL) ) {s = 15;}
						else if ( (LA320_0==DIMENSION) ) {s = 16;}
						else if ( (LA320_0==LBRACKET) ) {s = 17;}
						else if ( (LA320_0==IDENT) ) {s = 19;}
						else if ( (LA320_0==AT_SIGN) ) {s = 20;}
						else if ( (LA320_0==MINUS) ) {s = 21;}
						else if ( (LA320_0==GEN) ) {s = 24;}
						else if ( (LA320_0==VARIABLE) ) {s = 25;}
						else if ( (LA320_0==SASS_DEBUG||LA320_0==SASS_WARN) ) {s = 26;}
						else if ( (LA320_0==SASS_VAR) ) {s = 27;}
						else if ( (LA320_0==SASS_IF) ) {s = 28;}
						else if ( (LA320_0==SASS_FOR) ) {s = 29;}
						else if ( (LA320_0==SASS_EACH) ) {s = 30;}
						else if ( (LA320_0==SASS_WHILE) ) {s = 31;}
						else if ( (LA320_0==SASS_CONTENT) ) {s = 32;}
						else if ( (LA320_0==IMPORT_SYM) ) {s = 33;}
						else if ( (LA320_0==PAGE_SYM) ) {s = 34;}
						else if ( (LA320_0==FONT_FACE_SYM) ) {s = 35;}
						else if ( (LA320_0==MOZ_DOCUMENT_SYM) ) {s = 36;}
						else if ( (LA320_0==WEBKIT_KEYFRAMES_SYM) ) {s = 37;}
						else if ( (LA320_0==MEDIA_SYM) ) {s = 38;}
						else if ( (LA320_0==SASS_EXTEND) ) {s = 39;}
						else if ( ((LA320_0 >= BOTTOMCENTER_SYM && LA320_0 <= BOTTOMRIGHT_SYM)||(LA320_0 >= LEFTBOTTOM_SYM && LA320_0 <= LEFTTOP_SYM)||(LA320_0 >= RIGHTBOTTOM_SYM && LA320_0 <= RIGHTTOP_SYM)||(LA320_0 >= TOPCENTER_SYM && LA320_0 <= TOPRIGHT_SYM)) ) {s = 41;}
						else if ( (LA320_0==CHARSET_SYM||LA320_0==COUNTER_STYLE_SYM||LA320_0==NAMESPACE_SYM||LA320_0==SASS_ELSE||(LA320_0 >= SASS_FORWARD && LA320_0 <= SASS_FUNCTION)||(LA320_0 >= SASS_RETURN && LA320_0 <= SASS_USE)) ) {s = 42;}
						else if ( (LA320_0==COMMA) ) {s = 45;}
						else if ( (LA320_0==SOLIDUS) && (synpred40_Css3())) {s = 46;}
						else if ( (LA320_0==TILDE) ) {s = 47;}
						else if ( (LA320_0==NUMBER) && (synpred40_Css3())) {s = 48;}
						else if ( (LA320_0==URANGE) && (synpred40_Css3())) {s = 49;}
						else if ( (LA320_0==PERCENTAGE) && (synpred40_Css3())) {s = 50;}
						else if ( (LA320_0==LENGTH) && (synpred40_Css3())) {s = 51;}
						else if ( (LA320_0==EMS) && (synpred40_Css3())) {s = 52;}
						else if ( (LA320_0==REM) && (synpred40_Css3())) {s = 53;}
						else if ( (LA320_0==EXS) && (synpred40_Css3())) {s = 54;}
						else if ( (LA320_0==ANGLE) && (synpred40_Css3())) {s = 55;}
						else if ( (LA320_0==TIME) && (synpred40_Css3())) {s = 56;}
						else if ( (LA320_0==FREQ) && (synpred40_Css3())) {s = 57;}
						else if ( (LA320_0==RESOLUTION) && (synpred40_Css3())) {s = 58;}
						else if ( (LA320_0==STRING) && (synpred40_Css3())) {s = 59;}
						else if ( (LA320_0==LESS_JS_STRING) && (synpred40_Css3())) {s = 61;}
						else if ( (LA320_0==URI) && (synpred40_Css3())) {s = 62;}
						else if ( (LA320_0==PERCENTAGE_SYMBOL) && (synpred40_Css3())) {s = 63;}
						 
						input.seek(index320_0);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA320_1 = input.LA(1);
						 
						int index320_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Css3()) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index320_1);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA320_6 = input.LA(1);
						 
						int index320_6 = input.index();
						input.rewind();
						s = -1;
						if ( ((evalPredicate(isScssSource(),"isScssSource()")&&synpred40_Css3())) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index320_6);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA320_8 = input.LA(1);
						 
						int index320_8 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Css3()) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index320_8);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA320_9 = input.LA(1);
						 
						int index320_9 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred40_Css3())) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index320_9);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA320_10 = input.LA(1);
						 
						int index320_10 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred40_Css3())) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index320_10);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA320_11 = input.LA(1);
						 
						int index320_11 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred40_Css3())) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index320_11);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA320_12 = input.LA(1);
						 
						int index320_12 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred40_Css3())) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index320_12);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA320_13 = input.LA(1);
						 
						int index320_13 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Css3()) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index320_13);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA320_15 = input.LA(1);
						 
						int index320_15 = input.index();
						input.rewind();
						s = -1;
						if ( ((evalPredicate(isScssSource(),"isScssSource()")&&synpred40_Css3())) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index320_15);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA320_16 = input.LA(1);
						 
						int index320_16 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Css3()) ) {s = 63;}
						else if ( (evalPredicate(tokenNameStartsWith("."),"tokenNameStartsWith(\".\")")) ) {s = 2;}
						 
						input.seek(index320_16);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA320_17 = input.LA(1);
						 
						int index320_17 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Css3()) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index320_17);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA320_19 = input.LA(1);
						 
						int index320_19 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Css3()) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index320_19);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA320_20 = input.LA(1);
						 
						int index320_20 = input.index();
						input.rewind();
						s = -1;
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred40_Css3())) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index320_20);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA320_21 = input.LA(1);
						 
						int index320_21 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Css3()) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index320_21);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA320_24 = input.LA(1);
						 
						int index320_24 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Css3()) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index320_24);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA320_25 = input.LA(1);
						 
						int index320_25 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Css3()) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index320_25);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA320_26 = input.LA(1);
						 
						int index320_26 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred40_Css3())) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index320_26);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA320_27 = input.LA(1);
						 
						int index320_27 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&synpred40_Css3())) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index320_27);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA320_28 = input.LA(1);
						 
						int index320_28 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred40_Css3())) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index320_28);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA320_29 = input.LA(1);
						 
						int index320_29 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred40_Css3())) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index320_29);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA320_30 = input.LA(1);
						 
						int index320_30 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred40_Css3())) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index320_30);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA320_31 = input.LA(1);
						 
						int index320_31 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred40_Css3())) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index320_31);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA320_32 = input.LA(1);
						 
						int index320_32 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred40_Css3())) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index320_32);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA320_33 = input.LA(1);
						 
						int index320_33 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred40_Css3())) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index320_33);
						if ( s>=0 ) return s;
						break;

					case 25 : 
						int LA320_34 = input.LA(1);
						 
						int index320_34 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred40_Css3())) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index320_34);
						if ( s>=0 ) return s;
						break;

					case 26 : 
						int LA320_35 = input.LA(1);
						 
						int index320_35 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred40_Css3())) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index320_35);
						if ( s>=0 ) return s;
						break;

					case 27 : 
						int LA320_36 = input.LA(1);
						 
						int index320_36 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred40_Css3())) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index320_36);
						if ( s>=0 ) return s;
						break;

					case 28 : 
						int LA320_37 = input.LA(1);
						 
						int index320_37 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred40_Css3())) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index320_37);
						if ( s>=0 ) return s;
						break;

					case 29 : 
						int LA320_38 = input.LA(1);
						 
						int index320_38 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred40_Css3())) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index320_38);
						if ( s>=0 ) return s;
						break;

					case 30 : 
						int LA320_39 = input.LA(1);
						 
						int index320_39 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred40_Css3())) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index320_39);
						if ( s>=0 ) return s;
						break;

					case 31 : 
						int LA320_41 = input.LA(1);
						 
						int index320_41 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred40_Css3())) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index320_41);
						if ( s>=0 ) return s;
						break;

					case 32 : 
						int LA320_42 = input.LA(1);
						 
						int index320_42 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred40_Css3())) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index320_42);
						if ( s>=0 ) return s;
						break;

					case 33 : 
						int LA320_45 = input.LA(1);
						 
						int index320_45 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Css3()) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index320_45);
						if ( s>=0 ) return s;
						break;

					case 34 : 
						int LA320_47 = input.LA(1);
						 
						int index320_47 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Css3()) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index320_47);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 320, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA319_eotS =
		"\5\uffff";
	static final String DFA319_eofS =
		"\5\uffff";
	static final String DFA319_minS =
		"\2\5\3\uffff";
	static final String DFA319_maxS =
		"\2\u0099\3\uffff";
	static final String DFA319_acceptS =
		"\2\uffff\1\2\1\3\1\1";
	static final String DFA319_specialS =
		"\5\uffff}>";
	static final String[] DFA319_transitionS = {
			"\3\3\2\uffff\5\3\3\uffff\1\3\1\uffff\1\2\1\1\1\uffff\1\3\6\uffff\1\3"+
			"\2\uffff\1\3\3\uffff\1\3\1\uffff\2\3\1\uffff\1\3\3\uffff\2\3\3\uffff"+
			"\1\3\1\uffff\1\3\7\uffff\5\3\1\uffff\2\3\5\uffff\3\3\5\uffff\1\3\1\1"+
			"\4\uffff\1\3\3\uffff\3\3\1\uffff\1\3\4\uffff\5\3\2\uffff\3\3\1\uffff"+
			"\2\3\2\uffff\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\5\3\1\uffff\1\2\1\uffff"+
			"\1\3\2\uffff\7\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\1\1",
			"\3\4\2\uffff\5\4\3\uffff\1\4\1\uffff\1\2\1\1\1\uffff\1\4\6\uffff\1\4"+
			"\2\uffff\1\4\3\uffff\1\4\1\uffff\2\4\1\uffff\1\4\3\uffff\2\4\3\uffff"+
			"\1\4\1\uffff\1\4\7\uffff\5\4\1\uffff\2\4\5\uffff\3\4\5\uffff\1\4\1\1"+
			"\4\uffff\1\4\3\uffff\3\4\1\uffff\1\4\4\uffff\5\4\2\uffff\3\4\1\uffff"+
			"\2\4\2\uffff\1\4\1\uffff\3\4\1\uffff\3\4\1\uffff\5\4\1\uffff\1\2\1\uffff"+
			"\1\4\2\uffff\7\4\2\uffff\2\4\2\uffff\1\4\1\uffff\1\4\1\1",
			"",
			"",
			""
	};

	static final short[] DFA319_eot = DFA.unpackEncodedString(DFA319_eotS);
	static final short[] DFA319_eof = DFA.unpackEncodedString(DFA319_eofS);
	static final char[] DFA319_min = DFA.unpackEncodedStringToUnsignedChars(DFA319_minS);
	static final char[] DFA319_max = DFA.unpackEncodedStringToUnsignedChars(DFA319_maxS);
	static final short[] DFA319_accept = DFA.unpackEncodedString(DFA319_acceptS);
	static final short[] DFA319_special = DFA.unpackEncodedString(DFA319_specialS);
	static final short[][] DFA319_transition;

	static {
		int numStates = DFA319_transitionS.length;
		DFA319_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA319_transition[i] = DFA.unpackEncodedString(DFA319_transitionS[i]);
		}
	}

	protected class DFA319 extends DFA {

		public DFA319(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 319;
			this.eot = DFA319_eot;
			this.eof = DFA319_eof;
			this.min = DFA319_min;
			this.max = DFA319_max;
			this.accept = DFA319_accept;
			this.special = DFA319_special;
			this.transition = DFA319_transition;
		}
		@Override
		public String getDescription() {
			return "1029:66: ( ws | ( ( ws )? operator ( ws )? ) |)";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA335_eotS =
		"\4\uffff";
	static final String DFA335_eofS =
		"\4\uffff";
	static final String DFA335_minS =
		"\2\24\2\uffff";
	static final String DFA335_maxS =
		"\2\u0099\2\uffff";
	static final String DFA335_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA335_specialS =
		"\4\uffff}>";
	static final String[] DFA335_transitionS = {
			"\1\3\1\1\75\uffff\1\1\26\uffff\1\2\30\uffff\1\3\25\uffff\1\1",
			"\1\3\1\1\75\uffff\1\1\26\uffff\1\2\30\uffff\1\3\25\uffff\1\1",
			"",
			""
	};

	static final short[] DFA335_eot = DFA.unpackEncodedString(DFA335_eotS);
	static final short[] DFA335_eof = DFA.unpackEncodedString(DFA335_eofS);
	static final char[] DFA335_min = DFA.unpackEncodedStringToUnsignedChars(DFA335_minS);
	static final char[] DFA335_max = DFA.unpackEncodedStringToUnsignedChars(DFA335_maxS);
	static final short[] DFA335_accept = DFA.unpackEncodedString(DFA335_acceptS);
	static final short[] DFA335_special = DFA.unpackEncodedString(DFA335_specialS);
	static final short[][] DFA335_transition;

	static {
		int numStates = DFA335_transitionS.length;
		DFA335_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA335_transition[i] = DFA.unpackEncodedString(DFA335_transitionS[i]);
		}
	}

	protected class DFA335 extends DFA {

		public DFA335(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 335;
			this.eot = DFA335_eot;
			this.eof = DFA335_eof;
			this.min = DFA335_min;
			this.max = DFA335_max;
			this.accept = DFA335_accept;
			this.special = DFA335_special;
			this.transition = DFA335_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1097:17: ( ( ws )? ( COMMA |{...}? SEMI ) ( ws )? fnAttribute )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA345_eotS =
		"\47\uffff";
	static final String DFA345_eofS =
		"\47\uffff";
	static final String DFA345_minS =
		"\2\5\45\uffff";
	static final String DFA345_maxS =
		"\2\u0099\45\uffff";
	static final String DFA345_acceptS =
		"\2\uffff\1\2\44\1";
	static final String DFA345_specialS =
		"\1\1\1\0\45\uffff}>";
	static final String[] DFA345_transitionS = {
			"\1\17\1\32\1\36\2\uffff\5\32\3\uffff\1\32\1\uffff\1\2\1\1\1\uffff\1\32"+
			"\6\uffff\1\23\2\uffff\1\14\3\uffff\1\16\1\uffff\1\32\1\21\1\uffff\1\27"+
			"\3\uffff\1\31\1\35\3\uffff\1\5\1\uffff\1\32\7\uffff\1\7\3\32\1\13\1\uffff"+
			"\1\34\1\26\5\uffff\1\32\1\4\1\32\5\uffff\1\32\1\1\4\uffff\1\10\3\uffff"+
			"\1\32\1\12\1\37\1\uffff\1\4\4\uffff\1\15\1\22\3\32\1\2\1\uffff\3\32\1"+
			"\uffff\2\32\2\uffff\1\32\1\uffff\3\32\1\uffff\3\32\1\uffff\2\32\1\33"+
			"\2\32\1\2\1\3\1\uffff\1\24\2\uffff\1\25\1\20\5\32\2\uffff\1\11\1\30\2"+
			"\uffff\1\6\1\uffff\1\32\1\1",
			"\1\17\1\41\1\45\2\uffff\5\41\3\uffff\1\41\1\uffff\1\2\1\1\1\uffff\1"+
			"\41\6\uffff\1\23\2\uffff\1\14\3\uffff\1\16\1\uffff\1\41\1\21\1\uffff"+
			"\1\27\3\uffff\1\31\1\44\3\uffff\1\40\1\uffff\1\41\7\uffff\1\7\3\41\1"+
			"\13\1\uffff\1\43\1\26\5\uffff\1\41\1\4\1\41\5\uffff\1\41\1\1\4\uffff"+
			"\1\10\3\uffff\1\41\1\12\1\46\1\uffff\1\4\4\uffff\1\15\1\22\3\41\1\2\1"+
			"\uffff\3\41\1\uffff\2\41\2\uffff\1\41\1\uffff\3\41\1\uffff\3\41\1\uffff"+
			"\2\41\1\42\2\41\1\2\1\3\1\uffff\1\24\2\uffff\1\25\1\20\5\41\2\uffff\1"+
			"\11\1\30\2\uffff\1\6\1\uffff\1\41\1\1",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA345_eot = DFA.unpackEncodedString(DFA345_eotS);
	static final short[] DFA345_eof = DFA.unpackEncodedString(DFA345_eofS);
	static final char[] DFA345_min = DFA.unpackEncodedStringToUnsignedChars(DFA345_minS);
	static final char[] DFA345_max = DFA.unpackEncodedStringToUnsignedChars(DFA345_maxS);
	static final short[] DFA345_accept = DFA.unpackEncodedString(DFA345_acceptS);
	static final short[] DFA345_special = DFA.unpackEncodedString(DFA345_specialS);
	static final short[][] DFA345_transition;

	static {
		int numStates = DFA345_transitionS.length;
		DFA345_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA345_transition[i] = DFA.unpackEncodedString(DFA345_transitionS[i]);
		}
	}

	protected class DFA345 extends DFA {

		public DFA345(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 345;
			this.eot = DFA345_eot;
			this.eof = DFA345_eof;
			this.min = DFA345_min;
			this.max = DFA345_max;
			this.accept = DFA345_accept;
			this.special = DFA345_special;
			this.transition = DFA345_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1115:18: ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA345_1 = input.LA(1);
						 
						int index345_1 = input.index();
						input.rewind();
						s = -1;
						if ( (LA345_1==COMMA||LA345_1==RPAREN||LA345_1==SEMI) ) {s = 2;}
						else if ( (LA345_1==COMMENT||LA345_1==NL||LA345_1==WS) ) {s = 1;}
						else if ( (LA345_1==MINUS||LA345_1==PLUS) && (synpred44_Css3())) {s = 4;}
						else if ( (LA345_1==IDENT) && (synpred44_Css3())) {s = 32;}
						else if ( (LA345_1==VARIABLE) && (synpred44_Css3())) {s = 6;}
						else if ( (LA345_1==LBRACKET) && (synpred44_Css3())) {s = 7;}
						else if ( (LA345_1==NUMBER) && (synpred44_Css3())) {s = 8;}
						else if ( (LA345_1==URANGE) && (synpred44_Css3())) {s = 9;}
						else if ( (LA345_1==PERCENTAGE) && (synpred44_Css3())) {s = 10;}
						else if ( (LA345_1==LENGTH) && (synpred44_Css3())) {s = 11;}
						else if ( (LA345_1==EMS) && (synpred44_Css3())) {s = 12;}
						else if ( (LA345_1==REM) && (synpred44_Css3())) {s = 13;}
						else if ( (LA345_1==EXS) && (synpred44_Css3())) {s = 14;}
						else if ( (LA345_1==ANGLE) && (synpred44_Css3())) {s = 15;}
						else if ( (LA345_1==TIME) && (synpred44_Css3())) {s = 16;}
						else if ( (LA345_1==FREQ) && (synpred44_Css3())) {s = 17;}
						else if ( (LA345_1==RESOLUTION) && (synpred44_Css3())) {s = 18;}
						else if ( (LA345_1==DIMENSION) && (synpred44_Css3())) {s = 19;}
						else if ( (LA345_1==STRING) && (synpred44_Css3())) {s = 20;}
						else if ( (LA345_1==TILDE) && (synpred44_Css3())) {s = 21;}
						else if ( (LA345_1==LESS_JS_STRING) && (synpred44_Css3())) {s = 22;}
						else if ( (LA345_1==GEN) && (synpred44_Css3())) {s = 23;}
						else if ( (LA345_1==URI) && (synpred44_Css3())) {s = 24;}
						else if ( (LA345_1==HASH) && (synpred44_Css3())) {s = 25;}
						else if ( (LA345_1==AT_IDENT||(LA345_1 >= BOTTOMCENTER_SYM && LA345_1 <= BOTTOMRIGHT_SYM)||LA345_1==CHARSET_SYM||LA345_1==COUNTER_STYLE_SYM||LA345_1==FONT_FACE_SYM||LA345_1==IMPORT_SYM||(LA345_1 >= LEFTBOTTOM_SYM && LA345_1 <= LEFTTOP_SYM)||LA345_1==MEDIA_SYM||LA345_1==MOZ_DOCUMENT_SYM||LA345_1==NAMESPACE_SYM||LA345_1==PAGE_SYM||(LA345_1 >= RIGHTBOTTOM_SYM && LA345_1 <= RIGHTTOP_SYM)||(LA345_1 >= SASS_AT_ROOT && LA345_1 <= SASS_DEBUG)||(LA345_1 >= SASS_EACH && LA345_1 <= SASS_ELSE)||LA345_1==SASS_EXTEND||(LA345_1 >= SASS_FOR && LA345_1 <= SASS_FUNCTION)||(LA345_1 >= SASS_IF && LA345_1 <= SASS_MIXIN)||(LA345_1 >= SASS_RETURN && LA345_1 <= SASS_USE)||(LA345_1 >= SASS_WARN && LA345_1 <= SASS_WHILE)||(LA345_1 >= TOPCENTER_SYM && LA345_1 <= TOPRIGHT_SYM)||LA345_1==WEBKIT_KEYFRAMES_SYM) && (synpred44_Css3())) {s = 33;}
						else if ( (LA345_1==SASS_VAR) && (synpred44_Css3())) {s = 34;}
						else if ( (LA345_1==LESS_AND) && (synpred44_Css3())) {s = 35;}
						else if ( (LA345_1==HASH_SYMBOL) && (synpred44_Css3())) {s = 36;}
						else if ( (LA345_1==AT_SIGN) && (synpred44_Css3())) {s = 37;}
						else if ( (LA345_1==PERCENTAGE_SYMBOL) && (synpred44_Css3())) {s = 38;}
						else if ( (LA345_1==SOLIDUS) && (synpred44_Css3())) {s = 3;}
						 
						input.seek(index345_1);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA345_0 = input.LA(1);
						 
						int index345_0 = input.index();
						input.rewind();
						s = -1;
						if ( (LA345_0==COMMENT||LA345_0==NL||LA345_0==WS) ) {s = 1;}
						else if ( (LA345_0==COMMA||LA345_0==RPAREN||LA345_0==SEMI) ) {s = 2;}
						else if ( (LA345_0==SOLIDUS) && (synpred44_Css3())) {s = 3;}
						else if ( (LA345_0==MINUS||LA345_0==PLUS) && (synpred44_Css3())) {s = 4;}
						else if ( (LA345_0==IDENT) && (synpred44_Css3())) {s = 5;}
						else if ( (LA345_0==VARIABLE) && (synpred44_Css3())) {s = 6;}
						else if ( (LA345_0==LBRACKET) && (synpred44_Css3())) {s = 7;}
						else if ( (LA345_0==NUMBER) && (synpred44_Css3())) {s = 8;}
						else if ( (LA345_0==URANGE) && (synpred44_Css3())) {s = 9;}
						else if ( (LA345_0==PERCENTAGE) && (synpred44_Css3())) {s = 10;}
						else if ( (LA345_0==LENGTH) && (synpred44_Css3())) {s = 11;}
						else if ( (LA345_0==EMS) && (synpred44_Css3())) {s = 12;}
						else if ( (LA345_0==REM) && (synpred44_Css3())) {s = 13;}
						else if ( (LA345_0==EXS) && (synpred44_Css3())) {s = 14;}
						else if ( (LA345_0==ANGLE) && (synpred44_Css3())) {s = 15;}
						else if ( (LA345_0==TIME) && (synpred44_Css3())) {s = 16;}
						else if ( (LA345_0==FREQ) && (synpred44_Css3())) {s = 17;}
						else if ( (LA345_0==RESOLUTION) && (synpred44_Css3())) {s = 18;}
						else if ( (LA345_0==DIMENSION) && (synpred44_Css3())) {s = 19;}
						else if ( (LA345_0==STRING) && (synpred44_Css3())) {s = 20;}
						else if ( (LA345_0==TILDE) && (synpred44_Css3())) {s = 21;}
						else if ( (LA345_0==LESS_JS_STRING) && (synpred44_Css3())) {s = 22;}
						else if ( (LA345_0==GEN) && (synpred44_Css3())) {s = 23;}
						else if ( (LA345_0==URI) && (synpred44_Css3())) {s = 24;}
						else if ( (LA345_0==HASH) && (synpred44_Css3())) {s = 25;}
						else if ( (LA345_0==AT_IDENT||(LA345_0 >= BOTTOMCENTER_SYM && LA345_0 <= BOTTOMRIGHT_SYM)||LA345_0==CHARSET_SYM||LA345_0==COUNTER_STYLE_SYM||LA345_0==FONT_FACE_SYM||LA345_0==IMPORT_SYM||(LA345_0 >= LEFTBOTTOM_SYM && LA345_0 <= LEFTTOP_SYM)||LA345_0==MEDIA_SYM||LA345_0==MOZ_DOCUMENT_SYM||LA345_0==NAMESPACE_SYM||LA345_0==PAGE_SYM||(LA345_0 >= RIGHTBOTTOM_SYM && LA345_0 <= RIGHTTOP_SYM)||(LA345_0 >= SASS_AT_ROOT && LA345_0 <= SASS_DEBUG)||(LA345_0 >= SASS_EACH && LA345_0 <= SASS_ELSE)||LA345_0==SASS_EXTEND||(LA345_0 >= SASS_FOR && LA345_0 <= SASS_FUNCTION)||(LA345_0 >= SASS_IF && LA345_0 <= SASS_MIXIN)||(LA345_0 >= SASS_RETURN && LA345_0 <= SASS_USE)||(LA345_0 >= SASS_WARN && LA345_0 <= SASS_WHILE)||(LA345_0 >= TOPCENTER_SYM && LA345_0 <= TOPRIGHT_SYM)||LA345_0==WEBKIT_KEYFRAMES_SYM) && (synpred44_Css3())) {s = 26;}
						else if ( (LA345_0==SASS_VAR) && (synpred44_Css3())) {s = 27;}
						else if ( (LA345_0==LESS_AND) && (synpred44_Css3())) {s = 28;}
						else if ( (LA345_0==HASH_SYMBOL) && (synpred44_Css3())) {s = 29;}
						else if ( (LA345_0==AT_SIGN) && (synpred44_Css3())) {s = 30;}
						else if ( (LA345_0==PERCENTAGE_SYMBOL) && (synpred44_Css3())) {s = 31;}
						 
						input.seek(index345_0);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 345, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA344_eotS =
		"\5\uffff";
	static final String DFA344_eofS =
		"\5\uffff";
	static final String DFA344_minS =
		"\2\5\3\uffff";
	static final String DFA344_maxS =
		"\2\u0099\3\uffff";
	static final String DFA344_acceptS =
		"\2\uffff\1\2\1\3\1\1";
	static final String DFA344_specialS =
		"\5\uffff}>";
	static final String[] DFA344_transitionS = {
			"\3\3\2\uffff\5\3\3\uffff\1\3\2\uffff\1\1\1\uffff\1\3\6\uffff\1\3\2\uffff"+
			"\1\3\3\uffff\1\3\1\uffff\2\3\1\uffff\1\3\3\uffff\2\3\3\uffff\1\3\1\uffff"+
			"\1\3\7\uffff\5\3\1\uffff\2\3\5\uffff\3\3\5\uffff\1\3\1\1\4\uffff\1\3"+
			"\3\uffff\3\3\1\uffff\1\3\4\uffff\5\3\2\uffff\3\3\1\uffff\2\3\2\uffff"+
			"\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\5\3\1\uffff\1\2\1\uffff\1\3\2\uffff"+
			"\7\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\1\1",
			"\3\4\2\uffff\5\4\3\uffff\1\4\2\uffff\1\1\1\uffff\1\4\6\uffff\1\4\2\uffff"+
			"\1\4\3\uffff\1\4\1\uffff\2\4\1\uffff\1\4\3\uffff\2\4\3\uffff\1\4\1\uffff"+
			"\1\4\7\uffff\5\4\1\uffff\2\4\5\uffff\3\4\5\uffff\1\4\1\1\4\uffff\1\4"+
			"\3\uffff\3\4\1\uffff\1\4\4\uffff\5\4\2\uffff\3\4\1\uffff\2\4\2\uffff"+
			"\1\4\1\uffff\3\4\1\uffff\3\4\1\uffff\5\4\1\uffff\1\2\1\uffff\1\4\2\uffff"+
			"\7\4\2\uffff\2\4\2\uffff\1\4\1\uffff\1\4\1\1",
			"",
			"",
			""
	};

	static final short[] DFA344_eot = DFA.unpackEncodedString(DFA344_eotS);
	static final short[] DFA344_eof = DFA.unpackEncodedString(DFA344_eofS);
	static final char[] DFA344_min = DFA.unpackEncodedStringToUnsignedChars(DFA344_minS);
	static final char[] DFA344_max = DFA.unpackEncodedStringToUnsignedChars(DFA344_maxS);
	static final short[] DFA344_accept = DFA.unpackEncodedString(DFA344_acceptS);
	static final short[] DFA344_special = DFA.unpackEncodedString(DFA344_specialS);
	static final short[][] DFA344_transition;

	static {
		int numStates = DFA344_transitionS.length;
		DFA344_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA344_transition[i] = DFA.unpackEncodedString(DFA344_transitionS[i]);
		}
	}

	protected class DFA344 extends DFA {

		public DFA344(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 344;
			this.eot = DFA344_eot;
			this.eof = DFA344_eof;
			this.min = DFA344_min;
			this.max = DFA344_max;
			this.accept = DFA344_accept;
			this.special = DFA344_special;
			this.transition = DFA344_transition;
		}
		@Override
		public String getDescription() {
			return "1115:71: ( ws | ( ( ws )? SOLIDUS ( ws )? ) |)";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA354_eotS =
		"\5\uffff";
	static final String DFA354_eofS =
		"\2\2\3\uffff";
	static final String DFA354_minS =
		"\2\6\3\uffff";
	static final String DFA354_maxS =
		"\2\u0099\3\uffff";
	static final String DFA354_acceptS =
		"\2\uffff\1\3\1\1\1\2";
	static final String DFA354_specialS =
		"\5\uffff}>";
	static final String[] DFA354_transitionS = {
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\uffff\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\4\2\2\uffff\1\2\6\uffff\3\2\5\uffff\1\2\1\1\10\uffff\1\2\2\uffff\2\2"+
			"\2\uffff\1\2\3\uffff\4\2\1\uffff\3\2\1\3\2\2\2\uffff\5\2\1\4\3\2\1\uffff"+
			"\6\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\10\uffff\1\2\1\1",
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\uffff\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\4\2\2\uffff\1\2\6\uffff\3\2\5\uffff\1\2\1\1\10\uffff\1\2\2\uffff\2\2"+
			"\2\uffff\1\2\3\uffff\4\2\1\uffff\3\2\1\3\2\2\1\uffff\6\2\1\4\3\2\1\uffff"+
			"\6\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\6\uffff\1\2\1\uffff"+
			"\1\2\1\1",
			"",
			"",
			""
	};

	static final short[] DFA354_eot = DFA.unpackEncodedString(DFA354_eotS);
	static final short[] DFA354_eof = DFA.unpackEncodedString(DFA354_eofS);
	static final char[] DFA354_min = DFA.unpackEncodedStringToUnsignedChars(DFA354_minS);
	static final char[] DFA354_max = DFA.unpackEncodedStringToUnsignedChars(DFA354_maxS);
	static final short[] DFA354_accept = DFA.unpackEncodedString(DFA354_acceptS);
	static final short[] DFA354_special = DFA.unpackEncodedString(DFA354_specialS);
	static final short[][] DFA354_transition;

	static {
		int numStates = DFA354_transitionS.length;
		DFA354_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA354_transition[i] = DFA.unpackEncodedString(DFA354_transitionS[i]);
		}
	}

	protected class DFA354 extends DFA {

		public DFA354(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 354;
			this.eot = DFA354_eot;
			this.eof = DFA354_eof;
			this.min = DFA354_min;
			this.max = DFA354_max;
			this.accept = DFA354_accept;
			this.special = DFA354_special;
			this.transition = DFA354_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1134:72: ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA360_eotS =
		"\107\uffff";
	static final String DFA360_eofS =
		"\1\2\106\uffff";
	static final String DFA360_minS =
		"\1\5\1\0\56\uffff\1\0\26\uffff";
	static final String DFA360_maxS =
		"\1\u0099\1\0\56\uffff\1\0\26\uffff";
	static final String DFA360_acceptS =
		"\2\uffff\1\2\103\uffff\1\1";
	static final String DFA360_specialS =
		"\1\uffff\1\0\56\uffff\1\1\26\uffff}>";
	static final String[] DFA360_transitionS = {
			"\3\2\2\uffff\5\2\3\uffff\2\2\1\60\1\1\1\uffff\1\2\5\uffff\3\2\1\uffff"+
			"\1\2\3\uffff\1\2\1\uffff\2\2\1\uffff\2\2\2\uffff\2\2\3\uffff\3\2\5\uffff"+
			"\7\2\1\uffff\2\2\3\uffff\1\2\1\uffff\3\2\5\uffff\1\2\1\1\3\uffff\2\2"+
			"\3\uffff\5\2\2\uffff\1\2\1\uffff\6\2\1\uffff\6\2\2\uffff\11\2\1\uffff"+
			"\6\2\1\uffff\3\2\1\uffff\7\2\2\uffff\2\2\2\uffff\1\2\1\uffff\1\2\1\1",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA360_eot = DFA.unpackEncodedString(DFA360_eotS);
	static final short[] DFA360_eof = DFA.unpackEncodedString(DFA360_eofS);
	static final char[] DFA360_min = DFA.unpackEncodedStringToUnsignedChars(DFA360_minS);
	static final char[] DFA360_max = DFA.unpackEncodedStringToUnsignedChars(DFA360_maxS);
	static final short[] DFA360_accept = DFA.unpackEncodedString(DFA360_acceptS);
	static final short[] DFA360_special = DFA.unpackEncodedString(DFA360_specialS);
	static final short[][] DFA360_transition;

	static {
		int numStates = DFA360_transitionS.length;
		DFA360_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA360_transition[i] = DFA.unpackEncodedString(DFA360_transitionS[i]);
		}
	}

	protected class DFA360 extends DFA {

		public DFA360(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 360;
			this.eot = DFA360_eot;
			this.eof = DFA360_eof;
			this.min = DFA360_min;
			this.max = DFA360_max;
			this.accept = DFA360_accept;
			this.special = DFA360_special;
			this.transition = DFA360_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1150:5: ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA360_1 = input.LA(1);
						 
						int index360_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred46_Css3()) ) {s = 70;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index360_1);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA360_48 = input.LA(1);
						 
						int index360_48 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred46_Css3()) ) {s = 70;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index360_48);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 360, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA366_eotS =
		"\117\uffff";
	static final String DFA366_eofS =
		"\1\2\116\uffff";
	static final String DFA366_minS =
		"\1\5\1\0\2\uffff\13\0\2\uffff\1\0\1\uffff\6\0\1\uffff\2\0\3\uffff\14\0"+
		"\1\uffff\2\0\1\uffff\1\0\1\uffff\1\0\3\uffff\21\0\2\uffff\1\0\6\uffff";
	static final String DFA366_maxS =
		"\1\u0099\1\0\2\uffff\13\0\2\uffff\1\0\1\uffff\6\0\1\uffff\2\0\3\uffff"+
		"\14\0\1\uffff\2\0\1\uffff\1\0\1\uffff\1\0\3\uffff\21\0\2\uffff\1\0\6\uffff";
	static final String DFA366_acceptS =
		"\2\uffff\1\3\106\uffff\5\1\1\2";
	static final String DFA366_specialS =
		"\1\0\1\1\2\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\2\uffff"+
		"\1\15\1\uffff\1\16\1\17\1\20\1\21\1\22\1\23\1\uffff\1\24\1\25\3\uffff"+
		"\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\uffff\1"+
		"\42\1\43\1\uffff\1\44\1\uffff\1\45\3\uffff\1\46\1\47\1\50\1\51\1\52\1"+
		"\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\2\uffff\1\67"+
		"\6\uffff}>";
	static final String[] DFA366_transitionS = {
			"\1\75\1\24\1\12\2\uffff\5\54\3\uffff\1\61\2\2\1\110\1\uffff\1\55\1\2"+
			"\1\111\1\112\2\uffff\1\2\1\32\1\2\1\uffff\1\72\3\uffff\1\74\1\uffff\1"+
			"\46\1\77\1\uffff\1\14\1\101\1\115\1\uffff\1\23\1\11\3\uffff\1\7\1\4\1"+
			"\44\5\uffff\2\2\1\33\3\54\1\71\1\113\1\21\1\102\1\114\1\2\1\uffff\1\105"+
			"\1\uffff\1\51\1\10\1\47\5\uffff\1\61\1\110\3\uffff\1\65\1\5\3\uffff\1"+
			"\45\1\70\1\104\1\2\1\30\2\uffff\1\2\1\uffff\1\73\1\100\3\54\1\2\1\uffff"+
			"\1\26\1\43\1\27\1\2\1\41\1\61\2\uffff\1\52\1\2\1\40\1\61\1\57\1\2\1\37"+
			"\1\25\1\15\1\uffff\2\61\1\16\1\27\1\42\1\2\1\uffff\1\2\1\6\1\2\1\uffff"+
			"\1\66\1\76\5\54\2\uffff\1\67\1\103\2\uffff\1\13\1\uffff\1\50\1\1",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA366_eot = DFA.unpackEncodedString(DFA366_eotS);
	static final short[] DFA366_eof = DFA.unpackEncodedString(DFA366_eofS);
	static final char[] DFA366_min = DFA.unpackEncodedStringToUnsignedChars(DFA366_minS);
	static final char[] DFA366_max = DFA.unpackEncodedStringToUnsignedChars(DFA366_maxS);
	static final short[] DFA366_accept = DFA.unpackEncodedString(DFA366_acceptS);
	static final short[] DFA366_special = DFA.unpackEncodedString(DFA366_specialS);
	static final short[][] DFA366_transition;

	static {
		int numStates = DFA366_transitionS.length;
		DFA366_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA366_transition[i] = DFA.unpackEncodedString(DFA366_transitionS[i]);
		}
	}

	protected class DFA366 extends DFA {

		public DFA366(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 366;
			this.eot = DFA366_eot;
			this.eof = DFA366_eof;
			this.min = DFA366_min;
			this.max = DFA366_max;
			this.accept = DFA366_accept;
			this.special = DFA366_special;
			this.transition = DFA366_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1167:5: ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA366_0 = input.LA(1);
						 
						int index366_0 = input.index();
						input.rewind();
						s = -1;
						if ( (LA366_0==WS) ) {s = 1;}
						else if ( (LA366_0==EOF||(LA366_0 >= COLON && LA366_0 <= COMMA)||LA366_0==CP_DOTS||LA366_0==DCOLON||LA366_0==DOT||(LA366_0 >= LAYER_SYM && LA366_0 <= LBRACE)||LA366_0==LESS_REST||LA366_0==PIPE||LA366_0==RBRACE||LA366_0==RPAREN||LA366_0==SASS_DEFAULT||LA366_0==SASS_EXTEND_ONLY_SELECTOR||LA366_0==SASS_GLOBAL||LA366_0==SEMI||LA366_0==STAR||LA366_0==SUPPORTS_SYM) ) {s = 2;}
						else if ( (LA366_0==IMPORTANT_SYM) ) {s = 4;}
						else if ( (LA366_0==NUMBER) ) {s = 5;}
						else if ( (LA366_0==STRING) ) {s = 6;}
						else if ( (LA366_0==IDENT) ) {s = 7;}
						else if ( (LA366_0==MINUS) ) {s = 8;}
						else if ( (LA366_0==HASH_SYMBOL) ) {s = 9;}
						else if ( (LA366_0==AT_SIGN) ) {s = 10;}
						else if ( (LA366_0==VARIABLE) ) {s = 11;}
						else if ( (LA366_0==GEN) ) {s = 12;}
						else if ( (LA366_0==SASS_MIXIN) ) {s = 13;}
						else if ( (LA366_0==SASS_VAR) ) {s = 14;}
						else if ( (LA366_0==LESS_AND) ) {s = 17;}
						else if ( (LA366_0==HASH) ) {s = 19;}
						else if ( (LA366_0==AT_IDENT) ) {s = 20;}
						else if ( (LA366_0==SASS_INCLUDE) ) {s = 21;}
						else if ( (LA366_0==SASS_AT_ROOT) ) {s = 22;}
						else if ( (LA366_0==SASS_DEBUG||LA366_0==SASS_WARN) ) {s = 23;}
						else if ( (LA366_0==PLUS) ) {s = 24;}
						else if ( (LA366_0==DIMENSION) ) {s = 26;}
						else if ( (LA366_0==LBRACKET) ) {s = 27;}
						else if ( (LA366_0==SASS_IF) ) {s = 31;}
						else if ( (LA366_0==SASS_FOR) ) {s = 32;}
						else if ( (LA366_0==SASS_EACH) ) {s = 33;}
						else if ( (LA366_0==SASS_WHILE) ) {s = 34;}
						else if ( (LA366_0==SASS_CONTENT) ) {s = 35;}
						else if ( (LA366_0==IMPORT_SYM) ) {s = 36;}
						else if ( (LA366_0==PAGE_SYM) ) {s = 37;}
						else if ( (LA366_0==FONT_FACE_SYM) ) {s = 38;}
						else if ( (LA366_0==MOZ_DOCUMENT_SYM) ) {s = 39;}
						else if ( (LA366_0==WEBKIT_KEYFRAMES_SYM) ) {s = 40;}
						else if ( (LA366_0==MEDIA_SYM) ) {s = 41;}
						else if ( (LA366_0==SASS_EXTEND) ) {s = 42;}
						else if ( ((LA366_0 >= BOTTOMCENTER_SYM && LA366_0 <= BOTTOMRIGHT_SYM)||(LA366_0 >= LEFTBOTTOM_SYM && LA366_0 <= LEFTTOP_SYM)||(LA366_0 >= RIGHTBOTTOM_SYM && LA366_0 <= RIGHTTOP_SYM)||(LA366_0 >= TOPCENTER_SYM && LA366_0 <= TOPRIGHT_SYM)) ) {s = 44;}
						else if ( (LA366_0==COUNTER_STYLE_SYM) ) {s = 45;}
						else if ( (LA366_0==SASS_FUNCTION) ) {s = 47;}
						else if ( (LA366_0==CHARSET_SYM||LA366_0==NAMESPACE_SYM||LA366_0==SASS_ELSE||LA366_0==SASS_FORWARD||(LA366_0 >= SASS_RETURN && LA366_0 <= SASS_USE)) ) {s = 49;}
						else if ( (LA366_0==NOT) ) {s = 53;}
						else if ( (LA366_0==TILDE) ) {s = 54;}
						else if ( (LA366_0==URANGE) ) {s = 55;}
						else if ( (LA366_0==PERCENTAGE) ) {s = 56;}
						else if ( (LA366_0==LENGTH) ) {s = 57;}
						else if ( (LA366_0==EMS) ) {s = 58;}
						else if ( (LA366_0==REM) ) {s = 59;}
						else if ( (LA366_0==EXS) ) {s = 60;}
						else if ( (LA366_0==ANGLE) ) {s = 61;}
						else if ( (LA366_0==TIME) ) {s = 62;}
						else if ( (LA366_0==FREQ) ) {s = 63;}
						else if ( (LA366_0==RESOLUTION) ) {s = 64;}
						else if ( (LA366_0==GREATER) ) {s = 65;}
						else if ( (LA366_0==LESS_JS_STRING) ) {s = 66;}
						else if ( (LA366_0==URI) ) {s = 67;}
						else if ( (LA366_0==PERCENTAGE_SYMBOL) ) {s = 68;}
						else if ( (LA366_0==LPAREN) ) {s = 69;}
						else if ( (LA366_0==COMMENT||LA366_0==NL) ) {s = 72;}
						else if ( (LA366_0==CP_EQ) && (synpred48_Css3())) {s = 73;}
						else if ( (LA366_0==CP_NOT_EQ) && (synpred48_Css3())) {s = 74;}
						else if ( (LA366_0==LESS) && (synpred48_Css3())) {s = 75;}
						else if ( (LA366_0==LESS_OR_EQ) && (synpred48_Css3())) {s = 76;}
						else if ( (LA366_0==GREATER_OR_EQ) && (synpred48_Css3())) {s = 77;}
						 
						input.seek(index366_0);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA366_1 = input.LA(1);
						 
						int index366_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred48_Css3()) ) {s = 77;}
						else if ( (synpred49_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_1);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA366_4 = input.LA(1);
						 
						int index366_4 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_4);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA366_5 = input.LA(1);
						 
						int index366_5 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_5);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA366_6 = input.LA(1);
						 
						int index366_6 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_6);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA366_7 = input.LA(1);
						 
						int index366_7 = input.index();
						input.rewind();
						s = -1;
						if ( ((synpred48_Css3()&&(evalPredicate(tokenNameEquals("or"),"tokenNameEquals(\"or\")")||evalPredicate(tokenNameEquals("and"),"tokenNameEquals(\"and\")")))) ) {s = 77;}
						else if ( (synpred49_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_7);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA366_8 = input.LA(1);
						 
						int index366_8 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_8);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA366_9 = input.LA(1);
						 
						int index366_9 = input.index();
						input.rewind();
						s = -1;
						if ( ((evalPredicate(isScssSource(),"isScssSource()")&&synpred49_Css3())) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_9);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA366_10 = input.LA(1);
						 
						int index366_10 = input.index();
						input.rewind();
						s = -1;
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred49_Css3())) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_10);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA366_11 = input.LA(1);
						 
						int index366_11 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_11);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA366_12 = input.LA(1);
						 
						int index366_12 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_12);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA366_13 = input.LA(1);
						 
						int index366_13 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred49_Css3())) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_13);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA366_14 = input.LA(1);
						 
						int index366_14 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&synpred49_Css3())) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_14);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA366_17 = input.LA(1);
						 
						int index366_17 = input.index();
						input.rewind();
						s = -1;
						if ( ((evalPredicate(isScssSource(),"isScssSource()")&&synpred49_Css3())) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_17);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA366_19 = input.LA(1);
						 
						int index366_19 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_19);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA366_20 = input.LA(1);
						 
						int index366_20 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred49_Css3())) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_20);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA366_21 = input.LA(1);
						 
						int index366_21 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred49_Css3())) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_21);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA366_22 = input.LA(1);
						 
						int index366_22 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred49_Css3())) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_22);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA366_23 = input.LA(1);
						 
						int index366_23 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred49_Css3())) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_23);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA366_24 = input.LA(1);
						 
						int index366_24 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_24);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA366_26 = input.LA(1);
						 
						int index366_26 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_26);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA366_27 = input.LA(1);
						 
						int index366_27 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_27);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA366_31 = input.LA(1);
						 
						int index366_31 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred49_Css3())) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_31);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA366_32 = input.LA(1);
						 
						int index366_32 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred49_Css3())) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_32);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA366_33 = input.LA(1);
						 
						int index366_33 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred49_Css3())) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_33);
						if ( s>=0 ) return s;
						break;

					case 25 : 
						int LA366_34 = input.LA(1);
						 
						int index366_34 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred49_Css3())) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_34);
						if ( s>=0 ) return s;
						break;

					case 26 : 
						int LA366_35 = input.LA(1);
						 
						int index366_35 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred49_Css3())) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_35);
						if ( s>=0 ) return s;
						break;

					case 27 : 
						int LA366_36 = input.LA(1);
						 
						int index366_36 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred49_Css3())) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_36);
						if ( s>=0 ) return s;
						break;

					case 28 : 
						int LA366_37 = input.LA(1);
						 
						int index366_37 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred49_Css3())) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_37);
						if ( s>=0 ) return s;
						break;

					case 29 : 
						int LA366_38 = input.LA(1);
						 
						int index366_38 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred49_Css3())) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_38);
						if ( s>=0 ) return s;
						break;

					case 30 : 
						int LA366_39 = input.LA(1);
						 
						int index366_39 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred49_Css3())) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_39);
						if ( s>=0 ) return s;
						break;

					case 31 : 
						int LA366_40 = input.LA(1);
						 
						int index366_40 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred49_Css3())) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_40);
						if ( s>=0 ) return s;
						break;

					case 32 : 
						int LA366_41 = input.LA(1);
						 
						int index366_41 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred49_Css3())) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_41);
						if ( s>=0 ) return s;
						break;

					case 33 : 
						int LA366_42 = input.LA(1);
						 
						int index366_42 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred49_Css3())) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_42);
						if ( s>=0 ) return s;
						break;

					case 34 : 
						int LA366_44 = input.LA(1);
						 
						int index366_44 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred49_Css3())) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_44);
						if ( s>=0 ) return s;
						break;

					case 35 : 
						int LA366_45 = input.LA(1);
						 
						int index366_45 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred49_Css3())) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_45);
						if ( s>=0 ) return s;
						break;

					case 36 : 
						int LA366_47 = input.LA(1);
						 
						int index366_47 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred49_Css3())) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_47);
						if ( s>=0 ) return s;
						break;

					case 37 : 
						int LA366_49 = input.LA(1);
						 
						int index366_49 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred49_Css3())) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_49);
						if ( s>=0 ) return s;
						break;

					case 38 : 
						int LA366_53 = input.LA(1);
						 
						int index366_53 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_53);
						if ( s>=0 ) return s;
						break;

					case 39 : 
						int LA366_54 = input.LA(1);
						 
						int index366_54 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_54);
						if ( s>=0 ) return s;
						break;

					case 40 : 
						int LA366_55 = input.LA(1);
						 
						int index366_55 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_55);
						if ( s>=0 ) return s;
						break;

					case 41 : 
						int LA366_56 = input.LA(1);
						 
						int index366_56 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_56);
						if ( s>=0 ) return s;
						break;

					case 42 : 
						int LA366_57 = input.LA(1);
						 
						int index366_57 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_57);
						if ( s>=0 ) return s;
						break;

					case 43 : 
						int LA366_58 = input.LA(1);
						 
						int index366_58 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_58);
						if ( s>=0 ) return s;
						break;

					case 44 : 
						int LA366_59 = input.LA(1);
						 
						int index366_59 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_59);
						if ( s>=0 ) return s;
						break;

					case 45 : 
						int LA366_60 = input.LA(1);
						 
						int index366_60 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_60);
						if ( s>=0 ) return s;
						break;

					case 46 : 
						int LA366_61 = input.LA(1);
						 
						int index366_61 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_61);
						if ( s>=0 ) return s;
						break;

					case 47 : 
						int LA366_62 = input.LA(1);
						 
						int index366_62 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_62);
						if ( s>=0 ) return s;
						break;

					case 48 : 
						int LA366_63 = input.LA(1);
						 
						int index366_63 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_63);
						if ( s>=0 ) return s;
						break;

					case 49 : 
						int LA366_64 = input.LA(1);
						 
						int index366_64 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_64);
						if ( s>=0 ) return s;
						break;

					case 50 : 
						int LA366_65 = input.LA(1);
						 
						int index366_65 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred48_Css3()) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_65);
						if ( s>=0 ) return s;
						break;

					case 51 : 
						int LA366_66 = input.LA(1);
						 
						int index366_66 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_66);
						if ( s>=0 ) return s;
						break;

					case 52 : 
						int LA366_67 = input.LA(1);
						 
						int index366_67 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_67);
						if ( s>=0 ) return s;
						break;

					case 53 : 
						int LA366_68 = input.LA(1);
						 
						int index366_68 = input.index();
						input.rewind();
						s = -1;
						if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&synpred49_Css3())) ) {s = 78;}
						else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 2;}
						 
						input.seek(index366_68);
						if ( s>=0 ) return s;
						break;

					case 54 : 
						int LA366_69 = input.LA(1);
						 
						int index366_69 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_69);
						if ( s>=0 ) return s;
						break;

					case 55 : 
						int LA366_72 = input.LA(1);
						 
						int index366_72 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred48_Css3()) ) {s = 77;}
						else if ( (synpred49_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index366_72);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 366, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA380_eotS =
		"\117\uffff";
	static final String DFA380_eofS =
		"\1\2\116\uffff";
	static final String DFA380_minS =
		"\1\5\1\0\13\uffff\1\0\34\uffff\1\0\10\uffff\1\0\31\uffff\1\0\1\uffff";
	static final String DFA380_maxS =
		"\1\u0099\1\0\13\uffff\1\0\34\uffff\1\0\10\uffff\1\0\31\uffff\1\0\1\uffff";
	static final String DFA380_acceptS =
		"\2\uffff\1\2\113\uffff\1\1";
	static final String DFA380_specialS =
		"\1\0\1\1\13\uffff\1\2\34\uffff\1\3\10\uffff\1\4\31\uffff\1\5\1\uffff}>";
	static final String[] DFA380_transitionS = {
			"\3\2\2\uffff\5\2\3\uffff\3\2\1\115\1\uffff\4\2\2\uffff\3\2\1\uffff\1"+
			"\2\3\uffff\1\2\1\uffff\2\2\1\uffff\3\2\1\uffff\2\2\3\uffff\3\2\5\uffff"+
			"\14\2\1\uffff\1\2\1\uffff\1\2\1\15\1\2\5\uffff\1\2\1\115\3\uffff\2\2"+
			"\3\uffff\4\2\1\52\2\uffff\1\2\1\uffff\6\2\1\uffff\6\2\2\uffff\11\2\1"+
			"\uffff\6\2\1\116\1\63\2\2\1\uffff\7\2\2\uffff\2\2\2\uffff\1\2\1\uffff"+
			"\1\2\1\1",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			""
	};

	static final short[] DFA380_eot = DFA.unpackEncodedString(DFA380_eotS);
	static final short[] DFA380_eof = DFA.unpackEncodedString(DFA380_eofS);
	static final char[] DFA380_min = DFA.unpackEncodedStringToUnsignedChars(DFA380_minS);
	static final char[] DFA380_max = DFA.unpackEncodedStringToUnsignedChars(DFA380_maxS);
	static final short[] DFA380_accept = DFA.unpackEncodedString(DFA380_acceptS);
	static final short[] DFA380_special = DFA.unpackEncodedString(DFA380_specialS);
	static final short[][] DFA380_transition;

	static {
		int numStates = DFA380_transitionS.length;
		DFA380_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA380_transition[i] = DFA.unpackEncodedString(DFA380_transitionS[i]);
		}
	}

	protected class DFA380 extends DFA {

		public DFA380(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 380;
			this.eot = DFA380_eot;
			this.eof = DFA380_eof;
			this.min = DFA380_min;
			this.max = DFA380_max;
			this.accept = DFA380_accept;
			this.special = DFA380_special;
			this.transition = DFA380_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1209:10: ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA380_0 = input.LA(1);
						 
						int index380_0 = input.index();
						input.rewind();
						s = -1;
						if ( (LA380_0==WS) ) {s = 1;}
						else if ( (LA380_0==EOF||(LA380_0 >= ANGLE && LA380_0 <= AT_SIGN)||(LA380_0 >= BOTTOMCENTER_SYM && LA380_0 <= BOTTOMRIGHT_SYM)||(LA380_0 >= CHARSET_SYM && LA380_0 <= COMMA)||(LA380_0 >= COUNTER_STYLE_SYM && LA380_0 <= CP_NOT_EQ)||(LA380_0 >= DCOLON && LA380_0 <= DOT)||LA380_0==EMS||LA380_0==EXS||(LA380_0 >= FONT_FACE_SYM && LA380_0 <= FREQ)||(LA380_0 >= GEN && LA380_0 <= GREATER_OR_EQ)||(LA380_0 >= HASH && LA380_0 <= HASH_SYMBOL)||(LA380_0 >= IDENT && LA380_0 <= IMPORT_SYM)||(LA380_0 >= LAYER_SYM && LA380_0 <= LESS_REST)||LA380_0==LPAREN||LA380_0==MEDIA_SYM||LA380_0==MOZ_DOCUMENT_SYM||LA380_0==NAMESPACE_SYM||(LA380_0 >= NOT && LA380_0 <= NUMBER)||(LA380_0 >= PAGE_SYM && LA380_0 <= PIPE)||LA380_0==RBRACE||(LA380_0 >= REM && LA380_0 <= RPAREN)||(LA380_0 >= SASS_AT_ROOT && LA380_0 <= SASS_ELSE)||(LA380_0 >= SASS_EXTEND && LA380_0 <= SASS_MIXIN)||(LA380_0 >= SASS_RETURN && LA380_0 <= SEMI)||(LA380_0 >= STRING && LA380_0 <= SUPPORTS_SYM)||(LA380_0 >= TILDE && LA380_0 <= TOPRIGHT_SYM)||(LA380_0 >= URANGE && LA380_0 <= URI)||LA380_0==VARIABLE||LA380_0==WEBKIT_KEYFRAMES_SYM) ) {s = 2;}
						else if ( (LA380_0==MINUS) ) {s = 13;}
						else if ( (LA380_0==PLUS) ) {s = 42;}
						else if ( (LA380_0==STAR) ) {s = 51;}
						else if ( (LA380_0==COMMENT||LA380_0==NL) ) {s = 77;}
						else if ( (LA380_0==SOLIDUS) && (synpred51_Css3())) {s = 78;}
						 
						input.seek(index380_0);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA380_1 = input.LA(1);
						 
						int index380_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred51_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index380_1);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA380_13 = input.LA(1);
						 
						int index380_13 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred51_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index380_13);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA380_42 = input.LA(1);
						 
						int index380_42 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred51_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index380_42);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA380_51 = input.LA(1);
						 
						int index380_51 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred51_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index380_51);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA380_77 = input.LA(1);
						 
						int index380_77 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred51_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index380_77);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 380, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA385_eotS =
		"\6\uffff";
	static final String DFA385_eofS =
		"\6\uffff";
	static final String DFA385_minS =
		"\2\5\3\uffff\1\5";
	static final String DFA385_maxS =
		"\1\u0098\1\u0099\3\uffff\1\u0099";
	static final String DFA385_acceptS =
		"\2\uffff\1\1\1\2\1\3\1\uffff";
	static final String DFA385_specialS =
		"\6\uffff}>";
	static final String[] DFA385_transitionS = {
			"\3\2\2\uffff\5\2\3\uffff\1\2\4\uffff\1\2\6\uffff\1\2\2\uffff\1\2\3\uffff"+
			"\1\2\1\uffff\2\2\1\uffff\1\2\3\uffff\2\2\3\uffff\1\2\1\3\1\2\7\uffff"+
			"\5\2\1\uffff\2\2\3\uffff\1\4\1\uffff\1\2\1\1\1\2\5\uffff\1\2\5\uffff"+
			"\1\2\3\uffff\3\2\1\uffff\1\1\4\uffff\5\2\2\uffff\3\2\1\uffff\2\2\2\uffff"+
			"\1\2\1\uffff\3\2\1\uffff\3\2\1\uffff\5\2\3\uffff\1\2\2\uffff\7\2\2\uffff"+
			"\2\2\2\uffff\1\2\1\uffff\1\2",
			"\3\2\2\uffff\5\2\3\uffff\1\2\2\uffff\1\5\1\uffff\1\2\6\uffff\1\2\2\uffff"+
			"\1\2\3\uffff\1\2\1\uffff\2\2\1\uffff\1\2\3\uffff\2\2\3\uffff\1\2\1\uffff"+
			"\1\2\7\uffff\5\2\1\uffff\2\2\3\uffff\1\4\1\uffff\1\2\1\uffff\1\2\5\uffff"+
			"\1\2\1\5\4\uffff\1\2\3\uffff\3\2\6\uffff\5\2\2\uffff\3\2\1\uffff\2\2"+
			"\2\uffff\1\2\1\uffff\3\2\1\uffff\3\2\1\uffff\5\2\3\uffff\1\2\2\uffff"+
			"\7\2\2\uffff\2\2\2\uffff\1\2\1\uffff\1\2\1\5",
			"",
			"",
			"",
			"\3\2\2\uffff\5\2\3\uffff\1\2\2\uffff\1\5\1\uffff\1\2\6\uffff\1\2\2\uffff"+
			"\1\2\3\uffff\1\2\1\uffff\2\2\1\uffff\1\2\3\uffff\2\2\3\uffff\1\2\1\uffff"+
			"\1\2\7\uffff\5\2\1\uffff\2\2\3\uffff\1\4\1\uffff\1\2\1\uffff\1\2\5\uffff"+
			"\1\2\1\5\4\uffff\1\2\3\uffff\3\2\6\uffff\5\2\2\uffff\3\2\1\uffff\2\2"+
			"\2\uffff\1\2\1\uffff\3\2\1\uffff\3\2\1\uffff\5\2\3\uffff\1\2\2\uffff"+
			"\7\2\2\uffff\2\2\2\uffff\1\2\1\uffff\1\2\1\5"
	};

	static final short[] DFA385_eot = DFA.unpackEncodedString(DFA385_eotS);
	static final short[] DFA385_eof = DFA.unpackEncodedString(DFA385_eofS);
	static final char[] DFA385_min = DFA.unpackEncodedStringToUnsignedChars(DFA385_minS);
	static final char[] DFA385_max = DFA.unpackEncodedStringToUnsignedChars(DFA385_maxS);
	static final short[] DFA385_accept = DFA.unpackEncodedString(DFA385_acceptS);
	static final short[] DFA385_special = DFA.unpackEncodedString(DFA385_specialS);
	static final short[][] DFA385_transition;

	static {
		int numStates = DFA385_transitionS.length;
		DFA385_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA385_transition[i] = DFA.unpackEncodedString(DFA385_transitionS[i]);
		}
	}

	protected class DFA385 extends DFA {

		public DFA385(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 385;
			this.eot = DFA385_eot;
			this.eof = DFA385_eof;
			this.min = DFA385_min;
			this.max = DFA385_max;
			this.accept = DFA385_accept;
			this.special = DFA385_special;
			this.transition = DFA385_transition;
		}
		@Override
		public String getDescription() {
			return "1214:1: cp_math_expression_atom : ( term | IMPORTANT_SYM | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN );";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA392_eotS =
		"\4\uffff";
	static final String DFA392_eofS =
		"\4\uffff";
	static final String DFA392_minS =
		"\2\25\2\uffff";
	static final String DFA392_maxS =
		"\2\u0099\2\uffff";
	static final String DFA392_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA392_specialS =
		"\4\uffff}>";
	static final String[] DFA392_transitionS = {
			"\1\1\35\uffff\1\2\10\uffff\1\3\26\uffff\1\1\105\uffff\1\1",
			"\1\1\35\uffff\1\2\10\uffff\1\3\26\uffff\1\1\105\uffff\1\1",
			"",
			""
	};

	static final short[] DFA392_eot = DFA.unpackEncodedString(DFA392_eotS);
	static final short[] DFA392_eof = DFA.unpackEncodedString(DFA392_eofS);
	static final char[] DFA392_min = DFA.unpackEncodedStringToUnsignedChars(DFA392_minS);
	static final char[] DFA392_max = DFA.unpackEncodedStringToUnsignedChars(DFA392_maxS);
	static final short[] DFA392_accept = DFA.unpackEncodedString(DFA392_acceptS);
	static final short[] DFA392_special = DFA.unpackEncodedString(DFA392_specialS);
	static final short[][] DFA392_transition;

	static {
		int numStates = DFA392_transitionS.length;
		DFA392_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA392_transition[i] = DFA.unpackEncodedString(DFA392_transitionS[i]);
		}
	}

	protected class DFA392 extends DFA {

		public DFA392(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 392;
			this.eot = DFA392_eot;
			this.eof = DFA392_eof;
			this.min = DFA392_min;
			this.max = DFA392_max;
			this.accept = DFA392_accept;
			this.special = DFA392_special;
			this.transition = DFA392_transition;
		}
		@Override
		public String getDescription() {
			return "1230:107: ( ( ws )? less_mixin_guarded )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA396_eotS =
		"\4\uffff";
	static final String DFA396_eofS =
		"\4\uffff";
	static final String DFA396_minS =
		"\2\25\2\uffff";
	static final String DFA396_maxS =
		"\2\u0099\2\uffff";
	static final String DFA396_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA396_specialS =
		"\4\uffff}>";
	static final String[] DFA396_transitionS = {
			"\1\1\46\uffff\1\3\13\uffff\1\2\12\uffff\1\1\105\uffff\1\1",
			"\1\1\46\uffff\1\3\13\uffff\1\2\12\uffff\1\1\105\uffff\1\1",
			"",
			""
	};

	static final short[] DFA396_eot = DFA.unpackEncodedString(DFA396_eotS);
	static final short[] DFA396_eof = DFA.unpackEncodedString(DFA396_eofS);
	static final char[] DFA396_min = DFA.unpackEncodedStringToUnsignedChars(DFA396_minS);
	static final char[] DFA396_max = DFA.unpackEncodedStringToUnsignedChars(DFA396_maxS);
	static final short[] DFA396_accept = DFA.unpackEncodedString(DFA396_acceptS);
	static final short[] DFA396_special = DFA.unpackEncodedString(DFA396_specialS);
	static final short[][] DFA396_transition;

	static {
		int numStates = DFA396_transitionS.length;
		DFA396_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA396_transition[i] = DFA.unpackEncodedString(DFA396_transitionS[i]);
		}
	}

	protected class DFA396 extends DFA {

		public DFA396(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 396;
			this.eot = DFA396_eot;
			this.eof = DFA396_eof;
			this.min = DFA396_min;
			this.max = DFA396_max;
			this.accept = DFA396_accept;
			this.special = DFA396_special;
			this.transition = DFA396_transition;
		}
		@Override
		public String getDescription() {
			return "1232:55: ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA411_eotS =
		"\4\uffff";
	static final String DFA411_eofS =
		"\2\3\2\uffff";
	static final String DFA411_minS =
		"\2\6\2\uffff";
	static final String DFA411_maxS =
		"\2\u0099\2\uffff";
	static final String DFA411_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA411_specialS =
		"\4\uffff}>";
	static final String[] DFA411_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\3\3\5\uffff\6\3\2\uffff\1\3\4\uffff"+
			"\1\2\1\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\4\3\1\uffff\3\3\1\uffff\2\3\2\uffff\5\3\1\uffff\3\3\1\uffff"+
			"\6\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\3\3\5\uffff\6\3\2\uffff\1\3\4\uffff"+
			"\1\2\1\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\4\3\1\uffff\3\3\1\uffff\2\3\1\uffff\6\3\1\uffff\3\3\1\uffff"+
			"\6\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"",
			""
	};

	static final short[] DFA411_eot = DFA.unpackEncodedString(DFA411_eotS);
	static final short[] DFA411_eof = DFA.unpackEncodedString(DFA411_eofS);
	static final char[] DFA411_min = DFA.unpackEncodedStringToUnsignedChars(DFA411_minS);
	static final char[] DFA411_max = DFA.unpackEncodedStringToUnsignedChars(DFA411_maxS);
	static final short[] DFA411_accept = DFA.unpackEncodedString(DFA411_acceptS);
	static final short[] DFA411_special = DFA.unpackEncodedString(DFA411_specialS);
	static final short[][] DFA411_transition;

	static {
		int numStates = DFA411_transitionS.length;
		DFA411_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA411_transition[i] = DFA.unpackEncodedString(DFA411_transitionS[i]);
		}
	}

	protected class DFA411 extends DFA {

		public DFA411(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 411;
			this.eot = DFA411_eot;
			this.eof = DFA411_eof;
			this.min = DFA411_min;
			this.max = DFA411_max;
			this.accept = DFA411_accept;
			this.special = DFA411_special;
			this.transition = DFA411_transition;
		}
		@Override
		public String getDescription() {
			return "1244:57: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA413_eotS =
		"\4\uffff";
	static final String DFA413_eofS =
		"\2\3\2\uffff";
	static final String DFA413_minS =
		"\2\6\2\uffff";
	static final String DFA413_maxS =
		"\2\u0099\2\uffff";
	static final String DFA413_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA413_specialS =
		"\4\uffff}>";
	static final String[] DFA413_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\3\3\5\uffff\1\3\1\2\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\4\3\1\uffff\3\3\1\uffff\2\3\2\uffff\5\3\1\uffff\3\3\1\uffff"+
			"\6\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\3\3\5\uffff\1\3\1\2\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\4\3\1\uffff\3\3\1\uffff\2\3\1\uffff\6\3\1\uffff\3\3\1\uffff"+
			"\6\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"",
			""
	};

	static final short[] DFA413_eot = DFA.unpackEncodedString(DFA413_eotS);
	static final short[] DFA413_eof = DFA.unpackEncodedString(DFA413_eofS);
	static final char[] DFA413_min = DFA.unpackEncodedStringToUnsignedChars(DFA413_minS);
	static final char[] DFA413_max = DFA.unpackEncodedStringToUnsignedChars(DFA413_maxS);
	static final short[] DFA413_accept = DFA.unpackEncodedString(DFA413_acceptS);
	static final short[] DFA413_special = DFA.unpackEncodedString(DFA413_specialS);
	static final short[][] DFA413_transition;

	static {
		int numStates = DFA413_transitionS.length;
		DFA413_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA413_transition[i] = DFA.unpackEncodedString(DFA413_transitionS[i]);
		}
	}

	protected class DFA413 extends DFA {

		public DFA413(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 413;
			this.eot = DFA413_eot;
			this.eof = DFA413_eof;
			this.min = DFA413_min;
			this.max = DFA413_max;
			this.accept = DFA413_accept;
			this.special = DFA413_special;
			this.transition = DFA413_transition;
		}
		@Override
		public String getDescription() {
			return "1244:102: ( ( ws )? cp_mixin_block )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA426_eotS =
		"\12\uffff";
	static final String DFA426_eofS =
		"\12\uffff";
	static final String DFA426_minS =
		"\4\5\1\uffff\1\5\1\uffff\1\5\1\63\1\5";
	static final String DFA426_maxS =
		"\1\u0098\3\u0099\1\uffff\1\u0099\1\uffff\1\u0099\1\u0080\1\u0099";
	static final String DFA426_acceptS =
		"\4\uffff\1\2\1\uffff\1\1\3\uffff";
	static final String DFA426_specialS =
		"\12\uffff}>";
	static final String[] DFA426_transitionS = {
			"\1\4\1\1\1\4\2\uffff\5\1\3\uffff\1\1\4\uffff\1\1\6\uffff\1\4\2\uffff"+
			"\1\4\3\uffff\1\4\1\uffff\1\1\1\4\1\uffff\1\4\3\uffff\2\4\3\uffff\1\3"+
			"\1\4\1\1\6\uffff\2\4\3\1\1\4\1\uffff\2\4\3\uffff\1\4\1\uffff\1\1\1\4"+
			"\1\1\5\uffff\1\1\4\uffff\2\4\3\uffff\1\1\2\4\1\uffff\1\4\4\uffff\2\4"+
			"\3\1\2\uffff\3\1\1\uffff\2\1\2\uffff\1\1\1\uffff\3\1\1\uffff\3\1\1\uffff"+
			"\2\1\1\2\2\1\3\uffff\1\4\2\uffff\2\4\5\1\2\uffff\2\4\2\uffff\1\4\1\uffff"+
			"\1\1",
			"\3\4\2\uffff\5\4\3\uffff\1\4\1\6\1\4\1\5\1\uffff\4\4\3\uffff\1\4\2\uffff"+
			"\1\4\3\uffff\1\4\1\uffff\2\4\1\uffff\3\4\1\uffff\2\4\3\uffff\3\4\7\uffff"+
			"\11\4\2\uffff\1\4\1\uffff\3\4\5\uffff\1\4\1\5\3\uffff\2\4\3\uffff\3\4"+
			"\1\uffff\1\4\4\uffff\6\4\1\uffff\3\4\1\uffff\2\4\2\uffff\1\4\1\uffff"+
			"\3\4\1\uffff\3\4\1\uffff\11\4\2\uffff\7\4\2\uffff\2\4\2\uffff\1\4\1\uffff"+
			"\1\4\1\5",
			"\3\4\2\uffff\5\4\3\uffff\1\4\1\6\1\4\1\7\1\uffff\4\4\3\uffff\1\4\2\uffff"+
			"\1\4\3\uffff\1\4\1\uffff\2\4\1\uffff\3\4\1\uffff\2\4\3\uffff\3\4\7\uffff"+
			"\11\4\2\uffff\1\4\1\uffff\3\4\5\uffff\1\4\1\7\3\uffff\2\4\3\uffff\3\4"+
			"\1\uffff\1\4\4\uffff\6\4\1\uffff\3\4\1\uffff\2\4\2\uffff\1\4\1\uffff"+
			"\3\4\1\uffff\3\4\1\uffff\11\4\2\uffff\7\4\2\uffff\2\4\2\uffff\1\4\1\uffff"+
			"\1\4\1\7",
			"\3\4\2\uffff\5\4\3\uffff\4\4\1\uffff\4\4\3\uffff\1\4\1\10\1\uffff\1"+
			"\4\3\uffff\1\4\1\uffff\2\4\1\uffff\3\4\1\uffff\2\4\3\uffff\3\4\7\uffff"+
			"\11\4\2\uffff\1\4\1\uffff\3\4\5\uffff\2\4\3\uffff\2\4\3\uffff\3\4\1\uffff"+
			"\1\4\4\uffff\6\4\1\uffff\3\4\1\uffff\2\4\2\uffff\1\4\1\uffff\3\4\1\uffff"+
			"\3\4\1\uffff\11\4\2\uffff\7\4\2\uffff\2\4\2\uffff\1\4\1\uffff\2\4",
			"",
			"\3\4\2\uffff\5\4\3\uffff\1\4\1\6\1\4\1\5\1\uffff\4\4\3\uffff\1\4\2\uffff"+
			"\1\4\3\uffff\1\4\1\uffff\2\4\1\uffff\3\4\1\uffff\2\4\3\uffff\3\4\7\uffff"+
			"\11\4\2\uffff\1\4\1\uffff\3\4\5\uffff\1\4\1\5\3\uffff\2\4\3\uffff\3\4"+
			"\1\uffff\1\4\4\uffff\6\4\1\uffff\3\4\1\uffff\2\4\2\uffff\1\4\1\uffff"+
			"\3\4\1\uffff\3\4\1\uffff\11\4\2\uffff\7\4\2\uffff\2\4\2\uffff\1\4\1\uffff"+
			"\1\4\1\5",
			"",
			"\3\4\2\uffff\5\4\3\uffff\1\4\1\6\1\4\1\7\1\uffff\4\4\3\uffff\1\4\2\uffff"+
			"\1\4\3\uffff\1\4\1\uffff\2\4\1\uffff\3\4\1\uffff\2\4\3\uffff\3\4\7\uffff"+
			"\11\4\2\uffff\1\4\1\uffff\3\4\5\uffff\1\4\1\7\3\uffff\2\4\3\uffff\3\4"+
			"\1\uffff\1\4\4\uffff\6\4\1\uffff\3\4\1\uffff\2\4\2\uffff\1\4\1\uffff"+
			"\3\4\1\uffff\3\4\1\uffff\11\4\2\uffff\7\4\2\uffff\2\4\2\uffff\1\4\1\uffff"+
			"\1\4\1\7",
			"\1\4\114\uffff\1\11",
			"\3\4\2\uffff\5\4\3\uffff\1\4\1\6\1\4\1\7\1\uffff\4\4\3\uffff\1\4\2\uffff"+
			"\1\4\3\uffff\1\4\1\uffff\2\4\1\uffff\3\4\1\uffff\2\4\3\uffff\3\4\7\uffff"+
			"\11\4\2\uffff\1\4\1\uffff\3\4\5\uffff\1\4\1\7\3\uffff\2\4\3\uffff\3\4"+
			"\1\uffff\1\4\4\uffff\6\4\1\uffff\3\4\1\uffff\2\4\2\uffff\1\4\1\uffff"+
			"\3\4\1\uffff\3\4\1\uffff\11\4\2\uffff\7\4\2\uffff\2\4\2\uffff\1\4\1\uffff"+
			"\1\4\1\7"
	};

	static final short[] DFA426_eot = DFA.unpackEncodedString(DFA426_eotS);
	static final short[] DFA426_eof = DFA.unpackEncodedString(DFA426_eofS);
	static final char[] DFA426_min = DFA.unpackEncodedStringToUnsignedChars(DFA426_minS);
	static final char[] DFA426_max = DFA.unpackEncodedStringToUnsignedChars(DFA426_maxS);
	static final short[] DFA426_accept = DFA.unpackEncodedString(DFA426_acceptS);
	static final short[] DFA426_special = DFA.unpackEncodedString(DFA426_specialS);
	static final short[][] DFA426_transition;

	static {
		int numStates = DFA426_transitionS.length;
		DFA426_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA426_transition[i] = DFA.unpackEncodedString(DFA426_transitionS[i]);
		}
	}

	protected class DFA426 extends DFA {

		public DFA426(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 426;
			this.eot = DFA426_eot;
			this.eof = DFA426_eof;
			this.min = DFA426_min;
			this.max = DFA426_max;
			this.accept = DFA426_accept;
			this.special = DFA426_special;
			this.transition = DFA426_transition;
		}
		@Override
		public String getDescription() {
			return "1270:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA429_eotS =
		"\5\uffff";
	static final String DFA429_eofS =
		"\5\uffff";
	static final String DFA429_minS =
		"\1\24\1\6\1\uffff\1\6\1\uffff";
	static final String DFA429_maxS =
		"\1\u0083\1\u0099\1\uffff\1\u0099\1\uffff";
	static final String DFA429_acceptS =
		"\2\uffff\1\2\1\uffff\1\1";
	static final String DFA429_specialS =
		"\5\uffff}>";
	static final String[] DFA429_transitionS = {
			"\1\1\3\uffff\1\2\55\uffff\1\2\43\uffff\1\2\30\uffff\1\1",
			"\1\4\3\uffff\5\4\3\uffff\1\4\2\uffff\1\3\1\uffff\1\4\1\2\16\uffff\1"+
			"\4\13\uffff\1\4\1\uffff\1\4\10\uffff\3\4\5\uffff\1\2\3\uffff\1\4\1\uffff"+
			"\1\4\5\uffff\1\4\1\3\10\uffff\1\4\12\uffff\3\4\1\2\1\uffff\3\4\1\uffff"+
			"\2\4\2\uffff\1\4\1\uffff\3\4\1\uffff\3\4\1\uffff\5\4\10\uffff\5\4\10"+
			"\uffff\1\4\1\3",
			"",
			"\1\4\3\uffff\5\4\3\uffff\1\4\2\uffff\1\3\1\uffff\1\4\1\2\16\uffff\1"+
			"\4\13\uffff\1\4\1\uffff\1\4\10\uffff\3\4\5\uffff\1\2\3\uffff\1\4\1\uffff"+
			"\1\4\5\uffff\1\4\1\3\10\uffff\1\4\12\uffff\3\4\1\2\1\uffff\3\4\1\uffff"+
			"\2\4\2\uffff\1\4\1\uffff\3\4\1\uffff\3\4\1\uffff\5\4\10\uffff\5\4\10"+
			"\uffff\1\4\1\3",
			""
	};

	static final short[] DFA429_eot = DFA.unpackEncodedString(DFA429_eotS);
	static final short[] DFA429_eof = DFA.unpackEncodedString(DFA429_eofS);
	static final char[] DFA429_min = DFA.unpackEncodedStringToUnsignedChars(DFA429_minS);
	static final char[] DFA429_max = DFA.unpackEncodedStringToUnsignedChars(DFA429_maxS);
	static final short[] DFA429_accept = DFA.unpackEncodedString(DFA429_acceptS);
	static final short[] DFA429_special = DFA.unpackEncodedString(DFA429_specialS);
	static final short[][] DFA429_transition;

	static {
		int numStates = DFA429_transitionS.length;
		DFA429_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA429_transition[i] = DFA.unpackEncodedString(DFA429_transitionS[i]);
		}
	}

	protected class DFA429 extends DFA {

		public DFA429(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 429;
			this.eot = DFA429_eot;
			this.eof = DFA429_eof;
			this.min = DFA429_min;
			this.max = DFA429_max;
			this.accept = DFA429_accept;
			this.special = DFA429_special;
			this.transition = DFA429_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1285:14: ( ( COMMA | SEMI ) ( ws )? cp_arg )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA445_eotS =
		"\4\uffff";
	static final String DFA445_eofS =
		"\4\uffff";
	static final String DFA445_minS =
		"\2\24\2\uffff";
	static final String DFA445_maxS =
		"\2\u0099\2\uffff";
	static final String DFA445_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA445_specialS =
		"\4\uffff}>";
	static final String[] DFA445_transitionS = {
			"\1\3\1\1\35\uffff\1\3\10\uffff\1\2\26\uffff\1\1\105\uffff\1\1",
			"\1\3\1\1\35\uffff\1\3\10\uffff\1\2\26\uffff\1\1\105\uffff\1\1",
			"",
			""
	};

	static final short[] DFA445_eot = DFA.unpackEncodedString(DFA445_eotS);
	static final short[] DFA445_eof = DFA.unpackEncodedString(DFA445_eofS);
	static final char[] DFA445_min = DFA.unpackEncodedStringToUnsignedChars(DFA445_minS);
	static final char[] DFA445_max = DFA.unpackEncodedStringToUnsignedChars(DFA445_maxS);
	static final short[] DFA445_accept = DFA.unpackEncodedString(DFA445_acceptS);
	static final short[] DFA445_special = DFA.unpackEncodedString(DFA445_specialS);
	static final short[][] DFA445_transition;

	static {
		int numStates = DFA445_transitionS.length;
		DFA445_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA445_transition[i] = DFA.unpackEncodedString(DFA445_transitionS[i]);
		}
	}

	protected class DFA445 extends DFA {

		public DFA445(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 445;
			this.eot = DFA445_eot;
			this.eof = DFA445_eof;
			this.min = DFA445_min;
			this.max = DFA445_max;
			this.accept = DFA445_accept;
			this.special = DFA445_special;
			this.transition = DFA445_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1301:34: ( ( ws )? ( COMMA | key_and ) ( ws )? less_condition )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA474_eotS =
		"\4\uffff";
	static final String DFA474_eofS =
		"\4\uffff";
	static final String DFA474_minS =
		"\1\24\1\6\2\uffff";
	static final String DFA474_maxS =
		"\2\u0099\2\uffff";
	static final String DFA474_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA474_specialS =
		"\4\uffff}>";
	static final String[] DFA474_transitionS = {
			"\1\3\1\1\75\uffff\1\1\17\uffff\1\2\6\uffff\1\2\30\uffff\1\2\25\uffff"+
			"\1\1",
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\3\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\4\2\2\uffff\1\2\6\uffff\3\2\5\uffff\1\2\1\1\10\uffff\1\2\2\uffff\2\2"+
			"\2\uffff\1\2\3\uffff\4\2\1\uffff\3\2\1\uffff\2\2\1\uffff\6\2\1\uffff"+
			"\12\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\6\uffff\1\2\1\uffff"+
			"\1\2\1\1",
			"",
			""
	};

	static final short[] DFA474_eot = DFA.unpackEncodedString(DFA474_eotS);
	static final short[] DFA474_eof = DFA.unpackEncodedString(DFA474_eofS);
	static final char[] DFA474_min = DFA.unpackEncodedStringToUnsignedChars(DFA474_minS);
	static final char[] DFA474_max = DFA.unpackEncodedStringToUnsignedChars(DFA474_maxS);
	static final short[] DFA474_accept = DFA.unpackEncodedString(DFA474_acceptS);
	static final short[] DFA474_special = DFA.unpackEncodedString(DFA474_specialS);
	static final short[][] DFA474_transition;

	static {
		int numStates = DFA474_transitionS.length;
		DFA474_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA474_transition[i] = DFA.unpackEncodedString(DFA474_transitionS[i]);
		}
	}

	protected class DFA474 extends DFA {

		public DFA474(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 474;
			this.eot = DFA474_eot;
			this.eof = DFA474_eof;
			this.min = DFA474_min;
			this.max = DFA474_max;
			this.accept = DFA474_accept;
			this.special = DFA474_special;
			this.transition = DFA474_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1377:43: ( ( ws )? COMMA ( ws )? simpleSelectorSequence )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA475_eotS =
		"\4\uffff";
	static final String DFA475_eofS =
		"\4\uffff";
	static final String DFA475_minS =
		"\1\25\1\6\2\uffff";
	static final String DFA475_maxS =
		"\2\u0099\2\uffff";
	static final String DFA475_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA475_specialS =
		"\4\uffff}>";
	static final String[] DFA475_transitionS = {
			"\1\1\75\uffff\1\1\17\uffff\1\2\6\uffff\1\2\30\uffff\1\2\25\uffff\1\1",
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\uffff\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\4\2\2\uffff\1\2\6\uffff\3\2\5\uffff\1\2\1\1\10\uffff\1\2\2\uffff\2\2"+
			"\2\uffff\1\2\3\uffff\4\2\1\uffff\3\2\1\uffff\2\2\1\uffff\6\2\1\uffff"+
			"\3\2\1\3\6\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\6\uffff"+
			"\1\2\1\uffff\1\2\1\1",
			"",
			""
	};

	static final short[] DFA475_eot = DFA.unpackEncodedString(DFA475_eotS);
	static final short[] DFA475_eof = DFA.unpackEncodedString(DFA475_eofS);
	static final char[] DFA475_min = DFA.unpackEncodedStringToUnsignedChars(DFA475_minS);
	static final char[] DFA475_max = DFA.unpackEncodedStringToUnsignedChars(DFA475_maxS);
	static final short[] DFA475_accept = DFA.unpackEncodedString(DFA475_acceptS);
	static final short[] DFA475_special = DFA.unpackEncodedString(DFA475_specialS);
	static final short[][] DFA475_transition;

	static {
		int numStates = DFA475_transitionS.length;
		DFA475_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA475_transition[i] = DFA.unpackEncodedString(DFA475_transitionS[i]);
		}
	}

	protected class DFA475 extends DFA {

		public DFA475(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 475;
			this.eot = DFA475_eot;
			this.eof = DFA475_eof;
			this.min = DFA475_min;
			this.max = DFA475_max;
			this.accept = DFA475_accept;
			this.special = DFA475_special;
			this.transition = DFA475_transition;
		}
		@Override
		public String getDescription() {
			return "1377:83: ( ws SASS_OPTIONAL )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA481_eotS =
		"\10\uffff";
	static final String DFA481_eofS =
		"\2\4\6\uffff";
	static final String DFA481_minS =
		"\2\6\1\23\2\uffff\3\23";
	static final String DFA481_maxS =
		"\3\u0099\2\uffff\3\u0099";
	static final String DFA481_acceptS =
		"\3\uffff\1\1\1\2\3\uffff";
	static final String DFA481_specialS =
		"\10\uffff}>";
	static final String[] DFA481_transitionS = {
			"\2\4\2\uffff\5\4\3\uffff\2\4\1\uffff\1\1\1\uffff\1\4\5\uffff\3\4\7\uffff"+
			"\1\4\2\uffff\2\4\2\uffff\2\4\3\uffff\1\4\1\uffff\1\4\5\uffff\1\4\1\uffff"+
			"\4\4\2\uffff\1\4\6\uffff\3\4\5\uffff\1\4\1\1\10\uffff\1\4\2\uffff\2\4"+
			"\2\uffff\1\4\3\uffff\4\4\1\uffff\3\4\1\uffff\1\4\1\2\1\3\1\uffff\5\4"+
			"\1\uffff\3\4\1\uffff\6\4\1\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff"+
			"\5\4\6\uffff\1\4\1\uffff\1\4\1\1",
			"\2\4\2\uffff\5\4\3\uffff\2\4\1\uffff\1\1\1\uffff\1\4\5\uffff\3\4\7\uffff"+
			"\1\4\2\uffff\2\4\2\uffff\2\4\3\uffff\1\4\1\uffff\1\4\5\uffff\1\4\1\uffff"+
			"\4\4\2\uffff\1\4\6\uffff\3\4\5\uffff\1\4\1\1\10\uffff\1\4\2\uffff\2\4"+
			"\2\uffff\1\4\3\uffff\4\4\1\uffff\3\4\1\uffff\1\4\1\5\1\3\6\4\1\uffff"+
			"\3\4\1\uffff\6\4\1\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\5\4\6\uffff"+
			"\1\4\1\uffff\1\4\1\1",
			"\1\4\1\uffff\1\6\35\uffff\1\3\10\uffff\1\3\26\uffff\1\6\105\uffff\1"+
			"\6",
			"",
			"",
			"\1\4\1\uffff\1\7\35\uffff\1\3\10\uffff\1\3\26\uffff\1\7\105\uffff\1"+
			"\7",
			"\1\4\1\uffff\1\6\35\uffff\1\3\10\uffff\1\3\26\uffff\1\6\105\uffff\1"+
			"\6",
			"\1\4\1\uffff\1\7\35\uffff\1\3\10\uffff\1\3\26\uffff\1\7\105\uffff\1"+
			"\7"
	};

	static final short[] DFA481_eot = DFA.unpackEncodedString(DFA481_eotS);
	static final short[] DFA481_eof = DFA.unpackEncodedString(DFA481_eofS);
	static final char[] DFA481_min = DFA.unpackEncodedStringToUnsignedChars(DFA481_minS);
	static final char[] DFA481_max = DFA.unpackEncodedStringToUnsignedChars(DFA481_maxS);
	static final short[] DFA481_accept = DFA.unpackEncodedString(DFA481_acceptS);
	static final short[] DFA481_special = DFA.unpackEncodedString(DFA481_specialS);
	static final short[][] DFA481_transition;

	static {
		int numStates = DFA481_transitionS.length;
		DFA481_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA481_transition[i] = DFA.unpackEncodedString(DFA481_transitionS[i]);
		}
	}

	protected class DFA481 extends DFA {

		public DFA481(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 481;
			this.eot = DFA481_eot;
			this.eof = DFA481_eof;
			this.min = DFA481_min;
			this.max = DFA481_max;
			this.accept = DFA481_accept;
			this.special = DFA481_special;
			this.transition = DFA481_transition;
		}
		@Override
		public String getDescription() {
			return "1402:64: ( ( ws )? sass_else )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA489_eotS =
		"\5\uffff";
	static final String DFA489_eofS =
		"\5\uffff";
	static final String DFA489_minS =
		"\1\161\1\25\1\uffff\1\25\1\uffff";
	static final String DFA489_maxS =
		"\1\162\1\u0099\1\uffff\1\u0099\1\uffff";
	static final String DFA489_acceptS =
		"\2\uffff\1\2\1\uffff\1\1";
	static final String DFA489_specialS =
		"\5\uffff}>";
	static final String[] DFA489_transitionS = {
			"\1\1\1\2",
			"\1\3\35\uffff\1\2\10\uffff\1\4\26\uffff\1\3\105\uffff\1\3",
			"",
			"\1\3\35\uffff\1\2\10\uffff\1\4\26\uffff\1\3\105\uffff\1\3",
			""
	};

	static final short[] DFA489_eot = DFA.unpackEncodedString(DFA489_eotS);
	static final short[] DFA489_eof = DFA.unpackEncodedString(DFA489_eofS);
	static final char[] DFA489_min = DFA.unpackEncodedStringToUnsignedChars(DFA489_minS);
	static final char[] DFA489_max = DFA.unpackEncodedStringToUnsignedChars(DFA489_maxS);
	static final short[] DFA489_accept = DFA.unpackEncodedString(DFA489_acceptS);
	static final short[] DFA489_special = DFA.unpackEncodedString(DFA489_specialS);
	static final short[][] DFA489_transition;

	static {
		int numStates = DFA489_transitionS.length;
		DFA489_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA489_transition[i] = DFA.unpackEncodedString(DFA489_transitionS[i]);
		}
	}

	protected class DFA489 extends DFA {

		public DFA489(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 489;
			this.eot = DFA489_eot;
			this.eof = DFA489_eof;
			this.min = DFA489_min;
			this.max = DFA489_max;
			this.accept = DFA489_accept;
			this.special = DFA489_special;
			this.transition = DFA489_transition;
		}
		@Override
		public String getDescription() {
			return "1405:1: sass_else : ( SASS_ELSE ( ws )? sass_control_block | ( ( SASS_ELSE ( ws )? {...}? IDENT ) | SASS_ELSEIF ) ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? );";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA488_eotS =
		"\10\uffff";
	static final String DFA488_eofS =
		"\2\4\6\uffff";
	static final String DFA488_minS =
		"\2\6\1\23\2\uffff\3\23";
	static final String DFA488_maxS =
		"\3\u0099\2\uffff\3\u0099";
	static final String DFA488_acceptS =
		"\3\uffff\1\1\1\2\3\uffff";
	static final String DFA488_specialS =
		"\10\uffff}>";
	static final String[] DFA488_transitionS = {
			"\2\4\2\uffff\5\4\3\uffff\2\4\1\uffff\1\1\1\uffff\1\4\5\uffff\3\4\7\uffff"+
			"\1\4\2\uffff\2\4\2\uffff\2\4\3\uffff\1\4\1\uffff\1\4\5\uffff\1\4\1\uffff"+
			"\4\4\2\uffff\1\4\6\uffff\3\4\5\uffff\1\4\1\1\10\uffff\1\4\2\uffff\2\4"+
			"\2\uffff\1\4\3\uffff\4\4\1\uffff\3\4\1\uffff\1\4\1\2\1\3\1\uffff\5\4"+
			"\1\uffff\3\4\1\uffff\6\4\1\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff"+
			"\5\4\6\uffff\1\4\1\uffff\1\4\1\1",
			"\2\4\2\uffff\5\4\3\uffff\2\4\1\uffff\1\1\1\uffff\1\4\5\uffff\3\4\7\uffff"+
			"\1\4\2\uffff\2\4\2\uffff\2\4\3\uffff\1\4\1\uffff\1\4\5\uffff\1\4\1\uffff"+
			"\4\4\2\uffff\1\4\6\uffff\3\4\5\uffff\1\4\1\1\10\uffff\1\4\2\uffff\2\4"+
			"\2\uffff\1\4\3\uffff\4\4\1\uffff\3\4\1\uffff\1\4\1\5\1\3\6\4\1\uffff"+
			"\3\4\1\uffff\6\4\1\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\5\4\6\uffff"+
			"\1\4\1\uffff\1\4\1\1",
			"\1\4\1\uffff\1\6\35\uffff\1\3\10\uffff\1\3\26\uffff\1\6\105\uffff\1"+
			"\6",
			"",
			"",
			"\1\4\1\uffff\1\7\35\uffff\1\3\10\uffff\1\3\26\uffff\1\7\105\uffff\1"+
			"\7",
			"\1\4\1\uffff\1\6\35\uffff\1\3\10\uffff\1\3\26\uffff\1\6\105\uffff\1"+
			"\6",
			"\1\4\1\uffff\1\7\35\uffff\1\3\10\uffff\1\3\26\uffff\1\7\105\uffff\1"+
			"\7"
	};

	static final short[] DFA488_eot = DFA.unpackEncodedString(DFA488_eotS);
	static final short[] DFA488_eof = DFA.unpackEncodedString(DFA488_eofS);
	static final char[] DFA488_min = DFA.unpackEncodedStringToUnsignedChars(DFA488_minS);
	static final char[] DFA488_max = DFA.unpackEncodedStringToUnsignedChars(DFA488_maxS);
	static final short[] DFA488_accept = DFA.unpackEncodedString(DFA488_acceptS);
	static final short[] DFA488_special = DFA.unpackEncodedString(DFA488_specialS);
	static final short[][] DFA488_transition;

	static {
		int numStates = DFA488_transitionS.length;
		DFA488_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA488_transition[i] = DFA.unpackEncodedString(DFA488_transitionS[i]);
		}
	}

	protected class DFA488 extends DFA {

		public DFA488(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 488;
			this.eot = DFA488_eot;
			this.eof = DFA488_eof;
			this.min = DFA488_min;
			this.max = DFA488_max;
			this.accept = DFA488_accept;
			this.special = DFA488_special;
			this.transition = DFA488_transition;
		}
		@Override
		public String getDescription() {
			return "1409:128: ( ( ws )? sass_else )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA492_eotS =
		"\4\uffff";
	static final String DFA492_eofS =
		"\4\uffff";
	static final String DFA492_minS =
		"\2\5\2\uffff";
	static final String DFA492_maxS =
		"\2\u0099\2\uffff";
	static final String DFA492_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA492_specialS =
		"\4\uffff}>";
	static final String[] DFA492_transitionS = {
			"\3\3\2\uffff\5\3\3\uffff\1\3\1\uffff\1\2\1\1\1\uffff\1\3\6\uffff\1\3"+
			"\2\uffff\1\3\3\uffff\1\3\1\uffff\2\3\1\uffff\1\3\3\uffff\2\3\3\uffff"+
			"\3\3\6\uffff\6\3\1\uffff\2\3\3\uffff\1\3\1\uffff\3\3\5\uffff\1\3\1\1"+
			"\3\uffff\2\3\3\uffff\3\3\1\uffff\1\3\4\uffff\5\3\2\uffff\3\3\1\uffff"+
			"\2\3\2\uffff\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\5\3\3\uffff\1\3\2\uffff"+
			"\7\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\1\1",
			"\3\3\2\uffff\5\3\3\uffff\1\3\1\uffff\1\2\1\1\1\uffff\1\3\6\uffff\1\3"+
			"\2\uffff\1\3\3\uffff\1\3\1\uffff\2\3\1\uffff\1\3\3\uffff\2\3\3\uffff"+
			"\3\3\6\uffff\6\3\1\uffff\2\3\3\uffff\1\3\1\uffff\3\3\5\uffff\1\3\1\1"+
			"\3\uffff\2\3\3\uffff\3\3\1\uffff\1\3\4\uffff\5\3\2\uffff\3\3\1\uffff"+
			"\2\3\2\uffff\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\5\3\3\uffff\1\3\2\uffff"+
			"\7\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\1\1",
			"",
			""
	};

	static final short[] DFA492_eot = DFA.unpackEncodedString(DFA492_eotS);
	static final short[] DFA492_eof = DFA.unpackEncodedString(DFA492_eofS);
	static final char[] DFA492_min = DFA.unpackEncodedStringToUnsignedChars(DFA492_minS);
	static final char[] DFA492_max = DFA.unpackEncodedStringToUnsignedChars(DFA492_maxS);
	static final short[] DFA492_accept = DFA.unpackEncodedString(DFA492_acceptS);
	static final short[] DFA492_special = DFA.unpackEncodedString(DFA492_specialS);
	static final short[][] DFA492_transition;

	static {
		int numStates = DFA492_transitionS.length;
		DFA492_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA492_transition[i] = DFA.unpackEncodedString(DFA492_transitionS[i]);
		}
	}

	protected class DFA492 extends DFA {

		public DFA492(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 492;
			this.eot = DFA492_eot;
			this.eof = DFA492_eof;
			this.min = DFA492_min;
			this.max = DFA492_max;
			this.accept = DFA492_accept;
			this.special = DFA492_special;
			this.transition = DFA492_transition;
		}
		@Override
		public String getDescription() {
			return "1424:102: ( ( ws )? COMMA )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA497_eotS =
		"\4\uffff";
	static final String DFA497_eofS =
		"\4\uffff";
	static final String DFA497_minS =
		"\2\24\2\uffff";
	static final String DFA497_maxS =
		"\2\u0099\2\uffff";
	static final String DFA497_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA497_specialS =
		"\1\0\1\1\2\uffff}>";
	static final String[] DFA497_transitionS = {
			"\1\2\1\1\75\uffff\1\1\105\uffff\1\1",
			"\1\2\1\1\35\uffff\1\3\37\uffff\1\1\105\uffff\1\1",
			"",
			""
	};

	static final short[] DFA497_eot = DFA.unpackEncodedString(DFA497_eotS);
	static final short[] DFA497_eof = DFA.unpackEncodedString(DFA497_eofS);
	static final char[] DFA497_min = DFA.unpackEncodedStringToUnsignedChars(DFA497_minS);
	static final char[] DFA497_max = DFA.unpackEncodedStringToUnsignedChars(DFA497_maxS);
	static final short[] DFA497_accept = DFA.unpackEncodedString(DFA497_acceptS);
	static final short[] DFA497_special = DFA.unpackEncodedString(DFA497_specialS);
	static final short[][] DFA497_transition;

	static {
		int numStates = DFA497_transitionS.length;
		DFA497_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA497_transition[i] = DFA.unpackEncodedString(DFA497_transitionS[i]);
		}
	}

	protected class DFA497 extends DFA {

		public DFA497(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 497;
			this.eot = DFA497_eot;
			this.eof = DFA497_eof;
			this.min = DFA497_min;
			this.max = DFA497_max;
			this.accept = DFA497_accept;
			this.special = DFA497_special;
			this.transition = DFA497_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1429:17: ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? cp_variable )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA497_0 = input.LA(1);
						 
						int index497_0 = input.index();
						input.rewind();
						s = -1;
						if ( (LA497_0==COMMENT||LA497_0==NL||LA497_0==WS) ) {s = 1;}
						else if ( (LA497_0==COMMA) && (synpred56_Css3())) {s = 2;}
						 
						input.seek(index497_0);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA497_1 = input.LA(1);
						 
						int index497_1 = input.index();
						input.rewind();
						s = -1;
						if ( (LA497_1==IDENT) ) {s = 3;}
						else if ( (LA497_1==COMMENT||LA497_1==NL||LA497_1==WS) ) {s = 1;}
						else if ( (LA497_1==COMMA) && (synpred56_Css3())) {s = 2;}
						 
						input.seek(index497_1);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 497, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA517_eotS =
		"\4\uffff";
	static final String DFA517_eofS =
		"\4\uffff";
	static final String DFA517_minS =
		"\2\25\2\uffff";
	static final String DFA517_maxS =
		"\2\u0099\2\uffff";
	static final String DFA517_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA517_specialS =
		"\4\uffff}>";
	static final String[] DFA517_transitionS = {
			"\1\1\36\uffff\1\2\36\uffff\1\1\57\uffff\1\3\25\uffff\1\1",
			"\1\1\36\uffff\1\2\36\uffff\1\1\57\uffff\1\3\25\uffff\1\1",
			"",
			""
	};

	static final short[] DFA517_eot = DFA.unpackEncodedString(DFA517_eotS);
	static final short[] DFA517_eof = DFA.unpackEncodedString(DFA517_eofS);
	static final char[] DFA517_min = DFA.unpackEncodedStringToUnsignedChars(DFA517_minS);
	static final char[] DFA517_max = DFA.unpackEncodedStringToUnsignedChars(DFA517_maxS);
	static final short[] DFA517_accept = DFA.unpackEncodedString(DFA517_acceptS);
	static final short[] DFA517_special = DFA.unpackEncodedString(DFA517_specialS);
	static final short[][] DFA517_transition;

	static {
		int numStates = DFA517_transitionS.length;
		DFA517_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA517_transition[i] = DFA.unpackEncodedString(DFA517_transitionS[i]);
		}
	}

	protected class DFA517 extends DFA {

		public DFA517(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 517;
			this.eot = DFA517_eot;
			this.eof = DFA517_eof;
			this.min = DFA517_min;
			this.max = DFA517_max;
			this.accept = DFA517_accept;
			this.special = DFA517_special;
			this.transition = DFA517_transition;
		}
		@Override
		public String getDescription() {
			return "421:22: ( ( ws )? IMPORTANT_SYM )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA524_eotS =
		"\6\uffff";
	static final String DFA524_eofS =
		"\6\uffff";
	static final String DFA524_minS =
		"\1\7\1\25\1\uffff\1\7\2\uffff";
	static final String DFA524_maxS =
		"\1\u0089\1\u0099\1\uffff\1\u0099\2\uffff";
	static final String DFA524_acceptS =
		"\2\uffff\1\3\1\uffff\1\1\1\2";
	static final String DFA524_specialS =
		"\6\uffff}>";
	static final String[] DFA524_transitionS = {
			"\1\2\13\uffff\1\2\11\uffff\3\2\12\uffff\2\2\2\uffff\2\2\3\uffff\1\2\11"+
			"\uffff\1\2\5\uffff\1\2\7\uffff\1\2\23\uffff\2\2\13\uffff\1\1\10\uffff"+
			"\1\2\17\uffff\1\2\3\uffff\1\2",
			"\1\3\46\uffff\1\4\26\uffff\1\3\105\uffff\1\3",
			"",
			"\1\4\13\uffff\1\4\1\uffff\1\3\7\uffff\3\4\12\uffff\2\4\2\uffff\2\4\3"+
			"\uffff\1\4\10\uffff\2\4\5\uffff\1\4\4\uffff\1\5\2\uffff\1\4\7\uffff\1"+
			"\3\13\uffff\2\4\24\uffff\1\4\17\uffff\1\4\3\uffff\1\4\17\uffff\1\3",
			"",
			""
	};

	static final short[] DFA524_eot = DFA.unpackEncodedString(DFA524_eotS);
	static final short[] DFA524_eof = DFA.unpackEncodedString(DFA524_eofS);
	static final char[] DFA524_min = DFA.unpackEncodedStringToUnsignedChars(DFA524_minS);
	static final char[] DFA524_max = DFA.unpackEncodedStringToUnsignedChars(DFA524_maxS);
	static final short[] DFA524_accept = DFA.unpackEncodedString(DFA524_acceptS);
	static final short[] DFA524_special = DFA.unpackEncodedString(DFA524_specialS);
	static final short[][] DFA524_transition;

	static {
		int numStates = DFA524_transitionS.length;
		DFA524_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA524_transition[i] = DFA.unpackEncodedString(DFA524_transitionS[i]);
		}
	}

	protected class DFA524 extends DFA {

		public DFA524(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 524;
			this.eot = DFA524_eot;
			this.eof = DFA524_eof;
			this.min = DFA524_min;
			this.max = DFA524_max;
			this.accept = DFA524_accept;
			this.special = DFA524_special;
			this.transition = DFA524_transition;
		}
		@Override
		public String getDescription() {
			return "423:8: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA519_eotS =
		"\4\uffff";
	static final String DFA519_eofS =
		"\4\uffff";
	static final String DFA519_minS =
		"\1\25\1\7\2\uffff";
	static final String DFA519_maxS =
		"\2\u0099\2\uffff";
	static final String DFA519_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA519_specialS =
		"\4\uffff}>";
	static final String[] DFA519_transitionS = {
			"\1\1\46\uffff\1\2\26\uffff\1\1\105\uffff\1\1",
			"\1\3\13\uffff\1\3\1\uffff\1\1\7\uffff\3\3\12\uffff\2\3\2\uffff\2\3\3"+
			"\uffff\1\3\10\uffff\1\2\1\3\5\uffff\1\3\7\uffff\1\3\7\uffff\1\1\13\uffff"+
			"\2\3\24\uffff\1\3\17\uffff\1\3\3\uffff\1\3\17\uffff\1\1",
			"",
			""
	};

	static final short[] DFA519_eot = DFA.unpackEncodedString(DFA519_eotS);
	static final short[] DFA519_eof = DFA.unpackEncodedString(DFA519_eofS);
	static final char[] DFA519_min = DFA.unpackEncodedStringToUnsignedChars(DFA519_minS);
	static final char[] DFA519_max = DFA.unpackEncodedStringToUnsignedChars(DFA519_maxS);
	static final short[] DFA519_accept = DFA.unpackEncodedString(DFA519_acceptS);
	static final short[] DFA519_special = DFA.unpackEncodedString(DFA519_specialS);
	static final short[][] DFA519_transition;

	static {
		int numStates = DFA519_transitionS.length;
		DFA519_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA519_transition[i] = DFA.unpackEncodedString(DFA519_transitionS[i]);
		}
	}

	protected class DFA519 extends DFA {

		public DFA519(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 519;
			this.eot = DFA519_eot;
			this.eof = DFA519_eof;
			this.min = DFA519_min;
			this.max = DFA519_max;
			this.accept = DFA519_accept;
			this.special = DFA519_special;
			this.transition = DFA519_transition;
		}
		@Override
		public String getDescription() {
			return "423:23: ( ws selectorsGroup )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA545_eotS =
		"\6\uffff";
	static final String DFA545_eofS =
		"\6\uffff";
	static final String DFA545_minS =
		"\1\7\1\25\1\uffff\1\7\2\uffff";
	static final String DFA545_maxS =
		"\1\u0089\1\u0099\1\uffff\1\u0099\2\uffff";
	static final String DFA545_acceptS =
		"\2\uffff\1\3\1\uffff\1\1\1\2";
	static final String DFA545_specialS =
		"\6\uffff}>";
	static final String[] DFA545_transitionS = {
			"\1\2\13\uffff\1\2\11\uffff\3\2\12\uffff\2\2\2\uffff\2\2\3\uffff\1\2\11"+
			"\uffff\1\2\5\uffff\1\2\7\uffff\1\2\23\uffff\2\2\13\uffff\1\1\10\uffff"+
			"\1\2\17\uffff\1\2\3\uffff\1\2",
			"\1\3\46\uffff\1\4\26\uffff\1\3\105\uffff\1\3",
			"",
			"\1\4\13\uffff\1\4\1\uffff\1\3\7\uffff\3\4\12\uffff\2\4\2\uffff\2\4\3"+
			"\uffff\1\4\10\uffff\2\4\5\uffff\1\4\4\uffff\1\5\2\uffff\1\4\7\uffff\1"+
			"\3\13\uffff\2\4\24\uffff\1\4\17\uffff\1\4\3\uffff\1\4\17\uffff\1\3",
			"",
			""
	};

	static final short[] DFA545_eot = DFA.unpackEncodedString(DFA545_eotS);
	static final short[] DFA545_eof = DFA.unpackEncodedString(DFA545_eofS);
	static final char[] DFA545_min = DFA.unpackEncodedStringToUnsignedChars(DFA545_minS);
	static final char[] DFA545_max = DFA.unpackEncodedStringToUnsignedChars(DFA545_maxS);
	static final short[] DFA545_accept = DFA.unpackEncodedString(DFA545_acceptS);
	static final short[] DFA545_special = DFA.unpackEncodedString(DFA545_specialS);
	static final short[][] DFA545_transition;

	static {
		int numStates = DFA545_transitionS.length;
		DFA545_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA545_transition[i] = DFA.unpackEncodedString(DFA545_transitionS[i]);
		}
	}

	protected class DFA545 extends DFA {

		public DFA545(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 545;
			this.eot = DFA545_eot;
			this.eof = DFA545_eof;
			this.min = DFA545_min;
			this.max = DFA545_max;
			this.accept = DFA545_accept;
			this.special = DFA545_special;
			this.transition = DFA545_transition;
		}
		@Override
		public String getDescription() {
			return "777:8: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA540_eotS =
		"\4\uffff";
	static final String DFA540_eofS =
		"\4\uffff";
	static final String DFA540_minS =
		"\1\25\1\7\2\uffff";
	static final String DFA540_maxS =
		"\2\u0099\2\uffff";
	static final String DFA540_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA540_specialS =
		"\4\uffff}>";
	static final String[] DFA540_transitionS = {
			"\1\1\46\uffff\1\2\26\uffff\1\1\105\uffff\1\1",
			"\1\3\13\uffff\1\3\1\uffff\1\1\7\uffff\3\3\12\uffff\2\3\2\uffff\2\3\3"+
			"\uffff\1\3\10\uffff\1\2\1\3\5\uffff\1\3\7\uffff\1\3\7\uffff\1\1\13\uffff"+
			"\2\3\24\uffff\1\3\17\uffff\1\3\3\uffff\1\3\17\uffff\1\1",
			"",
			""
	};

	static final short[] DFA540_eot = DFA.unpackEncodedString(DFA540_eotS);
	static final short[] DFA540_eof = DFA.unpackEncodedString(DFA540_eofS);
	static final char[] DFA540_min = DFA.unpackEncodedStringToUnsignedChars(DFA540_minS);
	static final char[] DFA540_max = DFA.unpackEncodedStringToUnsignedChars(DFA540_maxS);
	static final short[] DFA540_accept = DFA.unpackEncodedString(DFA540_acceptS);
	static final short[] DFA540_special = DFA.unpackEncodedString(DFA540_specialS);
	static final short[][] DFA540_transition;

	static {
		int numStates = DFA540_transitionS.length;
		DFA540_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA540_transition[i] = DFA.unpackEncodedString(DFA540_transitionS[i]);
		}
	}

	protected class DFA540 extends DFA {

		public DFA540(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 540;
			this.eot = DFA540_eot;
			this.eof = DFA540_eof;
			this.min = DFA540_min;
			this.max = DFA540_max;
			this.accept = DFA540_accept;
			this.special = DFA540_special;
			this.transition = DFA540_transition;
		}
		@Override
		public String getDescription() {
			return "777:23: ( ws selectorsGroup )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA556_eotS =
		"\5\uffff";
	static final String DFA556_eofS =
		"\5\uffff";
	static final String DFA556_minS =
		"\2\5\3\uffff";
	static final String DFA556_maxS =
		"\2\u0099\3\uffff";
	static final String DFA556_acceptS =
		"\2\uffff\1\2\1\3\1\1";
	static final String DFA556_specialS =
		"\5\uffff}>";
	static final String[] DFA556_transitionS = {
			"\3\3\2\uffff\5\3\3\uffff\1\3\1\uffff\1\2\1\1\1\uffff\1\3\6\uffff\1\3"+
			"\2\uffff\1\3\3\uffff\1\3\1\uffff\2\3\1\uffff\1\3\3\uffff\2\3\3\uffff"+
			"\1\3\1\uffff\1\3\7\uffff\5\3\1\uffff\2\3\5\uffff\3\3\5\uffff\1\3\1\1"+
			"\4\uffff\1\3\3\uffff\3\3\1\uffff\1\3\4\uffff\5\3\2\uffff\3\3\1\uffff"+
			"\2\3\2\uffff\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\5\3\1\uffff\1\2\1\uffff"+
			"\1\3\2\uffff\7\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\1\1",
			"\3\4\2\uffff\5\4\3\uffff\1\4\1\uffff\1\2\1\1\1\uffff\1\4\6\uffff\1\4"+
			"\2\uffff\1\4\3\uffff\1\4\1\uffff\2\4\1\uffff\1\4\3\uffff\2\4\3\uffff"+
			"\1\4\1\uffff\1\4\7\uffff\5\4\1\uffff\2\4\5\uffff\3\4\5\uffff\1\4\1\1"+
			"\4\uffff\1\4\3\uffff\3\4\1\uffff\1\4\4\uffff\5\4\2\uffff\3\4\1\uffff"+
			"\2\4\2\uffff\1\4\1\uffff\3\4\1\uffff\3\4\1\uffff\5\4\1\uffff\1\2\1\uffff"+
			"\1\4\2\uffff\7\4\2\uffff\2\4\2\uffff\1\4\1\uffff\1\4\1\1",
			"",
			"",
			""
	};

	static final short[] DFA556_eot = DFA.unpackEncodedString(DFA556_eotS);
	static final short[] DFA556_eof = DFA.unpackEncodedString(DFA556_eofS);
	static final char[] DFA556_min = DFA.unpackEncodedStringToUnsignedChars(DFA556_minS);
	static final char[] DFA556_max = DFA.unpackEncodedStringToUnsignedChars(DFA556_maxS);
	static final short[] DFA556_accept = DFA.unpackEncodedString(DFA556_acceptS);
	static final short[] DFA556_special = DFA.unpackEncodedString(DFA556_specialS);
	static final short[][] DFA556_transition;

	static {
		int numStates = DFA556_transitionS.length;
		DFA556_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA556_transition[i] = DFA.unpackEncodedString(DFA556_transitionS[i]);
		}
	}

	protected class DFA556 extends DFA {

		public DFA556(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 556;
			this.eot = DFA556_eot;
			this.eof = DFA556_eof;
			this.min = DFA556_min;
			this.max = DFA556_max;
			this.accept = DFA556_accept;
			this.special = DFA556_special;
			this.transition = DFA556_transition;
		}
		@Override
		public String getDescription() {
			return "1029:15: ( ws | ( ( ws )? operator ( ws )? ) |)";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA561_eotS =
		"\5\uffff";
	static final String DFA561_eofS =
		"\5\uffff";
	static final String DFA561_minS =
		"\2\5\3\uffff";
	static final String DFA561_maxS =
		"\2\u0099\3\uffff";
	static final String DFA561_acceptS =
		"\2\uffff\1\2\1\3\1\1";
	static final String DFA561_specialS =
		"\5\uffff}>";
	static final String[] DFA561_transitionS = {
			"\3\3\2\uffff\5\3\3\uffff\1\3\2\uffff\1\1\1\uffff\1\3\6\uffff\1\3\2\uffff"+
			"\1\3\3\uffff\1\3\1\uffff\2\3\1\uffff\1\3\3\uffff\2\3\3\uffff\1\3\1\uffff"+
			"\1\3\7\uffff\5\3\1\uffff\2\3\5\uffff\3\3\5\uffff\1\3\1\1\4\uffff\1\3"+
			"\3\uffff\3\3\1\uffff\1\3\4\uffff\5\3\2\uffff\3\3\1\uffff\2\3\2\uffff"+
			"\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\5\3\1\uffff\1\2\1\uffff\1\3\2\uffff"+
			"\7\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\1\1",
			"\3\4\2\uffff\5\4\3\uffff\1\4\2\uffff\1\1\1\uffff\1\4\6\uffff\1\4\2\uffff"+
			"\1\4\3\uffff\1\4\1\uffff\2\4\1\uffff\1\4\3\uffff\2\4\3\uffff\1\4\1\uffff"+
			"\1\4\7\uffff\5\4\1\uffff\2\4\5\uffff\3\4\5\uffff\1\4\1\1\4\uffff\1\4"+
			"\3\uffff\3\4\1\uffff\1\4\4\uffff\5\4\2\uffff\3\4\1\uffff\2\4\2\uffff"+
			"\1\4\1\uffff\3\4\1\uffff\3\4\1\uffff\5\4\1\uffff\1\2\1\uffff\1\4\2\uffff"+
			"\7\4\2\uffff\2\4\2\uffff\1\4\1\uffff\1\4\1\1",
			"",
			"",
			""
	};

	static final short[] DFA561_eot = DFA.unpackEncodedString(DFA561_eotS);
	static final short[] DFA561_eof = DFA.unpackEncodedString(DFA561_eofS);
	static final char[] DFA561_min = DFA.unpackEncodedStringToUnsignedChars(DFA561_minS);
	static final char[] DFA561_max = DFA.unpackEncodedStringToUnsignedChars(DFA561_maxS);
	static final short[] DFA561_accept = DFA.unpackEncodedString(DFA561_acceptS);
	static final short[] DFA561_special = DFA.unpackEncodedString(DFA561_specialS);
	static final short[][] DFA561_transition;

	static {
		int numStates = DFA561_transitionS.length;
		DFA561_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA561_transition[i] = DFA.unpackEncodedString(DFA561_transitionS[i]);
		}
	}

	protected class DFA561 extends DFA {

		public DFA561(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 561;
			this.eot = DFA561_eot;
			this.eof = DFA561_eof;
			this.min = DFA561_min;
			this.max = DFA561_max;
			this.accept = DFA561_accept;
			this.special = DFA561_special;
			this.transition = DFA561_transition;
		}
		@Override
		public String getDescription() {
			return "1115:21: ( ws | ( ( ws )? SOLIDUS ( ws )? ) |)";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	public static final BitSet FOLLOW_ws_in_styleSheet102 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDF3738190041C09L,0x000000000100FAAFL});
	public static final BitSet FOLLOW_charSet_in_styleSheet112 = new BitSet(new long[]{0xE828CC80E0AC7CC0L,0xDDF37381900C1C09L,0x000000000300FAAFL});
	public static final BitSet FOLLOW_ws_in_styleSheet114 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDF3738190041C09L,0x000000000100FAAFL});
	public static final BitSet FOLLOW_layerStatement_in_styleSheet130 = new BitSet(new long[]{0xE828CC80E0AC7CC0L,0xDDF37381900C1C09L,0x000000000300FAAFL});
	public static final BitSet FOLLOW_ws_in_styleSheet132 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDF3738190041C09L,0x000000000100FAAFL});
	public static final BitSet FOLLOW_imports_in_styleSheet146 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDF3738190041C09L,0x000000000100FAAFL});
	public static final BitSet FOLLOW_namespaces_in_styleSheet157 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDF3738190041C09L,0x000000000100FAAFL});
	public static final BitSet FOLLOW_body_in_styleSheet168 = new BitSet(new long[]{0x0000000000000000L});
	public static final BitSet FOLLOW_EOF_in_styleSheet176 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespace_in_namespaces193 = new BitSet(new long[]{0x0000000000200002L,0x00000000000C0000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_namespaces195 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
	public static final BitSet FOLLOW_NAMESPACE_SYM_in_namespace211 = new BitSet(new long[]{0x0008000000200000L,0x0000000000080000L,0x0000000002080040L});
	public static final BitSet FOLLOW_ws_in_namespace213 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0000000000080040L});
	public static final BitSet FOLLOW_namespacePrefixName_in_namespace217 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002080040L});
	public static final BitSet FOLLOW_ws_in_namespace219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080040L});
	public static final BitSet FOLLOW_resourceIdentifier_in_namespace224 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000008L});
	public static final BitSet FOLLOW_ws_in_namespace226 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SEMI_in_namespace229 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_namespacePrefixName242 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CHARSET_SYM_in_charSet276 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000040L});
	public static final BitSet FOLLOW_ws_in_charSet278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_charSetValue_in_charSet281 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000008L});
	public static final BitSet FOLLOW_ws_in_charSet283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SEMI_in_charSet286 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STRING_in_charSetValue300 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_importItem_in_imports328 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000008L});
	public static final BitSet FOLLOW_ws_in_imports330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SEMI_in_imports333 = new BitSet(new long[]{0x0020000000200002L,0x8080000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_imports335 = new BitSet(new long[]{0x0020000000000002L,0x8080000000000000L});
	public static final BitSet FOLLOW_sass_use_in_imports370 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000008L});
	public static final BitSet FOLLOW_ws_in_imports372 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SEMI_in_imports375 = new BitSet(new long[]{0x0020000000200002L,0x8080000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_imports377 = new BitSet(new long[]{0x0020000000000002L,0x8080000000000000L});
	public static final BitSet FOLLOW_sass_forward_in_imports412 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000008L});
	public static final BitSet FOLLOW_ws_in_imports414 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SEMI_in_imports417 = new BitSet(new long[]{0x0020000000200002L,0x8080000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_imports419 = new BitSet(new long[]{0x0020000000000002L,0x8080000000000000L});
	public static final BitSet FOLLOW_IMPORT_SYM_in_importItem455 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002080040L});
	public static final BitSet FOLLOW_ws_in_importItem457 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080040L});
	public static final BitSet FOLLOW_resourceIdentifier_in_importItem460 = new BitSet(new long[]{0xC028848000A47C42L,0xDDD37380108C1501L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_importItem462 = new BitSet(new long[]{0xC028848000A47C42L,0xDDD37380108C1501L,0x000000000300F807L});
	public static final BitSet FOLLOW_importLayer_in_importItem465 = new BitSet(new long[]{0xC028848000A47C42L,0xDDD37380108C1501L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_importItem476 = new BitSet(new long[]{0xC028848000847C40L,0xDDD3738010841501L,0x000000000100F807L});
	public static final BitSet FOLLOW_mediaQueryList_in_importItem479 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IMPORT_SYM_in_importItem512 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002080040L});
	public static final BitSet FOLLOW_ws_in_importItem514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080040L});
	public static final BitSet FOLLOW_resourceIdentifier_in_importItem517 = new BitSet(new long[]{0xC028848000B47C42L,0xDDD37380108C1501L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_importItem520 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_importItem523 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002080040L});
	public static final BitSet FOLLOW_ws_in_importItem525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080040L});
	public static final BitSet FOLLOW_resourceIdentifier_in_importItem528 = new BitSet(new long[]{0xC028848000B47C42L,0xDDD37380108C1501L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_importItem532 = new BitSet(new long[]{0xC028848000A47C42L,0xDDD37380108C1501L,0x000000000300F807L});
	public static final BitSet FOLLOW_importLayer_in_importItem535 = new BitSet(new long[]{0xC028848000A47C42L,0xDDD37380108C1501L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_importItem546 = new BitSet(new long[]{0xC028848000847C40L,0xDDD3738010841501L,0x000000000100F807L});
	public static final BitSet FOLLOW_mediaQueryList_in_importItem549 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IMPORT_SYM_in_importItem573 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002080040L});
	public static final BitSet FOLLOW_ws_in_importItem575 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L,0x0000000000080040L});
	public static final BitSet FOLLOW_LPAREN_in_importItem579 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_less_import_types_in_importItem581 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_importItem583 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002080040L});
	public static final BitSet FOLLOW_ws_in_importItem585 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080040L});
	public static final BitSet FOLLOW_resourceIdentifier_in_importItem590 = new BitSet(new long[]{0xC028848000A47C42L,0xDDD37380108C1501L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_importItem592 = new BitSet(new long[]{0xC028848000A47C42L,0xDDD37380108C1501L,0x000000000300F807L});
	public static final BitSet FOLLOW_importLayer_in_importItem595 = new BitSet(new long[]{0xC028848000A47C42L,0xDDD37380108C1501L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_importItem606 = new BitSet(new long[]{0xC028848000847C40L,0xDDD3738010841501L,0x000000000100F807L});
	public static final BitSet FOLLOW_mediaQueryList_in_importItem609 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_importLayer634 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_importLayer637 = new BitSet(new long[]{0x0008000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_importLayer639 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_layerName_in_importLayer642 = new BitSet(new long[]{0x0000000000200000L,0x0000040000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_importLayer644 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_importLayer647 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_USE_in_sass_use674 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_use676 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080040L});
	public static final BitSet FOLLOW_resourceIdentifier_in_sass_use678 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_use681 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_sass_use_as_in_sass_use683 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_use688 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_sass_use_with_in_sass_use690 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_sass_use_as715 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_use_as717 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_use_as719 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_sass_use_with742 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_use_with744 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_sass_use_with747 = new BitSet(new long[]{0xC028008000A47C40L,0xDDD37380100C1401L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_sass_use_with749 = new BitSet(new long[]{0xC028008000847C40L,0xDDD3738010041401L,0x000000000100F807L});
	public static final BitSet FOLLOW_sass_use_with_declaration_in_sass_use_with752 = new BitSet(new long[]{0x0000000000300000L,0x0000040000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_use_with756 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_sass_use_with759 = new BitSet(new long[]{0xC028008000A47C40L,0xDDD37380100C1401L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_sass_use_with761 = new BitSet(new long[]{0xC028008000847C40L,0xDDD3738010041401L,0x000000000100F807L});
	public static final BitSet FOLLOW_sass_use_with_declaration_in_sass_use_with764 = new BitSet(new long[]{0x0000000000300000L,0x0000040000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_use_with769 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_sass_use_with772 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_sass_use_with_declaration793 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_use_with_declaration795 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_sass_use_with_declaration798 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_sass_use_with_declaration800 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_expression_in_sass_use_with_declaration803 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_FORWARD_in_sass_forward829 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080040L});
	public static final BitSet FOLLOW_resourceIdentifier_in_sass_forward833 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward837 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_sass_forward_hide_in_sass_forward841 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_sass_forward_show_in_sass_forward846 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward854 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_sass_forward_as_in_sass_forward856 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward863 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_sass_forward_with_in_sass_forward865 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_sass_forward_as890 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward_as892 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_forward_as894 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_sass_forward_with917 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward_with919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_sass_forward_with922 = new BitSet(new long[]{0xC028008000A47C40L,0xDDD37380100C1401L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_sass_forward_with924 = new BitSet(new long[]{0xC028008000847C40L,0xDDD3738010041401L,0x000000000100F807L});
	public static final BitSet FOLLOW_sass_forward_with_declaration_in_sass_forward_with927 = new BitSet(new long[]{0x0000000000300000L,0x0000040000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward_with931 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_sass_forward_with934 = new BitSet(new long[]{0xC028008000A47C40L,0xDDD37380100C1401L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_sass_forward_with936 = new BitSet(new long[]{0xC028008000847C40L,0xDDD3738010041401L,0x000000000100F807L});
	public static final BitSet FOLLOW_sass_forward_with_declaration_in_sass_forward_with939 = new BitSet(new long[]{0x0000000000300000L,0x0000040000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward_with944 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_sass_forward_with947 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_sass_forward_with_declaration968 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward_with_declaration970 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_sass_forward_with_declaration973 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_sass_forward_with_declaration975 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_expression_in_sass_forward_with_declaration978 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_sass_forward_hide1001 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward_hide1003 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_forward_hide1005 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward_hide1008 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_sass_forward_hide1011 = new BitSet(new long[]{0x0008000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward_hide1013 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_forward_hide1016 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_forward_show1041 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward_show1043 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_forward_show1045 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward_show1048 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_sass_forward_show1051 = new BitSet(new long[]{0x0008000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward_show1053 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_forward_show1056 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_MEDIA_SYM_in_media1075 = new BitSet(new long[]{0xC028848000A47C40L,0xDDD37380108C1501L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_media1077 = new BitSet(new long[]{0xC028848000847C40L,0xDDD3738010841501L,0x000000000100F807L});
	public static final BitSet FOLLOW_mediaQueryList_in_media1095 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_media1103 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_media1110 = new BitSet(new long[]{0xE028CC80E0AC7CC0L,0xDDF37389900C1C09L,0x000000000340FAAFL});
	public static final BitSet FOLLOW_ws_in_media1112 = new BitSet(new long[]{0xE028CC80E08C7CC0L,0xDDF3738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_syncToFollow_in_media1115 = new BitSet(new long[]{0xE028CC80E08C7CC0L,0xDDF3738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_mediaBody_in_media1125 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_RBRACE_in_media1132 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_mediaBodyItem_in_mediaBody1166 = new BitSet(new long[]{0xE028CC80E0AC7CC2L,0xDDF37381900C1C09L,0x000000000340FAAFL});
	public static final BitSet FOLLOW_ws_in_mediaBody1176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SEMI_in_mediaBody1179 = new BitSet(new long[]{0xE028CC80E0AC7CC2L,0xDDF37381900C1C09L,0x000000000340FAAFL});
	public static final BitSet FOLLOW_ws_in_mediaBody1183 = new BitSet(new long[]{0xE028CC80E08C7CC2L,0xDDF3738190041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_SEMI_in_mediaBody1210 = new BitSet(new long[]{0xE028CC80E0AC7CC2L,0xDDF37381900C1C09L,0x000000000340FAAFL});
	public static final BitSet FOLLOW_ws_in_mediaBody1212 = new BitSet(new long[]{0xE028CC80E08C7CC2L,0xDDF3738190041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_sass_extend_in_mediaBody1231 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000008L});
	public static final BitSet FOLLOW_ws_in_mediaBody1234 = new BitSet(new long[]{0xE028CC80E08C7CC2L,0xDDF3738190041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_SEMI_in_mediaBody1239 = new BitSet(new long[]{0xE028CC80E08C7CC2L,0xDDF3738190041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_cp_mixin_declaration_in_mediaBodyItem1313 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_mediaBodyItem1346 = new BitSet(new long[]{0x0010000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_mediaBodyItem1349 = new BitSet(new long[]{0x0010000000000000L});
	public static final BitSet FOLLOW_IMPORTANT_SYM_in_mediaBodyItem1352 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_mediaBodyItem1369 = new BitSet(new long[]{0x0010000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_mediaBodyItem1372 = new BitSet(new long[]{0x0010000000000000L});
	public static final BitSet FOLLOW_IMPORTANT_SYM_in_mediaBodyItem1375 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rule_in_mediaBodyItem1440 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_propertyDeclaration_in_mediaBodyItem1452 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_debug_in_mediaBodyItem1462 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_control_in_mediaBodyItem1472 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_content_in_mediaBodyItem1482 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_importItem_in_mediaBodyItem1492 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rule_in_mediaBodyItem1500 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_page_in_mediaBodyItem1508 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fontFace_in_mediaBodyItem1516 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_vendorAtRule_in_mediaBodyItem1524 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_media_in_mediaBodyItem1537 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_supportsAtRule_in_mediaBodyItem1545 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_mediaQuery_in_mediaQueryList1559 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_mediaQueryList1571 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_mediaQueryList1574 = new BitSet(new long[]{0xC028848000A47C40L,0xDDD37380108C1501L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_mediaQueryList1576 = new BitSet(new long[]{0xC028848000847C40L,0xDDD3738010841501L,0x000000000100F807L});
	public static final BitSet FOLLOW_mediaQuery_in_mediaQueryList1579 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_mediaQueryOperator_in_mediaQuery1598 = new BitSet(new long[]{0x0008840000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_mediaQuery1600 = new BitSet(new long[]{0x0008840000000000L});
	public static final BitSet FOLLOW_mediaType_in_mediaQuery1607 = new BitSet(new long[]{0x0008000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_mediaQuery1618 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_key_and_in_mediaQuery1621 = new BitSet(new long[]{0x0000800000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_mediaQuery1623 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_mediaExpression_in_mediaQuery1626 = new BitSet(new long[]{0x0008000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_mediaExpression_in_mediaQuery1637 = new BitSet(new long[]{0x0008000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_mediaQuery1648 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_key_and_in_mediaQuery1651 = new BitSet(new long[]{0x0000800000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_mediaQuery1653 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_mediaExpression_in_mediaQuery1656 = new BitSet(new long[]{0x0008000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_cp_variable_in_mediaQuery1669 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_key_only_in_mediaQueryOperator1681 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_in_mediaQueryOperator1685 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_mediaType1697 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GEN_in_mediaType1701 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_mediaType1707 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_mediaExpression1732 = new BitSet(new long[]{0xC028848000A47C40L,0xDDD37380100C1401L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_mediaExpression1734 = new BitSet(new long[]{0xC028848000847C40L,0xDDD3738010041401L,0x000000000100F807L});
	public static final BitSet FOLLOW_mediaFeature_in_mediaExpression1737 = new BitSet(new long[]{0x0000000000280000L,0x0000040000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_mediaFeatureValue_in_mediaExpression1739 = new BitSet(new long[]{0x0000000000200000L,0x0000040000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_mediaExpression1742 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_mediaExpression1745 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_mediaExpression1762 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_mediaFeatureValue1783 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_mediaFeatureValue1786 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_mediaFeatureValue1788 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_expression_in_mediaFeatureValue1807 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_mediaFeatureValue1827 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_mediaFeature1847 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GEN_in_mediaFeature1851 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_mediaFeature1859 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_mediaFeature1863 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bodyItem_in_body1897 = new BitSet(new long[]{0xE828CC80E0AC7CC2L,0xDDF37381900C1C09L,0x000000000300FAAFL});
	public static final BitSet FOLLOW_ws_in_body1907 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SEMI_in_body1910 = new BitSet(new long[]{0xE828CC80E0AC7CC2L,0xDDF37381900C1C09L,0x000000000300FAAFL});
	public static final BitSet FOLLOW_ws_in_body1914 = new BitSet(new long[]{0xE828CC80E08C7CC2L,0xDDF3738190041C09L,0x000000000100FAAFL});
	public static final BitSet FOLLOW_SEMI_in_body1941 = new BitSet(new long[]{0xE828CC80E0AC7CC2L,0xDDF37381900C1C09L,0x000000000300FAAFL});
	public static final BitSet FOLLOW_ws_in_body1943 = new BitSet(new long[]{0xE828CC80E08C7CC2L,0xDDF3738190041C09L,0x000000000100FAAFL});
	public static final BitSet FOLLOW_cp_mixin_declaration_in_bodyItem2023 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_bodyItem2056 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_bodyItem2075 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rule_in_bodyItem2084 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_declaration_in_bodyItem2106 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_map_in_bodyItem2123 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_at_rule_in_bodyItem2135 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_importItem_in_bodyItem2158 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_debug_in_bodyItem2172 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_control_in_bodyItem2186 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_function_declaration_in_bodyItem2200 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SUPPORTS_SYM_in_supportsAtRule2220 = new BitSet(new long[]{0x0008000000200000L,0x0000000000880100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_supportsAtRule2222 = new BitSet(new long[]{0x0008000000000000L,0x0000000000800100L});
	public static final BitSet FOLLOW_supportsCondition_in_supportsAtRule2225 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_supportsAtRule2227 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_supportsAtRule2230 = new BitSet(new long[]{0xE028CC80E0AC7CC0L,0xDDF37389900C1C09L,0x000000000340FAAFL});
	public static final BitSet FOLLOW_ws_in_supportsAtRule2232 = new BitSet(new long[]{0xE028CC80E08C7CC0L,0xDDF3738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_syncToFollow_in_supportsAtRule2235 = new BitSet(new long[]{0xE028CC80E08C7CC0L,0xDDF3738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_mediaBody_in_supportsAtRule2237 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_RBRACE_in_supportsAtRule2240 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_in_supportsCondition2253 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_supportsCondition2255 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_supportsInParens_in_supportsCondition2257 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_supportsInParens_in_supportsCondition2262 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_supportsCondition2265 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_supportsWithOperator_in_supportsCondition2267 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_supportsConjunction_in_supportsWithOperator2295 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_supportsWithOperator2298 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_supportsConjunction_in_supportsWithOperator2300 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_supportsDisjunction_in_supportsWithOperator2314 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_supportsWithOperator2317 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_supportsDisjunction_in_supportsWithOperator2319 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_key_and_in_supportsConjunction2347 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_supportsConjunction2349 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_supportsInParens_in_supportsConjunction2351 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_key_or_in_supportsDisjunction2378 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_supportsDisjunction2380 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_supportsInParens_in_supportsDisjunction2382 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_supportsInParens2409 = new BitSet(new long[]{0x0008000000200000L,0x0000000000880100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_supportsInParens2411 = new BitSet(new long[]{0x0008000000000000L,0x0000000000800100L});
	public static final BitSet FOLLOW_supportsCondition_in_supportsInParens2414 = new BitSet(new long[]{0x0000000000200000L,0x0000040000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_supportsInParens2416 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_supportsInParens2419 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_supportsFeature_in_supportsInParens2424 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_function_in_supportsInParens2436 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_supportsDecl_in_supportsFeature2467 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_supportsDecl2480 = new BitSet(new long[]{0xE828CC80E0AC7CC0L,0xDDFB7381900C1C09L,0x000000000340FAA7L});
	public static final BitSet FOLLOW_ws_in_supportsDecl2482 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738190041C09L,0x000000000140FAA7L});
	public static final BitSet FOLLOW_declaration_in_supportsDecl2485 = new BitSet(new long[]{0x0000000000200000L,0x0000040000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_supportsDecl2487 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_supportsDecl2490 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_layerBlock_in_layerAtRule2516 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_layerStatement_in_layerAtRule2536 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LAYER_SYM_in_layerBlock2570 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_layerBlock2572 = new BitSet(new long[]{0x1008000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_layerName_in_layerBlock2574 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_layerBlock2577 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_layerBody_in_layerBlock2580 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LAYER_SYM_in_layerStatement2615 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_layerStatement2617 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_layerName_in_layerStatement2619 = new BitSet(new long[]{0x0000000000300000L,0x0000000000080000L,0x0000000002000008L});
	public static final BitSet FOLLOW_ws_in_layerStatement2623 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_layerStatement2626 = new BitSet(new long[]{0x0008000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_layerStatement2628 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_layerName_in_layerStatement2631 = new BitSet(new long[]{0x0000000000300000L,0x0000000000080000L,0x0000000002000008L});
	public static final BitSet FOLLOW_SEMI_in_layerStatement2635 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_layerName2669 = new BitSet(new long[]{0x0000000080000002L});
	public static final BitSet FOLLOW_DOT_in_layerName2672 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_layerName2674 = new BitSet(new long[]{0x0000000080000002L});
	public static final BitSet FOLLOW_LBRACE_in_layerBody2709 = new BitSet(new long[]{0xE828CC80E0AC7CC0L,0xDDF37389900C1C09L,0x000000000300FAAFL});
	public static final BitSet FOLLOW_ws_in_layerBody2711 = new BitSet(new long[]{0xE828CC80E0AC7CC0L,0xDDF37389900C1C09L,0x000000000300FAAFL});
	public static final BitSet FOLLOW_body_in_layerBody2714 = new BitSet(new long[]{0x0000000000200000L,0x0000000800080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_layerBody2717 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_RBRACE_in_layerBody2720 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_media_in_at_rule2745 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_page_in_at_rule2753 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_counterStyle_in_at_rule2761 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fontFace_in_at_rule2769 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_supportsAtRule_in_at_rule2777 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_vendorAtRule_in_at_rule2785 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_layerAtRule_in_at_rule2793 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_moz_document_in_vendorAtRule2806 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_webkitKeyframes_in_vendorAtRule2810 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_generic_at_rule_in_vendorAtRule2814 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_atRuleId2824 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STRING_in_atRuleId2828 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_atRuleId2836 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_atRuleId2840 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT_IDENT_in_generic_at_rule2856 = new BitSet(new long[]{0xD028808000A47C40L,0xDDD37380100C1401L,0x000000000300F847L});
	public static final BitSet FOLLOW_ws_in_generic_at_rule2858 = new BitSet(new long[]{0xD028808000847C40L,0xDDD3738010041401L,0x000000000100F847L});
	public static final BitSet FOLLOW_atRuleId_in_generic_at_rule2863 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_generic_at_rule2865 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_generic_at_rule2879 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_syncTo_RBRACE_in_generic_at_rule2890 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_RBRACE_in_generic_at_rule2900 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MOZ_DOCUMENT_SYM_in_moz_document2911 = new BitSet(new long[]{0x0000000000200000L,0x000000000008E000L,0x0000000002080000L});
	public static final BitSet FOLLOW_ws_in_moz_document2913 = new BitSet(new long[]{0x0000000000000000L,0x000000000000E000L,0x0000000000080000L});
	public static final BitSet FOLLOW_moz_document_function_in_moz_document2918 = new BitSet(new long[]{0x1000000000300000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_moz_document2920 = new BitSet(new long[]{0x1000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_moz_document2926 = new BitSet(new long[]{0x0000000000200000L,0x000000000008E000L,0x0000000002080000L});
	public static final BitSet FOLLOW_ws_in_moz_document2928 = new BitSet(new long[]{0x0000000000000000L,0x000000000000E000L,0x0000000000080000L});
	public static final BitSet FOLLOW_moz_document_function_in_moz_document2931 = new BitSet(new long[]{0x1000000000300000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_moz_document2933 = new BitSet(new long[]{0x1000000000100000L});
	public static final BitSet FOLLOW_LBRACE_in_moz_document2940 = new BitSet(new long[]{0xE828CC80E0AC7CC0L,0xDDF37389900C1C09L,0x000000000300FAAFL});
	public static final BitSet FOLLOW_ws_in_moz_document2942 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDF3738990041C09L,0x000000000100FAAFL});
	public static final BitSet FOLLOW_body_in_moz_document2947 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_RBRACE_in_moz_document2952 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WEBKIT_KEYFRAMES_SYM_in_webkitKeyframes2989 = new BitSet(new long[]{0xC028808000A47C40L,0xDDD37380100C1401L,0x000000000300F847L});
	public static final BitSet FOLLOW_ws_in_webkitKeyframes2991 = new BitSet(new long[]{0xC028808000847C40L,0xDDD3738010041401L,0x000000000100F847L});
	public static final BitSet FOLLOW_atRuleId_in_webkitKeyframes2994 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_webkitKeyframes2996 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_webkitKeyframes3000 = new BitSet(new long[]{0x0008000000200000L,0x0000200820080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_webkitKeyframes3002 = new BitSet(new long[]{0x0008000000000000L,0x0000200820000000L});
	public static final BitSet FOLLOW_webkitKeyframesBlock_in_webkitKeyframes3009 = new BitSet(new long[]{0x0008000000200000L,0x0000200820080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_webkitKeyframes3011 = new BitSet(new long[]{0x0008000000000000L,0x0000200820000000L});
	public static final BitSet FOLLOW_RBRACE_in_webkitKeyframes3018 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_webkitKeyframeSelectors_in_webkitKeyframesBlock3030 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_webkitKeyframesBlock3032 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_webkitKeyframesBlock3036 = new BitSet(new long[]{0xE828CC80E0AC7CC0L,0xDDFB7389900C1C09L,0x000000000340FAAFL});
	public static final BitSet FOLLOW_ws_in_webkitKeyframesBlock3039 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_syncToFollow_in_webkitKeyframesBlock3042 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_declarations_in_webkitKeyframesBlock3046 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_RBRACE_in_webkitKeyframesBlock3050 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_content_in_webkitKeyframesBlock3067 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SEMI_in_webkitKeyframesBlock3069 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_webkitKeyframeSelectors3086 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_IDENT_in_webkitKeyframeSelectors3092 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_PERCENTAGE_in_webkitKeyframeSelectors3096 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_webkitKeyframeSelectors3102 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_webkitKeyframeSelectors3105 = new BitSet(new long[]{0x0008000000200000L,0x0000000020080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_webkitKeyframeSelectors3107 = new BitSet(new long[]{0x0008000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_IDENT_in_webkitKeyframeSelectors3114 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_IDENT_in_webkitKeyframeSelectors3120 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_PERCENTAGE_in_webkitKeyframeSelectors3124 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_PAGE_SYM_in_page3148 = new BitSet(new long[]{0x1008000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_page3150 = new BitSet(new long[]{0x1008000000080000L});
	public static final BitSet FOLLOW_IDENT_in_page3155 = new BitSet(new long[]{0x1000000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_page3157 = new BitSet(new long[]{0x1000000000080000L});
	public static final BitSet FOLLOW_pseudoPage_in_page3164 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_page3166 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_page3179 = new BitSet(new long[]{0xC028848000A47CC0L,0xDDD37388100C1C01L,0x000000000340F82FL});
	public static final BitSet FOLLOW_ws_in_page3221 = new BitSet(new long[]{0xC028848000847CC0L,0xDDD3738010041C01L,0x000000000140F82FL});
	public static final BitSet FOLLOW_SEMI_in_page3228 = new BitSet(new long[]{0xC028848000A47CC0L,0xDDD37380100C1C01L,0x000000000340F827L});
	public static final BitSet FOLLOW_ws_in_page3230 = new BitSet(new long[]{0xC028848000847CC0L,0xDDD3738010041C01L,0x000000000140F827L});
	public static final BitSet FOLLOW_SEMI_in_page3237 = new BitSet(new long[]{0xC028848000A47CC0L,0xDDD37380100C1C01L,0x000000000340F827L});
	public static final BitSet FOLLOW_ws_in_page3239 = new BitSet(new long[]{0xC028848000847CC0L,0xDDD3738010041C01L,0x000000000140F827L});
	public static final BitSet FOLLOW_propertyDeclaration_in_page3246 = new BitSet(new long[]{0xC028848000A47CC0L,0xDDD37388100C1C01L,0x000000000340F82FL});
	public static final BitSet FOLLOW_margin_in_page3249 = new BitSet(new long[]{0xC028848000A47CC0L,0xDDD37388100C1C01L,0x000000000340F82FL});
	public static final BitSet FOLLOW_SEMI_in_page3267 = new BitSet(new long[]{0x0000000000200000L,0x0000000800080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_page3282 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_RBRACE_in_page3293 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COUNTER_STYLE_SYM_in_counterStyle3310 = new BitSet(new long[]{0x0008000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_counterStyle3312 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_counterStyle3315 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_counterStyle3317 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_counterStyle3328 = new BitSet(new long[]{0xE828CC80E0AC7CC0L,0xDDFB7389900C1C09L,0x000000000340FAAFL});
	public static final BitSet FOLLOW_ws_in_counterStyle3330 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_syncToDeclarationsRule_in_counterStyle3333 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_declarations_in_counterStyle3337 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_RBRACE_in_counterStyle3348 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FONT_FACE_SYM_in_fontFace3365 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_fontFace3367 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_fontFace3378 = new BitSet(new long[]{0xE828CC80E0AC7CC0L,0xDDFB7389900C1C09L,0x000000000340FAAFL});
	public static final BitSet FOLLOW_ws_in_fontFace3380 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_syncToDeclarationsRule_in_fontFace3383 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_declarations_in_fontFace3387 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_RBRACE_in_fontFace3398 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_margin_sym_in_margin3412 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_margin3414 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_margin3417 = new BitSet(new long[]{0xE828CC80E0AC7CC0L,0xDDFB7389900C1C09L,0x000000000340FAAFL});
	public static final BitSet FOLLOW_ws_in_margin3419 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_syncToDeclarationsRule_in_margin3422 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_declarations_in_margin3424 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_RBRACE_in_margin3427 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COLON_in_pseudoPage3636 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_pseudoPage3638 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_selector_interpolation_exp_in_property3722 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_less_selector_interpolation_exp_in_property3732 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VARIABLE_in_property3740 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_property3748 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GEN_in_property3756 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_property3766 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_map_name_in_sass_map3793 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_sass_map3795 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_map3797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_sass_map3800 = new BitSet(new long[]{0xC028848000B47CC0L,0xDDD37780110C1C01L,0x000000000340F847L});
	public static final BitSet FOLLOW_ws_in_sass_map3802 = new BitSet(new long[]{0xC028848000947CC0L,0xDDD3778011041C01L,0x000000000140F847L});
	public static final BitSet FOLLOW_syncToFollow_in_sass_map3805 = new BitSet(new long[]{0xC028848000947CC0L,0xDDD3778011041C01L,0x000000000140F847L});
	public static final BitSet FOLLOW_sass_map_pairs_in_sass_map3824 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_sass_map3831 = new BitSet(new long[]{0x0000000000200002L,0x0200800000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_map3835 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_SASS_DEFAULT_in_sass_map3838 = new BitSet(new long[]{0x0000000000200002L,0x0200800000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_map3844 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_SASS_GLOBAL_in_sass_map3847 = new BitSet(new long[]{0x0000000000200002L,0x0200800000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_cp_variable_in_sass_map_name3871 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_map_pair_in_sass_map_pairs3905 = new BitSet(new long[]{0xC028848000B47CC2L,0xDDD37380110C1C01L,0x000000000340F847L});
	public static final BitSet FOLLOW_ws_in_sass_map_pairs3915 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_sass_map_pairs3918 = new BitSet(new long[]{0xC028848000B47CC2L,0xDDD37380110C1C01L,0x000000000340F847L});
	public static final BitSet FOLLOW_ws_in_sass_map_pairs3922 = new BitSet(new long[]{0xC028848000947CC2L,0xDDD3738011041C01L,0x000000000140F847L});
	public static final BitSet FOLLOW_COMMA_in_sass_map_pairs3949 = new BitSet(new long[]{0xC028848000B47CC2L,0xDDD37380110C1C01L,0x000000000340F847L});
	public static final BitSet FOLLOW_ws_in_sass_map_pairs3951 = new BitSet(new long[]{0xC028848000947CC2L,0xDDD3738011041C01L,0x000000000140F847L});
	public static final BitSet FOLLOW_NUMBER_in_sass_map_pair3987 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_STRING_in_sass_map_pair3990 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000040L});
	public static final BitSet FOLLOW_ws_in_sass_map_pair3993 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_STRING_in_sass_map_pair3996 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000040L});
	public static final BitSet FOLLOW_function_in_sass_map_pair4006 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_property_in_sass_map_pair4009 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_sass_map_in_sass_map_pair4011 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_map_pair4014 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_sass_map_pair4017 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_sass_map_pair4019 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_expression_in_sass_map_pair4022 = new BitSet(new long[]{0x0010000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_map_pair4025 = new BitSet(new long[]{0x0010000000000000L});
	public static final BitSet FOLLOW_prio_in_sass_map_pair4028 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_AT_ROOT_in_rule4070 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_rule4073 = new BitSet(new long[]{0x2008CC00E0080080L,0x0020000180000808L,0x0000000000000220L});
	public static final BitSet FOLLOW_selectorsGroup_in_rule4075 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_SASS_AT_ROOT_in_rule4096 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_rule4098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_rule4100 = new BitSet(new long[]{0x0008000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_rule4102 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_rule4107 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_rule4111 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_rule4114 = new BitSet(new long[]{0x0008000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_rule4116 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_rule4119 = new BitSet(new long[]{0x0000000000200000L,0x0000040000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_rule4121 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_rule4124 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_selectorsGroup_in_rule4142 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_rule4154 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_rule4161 = new BitSet(new long[]{0xE828CC80E0AC7CC0L,0xDDFB7389900C1C09L,0x000000000340FAAFL});
	public static final BitSet FOLLOW_ws_in_rule4163 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_syncToFollow_in_rule4166 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_declarations_in_rule4176 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_RBRACE_in_rule4183 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_declarations4217 = new BitSet(new long[]{0xE828CC80E0AC7CC0L,0xDDFB7381900C1C09L,0x000000000340FAAFL});
	public static final BitSet FOLLOW_ws_in_declarations4219 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738190041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_declaration_in_declarations4225 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000008L});
	public static final BitSet FOLLOW_ws_in_declarations4230 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SEMI_in_declarations4234 = new BitSet(new long[]{0xE828CC80E0AC7CC0L,0xDDFB7381900C1C09L,0x000000000340FAAFL});
	public static final BitSet FOLLOW_ws_in_declarations4236 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738190041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_ws_in_declarations4242 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738190041C09L,0x000000000140FAA7L});
	public static final BitSet FOLLOW_declaration_in_declarations4245 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000008L});
	public static final BitSet FOLLOW_ws_in_declarations4251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SEMI_in_declarations4255 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000008L});
	public static final BitSet FOLLOW_ws_in_declarations4257 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_ws_in_declarations4263 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_declarations4275 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000008L});
	public static final BitSet FOLLOW_ws_in_declarations4277 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_cp_variable_declaration_in_declaration4306 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_map_in_declaration4319 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_nested_properties_in_declaration4331 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rule_in_declaration4394 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_propertyDeclaration_in_declaration4406 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_propertyDeclaration_in_declaration4445 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_declaration_in_declaration4457 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_declaration4470 = new BitSet(new long[]{0x0010000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_declaration4473 = new BitSet(new long[]{0x0010000000000000L});
	public static final BitSet FOLLOW_IMPORTANT_SYM_in_declaration4476 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_declaration4493 = new BitSet(new long[]{0x0010000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_declaration4496 = new BitSet(new long[]{0x0010000000000000L});
	public static final BitSet FOLLOW_IMPORTANT_SYM_in_declaration4499 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_at_rule_in_declaration4515 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_control_in_declaration4525 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_extend_in_declaration4535 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_debug_in_declaration4545 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_content_in_declaration4555 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_function_return_in_declaration4565 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_error_in_declaration4575 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_importItem_in_declaration4585 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GEN_in_declaration4593 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_selector_in_selectorsGroup4627 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_selectorsGroup4630 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_selectorsGroup4633 = new BitSet(new long[]{0x2008CC00E0280080L,0x0020000180080808L,0x0000000002000220L});
	public static final BitSet FOLLOW_ws_in_selectorsGroup4635 = new BitSet(new long[]{0x2008CC00E0080080L,0x0020000180000808L,0x0000000000000220L});
	public static final BitSet FOLLOW_selector_in_selectorsGroup4638 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_COMMA_in_selectorsGroup4645 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_combinator_in_selector4666 = new BitSet(new long[]{0x2008C400E0280080L,0x0020000080080808L,0x0000000002000020L});
	public static final BitSet FOLLOW_ws_in_selector4668 = new BitSet(new long[]{0x2008C400E0080080L,0x0020000080000808L,0x0000000000000020L});
	public static final BitSet FOLLOW_simpleSelectorSequence_in_selector4673 = new BitSet(new long[]{0x0000080000200002L,0x0000000100080000L,0x0000000002000200L});
	public static final BitSet FOLLOW_ws_in_selector4679 = new BitSet(new long[]{0x0000080000000000L,0x0000000100000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_combinator_in_selector4682 = new BitSet(new long[]{0x2008C400E0280080L,0x0020000080080808L,0x0000000002000020L});
	public static final BitSet FOLLOW_ws_in_selector4684 = new BitSet(new long[]{0x2008C400E0080080L,0x0020000080000808L,0x0000000000000020L});
	public static final BitSet FOLLOW_ws_in_selector4688 = new BitSet(new long[]{0x2008C400E0080080L,0x0020000080000808L,0x0000000000000020L});
	public static final BitSet FOLLOW_simpleSelectorSequence_in_selector4691 = new BitSet(new long[]{0x0000080000200002L,0x0000000100080000L,0x0000000002000200L});
	public static final BitSet FOLLOW_combinator_in_selector4706 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_elementSubsequent_in_simpleSelectorSequence4758 = new BitSet(new long[]{0x2000C000E0280002L,0x0020000000080008L,0x0000000002000000L});
	public static final BitSet FOLLOW_sass_selector_interpolation_exp_in_simpleSelectorSequence4764 = new BitSet(new long[]{0x2000C000E0280002L,0x0020000000080008L,0x0000000002000000L});
	public static final BitSet FOLLOW_less_selector_interpolation_exp_in_simpleSelectorSequence4778 = new BitSet(new long[]{0x2000C000E0280002L,0x0020000000080008L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_simpleSelectorSequence4793 = new BitSet(new long[]{0x2000C000E0080000L,0x0020000000000008L});
	public static final BitSet FOLLOW_elementSubsequent_in_simpleSelectorSequence4796 = new BitSet(new long[]{0x2000C000E0280002L,0x0020000000080008L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_simpleSelectorSequence4801 = new BitSet(new long[]{0x0008800000000080L,0x0000000000000800L});
	public static final BitSet FOLLOW_sass_selector_interpolation_exp_in_simpleSelectorSequence4806 = new BitSet(new long[]{0x2000C000E0280002L,0x0020000000080008L,0x0000000002000000L});
	public static final BitSet FOLLOW_less_selector_interpolation_exp_in_simpleSelectorSequence4812 = new BitSet(new long[]{0x2000C000E0280002L,0x0020000000080008L,0x0000000002000000L});
	public static final BitSet FOLLOW_typeSelector_in_simpleSelectorSequence4826 = new BitSet(new long[]{0x2000C000E0280002L,0x0020000000080008L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_simpleSelectorSequence4838 = new BitSet(new long[]{0x2000C000E0080000L,0x0020000000000008L});
	public static final BitSet FOLLOW_elementSubsequent_in_simpleSelectorSequence4841 = new BitSet(new long[]{0x2000C000E0280002L,0x0020000000080008L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_simpleSelectorSequence4848 = new BitSet(new long[]{0x0008800000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_sass_selector_interpolation_exp_in_simpleSelectorSequence4850 = new BitSet(new long[]{0x2000C000E0280002L,0x0020000000080008L,0x0000000002000000L});
	public static final BitSet FOLLOW_HASH_SYMBOL_in_esPred4875 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HASH_in_esPred4879 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_esPred4883 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACKET_in_esPred4887 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COLON_in_esPred4891 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DCOLON_in_esPred4895 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_EXTEND_ONLY_SELECTOR_in_esPred4899 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LESS_AND_in_esPred4905 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespacePrefix_in_typeSelector4947 = new BitSet(new long[]{0x0008040000000000L,0x0000000000000008L,0x0000000000000020L});
	public static final BitSet FOLLOW_elementName_in_typeSelector4951 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespacePrefixName_in_namespacePrefix4966 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_STAR_in_namespacePrefix4970 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_PIPE_in_namespacePrefix4974 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_extend_only_selector_in_elementSubsequent5006 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LESS_AND_in_elementSubsequent5020 = new BitSet(new long[]{0x0008800000000002L,0x0000000001000000L});
	public static final BitSet FOLLOW_IDENT_in_elementSubsequent5023 = new BitSet(new long[]{0x0008800000000002L,0x0000000001000000L});
	public static final BitSet FOLLOW_NUMBER_in_elementSubsequent5027 = new BitSet(new long[]{0x0008800000000002L,0x0000000001000000L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_elementSubsequent5033 = new BitSet(new long[]{0x0008800000000002L,0x0000000001000000L});
	public static final BitSet FOLLOW_LESS_AND_in_elementSubsequent5049 = new BitSet(new long[]{0x0008000000000080L,0x0000000000000800L});
	public static final BitSet FOLLOW_less_selector_interpolation_exp_in_elementSubsequent5051 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cssId_in_elementSubsequent5060 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cssClass_in_elementSubsequent5069 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_slAttribute_in_elementSubsequent5081 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pseudo_in_elementSubsequent5093 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HASH_in_cssId5117 = new BitSet(new long[]{0x0008800000000002L,0x0000000000000800L});
	public static final BitSet FOLLOW_sass_selector_interpolation_exp_in_cssId5122 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HASH_SYMBOL_in_cssId5144 = new BitSet(new long[]{0x0008000000000080L,0x0000000000020800L});
	public static final BitSet FOLLOW_NAME_in_cssId5160 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_less_selector_interpolation_exp_in_cssId5180 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_cssClass5232 = new BitSet(new long[]{0x0008840000000080L,0x0000000000800800L});
	public static final BitSet FOLLOW_sass_selector_interpolation_exp_in_cssClass5260 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_less_selector_interpolation_exp_in_cssClass5278 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_cssClass5294 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_in_cssClass5310 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GEN_in_cssClass5326 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DIMENSION_in_cssClass5350 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACKET_in_slAttribute5406 = new BitSet(new long[]{0x0008000000200000L,0x0000000080080000L,0x0000000002000020L});
	public static final BitSet FOLLOW_namespacePrefix_in_slAttribute5413 = new BitSet(new long[]{0x0008000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_slAttribute5416 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_slAttributeName_in_slAttribute5427 = new BitSet(new long[]{0x0040000410600200L,0x0000001004080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_slAttribute5429 = new BitSet(new long[]{0x0040000410400200L,0x0000001004000000L});
	public static final BitSet FOLLOW_set_in_slAttribute5463 = new BitSet(new long[]{0x0008000000200000L,0x0000000000080000L,0x0000000002000040L});
	public static final BitSet FOLLOW_ws_in_slAttribute5643 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_slAttributeValue_in_slAttribute5662 = new BitSet(new long[]{0x0000000000200000L,0x0000001000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_slAttribute5680 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_RBRACKET_in_slAttribute5705 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_slAttributeName5721 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_pseudo5793 = new BitSet(new long[]{0x0008840000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_set_in_pseudo5856 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_pseudo5913 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_pseudo5916 = new BitSet(new long[]{0xE028C5A240A47CE0L,0xDDD377E1710C1C1BL,0x00000000034CFE67L});
	public static final BitSet FOLLOW_ws_in_pseudo5918 = new BitSet(new long[]{0xE028C5A240847CE0L,0xDDD377E171041C1BL,0x00000000014CFE67L});
	public static final BitSet FOLLOW_expression_in_pseudo5924 = new BitSet(new long[]{0x0000000000200000L,0x0000040000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_pseudo5926 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_STAR_in_pseudo5932 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_pseudo5937 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_pseudo6000 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_in_pseudo6022 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_pseudo6024 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_pseudo6027 = new BitSet(new long[]{0x2008CC00E0280080L,0x0020040180080808L,0x0000000002000220L});
	public static final BitSet FOLLOW_ws_in_pseudo6029 = new BitSet(new long[]{0x2008CC00E0080080L,0x0020040180000808L,0x0000000000000220L});
	public static final BitSet FOLLOW_selectorsGroup_in_pseudo6034 = new BitSet(new long[]{0x0000000000200000L,0x0000040000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_pseudo6036 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_pseudo6041 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_pseudo6067 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_pseudo6069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_pseudo6072 = new BitSet(new long[]{0x2008CC00E0280080L,0x0020040180080808L,0x0000000002000220L});
	public static final BitSet FOLLOW_ws_in_pseudo6074 = new BitSet(new long[]{0x2008CC00E0080080L,0x0020040180000808L,0x0000000000000220L});
	public static final BitSet FOLLOW_selectorsGroup_in_pseudo6079 = new BitSet(new long[]{0x0000000000200000L,0x0000040000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_pseudo6081 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_pseudo6086 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_pseudo6113 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_pseudo6115 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_pseudo6118 = new BitSet(new long[]{0x2008CC00E0280080L,0x0020040180080808L,0x0000000002000220L});
	public static final BitSet FOLLOW_ws_in_pseudo6120 = new BitSet(new long[]{0x2008CC00E0080080L,0x0020040180000808L,0x0000000000000220L});
	public static final BitSet FOLLOW_selectorsGroup_in_pseudo6123 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_pseudo6126 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STAR_in_propertyDeclaration6168 = new BitSet(new long[]{0xC028848000847CC0L,0xDDD3738010041C01L,0x000000000140F807L});
	public static final BitSet FOLLOW_property_in_propertyDeclaration6171 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_propertyDeclaration6173 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_propertyDeclaration6176 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_propertyDeclaration6178 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_propertyValue_in_propertyDeclaration6181 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_property_in_propertyDeclaration6192 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_propertyDeclaration6194 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_propertyDeclaration6197 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFBE7FFFFFFFFL,0x000000001FFFFFF7L});
	public static final BitSet FOLLOW_ws_in_propertyDeclaration6199 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFBE7FFFFFFFFL,0x000000001FFFFFF7L});
	public static final BitSet FOLLOW_componentValueOuter_in_propertyDeclaration6202 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STAR_in_propertyDeclaration6211 = new BitSet(new long[]{0xC028848000847CC0L,0xDDD3738010041C01L,0x000000000140F807L});
	public static final BitSet FOLLOW_property_in_propertyDeclaration6214 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_propertyDeclaration6216 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_propertyDeclaration6219 = new BitSet(new long[]{0xE028C5A240A47CE0L,0xDDD373E1710C1C1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_propertyDeclaration6221 = new BitSet(new long[]{0xE028C5A240847CE0L,0xDDD373E171041C1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_propertyValue_in_propertyDeclaration6224 = new BitSet(new long[]{0x0010000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_propertyDeclaration6227 = new BitSet(new long[]{0x0010000000000000L});
	public static final BitSet FOLLOW_prio_in_propertyDeclaration6230 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_expression_list_in_cp_propertyValue6270 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_propertyValue_in_cp_propertyValue6278 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_propertyValue6300 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_expressionPredicate6369 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACE_in_braceBlock6456 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFBE7FFFFFFFFL,0x000000001FFFFFFFL});
	public static final BitSet FOLLOW_componentValue_in_braceBlock6458 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFBEFFFFFFFFFL,0x000000001FFFFFFFL});
	public static final BitSet FOLLOW_RBRACE_in_braceBlock6461 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACKET_in_bracketBlock6468 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFBE7FFFFFFFFL,0x000000001FFFFFFFL});
	public static final BitSet FOLLOW_componentValue_in_bracketBlock6470 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFBF7FFFFFFFFL,0x000000001FFFFFFFL});
	public static final BitSet FOLLOW_RBRACKET_in_bracketBlock6473 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_parenBlock6480 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFBE7FFFFFFFFL,0x000000001FFFFFFFL});
	public static final BitSet FOLLOW_componentValue_in_parenBlock6482 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFE7FFFFFFFFL,0x000000001FFFFFFFL});
	public static final BitSet FOLLOW_RPAREN_in_parenBlock6485 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_parenBlock_in_componentValue6492 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_braceBlock_in_componentValue6496 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bracketBlock_in_componentValue6500 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_function_in_componentValue6515 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_preservedToken_in_componentValue6519 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_parenBlock_in_componentValueOuter6527 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFBE7FFFFFFFFL,0x000000001FFFFFF7L});
	public static final BitSet FOLLOW_braceBlock_in_componentValueOuter6531 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFBE7FFFFFFFFL,0x000000001FFFFFF7L});
	public static final BitSet FOLLOW_bracketBlock_in_componentValueOuter6535 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFBE7FFFFFFFFL,0x000000001FFFFFF7L});
	public static final BitSet FOLLOW_function_in_componentValueOuter6550 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFBE7FFFFFFFFL,0x000000001FFFFFF7L});
	public static final BitSet FOLLOW_preservedTokenTopLevel_in_componentValueOuter6554 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFBE7FFFFFFFFL,0x000000001FFFFFF7L});
	public static final BitSet FOLLOW_componentValueOuter_in_componentValueOuter6557 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFBE7FFFFFFFFL,0x000000001FFFFFF7L});
	public static final BitSet FOLLOW_SEMI_in_syncTo_SEMI6646 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IMPORTANT_SYM_in_prio6691 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_term_in_expression6708 = new BitSet(new long[]{0xE028C5A240B47CE2L,0xDDD373E1710C1C1BL,0x00000000034CFE57L});
	public static final BitSet FOLLOW_ws_in_expression6740 = new BitSet(new long[]{0xE028C5A240847CE0L,0xDDD373E171041C1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_ws_in_expression6745 = new BitSet(new long[]{0x0000000000100000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_operator_in_expression6748 = new BitSet(new long[]{0xE028C5A240A47CE0L,0xDDD373E1710C1C1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_expression6750 = new BitSet(new long[]{0xE028C5A240847CE0L,0xDDD373E171041C1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_term_in_expression6759 = new BitSet(new long[]{0xE028C5A240B47CE2L,0xDDD373E1710C1C1BL,0x00000000034CFE57L});
	public static final BitSet FOLLOW_unaryOperator_in_term6784 = new BitSet(new long[]{0xE028C5A240A47CE0L,0xDDD373E0710C141BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_term6786 = new BitSet(new long[]{0xE028C5A240847CE0L,0xDDD373E07104141BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_function_in_term6815 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VARIABLE_in_term6828 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_term6842 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACKET_in_term6855 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_WS_in_term6857 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_term6860 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_WS_in_term6863 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_term6865 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_WS_in_term6869 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_RBRACKET_in_term6872 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NUMBER_in_term6885 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_URANGE_in_term6897 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PERCENTAGE_in_term6909 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LENGTH_in_term6921 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EMS_in_term6933 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REM_in_term6945 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXS_in_term6957 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ANGLE_in_term6969 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIME_in_term6981 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FREQ_in_term6993 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RESOLUTION_in_term7005 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DIMENSION_in_term7017 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STRING_in_term7034 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TILDE_in_term7046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000040L});
	public static final BitSet FOLLOW_set_in_term7048 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LESS_JS_STRING_in_term7069 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GEN_in_term7084 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_URI_in_term7096 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_hexColor_in_term7108 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_term7122 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LESS_AND_in_term7136 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_term7150 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_less_selector_interpolation_in_term7164 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_term_symbol_in_term7178 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PERCENTAGE_SYMBOL_in_cp_term_symbol7205 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionName_in_function7221 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_function7223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_function7228 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD377E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_function7230 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD377E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_fnAttributes_in_function7257 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_function7288 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_functionName7340 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_functionName7342 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_functionName7346 = new BitSet(new long[]{0x0000000080000002L});
	public static final BitSet FOLLOW_DOT_in_functionName7349 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_functionName7351 = new BitSet(new long[]{0x0000000080000002L});
	public static final BitSet FOLLOW_fnAttribute_in_fnAttributes7375 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000008L});
	public static final BitSet FOLLOW_ws_in_fnAttributes7378 = new BitSet(new long[]{0x0000000000100000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_COMMA_in_fnAttributes7382 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_SEMI_in_fnAttributes7388 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_fnAttributes7391 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_fnAttribute_in_fnAttributes7394 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000008L});
	public static final BitSet FOLLOW_ws_in_fnAttributes7398 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fnAttributeName_in_fnAttribute7435 = new BitSet(new long[]{0x0000000000280000L,0x0000000004080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_fnAttribute7437 = new BitSet(new long[]{0x0000000000080000L,0x0000000004000000L});
	public static final BitSet FOLLOW_set_in_fnAttribute7440 = new BitSet(new long[]{0xE038C5A240A47CE0L,0xDDD373E1710C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_fnAttribute7446 = new BitSet(new long[]{0xE038C5A240847CE0L,0xDDD373E171041D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_fnAttributeValue_in_fnAttribute7449 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_expression_in_fnAttribute7466 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_fnAttribute7478 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_fnAttributeName7501 = new BitSet(new long[]{0x0000000080000002L});
	public static final BitSet FOLLOW_DOT_in_fnAttributeName7504 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_fnAttributeName7506 = new BitSet(new long[]{0x0000000080000002L});
	public static final BitSet FOLLOW_cp_variable_in_fnAttributeName7526 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_term_in_fnAttributeValue7549 = new BitSet(new long[]{0xE028C5A240A47CE2L,0xDDD373E1710C1C1BL,0x00000000034CFE57L});
	public static final BitSet FOLLOW_ws_in_fnAttributeValue7581 = new BitSet(new long[]{0xE028C5A240847CE0L,0xDDD373E171041C1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_ws_in_fnAttributeValue7586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_SOLIDUS_in_fnAttributeValue7589 = new BitSet(new long[]{0xE028C5A240A47CE0L,0xDDD373E1710C1C1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_fnAttributeValue7591 = new BitSet(new long[]{0xE028C5A240847CE0L,0xDDD373E171041C1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_term_in_fnAttributeValue7600 = new BitSet(new long[]{0xE028C5A240A47CE2L,0xDDD373E1710C1C1BL,0x00000000034CFE57L});
	public static final BitSet FOLLOW_cp_math_expression_in_fnAttributeValue7621 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HASH_in_hexColor7635 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_cp_variable_declaration7695 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_variable_declaration7697 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_cp_variable_declaration7700 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_cp_variable_declaration7702 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_expression_list_in_cp_variable_declaration7705 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_cp_variable_declaration7727 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_variable_declaration7729 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_cp_variable_declaration7732 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_cp_variable_declaration7734 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_expression_list_in_cp_variable_declaration7737 = new BitSet(new long[]{0x0000000000200002L,0x0200800000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_variable_declaration7741 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_SASS_DEFAULT_in_cp_variable_declaration7744 = new BitSet(new long[]{0x0000000000200002L,0x0200800000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_variable_declaration7750 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_SASS_GLOBAL_in_cp_variable_declaration7753 = new BitSet(new long[]{0x0000000000200002L,0x0200800000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_set_in_cp_variable7793 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_VAR_in_cp_variable7985 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_cp_variable7989 = new BitSet(new long[]{0x0000000080000000L});
	public static final BitSet FOLLOW_DOT_in_cp_variable7991 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_SASS_VAR_in_cp_variable7993 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_expression_in_cp_expression_list8023 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_expression_list8042 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_cp_expression_list8045 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_cp_expression_list8047 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_expression_in_cp_expression_list8050 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_LBRACE_in_cp_expression8086 = new BitSet(new long[]{0xE828CC80E0AC7CC0L,0xDDFB7389900C1C09L,0x000000000340FAAFL});
	public static final BitSet FOLLOW_ws_in_cp_expression8088 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_syncToFollow_in_cp_expression8091 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_declarations_in_cp_expression8093 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_RBRACE_in_cp_expression8096 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_expression_atom_in_cp_expression8112 = new BitSet(new long[]{0xE038DDA246A47CE2L,0xDDD373E1718C1D3FL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_cp_expression8136 = new BitSet(new long[]{0x0008180006000000L,0x0000000000000024L});
	public static final BitSet FOLLOW_cp_expression_operator_in_cp_expression8139 = new BitSet(new long[]{0xE038C5A240A47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_cp_expression8141 = new BitSet(new long[]{0xE038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_expression_atom_in_cp_expression8145 = new BitSet(new long[]{0xE038DDA246A47CE2L,0xDDD373E1718C1D3FL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_cp_expression8164 = new BitSet(new long[]{0xE038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_expression_atom_in_cp_expression8167 = new BitSet(new long[]{0xE038DDA246A47CE2L,0xDDD373E1718C1D3FL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_LPAREN_in_cp_expression8185 = new BitSet(new long[]{0xC028848000B47CC0L,0xDDD37780110C1C01L,0x000000000340F847L});
	public static final BitSet FOLLOW_ws_in_cp_expression8187 = new BitSet(new long[]{0xC028848000947CC0L,0xDDD3778011041C01L,0x000000000140F847L});
	public static final BitSet FOLLOW_syncToFollow_in_cp_expression8190 = new BitSet(new long[]{0xC028848000947CC0L,0xDDD3778011041C01L,0x000000000140F847L});
	public static final BitSet FOLLOW_sass_map_pairs_in_cp_expression8192 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_cp_expression8195 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_key_or_in_cp_expression_operator8216 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_key_and_in_cp_expression_operator8220 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CP_EQ_in_cp_expression_operator8225 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CP_NOT_EQ_in_cp_expression_operator8229 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LESS_in_cp_expression_operator8233 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LESS_OR_EQ_in_cp_expression_operator8237 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GREATER_in_cp_expression_operator8241 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GREATER_OR_EQ_in_cp_expression_operator8245 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_in_cp_expression_atom8271 = new BitSet(new long[]{0xE038C5A240A47CE0L,0xDDD373E1710C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_cp_expression_atom8273 = new BitSet(new long[]{0xE038C5A240847CE0L,0xDDD373E171041D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_math_expression_in_cp_expression_atom8304 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_cp_expression_atom8320 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD377E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_cp_expression_atom8322 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD377E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_expression_list_in_cp_expression_atom8326 = new BitSet(new long[]{0x0000000000200000L,0x0000040000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_expression_atom8328 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_cp_expression_atom8333 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_math_expression_in_cp_math_expressions8365 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_math_expressions8372 = new BitSet(new long[]{0xE038C5A240847CE0L,0xDDD373E171041D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_math_expression_in_cp_math_expressions8374 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_cp_math_expression_atom_in_cp_math_expression8408 = new BitSet(new long[]{0x0000000000200002L,0x0000000100080800L,0x0000000002000030L});
	public static final BitSet FOLLOW_ws_in_cp_math_expression8450 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000800L,0x0000000000000030L});
	public static final BitSet FOLLOW_set_in_cp_math_expression8453 = new BitSet(new long[]{0xE038C5A240A47CE0L,0xDDD373E1710C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_cp_math_expression8463 = new BitSet(new long[]{0xE038C5A240847CE0L,0xDDD373E171041D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_math_expression_atom_in_cp_math_expression8466 = new BitSet(new long[]{0x0000000000200002L,0x0000000100080800L,0x0000000002000030L});
	public static final BitSet FOLLOW_term_in_cp_math_expression_atom8499 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IMPORTANT_SYM_in_cp_math_expression_atom8507 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unaryOperator_in_cp_math_expression_atom8518 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_math_expression_atom8520 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_cp_math_expression_atom8526 = new BitSet(new long[]{0xE038C5A240A47CE0L,0xDDD373E1710C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_cp_math_expression_atom8528 = new BitSet(new long[]{0xE038C5A240847CE0L,0xDDD373E171041D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_math_expression_in_cp_math_expression_atom8531 = new BitSet(new long[]{0x0000000000200000L,0x0000040000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_math_expression_atom8533 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_cp_math_expression_atom8536 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LESS_AND_in_cp_mixin_declaration8576 = new BitSet(new long[]{0x1008000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_DOT_in_cp_mixin_declaration8583 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_declaration8585 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_HASH_in_cp_mixin_declaration8590 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_declaration8593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_cp_mixin_declaration8596 = new BitSet(new long[]{0xC028008001A47C40L,0xDDD37780100C1441L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_declaration8598 = new BitSet(new long[]{0xC028008001847C40L,0xDDD3778010041441L,0x000000000100F807L});
	public static final BitSet FOLLOW_cp_args_list_in_cp_mixin_declaration8601 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_cp_mixin_declaration8604 = new BitSet(new long[]{0x1008000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_declaration8609 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_less_mixin_guarded_in_cp_mixin_declaration8612 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_SASS_MIXIN_in_cp_mixin_declaration8636 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_declaration8638 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_declaration8640 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_declaration8643 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_cp_mixin_declaration8646 = new BitSet(new long[]{0xC028008001A47C40L,0xDDD37780100C1441L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_declaration8648 = new BitSet(new long[]{0xC028008001847C40L,0xDDD3778010041441L,0x000000000100F807L});
	public static final BitSet FOLLOW_cp_args_list_in_cp_mixin_declaration8651 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_cp_mixin_declaration8654 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_declaration8668 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_cp_mixin_block_in_cp_mixin_declaration8671 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_cp_mixin_call8707 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_call8709 = new BitSet(new long[]{0x0000080020280002L,0x0000000100080100L,0x0000000002000200L});
	public static final BitSet FOLLOW_HASH_in_cp_mixin_call8713 = new BitSet(new long[]{0x0000080020280002L,0x0000000100080100L,0x0000000002000200L});
	public static final BitSet FOLLOW_AT_IDENT_in_cp_mixin_call8717 = new BitSet(new long[]{0x0000080020280002L,0x0000000100080100L,0x0000000002000200L});
	public static final BitSet FOLLOW_LESS_AND_in_cp_mixin_call8721 = new BitSet(new long[]{0x0000080020280002L,0x0000000100080100L,0x0000000002000200L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call8737 = new BitSet(new long[]{0x0000080000000000L,0x0000000100000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_combinator_in_cp_mixin_call8740 = new BitSet(new long[]{0x0000400080200040L,0x0000000000080008L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call8742 = new BitSet(new long[]{0x0000400080000040L,0x0000000000000008L});
	public static final BitSet FOLLOW_DOT_in_cp_mixin_call8746 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_call8748 = new BitSet(new long[]{0x0000080020280002L,0x0000000100080100L,0x0000000002000200L});
	public static final BitSet FOLLOW_HASH_in_cp_mixin_call8752 = new BitSet(new long[]{0x0000080020280002L,0x0000000100080100L,0x0000000002000200L});
	public static final BitSet FOLLOW_AT_IDENT_in_cp_mixin_call8756 = new BitSet(new long[]{0x0000080020280002L,0x0000000100080100L,0x0000000002000200L});
	public static final BitSet FOLLOW_LESS_AND_in_cp_mixin_call8760 = new BitSet(new long[]{0x0000080020280002L,0x0000000100080100L,0x0000000002000200L});
	public static final BitSet FOLLOW_pseudo_in_cp_mixin_call8770 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call8782 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_cp_mixin_call8785 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD377E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call8787 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD377E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_mixin_call_args_in_cp_mixin_call8790 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_cp_mixin_call8793 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_INCLUDE_in_cp_mixin_call8818 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call8820 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_call8822 = new BitSet(new long[]{0x1000000000200002L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call8825 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_cp_mixin_call8828 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD377E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call8830 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD377E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_mixin_call_args_in_cp_mixin_call8833 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_cp_mixin_call8836 = new BitSet(new long[]{0x1000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call8841 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_cp_mixin_block_in_cp_mixin_call8844 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACE_in_cp_mixin_block8873 = new BitSet(new long[]{0xE828CC80E0AC7CC0L,0xDDFB7389B00C1C09L,0x000000000340FAAFL});
	public static final BitSet FOLLOW_ws_in_cp_mixin_block8875 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB7389B0041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_syncToFollow_in_cp_mixin_block8878 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB7389B0041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_declarations_in_cp_mixin_block8889 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_webkitKeyframesBlock_in_cp_mixin_block8904 = new BitSet(new long[]{0x0008000000200000L,0x0000200820080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_block8906 = new BitSet(new long[]{0x0008000000000000L,0x0000200820000000L});
	public static final BitSet FOLLOW_RBRACE_in_cp_mixin_block8918 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_cp_mixin_name8939 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args8970 = new BitSet(new long[]{0x0000000001100002L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_cp_mixin_call_args8974 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call_args8982 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args8985 = new BitSet(new long[]{0x0000000001100002L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_CP_DOTS_in_cp_mixin_call_args8991 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000008L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call_args8993 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SEMI_in_cp_mixin_call_args8998 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_cp_mixin_call_arg9030 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg9032 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_cp_mixin_call_arg9035 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg9037 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_expression_in_cp_mixin_call_arg9040 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_cp_expression_in_cp_mixin_call_arg9052 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg9060 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_arg_in_cp_args_list9107 = new BitSet(new long[]{0x0000000001100002L,0x0000000000000040L,0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_cp_args_list9111 = new BitSet(new long[]{0xC028008000A47C40L,0xDDD37380100C1401L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_cp_args_list9121 = new BitSet(new long[]{0xC028008000847C40L,0xDDD3738010041401L,0x000000000100F807L});
	public static final BitSet FOLLOW_cp_arg_in_cp_args_list9124 = new BitSet(new long[]{0x0000000001100002L,0x0000000000000040L,0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_cp_args_list9131 = new BitSet(new long[]{0x0000000001200002L,0x0000000000080040L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_args_list9139 = new BitSet(new long[]{0x0000000001000002L,0x0000000000000040L});
	public static final BitSet FOLLOW_set_in_cp_args_list9147 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_args_list9155 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_cp_args_list9172 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_args_list9180 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_cp_arg9203 = new BitSet(new long[]{0x0000000000280002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_arg9205 = new BitSet(new long[]{0x0000000000080002L});
	public static final BitSet FOLLOW_COLON_in_cp_arg9210 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_cp_arg9212 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_expression_in_cp_arg9215 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_arg9217 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_cp_arg9230 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_less_when_in_less_mixin_guarded9253 = new BitSet(new long[]{0x0000000000200000L,0x0000000000880100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_less_mixin_guarded9255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800100L});
	public static final BitSet FOLLOW_less_condition_in_less_mixin_guarded9258 = new BitSet(new long[]{0x0008000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_less_mixin_guarded9261 = new BitSet(new long[]{0x0008000000100000L});
	public static final BitSet FOLLOW_COMMA_in_less_mixin_guarded9265 = new BitSet(new long[]{0x0000000000200000L,0x0000000000880100L,0x0000000002000000L});
	public static final BitSet FOLLOW_key_and_in_less_mixin_guarded9269 = new BitSet(new long[]{0x0000000000200000L,0x0000000000880100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_less_mixin_guarded9272 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800100L});
	public static final BitSet FOLLOW_less_condition_in_less_mixin_guarded9275 = new BitSet(new long[]{0x0008000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_NOT_in_less_condition9301 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_less_condition9303 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_less_condition9312 = new BitSet(new long[]{0xC028008000A47C40L,0xDDD37380100C1401L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_less_condition9314 = new BitSet(new long[]{0xC028008000847C40L,0xDDD3738010041401L,0x000000000100F807L});
	public static final BitSet FOLLOW_cp_variable_in_less_condition9341 = new BitSet(new long[]{0x0000180000200000L,0x0000040004080024L,0x0000000002000000L});
	public static final BitSet FOLLOW_less_function_in_condition_in_less_condition9345 = new BitSet(new long[]{0x0000180000200000L,0x0000040004080024L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_less_condition9348 = new BitSet(new long[]{0x0000180000000000L,0x0000040004000024L});
	public static final BitSet FOLLOW_less_condition_operator_in_less_condition9352 = new BitSet(new long[]{0xE038C5A240A47CE0L,0xDDD373E1710C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_less_condition9354 = new BitSet(new long[]{0xE038C5A240847CE0L,0xDDD373E171041D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_math_expression_in_less_condition9357 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_less_condition9375 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_less_fn_name_in_less_function_in_condition9397 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_less_function_in_condition9399 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_less_function_in_condition9402 = new BitSet(new long[]{0xC028008000A47C40L,0xDDD37380100C1401L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_less_function_in_condition9404 = new BitSet(new long[]{0xC028008000847C40L,0xDDD3738010041401L,0x000000000100F807L});
	public static final BitSet FOLLOW_cp_variable_in_less_function_in_condition9407 = new BitSet(new long[]{0x0000000000200000L,0x0000040000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_less_function_in_condition9409 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_less_function_in_condition9412 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_less_fn_name9434 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_less_selector_interpolation_in_less_selector_interpolation_exp9497 = new BitSet(new long[]{0x0008000040000082L,0x0000000000000802L});
	public static final BitSet FOLLOW_less_selector_interpolation_exp_in_less_selector_interpolation_exp9500 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT_SIGN_in_less_selector_interpolation9543 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_less_selector_interpolation9545 = new BitSet(new long[]{0x0008000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_less_selector_interpolation9547 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_less_selector_interpolation9550 = new BitSet(new long[]{0x0000000000200000L,0x0000000800080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_less_selector_interpolation9552 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_RBRACE_in_less_selector_interpolation9555 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_exp9582 = new BitSet(new long[]{0x0008800040000002L,0x0000000000000802L});
	public static final BitSet FOLLOW_sass_selector_interpolation_exp_in_sass_selector_interpolation_exp9585 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HASH_SYMBOL_in_sass_interpolation_expression_var9632 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_sass_interpolation_expression_var9634 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_WS_in_sass_interpolation_expression_var9636 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_expression_in_sass_interpolation_expression_var9639 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_WS_in_sass_interpolation_expression_var9641 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_RBRACE_in_sass_interpolation_expression_var9644 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_property_in_sass_nested_properties9684 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_nested_properties9686 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_sass_nested_properties9689 = new BitSet(new long[]{0xF028C5A240A47CE0L,0xDDD373E1710C1C1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_sass_nested_properties9691 = new BitSet(new long[]{0xF028C5A240847CE0L,0xDDD373E171041C1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_propertyValue_in_sass_nested_properties9695 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_nested_properties9697 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_sass_nested_properties9702 = new BitSet(new long[]{0xE828CC80E0AC7CC0L,0xDDFB7389900C1C09L,0x000000000340FAAFL});
	public static final BitSet FOLLOW_ws_in_sass_nested_properties9704 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_syncToFollow_in_sass_nested_properties9707 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_declarations_in_sass_nested_properties9709 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_RBRACE_in_sass_nested_properties9712 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_EXTEND_in_sass_extend9733 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_extend9735 = new BitSet(new long[]{0x2008C400E0080080L,0x0020000080000808L,0x0000000000000020L});
	public static final BitSet FOLLOW_simpleSelectorSequence_in_sass_extend9737 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_extend9740 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_sass_extend9743 = new BitSet(new long[]{0x2008C400E0280080L,0x0020000080080808L,0x0000000002000020L});
	public static final BitSet FOLLOW_ws_in_sass_extend9745 = new BitSet(new long[]{0x2008C400E0080080L,0x0020000080000808L,0x0000000000000020L});
	public static final BitSet FOLLOW_simpleSelectorSequence_in_sass_extend9748 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_extend9753 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_SASS_OPTIONAL_in_sass_extend9755 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_EXTEND_ONLY_SELECTOR_in_sass_extend_only_selector9778 = new BitSet(new long[]{0x0008800000000002L,0x0000000000000800L});
	public static final BitSet FOLLOW_sass_selector_interpolation_exp_in_sass_extend_only_selector9780 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_sass_debug9802 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_debug9812 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_expression_in_sass_debug9814 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_ERROR_in_sass_error9835 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_error9837 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_STRING_in_sass_error9839 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_if_in_sass_control9860 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_for_in_sass_control9864 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_each_in_sass_control9868 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_while_in_sass_control9872 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_IF_in_sass_if9893 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_sass_if9895 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_sass_control_expression_in_sass_if9898 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_if9900 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_sass_control_block_in_sass_if9903 = new BitSet(new long[]{0x0000000000200002L,0x0006000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_if9906 = new BitSet(new long[]{0x0000000000000000L,0x0006000000000000L});
	public static final BitSet FOLLOW_sass_else_in_sass_if9909 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_ELSE_in_sass_else9932 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_else9934 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_sass_control_block_in_sass_else9937 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_ELSE_in_sass_else9951 = new BitSet(new long[]{0x0008000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_else9953 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_else9958 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_SASS_ELSEIF_in_sass_else9965 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_sass_else9968 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_sass_control_expression_in_sass_else9971 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_else9973 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_sass_control_block_in_sass_else9976 = new BitSet(new long[]{0x0000000000200002L,0x0006000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_else9979 = new BitSet(new long[]{0x0000000000000000L,0x0006000000000000L});
	public static final BitSet FOLLOW_sass_else_in_sass_else9982 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_expression_in_sass_control_expression10005 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_FOR_in_sass_for10026 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_for10028 = new BitSet(new long[]{0xC028008000847C40L,0xDDD3738010041401L,0x000000000100F807L});
	public static final BitSet FOLLOW_cp_variable_in_sass_for10030 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_for10032 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_for10036 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_for10040 = new BitSet(new long[]{0xE038C5A240847CE0L,0xDDD373E171041D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_math_expression_in_sass_for10042 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_for10044 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_for10048 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_for10052 = new BitSet(new long[]{0xE038C5A240847CE0L,0xDDD373E171041D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_math_expression_in_sass_for10054 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_for10056 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_sass_control_block_in_sass_for10059 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_EACH_in_sass_each10080 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_each10082 = new BitSet(new long[]{0xC028008000847C40L,0xDDD3738010041401L,0x000000000100F807L});
	public static final BitSet FOLLOW_sass_each_variables_in_sass_each10084 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_each10086 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_each10090 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_each10094 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_expression_list_in_sass_each10097 = new BitSet(new long[]{0xF038C5A240B47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_sass_each10100 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_sass_each10103 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_sass_each10107 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_sass_control_block_in_sass_each10113 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_sass_each_variables10134 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_each_variables10146 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_sass_each_variables10149 = new BitSet(new long[]{0xC028008000A47C40L,0xDDD37380100C1401L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_sass_each_variables10151 = new BitSet(new long[]{0xC028008000847C40L,0xDDD3738010041401L,0x000000000100F807L});
	public static final BitSet FOLLOW_cp_variable_in_sass_each_variables10154 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_SASS_WHILE_in_sass_while10179 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_while10181 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_sass_control_expression_in_sass_while10183 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_while10185 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_sass_control_block_in_sass_while10188 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACE_in_sass_control_block10209 = new BitSet(new long[]{0xE828CC80E0AC7CC0L,0xDDFB7389900C1C09L,0x000000000340FAAFL});
	public static final BitSet FOLLOW_ws_in_sass_control_block10211 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_declarations_in_sass_control_block10214 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_RBRACE_in_sass_control_block10217 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_FUNCTION_in_sass_function_declaration10259 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_function_declaration10261 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_sass_function_name_in_sass_function_declaration10263 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_function_declaration10265 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_sass_function_declaration10268 = new BitSet(new long[]{0xC028008001A47C40L,0xDDD37780100C1441L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_sass_function_declaration10270 = new BitSet(new long[]{0xC028008001847C40L,0xDDD3778010041441L,0x000000000100F807L});
	public static final BitSet FOLLOW_cp_args_list_in_sass_function_declaration10273 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_sass_function_declaration10276 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_function_declaration10278 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_sass_function_declaration10281 = new BitSet(new long[]{0xE828CC80E0AC7CC0L,0xDDFB7389900C1C09L,0x000000000340FAAFL});
	public static final BitSet FOLLOW_ws_in_sass_function_declaration10283 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_declarations_in_sass_function_declaration10286 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_RBRACE_in_sass_function_declaration10289 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_sass_function_name10310 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_RETURN_in_sass_function_return10331 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_function_return10333 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_expression_in_sass_function_return10335 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_CONTENT_in_sass_content10356 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_less_import_types10375 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_less_when10398 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_key_and10417 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_key_or10435 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_key_only10453 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred1_Css3470 = new BitSet(new long[]{0xC028848000847C40L,0xDDD3738010841501L,0x000000000100F807L});
	public static final BitSet FOLLOW_mediaQueryList_in_synpred1_Css3473 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred2_Css3540 = new BitSet(new long[]{0xC028848000847C40L,0xDDD3738010841501L,0x000000000100F807L});
	public static final BitSet FOLLOW_mediaQueryList_in_synpred2_Css3543 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred3_Css3600 = new BitSet(new long[]{0xC028848000847C40L,0xDDD3738010841501L,0x000000000100F807L});
	public static final BitSet FOLLOW_mediaQueryList_in_synpred3_Css3603 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred4_Css31170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SEMI_in_synpred4_Css31173 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_MIXIN_in_synpred5_Css31271 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_synpred5_Css31278 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_synpred5_Css31280 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_HASH_in_synpred5_Css31285 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred5_Css31288 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_synpred5_Css31291 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x000000001FFFFFFFL});
	public static final BitSet FOLLOW_RPAREN_in_synpred5_Css31299 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x000000001FFFFFF7L});
	public static final BitSet FOLLOW_LBRACE_in_synpred5_Css31309 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_synpred6_Css31327 = new BitSet(new long[]{0x0010000000200000L,0x0000000000080000L,0x0000000002000008L});
	public static final BitSet FOLLOW_ws_in_synpred6_Css31330 = new BitSet(new long[]{0x0010000000000000L});
	public static final BitSet FOLLOW_IMPORTANT_SYM_in_synpred6_Css31333 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000008L});
	public static final BitSet FOLLOW_ws_in_synpred6_Css31337 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SEMI_in_synpred6_Css31340 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_synpred7_Css31363 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_AT_ROOT_in_synpred8_Css31388 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred8_Css31391 = new BitSet(new long[]{0x2008CC00E0080080L,0x0020000180000808L,0x0000000000000220L});
	public static final BitSet FOLLOW_selectorsGroup_in_synpred8_Css31393 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_SASS_AT_ROOT_in_synpred8_Css31402 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred8_Css31404 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_synpred8_Css31406 = new BitSet(new long[]{0x0008000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred8_Css31408 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_synpred8_Css31411 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred8_Css31413 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_synpred8_Css31416 = new BitSet(new long[]{0x0008000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred8_Css31418 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_synpred8_Css31421 = new BitSet(new long[]{0x0000000000200000L,0x0000040000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred8_Css31423 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_synpred8_Css31426 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_selectorsGroup_in_synpred8_Css31431 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred8_Css31434 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_synpred8_Css31437 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_propertyDeclaration_in_synpred9_Css31449 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred10_Css31564 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_synpred10_Css31567 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred11_Css31611 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_key_and_in_synpred11_Css31614 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred12_Css31641 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_key_and_in_synpred12_Css31644 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_synpred13_Css31726 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HASH_in_synpred14_Css31755 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred15_Css31901 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SEMI_in_synpred15_Css31904 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_MIXIN_in_synpred16_Css31979 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_synpred16_Css31986 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_synpred16_Css31988 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_HASH_in_synpred16_Css31993 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred16_Css31996 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_synpred16_Css31999 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x000000001FFFFFFFL});
	public static final BitSet FOLLOW_RPAREN_in_synpred16_Css32007 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFF7FFFFFFFFL,0x000000001FFFFFF7L});
	public static final BitSet FOLLOW_LBRACE_in_synpred16_Css32019 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_synpred17_Css32045 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000008L});
	public static final BitSet FOLLOW_ws_in_synpred17_Css32047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SEMI_in_synpred17_Css32050 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_synpred18_Css32069 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_synpred19_Css32097 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred19_Css32099 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_synpred19_Css32102 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_map_in_synpred20_Css32119 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_synpred21_Css32409 = new BitSet(new long[]{0x0008000000200000L,0x0000000000880100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred21_Css32411 = new BitSet(new long[]{0x0008000000000000L,0x0000000000800100L});
	public static final BitSet FOLLOW_supportsCondition_in_synpred21_Css32414 = new BitSet(new long[]{0x0000000000200000L,0x0000040000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred21_Css32416 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_synpred21_Css32419 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_supportsFeature_in_synpred22_Css32424 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred23_Css33909 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_synpred23_Css33912 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_function_in_synpred24_Css34003 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_declaration_in_synpred25_Css34303 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_map_in_synpred26_Css34315 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_nested_properties_in_synpred27_Css34328 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_AT_ROOT_in_synpred28_Css34342 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred28_Css34345 = new BitSet(new long[]{0x2008CC00E0080080L,0x0020000180000808L,0x0000000000000220L});
	public static final BitSet FOLLOW_selectorsGroup_in_synpred28_Css34347 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_SASS_AT_ROOT_in_synpred28_Css34356 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred28_Css34358 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_synpred28_Css34360 = new BitSet(new long[]{0x0008000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred28_Css34362 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_synpred28_Css34365 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred28_Css34367 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_synpred28_Css34370 = new BitSet(new long[]{0x0008000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred28_Css34372 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_synpred28_Css34375 = new BitSet(new long[]{0x0000000000200000L,0x0000040000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred28_Css34377 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_synpred28_Css34380 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_selectorsGroup_in_synpred28_Css34385 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred28_Css34388 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_synpred28_Css34391 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_propertyDeclaration_in_synpred29_Css34403 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_property_in_synpred30_Css34420 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred30_Css34422 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_synpred30_Css34425 = new BitSet(new long[]{0xEFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x000000001FFFFFFFL});
	public static final BitSet FOLLOW_set_in_synpred30_Css34437 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_declaration_in_synpred31_Css34454 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_synpred32_Css34466 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_synpred33_Css34487 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred34_Css34785 = new BitSet(new long[]{0x2000C000A0080000L,0x0020000000000008L});
	public static final BitSet FOLLOW_esPred_in_synpred34_Css34788 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeSelector_in_synpred35_Css34823 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred36_Css34830 = new BitSet(new long[]{0x2000C000A0080000L,0x0020000000000008L});
	public static final BitSet FOLLOW_esPred_in_synpred36_Css34833 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PIPE_in_synpred37_Css34944 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionName_in_synpred38_Css36505 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred38_Css36507 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_synpred38_Css36510 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionName_in_synpred39_Css36540 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred39_Css36542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_synpred39_Css36545 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred40_Css36715 = new BitSet(new long[]{0xE028C5A240847CE0L,0xDDD373E171041C1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_ws_in_synpred40_Css36720 = new BitSet(new long[]{0x0000000000100000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_operator_in_synpred40_Css36723 = new BitSet(new long[]{0xE028C5A240A47CE0L,0xDDD373E1710C1C1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_synpred40_Css36725 = new BitSet(new long[]{0xE028C5A240847CE0L,0xDDD373E171041C1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_term_in_synpred40_Css36734 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionName_in_synpred41_Css36807 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred41_Css36809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_synpred41_Css36812 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fnAttributeName_in_synpred42_Css37422 = new BitSet(new long[]{0x0000000000280000L,0x0000000004080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred42_Css37424 = new BitSet(new long[]{0x0000000000080000L,0x0000000004000000L});
	public static final BitSet FOLLOW_set_in_synpred42_Css37427 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_expression_in_synpred43_Css37462 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred44_Css37556 = new BitSet(new long[]{0xE028C5A240847CE0L,0xDDD373E171041C1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_ws_in_synpred44_Css37561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_SOLIDUS_in_synpred44_Css37564 = new BitSet(new long[]{0xE028C5A240A47CE0L,0xDDD373E1710C1C1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_synpred44_Css37566 = new BitSet(new long[]{0xE028C5A240847CE0L,0xDDD373E171041C1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_term_in_synpred44_Css37575 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred46_Css38031 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_synpred46_Css38034 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_synpred46_Css38036 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_expression_in_synpred46_Css38039 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_expression_atom_in_synpred47_Css38106 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred48_Css38129 = new BitSet(new long[]{0x0008180006000000L,0x0000000000000024L});
	public static final BitSet FOLLOW_cp_expression_operator_in_synpred48_Css38132 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred49_Css38158 = new BitSet(new long[]{0xE038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_expression_atom_in_synpred49_Css38161 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_math_expression_in_synpred50_Css38301 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred51_Css38434 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000800L,0x0000000000000030L});
	public static final BitSet FOLLOW_set_in_synpred51_Css38437 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred52_Css38726 = new BitSet(new long[]{0x0000080000000000L,0x0000000100000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_combinator_in_synpred52_Css38729 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred52_Css38731 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pseudo_in_synpred53_Css38767 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred54_Css38775 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_synpred54_Css38778 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_webkitKeyframeSelectors_in_synpred55_Css38894 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred56_Css310139 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_synpred56_Css310142 = new BitSet(new long[]{0x0000000000000002L});
}
