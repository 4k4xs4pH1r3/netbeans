// $ANTLR 3.5.2 /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g 2023-09-14 17:47:38

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// DO NOT EDIT THIS FILE MANUALLY!
// SEE Css3.g FOR INSTRUCTIONS

package org.netbeans.modules.css.lib;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.debug.*;
import java.io.IOException;
@SuppressWarnings("all")
public class Css3Parser extends DebugParser {
	public static final String[] tokenNames = new String[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "ANGLE", "AT_IDENT", "AT_SIGN", 
		"B", "BEGINS", "BOTTOMCENTER_SYM", "BOTTOMLEFTCORNER_SYM", "BOTTOMLEFT_SYM", 
		"BOTTOMRIGHTCORNER_SYM", "BOTTOMRIGHT_SYM", "C", "CDC", "CDO", "CHARSET_SYM", 
		"COLON", "COMMA", "COMMENT", "CONTAINS", "COUNTER_STYLE_SYM", "CP_DOTS", 
		"CP_EQ", "CP_NOT_EQ", "D", "DASHMATCH", "DCOLON", "DIMENSION", "DOT", 
		"E", "EMS", "ENDS", "ESCAPE", "EXCLAMATION_MARK", "EXS", "F", "FONT_FACE_SYM", 
		"FREQ", "G", "GEN", "GREATER", "GREATER_OR_EQ", "H", "HASH", "HASH_SYMBOL", 
		"HEXCHAR", "HEXCHAR_WILDCARD", "I", "IDENT", "IMPORTANT_SYM", "IMPORT_SYM", 
		"INCLUDES", "INVALID", "J", "K", "L", "LAYER_SYM", "LBRACE", "LBRACKET", 
		"LEFTBOTTOM_SYM", "LEFTMIDDLE_SYM", "LEFTTOP_SYM", "LENGTH", "LESS", "LESS_AND", 
		"LESS_JS_STRING", "LESS_OR_EQ", "LESS_REST", "LINE_COMMENT", "LPAREN", 
		"M", "MEDIA_SYM", "MINUS", "MOZ_DOCUMENT_SYM", "MOZ_DOMAIN", "MOZ_REGEXP", 
		"MOZ_URL_PREFIX", "N", "NAME", "NAMESPACE_SYM", "NL", "NMCHAR", "NMSTART", 
		"NONASCII", "NOT", "NUMBER", "O", "OPEQ", "P", "PAGE_SYM", "PERCENTAGE", 
		"PERCENTAGE_SYMBOL", "PIPE", "PLUS", "Q", "R", "RBRACE", "RBRACKET", "REM", 
		"RESOLUTION", "RIGHTBOTTOM_SYM", "RIGHTMIDDLE_SYM", "RIGHTTOP_SYM", "RPAREN", 
		"S", "SASS_AT_ROOT", "SASS_CONTENT", "SASS_DEBUG", "SASS_DEFAULT", "SASS_EACH", 
		"SASS_ELSE", "SASS_ELSEIF", "SASS_ERROR", "SASS_EXTEND", "SASS_EXTEND_ONLY_SELECTOR", 
		"SASS_FOR", "SASS_FORWARD", "SASS_FUNCTION", "SASS_GLOBAL", "SASS_IF", 
		"SASS_INCLUDE", "SASS_MIXIN", "SASS_OPTIONAL", "SASS_RETURN", "SASS_USE", 
		"SASS_VAR", "SASS_WARN", "SASS_WHILE", "SEMI", "SOLIDUS", "STAR", "STRING", 
		"SUPPORTS_SYM", "T", "TILDE", "TIME", "TOPCENTER_SYM", "TOPLEFTCORNER_SYM", 
		"TOPLEFT_SYM", "TOPRIGHTCORNER_SYM", "TOPRIGHT_SYM", "U", "UNICODE", "URANGE", 
		"URI", "URL", "V", "VARIABLE", "W", "WEBKIT_KEYFRAMES_SYM", "WS", "X", 
		"Y", "Z"
	};
	public static final int EOF=-1;
	public static final int A=4;
	public static final int ANGLE=5;
	public static final int AT_IDENT=6;
	public static final int AT_SIGN=7;
	public static final int B=8;
	public static final int BEGINS=9;
	public static final int BOTTOMCENTER_SYM=10;
	public static final int BOTTOMLEFTCORNER_SYM=11;
	public static final int BOTTOMLEFT_SYM=12;
	public static final int BOTTOMRIGHTCORNER_SYM=13;
	public static final int BOTTOMRIGHT_SYM=14;
	public static final int C=15;
	public static final int CDC=16;
	public static final int CDO=17;
	public static final int CHARSET_SYM=18;
	public static final int COLON=19;
	public static final int COMMA=20;
	public static final int COMMENT=21;
	public static final int CONTAINS=22;
	public static final int COUNTER_STYLE_SYM=23;
	public static final int CP_DOTS=24;
	public static final int CP_EQ=25;
	public static final int CP_NOT_EQ=26;
	public static final int D=27;
	public static final int DASHMATCH=28;
	public static final int DCOLON=29;
	public static final int DIMENSION=30;
	public static final int DOT=31;
	public static final int E=32;
	public static final int EMS=33;
	public static final int ENDS=34;
	public static final int ESCAPE=35;
	public static final int EXCLAMATION_MARK=36;
	public static final int EXS=37;
	public static final int F=38;
	public static final int FONT_FACE_SYM=39;
	public static final int FREQ=40;
	public static final int G=41;
	public static final int GEN=42;
	public static final int GREATER=43;
	public static final int GREATER_OR_EQ=44;
	public static final int H=45;
	public static final int HASH=46;
	public static final int HASH_SYMBOL=47;
	public static final int HEXCHAR=48;
	public static final int HEXCHAR_WILDCARD=49;
	public static final int I=50;
	public static final int IDENT=51;
	public static final int IMPORTANT_SYM=52;
	public static final int IMPORT_SYM=53;
	public static final int INCLUDES=54;
	public static final int INVALID=55;
	public static final int J=56;
	public static final int K=57;
	public static final int L=58;
	public static final int LAYER_SYM=59;
	public static final int LBRACE=60;
	public static final int LBRACKET=61;
	public static final int LEFTBOTTOM_SYM=62;
	public static final int LEFTMIDDLE_SYM=63;
	public static final int LEFTTOP_SYM=64;
	public static final int LENGTH=65;
	public static final int LESS=66;
	public static final int LESS_AND=67;
	public static final int LESS_JS_STRING=68;
	public static final int LESS_OR_EQ=69;
	public static final int LESS_REST=70;
	public static final int LINE_COMMENT=71;
	public static final int LPAREN=72;
	public static final int M=73;
	public static final int MEDIA_SYM=74;
	public static final int MINUS=75;
	public static final int MOZ_DOCUMENT_SYM=76;
	public static final int MOZ_DOMAIN=77;
	public static final int MOZ_REGEXP=78;
	public static final int MOZ_URL_PREFIX=79;
	public static final int N=80;
	public static final int NAME=81;
	public static final int NAMESPACE_SYM=82;
	public static final int NL=83;
	public static final int NMCHAR=84;
	public static final int NMSTART=85;
	public static final int NONASCII=86;
	public static final int NOT=87;
	public static final int NUMBER=88;
	public static final int O=89;
	public static final int OPEQ=90;
	public static final int P=91;
	public static final int PAGE_SYM=92;
	public static final int PERCENTAGE=93;
	public static final int PERCENTAGE_SYMBOL=94;
	public static final int PIPE=95;
	public static final int PLUS=96;
	public static final int Q=97;
	public static final int R=98;
	public static final int RBRACE=99;
	public static final int RBRACKET=100;
	public static final int REM=101;
	public static final int RESOLUTION=102;
	public static final int RIGHTBOTTOM_SYM=103;
	public static final int RIGHTMIDDLE_SYM=104;
	public static final int RIGHTTOP_SYM=105;
	public static final int RPAREN=106;
	public static final int S=107;
	public static final int SASS_AT_ROOT=108;
	public static final int SASS_CONTENT=109;
	public static final int SASS_DEBUG=110;
	public static final int SASS_DEFAULT=111;
	public static final int SASS_EACH=112;
	public static final int SASS_ELSE=113;
	public static final int SASS_ELSEIF=114;
	public static final int SASS_ERROR=115;
	public static final int SASS_EXTEND=116;
	public static final int SASS_EXTEND_ONLY_SELECTOR=117;
	public static final int SASS_FOR=118;
	public static final int SASS_FORWARD=119;
	public static final int SASS_FUNCTION=120;
	public static final int SASS_GLOBAL=121;
	public static final int SASS_IF=122;
	public static final int SASS_INCLUDE=123;
	public static final int SASS_MIXIN=124;
	public static final int SASS_OPTIONAL=125;
	public static final int SASS_RETURN=126;
	public static final int SASS_USE=127;
	public static final int SASS_VAR=128;
	public static final int SASS_WARN=129;
	public static final int SASS_WHILE=130;
	public static final int SEMI=131;
	public static final int SOLIDUS=132;
	public static final int STAR=133;
	public static final int STRING=134;
	public static final int SUPPORTS_SYM=135;
	public static final int T=136;
	public static final int TILDE=137;
	public static final int TIME=138;
	public static final int TOPCENTER_SYM=139;
	public static final int TOPLEFTCORNER_SYM=140;
	public static final int TOPLEFT_SYM=141;
	public static final int TOPRIGHTCORNER_SYM=142;
	public static final int TOPRIGHT_SYM=143;
	public static final int U=144;
	public static final int UNICODE=145;
	public static final int URANGE=146;
	public static final int URI=147;
	public static final int URL=148;
	public static final int V=149;
	public static final int VARIABLE=150;
	public static final int W=151;
	public static final int WEBKIT_KEYFRAMES_SYM=152;
	public static final int WS=153;
	public static final int X=154;
	public static final int Y=155;
	public static final int Z=156;

	// delegates
	public Parser[] getDelegates() {
		return new Parser[] {};
	}

	// delegators


	public static final String[] ruleNames = new String[] {
		"invalidRule", "slAttributeValue", "cp_math_expression_atom", "sass_function_return", 
		"supportsFeature", "expression", "at_rule", "preservedTokenTopLevel", 
		"cp_mixin_call_args", "sass_else", "cp_variable_declaration", "sass_extend", 
		"synpred39_Css3", "counterStyle", "synpred30_Css3", "synpred23_Css3", 
		"media", "cp_mixin_name", "cp_expression_operator", "importLayer", "sass_for", 
		"selectorsGroup", "synpred53_Css3", "less_condition_operator", "namespaces", 
		"synpred20_Css3", "sass_forward_with", "synpred42_Css3", "sass_function_declaration", 
		"synpred13_Css3", "sass_use_with", "charSet", "synpred22_Css3", "synpred40_Css3", 
		"importItem", "sass_content", "synpred26_Css3", "sass_map_pair", "body", 
		"rule", "functionName", "sass_function_name", "mediaBody", "synpred2_Css3", 
		"sass_control_expression", "parenBlock", "sass_if", "synpred18_Css3", 
		"cp_expression_atom", "synpred46_Css3", "cp_expression_list", "supportsCondition", 
		"cp_propertyValue", "synpred44_Css3", "atRuleId", "supportsConjunction", 
		"fnAttributes", "synpred27_Css3", "cssClass", "sass_each_variables", "componentValueOuter", 
		"synpred9_Css3", "pseudoPage", "sass_forward", "layerBlock", "ws", "synpred32_Css3", 
		"synpred11_Css3", "synpred33_Css3", "less_mixin_guarded", "cp_args_list", 
		"synpred36_Css3", "fontFace", "sass_map_name", "hexColor", "synpred52_Css3", 
		"synpred50_Css3", "slAttribute", "operator", "sass_error", "namespacePrefix", 
		"bracketBlock", "mediaFeatureValue", "mediaQueryOperator", "preservedToken", 
		"mediaType", "unaryOperator", "margin", "synpred25_Css3", "layerStatement", 
		"moz_document", "sass_debug", "declarations", "syncToFollow", "term", 
		"esPred", "sass_map_pairs", "mediaQuery", "propertyDeclaration", "cp_term_symbol", 
		"webkitKeyframeSelectors", "elementSubsequent", "syncTo_SEMI", "synpred28_Css3", 
		"less_when", "sass_selector_interpolation_exp", "typeSelector", "synpred35_Css3", 
		"cssId", "synpred5_Css3", "cp_mixin_declaration", "synpred45_Css3", "synpred6_Css3", 
		"synpred38_Css3", "namespace", "synpred47_Css3", "page", "webkitKeyframes", 
		"synpred12_Css3", "less_function_in_condition", "mediaQueryList", "sass_use", 
		"generic_at_rule", "cp_mixin_block", "selector", "charSetValue", "elementName", 
		"expressionPredicate", "sass_use_with_declaration", "synpred51_Css3", 
		"supportsDecl", "imports", "synpred3_Css3", "sass_interpolation_expression_var", 
		"supportsWithOperator", "sass_forward_as", "synpred1_Css3", "cp_variable", 
		"cp_expression", "resourceIdentifier", "syncToDeclarationsRule", "sass_extend_only_selector", 
		"propertyValue", "braceBlock", "supportsDisjunction", "mediaFeature", 
		"cp_mixin_call_arg", "less_selector_interpolation_exp", "webkitKeyframesBlock", 
		"layerName", "sass_nested_properties", "synpred8_Css3", "layerBody", "combinator", 
		"less_fn_name", "key_and", "componentValue", "property", "synpred14_Css3", 
		"synpred4_Css3", "synpred10_Css3", "sass_forward_show", "moz_document_function", 
		"synpred24_Css3", "synpred29_Css3", "fnAttributeValue", "cp_math_expressions", 
		"sass_forward_with_declaration", "function", "sass_map", "vendorAtRule", 
		"less_selector_interpolation", "sass_control", "declaration", "synpred43_Css3", 
		"sass_forward_hide", "synpred15_Css3", "synpred31_Css3", "synpred16_Css3", 
		"fnAttribute", "key_only", "synpred21_Css3", "layerAtRule", "prio", "fnAttributeName", 
		"simpleSelectorSequence", "syncTo_RBRACE", "less_condition", "namespacePrefixName", 
		"supportsAtRule", "sass_each", "sass_control_block", "mediaBodyItem", 
		"cp_arg", "synpred34_Css3", "synpred49_Css3", "styleSheet", "mediaExpression", 
		"synpred37_Css3", "synpred7_Css3", "slAttributeName", "cp_math_expression", 
		"less_import_types", "sass_while", "synpred19_Css3", "margin_sym", "sass_use_as", 
		"bodyItem", "cp_mixin_call", "synpred41_Css3", "pseudo", "synpred48_Css3", 
		"supportsInParens", "synpred54_Css3", "synpred17_Css3", "key_or"
	};

	public static final boolean[] decisionCanBacktrack = new boolean[] {
		false, // invalid decision
		false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, true, false, false, 
		    false, false, false, false, false, true, false, false, false, false, 
		    false, false, true, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    true, false, false, false, false, false, false, false, false, true, 
		    false, false, false, false, false, false, false, true, false, false, 
		    true, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, true, false, false, false, true, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, true, false, false, false, false, false, true, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    true, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, true, false, false, true, 
		    true, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, true, true, false, false, false, false, true, false, false, 
		    false, false, false, true, false, false, false, false, false, false, 
		    false, false, false, false, false, false, true, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, true, false, false, 
		    false, false, false, true, false, false, true, false, false, false, 
		    false, false, false, true, false, false, false, true, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    true, false, false, false, true, false, false, false, false, false, 
		    false, false, false, false, false, true, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false
	};

 
	public int ruleLevel = 0;
	public int getRuleLevel() { return ruleLevel; }
	public void incRuleLevel() { ruleLevel++; }
	public void decRuleLevel() { ruleLevel--; }
	public Css3Parser(TokenStream input) {
		this(input, DebugEventSocketProxy.DEFAULT_DEBUGGER_PORT, new RecognizerSharedState());
	}
	public Css3Parser(TokenStream input, int port, RecognizerSharedState state) {
		super(input, state);
		DebugEventSocketProxy proxy =
			new DebugEventSocketProxy(this, port, null);

		setDebugListener(proxy);
		try {
			proxy.handshake();
		}
		catch (IOException ioe) {
			reportError(ioe);
		}
	}

	public Css3Parser(TokenStream input, DebugEventListener dbg) {
		super(input, dbg, new RecognizerSharedState());
	}

	protected boolean evalPredicate(boolean result, String predicate) {
		dbg.semanticPredicate(result, predicate);
		return result;
	}

	@Override public String[] getTokenNames() { return Css3Parser.tokenNames; }
	@Override public String getGrammarFileName() { return "/home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g"; }



	    protected boolean isLessSource() {
	        return false;
	    }

	    protected boolean isScssSource() {
	        return false;
	    }

	    private boolean isCssPreprocessorSource() {
	        return isLessSource() || isScssSource();
	    }

	    private boolean tokenNameEquals(String tokenImage) {
	        return tokenImage.equalsIgnoreCase(input.LT(1).getText());
	    }
	    
	    private boolean tokenNameEquals2(String tokenImage) {
	        return tokenImage.equalsIgnoreCase(input.LT(2).getText());
	    }

	    private boolean tokenNameIs(String[] tokens) {
	        for(String tokenImage : tokens) {
	            if(tokenImage.equalsIgnoreCase(input.LT(1).getText())) {
	                return true;
	            }
	        }
	        return false;
	    }

	    private boolean tokenNameStartsWith(String prefix) {
	        return input.LT(1).getText() != null
	            && input.LT(1).getText().startsWith(prefix);
	    }

	    /**
	     * Use the current stacked followset to work out the valid tokens that
	     * can follow on from the current point in the parse, then recover by
	     * eating tokens that are not a member of the follow set we compute.
	     *
	     * This method is used whenever we wish to force a sync, even though
	     * the parser has not yet checked LA(1) for alt selection. This is useful
	     * in situations where only a subset of tokens can begin a new construct
	     * (such as the start of a new statement in a block) and we want to
	     * proactively detect garbage so that the current rule does not exit on
	     * on an exception.
	     *
	     * We could override recover() to make this the default behavior but that
	     * is too much like using a sledge hammer to crack a nut. We want finer
	     * grained control of the recovery and error mechanisms.
	     */
	    protected void syncToSet()
	    {
	        // Compute the followset that is in context wherever we are in the
	        // rule chain/stack
	        //
	         BitSet follow = state.following[state._fsp]; //computeContextSensitiveRuleFOLLOW();

	         syncToSet(follow);
	    }

	    protected void syncToSet(BitSet follow)
	    {
	        int mark = -1;

	        //create error-recovery node
	        dbg.enterRule(getGrammarFileName(), "recovery");

	        try {

	            mark = input.mark();

	            // Consume all tokens in the stream until we find a member of the follow
	            // set, which means the next production should be guaranteed to be happy.
	            //
	            while (! follow.member(input.LA(1)) ) {

	                if  (input.LA(1) == Token.EOF) {

	                    // Looks like we didn't find anything at all that can help us here
	                    // so we need to rewind to where we were and let normal error handling
	                    // bail out.
	                    //
	                    input.rewind();
	                    mark = -1;
	                    return;
	                }
	                input.consume();

	                // Now here, because you are consuming some tokens, yu will probably want
	                // to raise an error message such as "Spurious elements after the class member were discarded"
	                // using whatever your override of displayRecognitionError() routine does to record
	                // error messages. The exact error my depend on context etc.
	                //
	            }
	        } catch (Exception e) {

	          // Just ignore any errors here, we will just let the recognizer
	          // try to resync as normal - something must be very screwed.
	          //
	        }
	        finally {
	            dbg.exitRule(getGrammarFileName(), "recovery");

	            // Always release the mark we took
	            //
	            if  (mark != -1) {
	                input.release(mark);
	            }
	        }
	    }

	        /**
	         * synces to next RBRACE "}" taking nesting into account
	         */
	        protected void syncToRBRACE(int nest)
	            {

	                int mark = -1;
	                //create error-recovery node
	                //dbg.enterRule(getGrammarFileName(), "recovery");

	                try {
	                    mark = input.mark();
	                    for(;;) {
	                        //read char
	                        int c = input.LA(1);

	                        switch(c) {
	                            case Token.EOF:
	                                input.rewind();
	                                mark = -1;
	                                return ;
	                            case Css3Lexer.LBRACE:
	                                nest++;
	                                break;
	                            case Css3Lexer.RBRACE:
	                                nest--;
	                                if(nest == 0) {
	                                    //do not eat the final RBRACE
	                                    return ;
	                                }
	                        }

	                        input.consume();

	                    }

	                } catch (Exception e) {

	                  // Just ignore any errors here, we will just let the recognizer
	                  // try to resync as normal - something must be very screwed.
	                  //
	                }
	                finally {
	                    if  (mark != -1) {
	                        input.release(mark);
	                    }
	                    //dbg.exitRule(getGrammarFileName(), "recovery");
	                }
	            }




	// $ANTLR start "styleSheet"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:284:1: styleSheet : ( ws )? ( charSet ( ws )? )? ( layerStatement ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF ;
	public final void styleSheet() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "styleSheet");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(284, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:285:5: ( ( ws )? ( charSet ( ws )? )? ( layerStatement ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:286:6: ( ws )? ( charSet ( ws )? )? ( layerStatement ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF
			{
			dbg.location(286,6);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:286:6: ( ws )?
			int alt1=2;
			try { dbg.enterSubRule(1);
			try { dbg.enterDecision(1, decisionCanBacktrack[1]);

			int LA1_0 = input.LA(1);
			if ( (LA1_0==COMMENT||LA1_0==NL||LA1_0==WS) ) {
				alt1=1;
			}
			} finally {dbg.exitDecision(1);}

			switch (alt1) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:286:6: ws
					{
					dbg.location(286,6);
					pushFollow(FOLLOW_ws_in_styleSheet102);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(1);}
			dbg.location(287,6);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:287:6: ( charSet ( ws )? )?
			int alt3=2;
			try { dbg.enterSubRule(3);
			try { dbg.enterDecision(3, decisionCanBacktrack[3]);

			try {
				isCyclicDecision = true;
				alt3 = dfa3.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(3);}

			switch (alt3) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:287:8: charSet ( ws )?
					{
					dbg.location(287,8);
					pushFollow(FOLLOW_charSet_in_styleSheet112);
					charSet();
					state._fsp--;
					if (state.failed) return;dbg.location(287,16);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:287:16: ( ws )?
					int alt2=2;
					try { dbg.enterSubRule(2);
					try { dbg.enterDecision(2, decisionCanBacktrack[2]);

					int LA2_0 = input.LA(1);
					if ( (LA2_0==COMMENT||LA2_0==NL||LA2_0==WS) ) {
						alt2=1;
					}
					} finally {dbg.exitDecision(2);}

					switch (alt2) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:287:16: ws
							{
							dbg.location(287,16);
							pushFollow(FOLLOW_ws_in_styleSheet114);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(2);}

					}
					break;

			}
			} finally {dbg.exitSubRule(3);}
			dbg.location(288,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:288:9: ( layerStatement ( ws )? )?
			int alt5=2;
			try { dbg.enterSubRule(5);
			try { dbg.enterDecision(5, decisionCanBacktrack[5]);

			try {
				isCyclicDecision = true;
				alt5 = dfa5.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(5);}

			switch (alt5) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:288:11: layerStatement ( ws )?
					{
					dbg.location(288,11);
					pushFollow(FOLLOW_layerStatement_in_styleSheet130);
					layerStatement();
					state._fsp--;
					if (state.failed) return;dbg.location(288,26);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:288:26: ( ws )?
					int alt4=2;
					try { dbg.enterSubRule(4);
					try { dbg.enterDecision(4, decisionCanBacktrack[4]);

					int LA4_0 = input.LA(1);
					if ( (LA4_0==COMMENT||LA4_0==NL||LA4_0==WS) ) {
						alt4=1;
					}
					} finally {dbg.exitDecision(4);}

					switch (alt4) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:288:26: ws
							{
							dbg.location(288,26);
							pushFollow(FOLLOW_ws_in_styleSheet132);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(4);}

					}
					break;

			}
			} finally {dbg.exitSubRule(5);}
			dbg.location(289,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:289:9: ( imports )?
			int alt6=2;
			try { dbg.enterSubRule(6);
			try { dbg.enterDecision(6, decisionCanBacktrack[6]);

			switch ( input.LA(1) ) {
				case IMPORT_SYM:
					{
					int LA6_1 = input.LA(2);
					if ( (!(evalPredicate(((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))),""))) ) {
						alt6=1;
					}
					}
					break;
				case SASS_USE:
					{
					int LA6_2 = input.LA(2);
					if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
						alt6=1;
					}
					}
					break;
				case SASS_FORWARD:
					{
					int LA6_3 = input.LA(2);
					if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
						alt6=1;
					}
					}
					break;
			}
			} finally {dbg.exitDecision(6);}

			switch (alt6) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:289:9: imports
					{
					dbg.location(289,9);
					pushFollow(FOLLOW_imports_in_styleSheet146);
					imports();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(6);}
			dbg.location(290,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:290:9: ( namespaces )?
			int alt7=2;
			try { dbg.enterSubRule(7);
			try { dbg.enterDecision(7, decisionCanBacktrack[7]);

			try {
				isCyclicDecision = true;
				alt7 = dfa7.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(7);}

			switch (alt7) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:290:9: namespaces
					{
					dbg.location(290,9);
					pushFollow(FOLLOW_namespaces_in_styleSheet157);
					namespaces();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(7);}
			dbg.location(291,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:291:9: ( body )?
			int alt8=2;
			try { dbg.enterSubRule(8);
			try { dbg.enterDecision(8, decisionCanBacktrack[8]);

			int LA8_0 = input.LA(1);
			if ( ((LA8_0 >= AT_IDENT && LA8_0 <= AT_SIGN)||(LA8_0 >= BOTTOMCENTER_SYM && LA8_0 <= BOTTOMRIGHT_SYM)||(LA8_0 >= CHARSET_SYM && LA8_0 <= COLON)||LA8_0==COUNTER_STYLE_SYM||(LA8_0 >= DCOLON && LA8_0 <= DOT)||LA8_0==FONT_FACE_SYM||(LA8_0 >= GEN && LA8_0 <= GREATER)||(LA8_0 >= HASH && LA8_0 <= HASH_SYMBOL)||LA8_0==IDENT||LA8_0==IMPORT_SYM||LA8_0==LAYER_SYM||(LA8_0 >= LBRACKET && LA8_0 <= LEFTTOP_SYM)||LA8_0==LESS_AND||(LA8_0 >= MEDIA_SYM && LA8_0 <= MOZ_DOCUMENT_SYM)||LA8_0==NAMESPACE_SYM||LA8_0==PAGE_SYM||(LA8_0 >= PIPE && LA8_0 <= PLUS)||(LA8_0 >= RIGHTBOTTOM_SYM && LA8_0 <= RIGHTTOP_SYM)||(LA8_0 >= SASS_AT_ROOT && LA8_0 <= SASS_DEBUG)||(LA8_0 >= SASS_EACH && LA8_0 <= SASS_ELSE)||(LA8_0 >= SASS_EXTEND && LA8_0 <= SASS_FUNCTION)||(LA8_0 >= SASS_IF && LA8_0 <= SASS_MIXIN)||(LA8_0 >= SASS_RETURN && LA8_0 <= SEMI)||LA8_0==STAR||LA8_0==SUPPORTS_SYM||LA8_0==TILDE||(LA8_0 >= TOPCENTER_SYM && LA8_0 <= TOPRIGHT_SYM)||LA8_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt8=1;
			}
			} finally {dbg.exitDecision(8);}

			switch (alt8) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:291:9: body
					{
					dbg.location(291,9);
					pushFollow(FOLLOW_body_in_styleSheet168);
					body();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(8);}
			dbg.location(292,6);
			match(input,EOF,FOLLOW_EOF_in_styleSheet176); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(293, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "styleSheet");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "styleSheet"



	// $ANTLR start "namespaces"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:295:1: namespaces : ( namespace ( ws )? )+ ;
	public final void namespaces() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "namespaces");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(295, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:296:2: ( ( namespace ( ws )? )+ )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:297:2: ( namespace ( ws )? )+
			{
			dbg.location(297,2);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:297:2: ( namespace ( ws )? )+
			int cnt10=0;
			try { dbg.enterSubRule(10);

			loop10:
			while (true) {
				int alt10=2;
				try { dbg.enterDecision(10, decisionCanBacktrack[10]);

				try {
					isCyclicDecision = true;
					alt10 = dfa10.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(10);}

				switch (alt10) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:297:4: namespace ( ws )?
					{
					dbg.location(297,4);
					pushFollow(FOLLOW_namespace_in_namespaces193);
					namespace();
					state._fsp--;
					if (state.failed) return;dbg.location(297,14);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:297:14: ( ws )?
					int alt9=2;
					try { dbg.enterSubRule(9);
					try { dbg.enterDecision(9, decisionCanBacktrack[9]);

					int LA9_0 = input.LA(1);
					if ( (LA9_0==COMMENT||LA9_0==NL||LA9_0==WS) ) {
						alt9=1;
					}
					} finally {dbg.exitDecision(9);}

					switch (alt9) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:297:14: ws
							{
							dbg.location(297,14);
							pushFollow(FOLLOW_ws_in_namespaces195);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(9);}

					}
					break;

				default :
					if ( cnt10 >= 1 ) break loop10;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(10, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt10++;
			}
			} finally {dbg.exitSubRule(10);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(298, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "namespaces");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "namespaces"



	// $ANTLR start "namespace"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:300:1: namespace : NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI ;
	public final void namespace() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "namespace");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(300, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:301:3: ( NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:301:5: NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI
			{
			dbg.location(301,5);
			match(input,NAMESPACE_SYM,FOLLOW_NAMESPACE_SYM_in_namespace211); if (state.failed) return;dbg.location(301,19);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:301:19: ( ws )?
			int alt11=2;
			try { dbg.enterSubRule(11);
			try { dbg.enterDecision(11, decisionCanBacktrack[11]);

			int LA11_0 = input.LA(1);
			if ( (LA11_0==COMMENT||LA11_0==NL||LA11_0==WS) ) {
				alt11=1;
			}
			} finally {dbg.exitDecision(11);}

			switch (alt11) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:301:19: ws
					{
					dbg.location(301,19);
					pushFollow(FOLLOW_ws_in_namespace213);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(11);}
			dbg.location(301,23);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:301:23: ( namespacePrefixName ( ws )? )?
			int alt13=2;
			try { dbg.enterSubRule(13);
			try { dbg.enterDecision(13, decisionCanBacktrack[13]);

			int LA13_0 = input.LA(1);
			if ( (LA13_0==IDENT) ) {
				alt13=1;
			}
			} finally {dbg.exitDecision(13);}

			switch (alt13) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:301:24: namespacePrefixName ( ws )?
					{
					dbg.location(301,24);
					pushFollow(FOLLOW_namespacePrefixName_in_namespace217);
					namespacePrefixName();
					state._fsp--;
					if (state.failed) return;dbg.location(301,44);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:301:44: ( ws )?
					int alt12=2;
					try { dbg.enterSubRule(12);
					try { dbg.enterDecision(12, decisionCanBacktrack[12]);

					int LA12_0 = input.LA(1);
					if ( (LA12_0==COMMENT||LA12_0==NL||LA12_0==WS) ) {
						alt12=1;
					}
					} finally {dbg.exitDecision(12);}

					switch (alt12) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:301:44: ws
							{
							dbg.location(301,44);
							pushFollow(FOLLOW_ws_in_namespace219);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(12);}

					}
					break;

			}
			} finally {dbg.exitSubRule(13);}
			dbg.location(301,50);
			pushFollow(FOLLOW_resourceIdentifier_in_namespace224);
			resourceIdentifier();
			state._fsp--;
			if (state.failed) return;dbg.location(301,69);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:301:69: ( ws )?
			int alt14=2;
			try { dbg.enterSubRule(14);
			try { dbg.enterDecision(14, decisionCanBacktrack[14]);

			int LA14_0 = input.LA(1);
			if ( (LA14_0==COMMENT||LA14_0==NL||LA14_0==WS) ) {
				alt14=1;
			}
			} finally {dbg.exitDecision(14);}

			switch (alt14) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:301:69: ws
					{
					dbg.location(301,69);
					pushFollow(FOLLOW_ws_in_namespace226);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(14);}
			dbg.location(301,73);
			match(input,SEMI,FOLLOW_SEMI_in_namespace229); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(302, 2);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "namespace");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "namespace"



	// $ANTLR start "namespacePrefixName"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:304:1: namespacePrefixName : IDENT ;
	public final void namespacePrefixName() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "namespacePrefixName");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(304, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:305:3: ( IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:305:5: IDENT
			{
			dbg.location(305,5);
			match(input,IDENT,FOLLOW_IDENT_in_namespacePrefixName242); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(306, 2);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "namespacePrefixName");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "namespacePrefixName"



	// $ANTLR start "resourceIdentifier"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:308:1: resourceIdentifier : ( STRING | URI );
	public final void resourceIdentifier() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "resourceIdentifier");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(308, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:309:3: ( STRING | URI )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(309,3);
			if ( input.LA(1)==STRING||input.LA(1)==URI ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(310, 2);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "resourceIdentifier");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "resourceIdentifier"



	// $ANTLR start "charSet"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:312:1: charSet : CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI ;
	public final void charSet() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "charSet");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(312, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:313:5: ( CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:313:9: CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI
			{
			dbg.location(313,9);
			match(input,CHARSET_SYM,FOLLOW_CHARSET_SYM_in_charSet276); if (state.failed) return;dbg.location(313,21);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:313:21: ( ws )?
			int alt15=2;
			try { dbg.enterSubRule(15);
			try { dbg.enterDecision(15, decisionCanBacktrack[15]);

			int LA15_0 = input.LA(1);
			if ( (LA15_0==COMMENT||LA15_0==NL||LA15_0==WS) ) {
				alt15=1;
			}
			} finally {dbg.exitDecision(15);}

			switch (alt15) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:313:21: ws
					{
					dbg.location(313,21);
					pushFollow(FOLLOW_ws_in_charSet278);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(15);}
			dbg.location(313,25);
			pushFollow(FOLLOW_charSetValue_in_charSet281);
			charSetValue();
			state._fsp--;
			if (state.failed) return;dbg.location(313,38);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:313:38: ( ws )?
			int alt16=2;
			try { dbg.enterSubRule(16);
			try { dbg.enterDecision(16, decisionCanBacktrack[16]);

			int LA16_0 = input.LA(1);
			if ( (LA16_0==COMMENT||LA16_0==NL||LA16_0==WS) ) {
				alt16=1;
			}
			} finally {dbg.exitDecision(16);}

			switch (alt16) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:313:38: ws
					{
					dbg.location(313,38);
					pushFollow(FOLLOW_ws_in_charSet283);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(16);}
			dbg.location(313,42);
			match(input,SEMI,FOLLOW_SEMI_in_charSet286); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(314, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "charSet");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "charSet"



	// $ANTLR start "charSetValue"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:316:1: charSetValue : STRING ;
	public final void charSetValue() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "charSetValue");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(316, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:317:2: ( STRING )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:317:4: STRING
			{
			dbg.location(317,4);
			match(input,STRING,FOLLOW_STRING_in_charSetValue300); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(318, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "charSetValue");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "charSetValue"



	// $ANTLR start "imports"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:320:1: imports : ( ( importItem ( ws )? SEMI ( ws )? ) |{...}? ( sass_use ( ws )? SEMI ( ws )? ) |{...}? ( sass_forward ( ws )? SEMI ( ws )? ) )+ ;
	public final void imports() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "imports");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(320, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:321:2: ( ( ( importItem ( ws )? SEMI ( ws )? ) |{...}? ( sass_use ( ws )? SEMI ( ws )? ) |{...}? ( sass_forward ( ws )? SEMI ( ws )? ) )+ )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:322:2: ( ( importItem ( ws )? SEMI ( ws )? ) |{...}? ( sass_use ( ws )? SEMI ( ws )? ) |{...}? ( sass_forward ( ws )? SEMI ( ws )? ) )+
			{
			dbg.location(322,2);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:322:2: ( ( importItem ( ws )? SEMI ( ws )? ) |{...}? ( sass_use ( ws )? SEMI ( ws )? ) |{...}? ( sass_forward ( ws )? SEMI ( ws )? ) )+
			int cnt23=0;
			try { dbg.enterSubRule(23);

			loop23:
			while (true) {
				int alt23=4;
				try { dbg.enterDecision(23, decisionCanBacktrack[23]);

				switch ( input.LA(1) ) {
				case IMPORT_SYM:
					{
					int LA23_29 = input.LA(2);
					if ( (!(evalPredicate(((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))),""))) ) {
						alt23=1;
					}

					}
					break;
				case SASS_USE:
					{
					int LA23_37 = input.LA(2);
					if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
						alt23=2;
					}

					}
					break;
				case SASS_FORWARD:
					{
					int LA23_40 = input.LA(2);
					if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
						alt23=3;
					}

					}
					break;
				}
				} finally {dbg.exitDecision(23);}

				switch (alt23) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:323:13: ( importItem ( ws )? SEMI ( ws )? )
					{
					dbg.location(323,13);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:323:13: ( importItem ( ws )? SEMI ( ws )? )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:323:15: importItem ( ws )? SEMI ( ws )?
					{
					dbg.location(323,15);
					pushFollow(FOLLOW_importItem_in_imports328);
					importItem();
					state._fsp--;
					if (state.failed) return;dbg.location(323,26);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:323:26: ( ws )?
					int alt17=2;
					try { dbg.enterSubRule(17);
					try { dbg.enterDecision(17, decisionCanBacktrack[17]);

					int LA17_0 = input.LA(1);
					if ( (LA17_0==COMMENT||LA17_0==NL||LA17_0==WS) ) {
						alt17=1;
					}
					} finally {dbg.exitDecision(17);}

					switch (alt17) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:323:26: ws
							{
							dbg.location(323,26);
							pushFollow(FOLLOW_ws_in_imports330);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(17);}
					dbg.location(323,30);
					match(input,SEMI,FOLLOW_SEMI_in_imports333); if (state.failed) return;dbg.location(323,35);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:323:35: ( ws )?
					int alt18=2;
					try { dbg.enterSubRule(18);
					try { dbg.enterDecision(18, decisionCanBacktrack[18]);

					int LA18_0 = input.LA(1);
					if ( (LA18_0==COMMENT||LA18_0==NL||LA18_0==WS) ) {
						alt18=1;
					}
					} finally {dbg.exitDecision(18);}

					switch (alt18) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:323:35: ws
							{
							dbg.location(323,35);
							pushFollow(FOLLOW_ws_in_imports335);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(18);}

					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:325:13: {...}? ( sass_use ( ws )? SEMI ( ws )? )
					{
					dbg.location(325,13);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "imports", "isScssSource()");
					}dbg.location(325,31);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:325:31: ( sass_use ( ws )? SEMI ( ws )? )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:325:33: sass_use ( ws )? SEMI ( ws )?
					{
					dbg.location(325,33);
					pushFollow(FOLLOW_sass_use_in_imports370);
					sass_use();
					state._fsp--;
					if (state.failed) return;dbg.location(325,42);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:325:42: ( ws )?
					int alt19=2;
					try { dbg.enterSubRule(19);
					try { dbg.enterDecision(19, decisionCanBacktrack[19]);

					int LA19_0 = input.LA(1);
					if ( (LA19_0==COMMENT||LA19_0==NL||LA19_0==WS) ) {
						alt19=1;
					}
					} finally {dbg.exitDecision(19);}

					switch (alt19) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:325:42: ws
							{
							dbg.location(325,42);
							pushFollow(FOLLOW_ws_in_imports372);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(19);}
					dbg.location(325,46);
					match(input,SEMI,FOLLOW_SEMI_in_imports375); if (state.failed) return;dbg.location(325,51);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:325:51: ( ws )?
					int alt20=2;
					try { dbg.enterSubRule(20);
					try { dbg.enterDecision(20, decisionCanBacktrack[20]);

					int LA20_0 = input.LA(1);
					if ( (LA20_0==COMMENT||LA20_0==NL||LA20_0==WS) ) {
						alt20=1;
					}
					} finally {dbg.exitDecision(20);}

					switch (alt20) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:325:51: ws
							{
							dbg.location(325,51);
							pushFollow(FOLLOW_ws_in_imports377);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(20);}

					}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:327:13: {...}? ( sass_forward ( ws )? SEMI ( ws )? )
					{
					dbg.location(327,13);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "imports", "isScssSource()");
					}dbg.location(327,31);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:327:31: ( sass_forward ( ws )? SEMI ( ws )? )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:327:33: sass_forward ( ws )? SEMI ( ws )?
					{
					dbg.location(327,33);
					pushFollow(FOLLOW_sass_forward_in_imports412);
					sass_forward();
					state._fsp--;
					if (state.failed) return;dbg.location(327,46);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:327:46: ( ws )?
					int alt21=2;
					try { dbg.enterSubRule(21);
					try { dbg.enterDecision(21, decisionCanBacktrack[21]);

					int LA21_0 = input.LA(1);
					if ( (LA21_0==COMMENT||LA21_0==NL||LA21_0==WS) ) {
						alt21=1;
					}
					} finally {dbg.exitDecision(21);}

					switch (alt21) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:327:46: ws
							{
							dbg.location(327,46);
							pushFollow(FOLLOW_ws_in_imports414);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(21);}
					dbg.location(327,50);
					match(input,SEMI,FOLLOW_SEMI_in_imports417); if (state.failed) return;dbg.location(327,55);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:327:55: ( ws )?
					int alt22=2;
					try { dbg.enterSubRule(22);
					try { dbg.enterDecision(22, decisionCanBacktrack[22]);

					int LA22_0 = input.LA(1);
					if ( (LA22_0==COMMENT||LA22_0==NL||LA22_0==WS) ) {
						alt22=1;
					}
					} finally {dbg.exitDecision(22);}

					switch (alt22) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:327:55: ws
							{
							dbg.location(327,55);
							pushFollow(FOLLOW_ws_in_imports419);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(22);}

					}

					}
					break;

				default :
					if ( cnt23 >= 1 ) break loop23;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(23, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt23++;
			}
			} finally {dbg.exitSubRule(23);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(329, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "imports");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "imports"



	// $ANTLR start "importItem"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:331:1: importItem : ( IMPORT_SYM ( ws )? resourceIdentifier ( ws )? ( importLayer )? ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? |{...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ws )? ( importLayer )? ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? |{...}? IMPORT_SYM ( ws )? ( LPAREN less_import_types RPAREN ( ws )? )? resourceIdentifier ( ws )? ( importLayer )? ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? );
	public final void importItem() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "importItem");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(331, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:332:5: ( IMPORT_SYM ( ws )? resourceIdentifier ( ws )? ( importLayer )? ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? |{...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ws )? ( importLayer )? ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? |{...}? IMPORT_SYM ( ws )? ( LPAREN less_import_types RPAREN ( ws )? )? resourceIdentifier ( ws )? ( importLayer )? ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? )
			int alt44=3;
			try { dbg.enterDecision(44, decisionCanBacktrack[44]);

			try {
				isCyclicDecision = true;
				alt44 = dfa44.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(44);}

			switch (alt44) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:9: IMPORT_SYM ( ws )? resourceIdentifier ( ws )? ( importLayer )? ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
					{
					dbg.location(333,9);
					match(input,IMPORT_SYM,FOLLOW_IMPORT_SYM_in_importItem455); if (state.failed) return;dbg.location(333,20);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:20: ( ws )?
					int alt24=2;
					try { dbg.enterSubRule(24);
					try { dbg.enterDecision(24, decisionCanBacktrack[24]);

					int LA24_0 = input.LA(1);
					if ( (LA24_0==COMMENT||LA24_0==NL||LA24_0==WS) ) {
						alt24=1;
					}
					} finally {dbg.exitDecision(24);}

					switch (alt24) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:20: ws
							{
							dbg.location(333,20);
							pushFollow(FOLLOW_ws_in_importItem457);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(24);}
					dbg.location(333,24);
					pushFollow(FOLLOW_resourceIdentifier_in_importItem460);
					resourceIdentifier();
					state._fsp--;
					if (state.failed) return;dbg.location(333,43);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:43: ( ws )?
					int alt25=2;
					try { dbg.enterSubRule(25);
					try { dbg.enterDecision(25, decisionCanBacktrack[25]);

					int LA25_0 = input.LA(1);
					if ( (LA25_0==COMMENT||LA25_0==NL||LA25_0==WS) ) {
						alt25=1;
					}
					} finally {dbg.exitDecision(25);}

					switch (alt25) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:43: ws
							{
							dbg.location(333,43);
							pushFollow(FOLLOW_ws_in_importItem462);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(25);}
					dbg.location(333,47);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:47: ( importLayer )?
					int alt26=2;
					try { dbg.enterSubRule(26);
					try { dbg.enterDecision(26, decisionCanBacktrack[26]);

					int LA26_0 = input.LA(1);
					if ( (LA26_0==IDENT) ) {
						int LA26_1 = input.LA(2);
						if ( (evalPredicate(tokenNameEquals("layer"),"tokenNameEquals(\"layer\")")) ) {
							alt26=1;
						}
					}
					} finally {dbg.exitDecision(26);}

					switch (alt26) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:47: importLayer
							{
							dbg.location(333,47);
							pushFollow(FOLLOW_importLayer_in_importItem465);
							importLayer();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(26);}
					dbg.location(333,60);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:60: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
					int alt28=2;
					try { dbg.enterSubRule(28);
					try { dbg.enterDecision(28, decisionCanBacktrack[28]);

					int LA28_0 = input.LA(1);
					if ( (LA28_0==COMMENT||LA28_0==NL||LA28_0==WS) ) {
						int LA28_1 = input.LA(2);
						if ( (synpred1_Css3()) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==IDENT) ) {
						int LA28_2 = input.LA(2);
						if ( (synpred1_Css3()) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==NOT) && (synpred1_Css3())) {
						alt28=1;
					}
					else if ( (LA28_0==GEN) ) {
						int LA28_4 = input.LA(2);
						if ( (synpred1_Css3()) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==HASH_SYMBOL) ) {
						int LA28_5 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==LPAREN) && (synpred1_Css3())) {
						alt28=1;
					}
					else if ( (LA28_0==SASS_MIXIN) ) {
						int LA28_7 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==SASS_VAR) ) {
						int LA28_8 = input.LA(2);
						if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==AT_IDENT) ) {
						int LA28_14 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==SASS_INCLUDE) ) {
						int LA28_15 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==SASS_AT_ROOT) ) {
						int LA28_16 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==SASS_DEBUG||LA28_0==SASS_WARN) ) {
						int LA28_17 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==SASS_IF) ) {
						int LA28_28 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==SASS_FOR) ) {
						int LA28_29 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==SASS_EACH) ) {
						int LA28_30 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==SASS_WHILE) ) {
						int LA28_31 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==SASS_CONTENT) ) {
						int LA28_32 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==IMPORT_SYM) ) {
						int LA28_33 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==PAGE_SYM) ) {
						int LA28_34 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==FONT_FACE_SYM) ) {
						int LA28_35 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==MOZ_DOCUMENT_SYM) ) {
						int LA28_36 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==WEBKIT_KEYFRAMES_SYM) ) {
						int LA28_37 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==MEDIA_SYM) ) {
						int LA28_38 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==SASS_EXTEND) ) {
						int LA28_39 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==COUNTER_STYLE_SYM) ) {
						int LA28_41 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					else if ( (LA28_0==SASS_FUNCTION) ) {
						int LA28_43 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					else if ( ((LA28_0 >= BOTTOMCENTER_SYM && LA28_0 <= BOTTOMRIGHT_SYM)||LA28_0==CHARSET_SYM||(LA28_0 >= LEFTBOTTOM_SYM && LA28_0 <= LEFTTOP_SYM)||LA28_0==NAMESPACE_SYM||(LA28_0 >= RIGHTBOTTOM_SYM && LA28_0 <= RIGHTTOP_SYM)||LA28_0==SASS_ELSE||LA28_0==SASS_FORWARD||(LA28_0 >= SASS_RETURN && LA28_0 <= SASS_USE)||(LA28_0 >= TOPCENTER_SYM && LA28_0 <= TOPRIGHT_SYM)) ) {
						int LA28_45 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt28=1;
						}
					}
					} finally {dbg.exitDecision(28);}

					switch (alt28) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:61: ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList
							{
							dbg.location(333,83);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:83: ( ws )?
							int alt27=2;
							try { dbg.enterSubRule(27);
							try { dbg.enterDecision(27, decisionCanBacktrack[27]);

							int LA27_0 = input.LA(1);
							if ( (LA27_0==COMMENT||LA27_0==NL||LA27_0==WS) ) {
								alt27=1;
							}
							} finally {dbg.exitDecision(27);}

							switch (alt27) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:83: ws
									{
									dbg.location(333,83);
									pushFollow(FOLLOW_ws_in_importItem476);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(27);}
							dbg.location(333,87);
							pushFollow(FOLLOW_mediaQueryList_in_importItem479);
							mediaQueryList();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(28);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:9: {...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ws )? ( importLayer )? ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
					{
					dbg.location(336,9);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "importItem", "isScssSource()");
					}dbg.location(336,27);
					match(input,IMPORT_SYM,FOLLOW_IMPORT_SYM_in_importItem512); if (state.failed) return;dbg.location(336,38);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:38: ( ws )?
					int alt29=2;
					try { dbg.enterSubRule(29);
					try { dbg.enterDecision(29, decisionCanBacktrack[29]);

					int LA29_0 = input.LA(1);
					if ( (LA29_0==COMMENT||LA29_0==NL||LA29_0==WS) ) {
						alt29=1;
					}
					} finally {dbg.exitDecision(29);}

					switch (alt29) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:38: ws
							{
							dbg.location(336,38);
							pushFollow(FOLLOW_ws_in_importItem514);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(29);}
					dbg.location(336,42);
					pushFollow(FOLLOW_resourceIdentifier_in_importItem517);
					resourceIdentifier();
					state._fsp--;
					if (state.failed) return;dbg.location(336,61);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:61: ( ( ws )? COMMA ( ws )? resourceIdentifier )*
					try { dbg.enterSubRule(32);

					loop32:
					while (true) {
						int alt32=2;
						try { dbg.enterDecision(32, decisionCanBacktrack[32]);

						try {
							isCyclicDecision = true;
							alt32 = dfa32.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(32);}

						switch (alt32) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:62: ( ws )? COMMA ( ws )? resourceIdentifier
							{
							dbg.location(336,62);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:62: ( ws )?
							int alt30=2;
							try { dbg.enterSubRule(30);
							try { dbg.enterDecision(30, decisionCanBacktrack[30]);

							int LA30_0 = input.LA(1);
							if ( (LA30_0==COMMENT||LA30_0==NL||LA30_0==WS) ) {
								alt30=1;
							}
							} finally {dbg.exitDecision(30);}

							switch (alt30) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:62: ws
									{
									dbg.location(336,62);
									pushFollow(FOLLOW_ws_in_importItem520);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(30);}
							dbg.location(336,66);
							match(input,COMMA,FOLLOW_COMMA_in_importItem523); if (state.failed) return;dbg.location(336,72);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:72: ( ws )?
							int alt31=2;
							try { dbg.enterSubRule(31);
							try { dbg.enterDecision(31, decisionCanBacktrack[31]);

							int LA31_0 = input.LA(1);
							if ( (LA31_0==COMMENT||LA31_0==NL||LA31_0==WS) ) {
								alt31=1;
							}
							} finally {dbg.exitDecision(31);}

							switch (alt31) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:72: ws
									{
									dbg.location(336,72);
									pushFollow(FOLLOW_ws_in_importItem525);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(31);}
							dbg.location(336,76);
							pushFollow(FOLLOW_resourceIdentifier_in_importItem528);
							resourceIdentifier();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop32;
						}
					}
					} finally {dbg.exitSubRule(32);}
					dbg.location(336,97);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:97: ( ws )?
					int alt33=2;
					try { dbg.enterSubRule(33);
					try { dbg.enterDecision(33, decisionCanBacktrack[33]);

					int LA33_0 = input.LA(1);
					if ( (LA33_0==COMMENT||LA33_0==NL||LA33_0==WS) ) {
						alt33=1;
					}
					} finally {dbg.exitDecision(33);}

					switch (alt33) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:97: ws
							{
							dbg.location(336,97);
							pushFollow(FOLLOW_ws_in_importItem532);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(33);}
					dbg.location(336,101);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:101: ( importLayer )?
					int alt34=2;
					try { dbg.enterSubRule(34);
					try { dbg.enterDecision(34, decisionCanBacktrack[34]);

					int LA34_0 = input.LA(1);
					if ( (LA34_0==IDENT) ) {
						int LA34_1 = input.LA(2);
						if ( (evalPredicate(tokenNameEquals("layer"),"tokenNameEquals(\"layer\")")) ) {
							alt34=1;
						}
					}
					} finally {dbg.exitDecision(34);}

					switch (alt34) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:101: importLayer
							{
							dbg.location(336,101);
							pushFollow(FOLLOW_importLayer_in_importItem535);
							importLayer();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(34);}
					dbg.location(336,114);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:114: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
					int alt36=2;
					try { dbg.enterSubRule(36);
					try { dbg.enterDecision(36, decisionCanBacktrack[36]);

					int LA36_0 = input.LA(1);
					if ( (LA36_0==COMMENT||LA36_0==NL||LA36_0==WS) ) {
						int LA36_1 = input.LA(2);
						if ( (synpred2_Css3()) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==IDENT) ) {
						int LA36_2 = input.LA(2);
						if ( (synpred2_Css3()) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==NOT) && (synpred2_Css3())) {
						alt36=1;
					}
					else if ( (LA36_0==GEN) ) {
						int LA36_4 = input.LA(2);
						if ( (synpred2_Css3()) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==HASH_SYMBOL) ) {
						int LA36_5 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==LPAREN) && (synpred2_Css3())) {
						alt36=1;
					}
					else if ( (LA36_0==SASS_MIXIN) ) {
						int LA36_7 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==SASS_VAR) ) {
						int LA36_8 = input.LA(2);
						if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==AT_IDENT) ) {
						int LA36_14 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==SASS_INCLUDE) ) {
						int LA36_15 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==SASS_AT_ROOT) ) {
						int LA36_16 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==SASS_DEBUG||LA36_0==SASS_WARN) ) {
						int LA36_17 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==SASS_IF) ) {
						int LA36_28 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==SASS_FOR) ) {
						int LA36_29 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==SASS_EACH) ) {
						int LA36_30 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==SASS_WHILE) ) {
						int LA36_31 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==SASS_CONTENT) ) {
						int LA36_32 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==IMPORT_SYM) ) {
						int LA36_33 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==PAGE_SYM) ) {
						int LA36_34 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==FONT_FACE_SYM) ) {
						int LA36_35 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==MOZ_DOCUMENT_SYM) ) {
						int LA36_36 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==WEBKIT_KEYFRAMES_SYM) ) {
						int LA36_37 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==MEDIA_SYM) ) {
						int LA36_38 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==SASS_EXTEND) ) {
						int LA36_39 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==COUNTER_STYLE_SYM) ) {
						int LA36_41 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					else if ( (LA36_0==SASS_FUNCTION) ) {
						int LA36_43 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					else if ( ((LA36_0 >= BOTTOMCENTER_SYM && LA36_0 <= BOTTOMRIGHT_SYM)||LA36_0==CHARSET_SYM||(LA36_0 >= LEFTBOTTOM_SYM && LA36_0 <= LEFTTOP_SYM)||LA36_0==NAMESPACE_SYM||(LA36_0 >= RIGHTBOTTOM_SYM && LA36_0 <= RIGHTTOP_SYM)||LA36_0==SASS_ELSE||LA36_0==SASS_FORWARD||(LA36_0 >= SASS_RETURN && LA36_0 <= SASS_USE)||(LA36_0 >= TOPCENTER_SYM && LA36_0 <= TOPRIGHT_SYM)) ) {
						int LA36_45 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt36=1;
						}
					}
					} finally {dbg.exitDecision(36);}

					switch (alt36) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:115: ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList
							{
							dbg.location(336,137);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:137: ( ws )?
							int alt35=2;
							try { dbg.enterSubRule(35);
							try { dbg.enterDecision(35, decisionCanBacktrack[35]);

							int LA35_0 = input.LA(1);
							if ( (LA35_0==COMMENT||LA35_0==NL||LA35_0==WS) ) {
								alt35=1;
							}
							} finally {dbg.exitDecision(35);}

							switch (alt35) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:137: ws
									{
									dbg.location(336,137);
									pushFollow(FOLLOW_ws_in_importItem546);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(35);}
							dbg.location(336,141);
							pushFollow(FOLLOW_mediaQueryList_in_importItem549);
							mediaQueryList();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(36);}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:9: {...}? IMPORT_SYM ( ws )? ( LPAREN less_import_types RPAREN ( ws )? )? resourceIdentifier ( ws )? ( importLayer )? ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
					{
					dbg.location(338,9);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "importItem", "isLessSource()");
					}dbg.location(338,27);
					match(input,IMPORT_SYM,FOLLOW_IMPORT_SYM_in_importItem573); if (state.failed) return;dbg.location(338,38);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:38: ( ws )?
					int alt37=2;
					try { dbg.enterSubRule(37);
					try { dbg.enterDecision(37, decisionCanBacktrack[37]);

					int LA37_0 = input.LA(1);
					if ( (LA37_0==COMMENT||LA37_0==NL||LA37_0==WS) ) {
						alt37=1;
					}
					} finally {dbg.exitDecision(37);}

					switch (alt37) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:38: ws
							{
							dbg.location(338,38);
							pushFollow(FOLLOW_ws_in_importItem575);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(37);}
					dbg.location(338,42);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:42: ( LPAREN less_import_types RPAREN ( ws )? )?
					int alt39=2;
					try { dbg.enterSubRule(39);
					try { dbg.enterDecision(39, decisionCanBacktrack[39]);

					int LA39_0 = input.LA(1);
					if ( (LA39_0==LPAREN) ) {
						alt39=1;
					}
					} finally {dbg.exitDecision(39);}

					switch (alt39) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:43: LPAREN less_import_types RPAREN ( ws )?
							{
							dbg.location(338,43);
							match(input,LPAREN,FOLLOW_LPAREN_in_importItem579); if (state.failed) return;dbg.location(338,50);
							pushFollow(FOLLOW_less_import_types_in_importItem581);
							less_import_types();
							state._fsp--;
							if (state.failed) return;dbg.location(338,68);
							match(input,RPAREN,FOLLOW_RPAREN_in_importItem583); if (state.failed) return;dbg.location(338,75);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:75: ( ws )?
							int alt38=2;
							try { dbg.enterSubRule(38);
							try { dbg.enterDecision(38, decisionCanBacktrack[38]);

							int LA38_0 = input.LA(1);
							if ( (LA38_0==COMMENT||LA38_0==NL||LA38_0==WS) ) {
								alt38=1;
							}
							} finally {dbg.exitDecision(38);}

							switch (alt38) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:75: ws
									{
									dbg.location(338,75);
									pushFollow(FOLLOW_ws_in_importItem585);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(38);}

							}
							break;

					}
					} finally {dbg.exitSubRule(39);}
					dbg.location(338,81);
					pushFollow(FOLLOW_resourceIdentifier_in_importItem590);
					resourceIdentifier();
					state._fsp--;
					if (state.failed) return;dbg.location(338,100);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:100: ( ws )?
					int alt40=2;
					try { dbg.enterSubRule(40);
					try { dbg.enterDecision(40, decisionCanBacktrack[40]);

					int LA40_0 = input.LA(1);
					if ( (LA40_0==COMMENT||LA40_0==NL||LA40_0==WS) ) {
						alt40=1;
					}
					} finally {dbg.exitDecision(40);}

					switch (alt40) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:100: ws
							{
							dbg.location(338,100);
							pushFollow(FOLLOW_ws_in_importItem592);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(40);}
					dbg.location(338,104);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:104: ( importLayer )?
					int alt41=2;
					try { dbg.enterSubRule(41);
					try { dbg.enterDecision(41, decisionCanBacktrack[41]);

					int LA41_0 = input.LA(1);
					if ( (LA41_0==IDENT) ) {
						int LA41_1 = input.LA(2);
						if ( (evalPredicate(tokenNameEquals("layer"),"tokenNameEquals(\"layer\")")) ) {
							alt41=1;
						}
					}
					} finally {dbg.exitDecision(41);}

					switch (alt41) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:104: importLayer
							{
							dbg.location(338,104);
							pushFollow(FOLLOW_importLayer_in_importItem595);
							importLayer();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(41);}
					dbg.location(338,117);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:117: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
					int alt43=2;
					try { dbg.enterSubRule(43);
					try { dbg.enterDecision(43, decisionCanBacktrack[43]);

					int LA43_0 = input.LA(1);
					if ( (LA43_0==COMMENT||LA43_0==NL||LA43_0==WS) ) {
						int LA43_1 = input.LA(2);
						if ( (synpred3_Css3()) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==IDENT) ) {
						int LA43_2 = input.LA(2);
						if ( (synpred3_Css3()) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==NOT) && (synpred3_Css3())) {
						alt43=1;
					}
					else if ( (LA43_0==GEN) ) {
						int LA43_4 = input.LA(2);
						if ( (synpred3_Css3()) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==HASH_SYMBOL) ) {
						int LA43_5 = input.LA(2);
						if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==LPAREN) && (synpred3_Css3())) {
						alt43=1;
					}
					else if ( (LA43_0==SASS_MIXIN) ) {
						int LA43_7 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==SASS_VAR) ) {
						int LA43_8 = input.LA(2);
						if ( (((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==AT_IDENT) ) {
						int LA43_14 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==SASS_INCLUDE) ) {
						int LA43_15 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==SASS_AT_ROOT) ) {
						int LA43_16 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==SASS_DEBUG||LA43_0==SASS_WARN) ) {
						int LA43_17 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==SASS_IF) ) {
						int LA43_28 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==SASS_FOR) ) {
						int LA43_29 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==SASS_EACH) ) {
						int LA43_30 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==SASS_WHILE) ) {
						int LA43_31 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==SASS_CONTENT) ) {
						int LA43_32 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==IMPORT_SYM) ) {
						int LA43_33 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==PAGE_SYM) ) {
						int LA43_34 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==FONT_FACE_SYM) ) {
						int LA43_35 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==MOZ_DOCUMENT_SYM) ) {
						int LA43_36 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==WEBKIT_KEYFRAMES_SYM) ) {
						int LA43_37 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==MEDIA_SYM) ) {
						int LA43_38 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==SASS_EXTEND) ) {
						int LA43_39 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==COUNTER_STYLE_SYM) ) {
						int LA43_41 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( (LA43_0==SASS_FUNCTION) ) {
						int LA43_43 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					else if ( ((LA43_0 >= BOTTOMCENTER_SYM && LA43_0 <= BOTTOMRIGHT_SYM)||LA43_0==CHARSET_SYM||(LA43_0 >= LEFTBOTTOM_SYM && LA43_0 <= LEFTTOP_SYM)||LA43_0==NAMESPACE_SYM||(LA43_0 >= RIGHTBOTTOM_SYM && LA43_0 <= RIGHTTOP_SYM)||LA43_0==SASS_ELSE||LA43_0==SASS_FORWARD||(LA43_0 >= SASS_RETURN && LA43_0 <= SASS_USE)||(LA43_0 >= TOPCENTER_SYM && LA43_0 <= TOPRIGHT_SYM)) ) {
						int LA43_45 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt43=1;
						}
					}
					} finally {dbg.exitDecision(43);}

					switch (alt43) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:118: ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList
							{
							dbg.location(338,140);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:140: ( ws )?
							int alt42=2;
							try { dbg.enterSubRule(42);
							try { dbg.enterDecision(42, decisionCanBacktrack[42]);

							int LA42_0 = input.LA(1);
							if ( (LA42_0==COMMENT||LA42_0==NL||LA42_0==WS) ) {
								alt42=1;
							}
							} finally {dbg.exitDecision(42);}

							switch (alt42) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:140: ws
									{
									dbg.location(338,140);
									pushFollow(FOLLOW_ws_in_importItem606);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(42);}
							dbg.location(338,144);
							pushFollow(FOLLOW_mediaQueryList_in_importItem609);
							mediaQueryList();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(43);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(339, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "importItem");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "importItem"



	// $ANTLR start "importLayer"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:341:1: importLayer :{...}? IDENT ( LPAREN ( ws )? layerName ( ws )? RPAREN )? ;
	public final void importLayer() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "importLayer");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(341, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:342:5: ({...}? IDENT ( LPAREN ( ws )? layerName ( ws )? RPAREN )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:343:5: {...}? IDENT ( LPAREN ( ws )? layerName ( ws )? RPAREN )?
			{
			dbg.location(343,5);
			if ( !(evalPredicate(tokenNameEquals("layer"),"tokenNameEquals(\"layer\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "importLayer", "tokenNameEquals(\"layer\")");
			}dbg.location(343,33);
			match(input,IDENT,FOLLOW_IDENT_in_importLayer634); if (state.failed) return;dbg.location(343,39);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:343:39: ( LPAREN ( ws )? layerName ( ws )? RPAREN )?
			int alt47=2;
			try { dbg.enterSubRule(47);
			try { dbg.enterDecision(47, decisionCanBacktrack[47]);

			try {
				isCyclicDecision = true;
				alt47 = dfa47.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(47);}

			switch (alt47) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:343:40: LPAREN ( ws )? layerName ( ws )? RPAREN
					{
					dbg.location(343,40);
					match(input,LPAREN,FOLLOW_LPAREN_in_importLayer637); if (state.failed) return;dbg.location(343,47);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:343:47: ( ws )?
					int alt45=2;
					try { dbg.enterSubRule(45);
					try { dbg.enterDecision(45, decisionCanBacktrack[45]);

					int LA45_0 = input.LA(1);
					if ( (LA45_0==COMMENT||LA45_0==NL||LA45_0==WS) ) {
						alt45=1;
					}
					} finally {dbg.exitDecision(45);}

					switch (alt45) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:343:47: ws
							{
							dbg.location(343,47);
							pushFollow(FOLLOW_ws_in_importLayer639);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(45);}
					dbg.location(343,51);
					pushFollow(FOLLOW_layerName_in_importLayer642);
					layerName();
					state._fsp--;
					if (state.failed) return;dbg.location(343,61);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:343:61: ( ws )?
					int alt46=2;
					try { dbg.enterSubRule(46);
					try { dbg.enterDecision(46, decisionCanBacktrack[46]);

					int LA46_0 = input.LA(1);
					if ( (LA46_0==COMMENT||LA46_0==NL||LA46_0==WS) ) {
						alt46=1;
					}
					} finally {dbg.exitDecision(46);}

					switch (alt46) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:343:61: ws
							{
							dbg.location(343,61);
							pushFollow(FOLLOW_ws_in_importLayer644);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(46);}
					dbg.location(343,65);
					match(input,RPAREN,FOLLOW_RPAREN_in_importLayer647); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(47);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(344, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "importLayer");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "importLayer"



	// $ANTLR start "sass_use"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:346:1: sass_use : SASS_USE ws resourceIdentifier ( ws sass_use_as )? ( ws sass_use_with )? ;
	public final void sass_use() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_use");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(346, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:347:5: ( SASS_USE ws resourceIdentifier ( ws sass_use_as )? ( ws sass_use_with )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:348:9: SASS_USE ws resourceIdentifier ( ws sass_use_as )? ( ws sass_use_with )?
			{
			dbg.location(348,9);
			match(input,SASS_USE,FOLLOW_SASS_USE_in_sass_use674); if (state.failed) return;dbg.location(348,18);
			pushFollow(FOLLOW_ws_in_sass_use676);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(348,21);
			pushFollow(FOLLOW_resourceIdentifier_in_sass_use678);
			resourceIdentifier();
			state._fsp--;
			if (state.failed) return;dbg.location(348,40);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:348:40: ( ws sass_use_as )?
			int alt48=2;
			try { dbg.enterSubRule(48);
			try { dbg.enterDecision(48, decisionCanBacktrack[48]);

			try {
				isCyclicDecision = true;
				alt48 = dfa48.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(48);}

			switch (alt48) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:348:41: ws sass_use_as
					{
					dbg.location(348,41);
					pushFollow(FOLLOW_ws_in_sass_use681);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(348,44);
					pushFollow(FOLLOW_sass_use_as_in_sass_use683);
					sass_use_as();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(48);}
			dbg.location(348,58);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:348:58: ( ws sass_use_with )?
			int alt49=2;
			try { dbg.enterSubRule(49);
			try { dbg.enterDecision(49, decisionCanBacktrack[49]);

			try {
				isCyclicDecision = true;
				alt49 = dfa49.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(49);}

			switch (alt49) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:348:59: ws sass_use_with
					{
					dbg.location(348,59);
					pushFollow(FOLLOW_ws_in_sass_use688);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(348,62);
					pushFollow(FOLLOW_sass_use_with_in_sass_use690);
					sass_use_with();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(49);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(349, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_use");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_use"



	// $ANTLR start "sass_use_as"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:351:1: sass_use_as :{...}? IDENT ws IDENT ;
	public final void sass_use_as() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_use_as");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(351, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:352:5: ({...}? IDENT ws IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:353:5: {...}? IDENT ws IDENT
			{
			dbg.location(353,5);
			if ( !(evalPredicate(tokenNameEquals("as"),"tokenNameEquals(\"as\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "sass_use_as", "tokenNameEquals(\"as\")");
			}dbg.location(353,30);
			match(input,IDENT,FOLLOW_IDENT_in_sass_use_as715); if (state.failed) return;dbg.location(353,36);
			pushFollow(FOLLOW_ws_in_sass_use_as717);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(353,39);
			match(input,IDENT,FOLLOW_IDENT_in_sass_use_as719); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(354, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_use_as");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_use_as"



	// $ANTLR start "sass_use_with"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:356:1: sass_use_with :{...}? IDENT ( ws )? LPAREN ( ws )? sass_use_with_declaration ( ( ws )? COMMA ( ws )? sass_use_with_declaration )* ( ws )? RPAREN ;
	public final void sass_use_with() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_use_with");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(356, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:357:5: ({...}? IDENT ( ws )? LPAREN ( ws )? sass_use_with_declaration ( ( ws )? COMMA ( ws )? sass_use_with_declaration )* ( ws )? RPAREN )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:5: {...}? IDENT ( ws )? LPAREN ( ws )? sass_use_with_declaration ( ( ws )? COMMA ( ws )? sass_use_with_declaration )* ( ws )? RPAREN
			{
			dbg.location(358,5);
			if ( !(evalPredicate(tokenNameEquals("with"),"tokenNameEquals(\"with\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "sass_use_with", "tokenNameEquals(\"with\")");
			}dbg.location(358,32);
			match(input,IDENT,FOLLOW_IDENT_in_sass_use_with742); if (state.failed) return;dbg.location(358,38);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:38: ( ws )?
			int alt50=2;
			try { dbg.enterSubRule(50);
			try { dbg.enterDecision(50, decisionCanBacktrack[50]);

			int LA50_0 = input.LA(1);
			if ( (LA50_0==COMMENT||LA50_0==NL||LA50_0==WS) ) {
				alt50=1;
			}
			} finally {dbg.exitDecision(50);}

			switch (alt50) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:38: ws
					{
					dbg.location(358,38);
					pushFollow(FOLLOW_ws_in_sass_use_with744);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(50);}
			dbg.location(358,42);
			match(input,LPAREN,FOLLOW_LPAREN_in_sass_use_with747); if (state.failed) return;dbg.location(358,49);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:49: ( ws )?
			int alt51=2;
			try { dbg.enterSubRule(51);
			try { dbg.enterDecision(51, decisionCanBacktrack[51]);

			int LA51_0 = input.LA(1);
			if ( (LA51_0==COMMENT||LA51_0==NL||LA51_0==WS) ) {
				alt51=1;
			}
			} finally {dbg.exitDecision(51);}

			switch (alt51) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:49: ws
					{
					dbg.location(358,49);
					pushFollow(FOLLOW_ws_in_sass_use_with749);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(51);}
			dbg.location(358,53);
			pushFollow(FOLLOW_sass_use_with_declaration_in_sass_use_with752);
			sass_use_with_declaration();
			state._fsp--;
			if (state.failed) return;dbg.location(358,80);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:80: ( ( ws )? COMMA ( ws )? sass_use_with_declaration )*
			try { dbg.enterSubRule(54);

			loop54:
			while (true) {
				int alt54=2;
				try { dbg.enterDecision(54, decisionCanBacktrack[54]);

				try {
					isCyclicDecision = true;
					alt54 = dfa54.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(54);}

				switch (alt54) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:81: ( ws )? COMMA ( ws )? sass_use_with_declaration
					{
					dbg.location(358,81);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:81: ( ws )?
					int alt52=2;
					try { dbg.enterSubRule(52);
					try { dbg.enterDecision(52, decisionCanBacktrack[52]);

					int LA52_0 = input.LA(1);
					if ( (LA52_0==COMMENT||LA52_0==NL||LA52_0==WS) ) {
						alt52=1;
					}
					} finally {dbg.exitDecision(52);}

					switch (alt52) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:81: ws
							{
							dbg.location(358,81);
							pushFollow(FOLLOW_ws_in_sass_use_with756);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(52);}
					dbg.location(358,85);
					match(input,COMMA,FOLLOW_COMMA_in_sass_use_with759); if (state.failed) return;dbg.location(358,91);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:91: ( ws )?
					int alt53=2;
					try { dbg.enterSubRule(53);
					try { dbg.enterDecision(53, decisionCanBacktrack[53]);

					int LA53_0 = input.LA(1);
					if ( (LA53_0==COMMENT||LA53_0==NL||LA53_0==WS) ) {
						alt53=1;
					}
					} finally {dbg.exitDecision(53);}

					switch (alt53) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:91: ws
							{
							dbg.location(358,91);
							pushFollow(FOLLOW_ws_in_sass_use_with761);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(53);}
					dbg.location(358,95);
					pushFollow(FOLLOW_sass_use_with_declaration_in_sass_use_with764);
					sass_use_with_declaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop54;
				}
			}
			} finally {dbg.exitSubRule(54);}
			dbg.location(358,124);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:124: ( ws )?
			int alt55=2;
			try { dbg.enterSubRule(55);
			try { dbg.enterDecision(55, decisionCanBacktrack[55]);

			int LA55_0 = input.LA(1);
			if ( (LA55_0==COMMENT||LA55_0==NL||LA55_0==WS) ) {
				alt55=1;
			}
			} finally {dbg.exitDecision(55);}

			switch (alt55) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:124: ws
					{
					dbg.location(358,124);
					pushFollow(FOLLOW_ws_in_sass_use_with769);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(55);}
			dbg.location(358,128);
			match(input,RPAREN,FOLLOW_RPAREN_in_sass_use_with772); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(359, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_use_with");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_use_with"



	// $ANTLR start "sass_use_with_declaration"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:361:1: sass_use_with_declaration : cp_variable ( ws )? COLON ( ws )? cp_expression ;
	public final void sass_use_with_declaration() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_use_with_declaration");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(361, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:362:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:5: cp_variable ( ws )? COLON ( ws )? cp_expression
			{
			dbg.location(363,5);
			pushFollow(FOLLOW_cp_variable_in_sass_use_with_declaration793);
			cp_variable();
			state._fsp--;
			if (state.failed) return;dbg.location(363,17);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:17: ( ws )?
			int alt56=2;
			try { dbg.enterSubRule(56);
			try { dbg.enterDecision(56, decisionCanBacktrack[56]);

			int LA56_0 = input.LA(1);
			if ( (LA56_0==COMMENT||LA56_0==NL||LA56_0==WS) ) {
				alt56=1;
			}
			} finally {dbg.exitDecision(56);}

			switch (alt56) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:17: ws
					{
					dbg.location(363,17);
					pushFollow(FOLLOW_ws_in_sass_use_with_declaration795);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(56);}
			dbg.location(363,21);
			match(input,COLON,FOLLOW_COLON_in_sass_use_with_declaration798); if (state.failed) return;dbg.location(363,27);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:27: ( ws )?
			int alt57=2;
			try { dbg.enterSubRule(57);
			try { dbg.enterDecision(57, decisionCanBacktrack[57]);

			int LA57_0 = input.LA(1);
			if ( (LA57_0==COMMENT||LA57_0==NL||LA57_0==WS) ) {
				alt57=1;
			}
			} finally {dbg.exitDecision(57);}

			switch (alt57) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:27: ws
					{
					dbg.location(363,27);
					pushFollow(FOLLOW_ws_in_sass_use_with_declaration800);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(57);}
			dbg.location(363,31);
			pushFollow(FOLLOW_cp_expression_in_sass_use_with_declaration803);
			cp_expression();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(364, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_use_with_declaration");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_use_with_declaration"



	// $ANTLR start "sass_forward"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:367:1: sass_forward : SASS_FORWARD ws resourceIdentifier ( ws ( sass_forward_hide | sass_forward_show ) )? ({...}? ws sass_forward_as )? ({...}? ws sass_forward_with )? ;
	public final void sass_forward() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_forward");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(367, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:5: ( SASS_FORWARD ws resourceIdentifier ( ws ( sass_forward_hide | sass_forward_show ) )? ({...}? ws sass_forward_as )? ({...}? ws sass_forward_with )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:9: SASS_FORWARD ws resourceIdentifier ( ws ( sass_forward_hide | sass_forward_show ) )? ({...}? ws sass_forward_as )? ({...}? ws sass_forward_with )?
			{
			dbg.location(369,9);
			match(input,SASS_FORWARD,FOLLOW_SASS_FORWARD_in_sass_forward829); if (state.failed) return;dbg.location(369,22);
			pushFollow(FOLLOW_ws_in_sass_forward831);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(369,25);
			pushFollow(FOLLOW_resourceIdentifier_in_sass_forward833);
			resourceIdentifier();
			state._fsp--;
			if (state.failed) return;dbg.location(369,44);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:44: ( ws ( sass_forward_hide | sass_forward_show ) )?
			int alt59=2;
			try { dbg.enterSubRule(59);
			try { dbg.enterDecision(59, decisionCanBacktrack[59]);

			try {
				isCyclicDecision = true;
				alt59 = dfa59.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(59);}

			switch (alt59) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:46: ws ( sass_forward_hide | sass_forward_show )
					{
					dbg.location(369,46);
					pushFollow(FOLLOW_ws_in_sass_forward837);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(369,49);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:49: ( sass_forward_hide | sass_forward_show )
					int alt58=2;
					try { dbg.enterSubRule(58);
					try { dbg.enterDecision(58, decisionCanBacktrack[58]);

					try {
						isCyclicDecision = true;
						alt58 = dfa58.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(58);}

					switch (alt58) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:51: sass_forward_hide
							{
							dbg.location(369,51);
							pushFollow(FOLLOW_sass_forward_hide_in_sass_forward841);
							sass_forward_hide();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:72: sass_forward_show
							{
							dbg.location(369,72);
							pushFollow(FOLLOW_sass_forward_show_in_sass_forward846);
							sass_forward_show();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(58);}

					}
					break;

			}
			} finally {dbg.exitSubRule(59);}
			dbg.location(369,93);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:93: ({...}? ws sass_forward_as )?
			int alt60=2;
			try { dbg.enterSubRule(60);
			try { dbg.enterDecision(60, decisionCanBacktrack[60]);

			try {
				isCyclicDecision = true;
				alt60 = dfa60.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(60);}

			switch (alt60) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:94: {...}? ws sass_forward_as
					{
					dbg.location(369,94);
					if ( !(evalPredicate(tokenNameEquals2("as"),"tokenNameEquals2(\"as\")")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "sass_forward", "tokenNameEquals2(\"as\")");
					}dbg.location(369,120);
					pushFollow(FOLLOW_ws_in_sass_forward854);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(369,123);
					pushFollow(FOLLOW_sass_forward_as_in_sass_forward856);
					sass_forward_as();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(60);}
			dbg.location(369,141);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:141: ({...}? ws sass_forward_with )?
			int alt61=2;
			try { dbg.enterSubRule(61);
			try { dbg.enterDecision(61, decisionCanBacktrack[61]);

			try {
				isCyclicDecision = true;
				alt61 = dfa61.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(61);}

			switch (alt61) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:142: {...}? ws sass_forward_with
					{
					dbg.location(369,142);
					if ( !(evalPredicate(tokenNameEquals2("with"),"tokenNameEquals2(\"with\")")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "sass_forward", "tokenNameEquals2(\"with\")");
					}dbg.location(369,170);
					pushFollow(FOLLOW_ws_in_sass_forward863);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(369,173);
					pushFollow(FOLLOW_sass_forward_with_in_sass_forward865);
					sass_forward_with();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(61);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(370, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_forward");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_forward"



	// $ANTLR start "sass_forward_as"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:372:1: sass_forward_as :{...}? IDENT ws IDENT ;
	public final void sass_forward_as() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_forward_as");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(372, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:373:5: ({...}? IDENT ws IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:374:5: {...}? IDENT ws IDENT
			{
			dbg.location(374,5);
			if ( !(evalPredicate(tokenNameEquals("as"),"tokenNameEquals(\"as\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "sass_forward_as", "tokenNameEquals(\"as\")");
			}dbg.location(374,30);
			match(input,IDENT,FOLLOW_IDENT_in_sass_forward_as890); if (state.failed) return;dbg.location(374,36);
			pushFollow(FOLLOW_ws_in_sass_forward_as892);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(374,39);
			match(input,IDENT,FOLLOW_IDENT_in_sass_forward_as894); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(375, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_forward_as");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_forward_as"



	// $ANTLR start "sass_forward_with"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:377:1: sass_forward_with :{...}? IDENT ( ws )? LPAREN ( ws )? sass_forward_with_declaration ( ( ws )? COMMA ( ws )? sass_forward_with_declaration )* ( ws )? RPAREN ;
	public final void sass_forward_with() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_forward_with");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(377, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:378:5: ({...}? IDENT ( ws )? LPAREN ( ws )? sass_forward_with_declaration ( ( ws )? COMMA ( ws )? sass_forward_with_declaration )* ( ws )? RPAREN )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:379:5: {...}? IDENT ( ws )? LPAREN ( ws )? sass_forward_with_declaration ( ( ws )? COMMA ( ws )? sass_forward_with_declaration )* ( ws )? RPAREN
			{
			dbg.location(379,5);
			if ( !(evalPredicate(tokenNameEquals("with"),"tokenNameEquals(\"with\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "sass_forward_with", "tokenNameEquals(\"with\")");
			}dbg.location(379,32);
			match(input,IDENT,FOLLOW_IDENT_in_sass_forward_with917); if (state.failed) return;dbg.location(379,38);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:379:38: ( ws )?
			int alt62=2;
			try { dbg.enterSubRule(62);
			try { dbg.enterDecision(62, decisionCanBacktrack[62]);

			int LA62_0 = input.LA(1);
			if ( (LA62_0==COMMENT||LA62_0==NL||LA62_0==WS) ) {
				alt62=1;
			}
			} finally {dbg.exitDecision(62);}

			switch (alt62) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:379:38: ws
					{
					dbg.location(379,38);
					pushFollow(FOLLOW_ws_in_sass_forward_with919);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(62);}
			dbg.location(379,42);
			match(input,LPAREN,FOLLOW_LPAREN_in_sass_forward_with922); if (state.failed) return;dbg.location(379,49);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:379:49: ( ws )?
			int alt63=2;
			try { dbg.enterSubRule(63);
			try { dbg.enterDecision(63, decisionCanBacktrack[63]);

			int LA63_0 = input.LA(1);
			if ( (LA63_0==COMMENT||LA63_0==NL||LA63_0==WS) ) {
				alt63=1;
			}
			} finally {dbg.exitDecision(63);}

			switch (alt63) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:379:49: ws
					{
					dbg.location(379,49);
					pushFollow(FOLLOW_ws_in_sass_forward_with924);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(63);}
			dbg.location(379,53);
			pushFollow(FOLLOW_sass_forward_with_declaration_in_sass_forward_with927);
			sass_forward_with_declaration();
			state._fsp--;
			if (state.failed) return;dbg.location(379,84);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:379:84: ( ( ws )? COMMA ( ws )? sass_forward_with_declaration )*
			try { dbg.enterSubRule(66);

			loop66:
			while (true) {
				int alt66=2;
				try { dbg.enterDecision(66, decisionCanBacktrack[66]);

				try {
					isCyclicDecision = true;
					alt66 = dfa66.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(66);}

				switch (alt66) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:379:85: ( ws )? COMMA ( ws )? sass_forward_with_declaration
					{
					dbg.location(379,85);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:379:85: ( ws )?
					int alt64=2;
					try { dbg.enterSubRule(64);
					try { dbg.enterDecision(64, decisionCanBacktrack[64]);

					int LA64_0 = input.LA(1);
					if ( (LA64_0==COMMENT||LA64_0==NL||LA64_0==WS) ) {
						alt64=1;
					}
					} finally {dbg.exitDecision(64);}

					switch (alt64) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:379:85: ws
							{
							dbg.location(379,85);
							pushFollow(FOLLOW_ws_in_sass_forward_with931);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(64);}
					dbg.location(379,89);
					match(input,COMMA,FOLLOW_COMMA_in_sass_forward_with934); if (state.failed) return;dbg.location(379,95);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:379:95: ( ws )?
					int alt65=2;
					try { dbg.enterSubRule(65);
					try { dbg.enterDecision(65, decisionCanBacktrack[65]);

					int LA65_0 = input.LA(1);
					if ( (LA65_0==COMMENT||LA65_0==NL||LA65_0==WS) ) {
						alt65=1;
					}
					} finally {dbg.exitDecision(65);}

					switch (alt65) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:379:95: ws
							{
							dbg.location(379,95);
							pushFollow(FOLLOW_ws_in_sass_forward_with936);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(65);}
					dbg.location(379,99);
					pushFollow(FOLLOW_sass_forward_with_declaration_in_sass_forward_with939);
					sass_forward_with_declaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop66;
				}
			}
			} finally {dbg.exitSubRule(66);}
			dbg.location(379,132);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:379:132: ( ws )?
			int alt67=2;
			try { dbg.enterSubRule(67);
			try { dbg.enterDecision(67, decisionCanBacktrack[67]);

			int LA67_0 = input.LA(1);
			if ( (LA67_0==COMMENT||LA67_0==NL||LA67_0==WS) ) {
				alt67=1;
			}
			} finally {dbg.exitDecision(67);}

			switch (alt67) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:379:132: ws
					{
					dbg.location(379,132);
					pushFollow(FOLLOW_ws_in_sass_forward_with944);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(67);}
			dbg.location(379,136);
			match(input,RPAREN,FOLLOW_RPAREN_in_sass_forward_with947); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(380, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_forward_with");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_forward_with"



	// $ANTLR start "sass_forward_with_declaration"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:382:1: sass_forward_with_declaration : cp_variable ( ws )? COLON ( ws )? cp_expression ;
	public final void sass_forward_with_declaration() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_forward_with_declaration");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(382, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:384:5: cp_variable ( ws )? COLON ( ws )? cp_expression
			{
			dbg.location(384,5);
			pushFollow(FOLLOW_cp_variable_in_sass_forward_with_declaration968);
			cp_variable();
			state._fsp--;
			if (state.failed) return;dbg.location(384,17);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:384:17: ( ws )?
			int alt68=2;
			try { dbg.enterSubRule(68);
			try { dbg.enterDecision(68, decisionCanBacktrack[68]);

			int LA68_0 = input.LA(1);
			if ( (LA68_0==COMMENT||LA68_0==NL||LA68_0==WS) ) {
				alt68=1;
			}
			} finally {dbg.exitDecision(68);}

			switch (alt68) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:384:17: ws
					{
					dbg.location(384,17);
					pushFollow(FOLLOW_ws_in_sass_forward_with_declaration970);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(68);}
			dbg.location(384,21);
			match(input,COLON,FOLLOW_COLON_in_sass_forward_with_declaration973); if (state.failed) return;dbg.location(384,27);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:384:27: ( ws )?
			int alt69=2;
			try { dbg.enterSubRule(69);
			try { dbg.enterDecision(69, decisionCanBacktrack[69]);

			int LA69_0 = input.LA(1);
			if ( (LA69_0==COMMENT||LA69_0==NL||LA69_0==WS) ) {
				alt69=1;
			}
			} finally {dbg.exitDecision(69);}

			switch (alt69) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:384:27: ws
					{
					dbg.location(384,27);
					pushFollow(FOLLOW_ws_in_sass_forward_with_declaration975);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(69);}
			dbg.location(384,31);
			pushFollow(FOLLOW_cp_expression_in_sass_forward_with_declaration978);
			cp_expression();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(385, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_forward_with_declaration");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_forward_with_declaration"



	// $ANTLR start "sass_forward_hide"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:387:1: sass_forward_hide :{...}? IDENT ws IDENT ( ( ws )? COMMA ( ws )? IDENT )* ;
	public final void sass_forward_hide() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_forward_hide");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(387, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:388:5: ({...}? IDENT ws IDENT ( ( ws )? COMMA ( ws )? IDENT )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:5: {...}? IDENT ws IDENT ( ( ws )? COMMA ( ws )? IDENT )*
			{
			dbg.location(389,5);
			if ( !(evalPredicate(tokenNameEquals("hide"),"tokenNameEquals(\"hide\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "sass_forward_hide", "tokenNameEquals(\"hide\")");
			}dbg.location(389,32);
			match(input,IDENT,FOLLOW_IDENT_in_sass_forward_hide1001); if (state.failed) return;dbg.location(389,38);
			pushFollow(FOLLOW_ws_in_sass_forward_hide1003);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(389,41);
			match(input,IDENT,FOLLOW_IDENT_in_sass_forward_hide1005); if (state.failed) return;dbg.location(389,47);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:47: ( ( ws )? COMMA ( ws )? IDENT )*
			try { dbg.enterSubRule(72);

			loop72:
			while (true) {
				int alt72=2;
				try { dbg.enterDecision(72, decisionCanBacktrack[72]);

				try {
					isCyclicDecision = true;
					alt72 = dfa72.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(72);}

				switch (alt72) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:48: ( ws )? COMMA ( ws )? IDENT
					{
					dbg.location(389,48);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:48: ( ws )?
					int alt70=2;
					try { dbg.enterSubRule(70);
					try { dbg.enterDecision(70, decisionCanBacktrack[70]);

					int LA70_0 = input.LA(1);
					if ( (LA70_0==COMMENT||LA70_0==NL||LA70_0==WS) ) {
						alt70=1;
					}
					} finally {dbg.exitDecision(70);}

					switch (alt70) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:48: ws
							{
							dbg.location(389,48);
							pushFollow(FOLLOW_ws_in_sass_forward_hide1008);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(70);}
					dbg.location(389,52);
					match(input,COMMA,FOLLOW_COMMA_in_sass_forward_hide1011); if (state.failed) return;dbg.location(389,58);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:58: ( ws )?
					int alt71=2;
					try { dbg.enterSubRule(71);
					try { dbg.enterDecision(71, decisionCanBacktrack[71]);

					int LA71_0 = input.LA(1);
					if ( (LA71_0==COMMENT||LA71_0==NL||LA71_0==WS) ) {
						alt71=1;
					}
					} finally {dbg.exitDecision(71);}

					switch (alt71) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:58: ws
							{
							dbg.location(389,58);
							pushFollow(FOLLOW_ws_in_sass_forward_hide1013);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(71);}
					dbg.location(389,62);
					match(input,IDENT,FOLLOW_IDENT_in_sass_forward_hide1016); if (state.failed) return;
					}
					break;

				default :
					break loop72;
				}
			}
			} finally {dbg.exitSubRule(72);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(390, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_forward_hide");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_forward_hide"



	// $ANTLR start "sass_forward_show"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:392:1: sass_forward_show :{...}? IDENT ws IDENT ( ( ws )? COMMA ( ws )? IDENT )* ;
	public final void sass_forward_show() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_forward_show");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(392, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:5: ({...}? IDENT ws IDENT ( ( ws )? COMMA ( ws )? IDENT )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:5: {...}? IDENT ws IDENT ( ( ws )? COMMA ( ws )? IDENT )*
			{
			dbg.location(394,5);
			if ( !(evalPredicate(tokenNameEquals("show"),"tokenNameEquals(\"show\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "sass_forward_show", "tokenNameEquals(\"show\")");
			}dbg.location(394,32);
			match(input,IDENT,FOLLOW_IDENT_in_sass_forward_show1041); if (state.failed) return;dbg.location(394,38);
			pushFollow(FOLLOW_ws_in_sass_forward_show1043);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(394,41);
			match(input,IDENT,FOLLOW_IDENT_in_sass_forward_show1045); if (state.failed) return;dbg.location(394,47);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:47: ( ( ws )? COMMA ( ws )? IDENT )*
			try { dbg.enterSubRule(75);

			loop75:
			while (true) {
				int alt75=2;
				try { dbg.enterDecision(75, decisionCanBacktrack[75]);

				try {
					isCyclicDecision = true;
					alt75 = dfa75.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(75);}

				switch (alt75) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:48: ( ws )? COMMA ( ws )? IDENT
					{
					dbg.location(394,48);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:48: ( ws )?
					int alt73=2;
					try { dbg.enterSubRule(73);
					try { dbg.enterDecision(73, decisionCanBacktrack[73]);

					int LA73_0 = input.LA(1);
					if ( (LA73_0==COMMENT||LA73_0==NL||LA73_0==WS) ) {
						alt73=1;
					}
					} finally {dbg.exitDecision(73);}

					switch (alt73) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:48: ws
							{
							dbg.location(394,48);
							pushFollow(FOLLOW_ws_in_sass_forward_show1048);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(73);}
					dbg.location(394,52);
					match(input,COMMA,FOLLOW_COMMA_in_sass_forward_show1051); if (state.failed) return;dbg.location(394,58);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:58: ( ws )?
					int alt74=2;
					try { dbg.enterSubRule(74);
					try { dbg.enterDecision(74, decisionCanBacktrack[74]);

					int LA74_0 = input.LA(1);
					if ( (LA74_0==COMMENT||LA74_0==NL||LA74_0==WS) ) {
						alt74=1;
					}
					} finally {dbg.exitDecision(74);}

					switch (alt74) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:58: ws
							{
							dbg.location(394,58);
							pushFollow(FOLLOW_ws_in_sass_forward_show1053);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(74);}
					dbg.location(394,62);
					match(input,IDENT,FOLLOW_IDENT_in_sass_forward_show1056); if (state.failed) return;
					}
					break;

				default :
					break loop75;
				}
			}
			} finally {dbg.exitSubRule(75);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(395, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_forward_show");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_forward_show"



	// $ANTLR start "media"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:397:1: media : MEDIA_SYM ( ws )? ( mediaQueryList ) ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE ;
	public final void media() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "media");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(397, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:398:5: ( MEDIA_SYM ( ws )? ( mediaQueryList ) ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:398:7: MEDIA_SYM ( ws )? ( mediaQueryList ) ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE
			{
			dbg.location(398,7);
			match(input,MEDIA_SYM,FOLLOW_MEDIA_SYM_in_media1075); if (state.failed) return;dbg.location(398,17);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:398:17: ( ws )?
			int alt76=2;
			try { dbg.enterSubRule(76);
			try { dbg.enterDecision(76, decisionCanBacktrack[76]);

			int LA76_0 = input.LA(1);
			if ( (LA76_0==COMMENT||LA76_0==NL||LA76_0==WS) ) {
				alt76=1;
			}
			} finally {dbg.exitDecision(76);}

			switch (alt76) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:398:17: ws
					{
					dbg.location(398,17);
					pushFollow(FOLLOW_ws_in_media1077);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(76);}
			dbg.location(399,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:399:5: ( mediaQueryList )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:400:10: mediaQueryList
			{
			dbg.location(400,10);
			pushFollow(FOLLOW_mediaQueryList_in_media1095);
			mediaQueryList();
			state._fsp--;
			if (state.failed) return;
			}
			dbg.location(401,7);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:401:7: ( ws )?
			int alt77=2;
			try { dbg.enterSubRule(77);
			try { dbg.enterDecision(77, decisionCanBacktrack[77]);

			int LA77_0 = input.LA(1);
			if ( (LA77_0==COMMENT||LA77_0==NL||LA77_0==WS) ) {
				alt77=1;
			}
			} finally {dbg.exitDecision(77);}

			switch (alt77) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:401:7: ws
					{
					dbg.location(401,7);
					pushFollow(FOLLOW_ws_in_media1103);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(77);}
			dbg.location(402,5);
			match(input,LBRACE,FOLLOW_LBRACE_in_media1110); if (state.failed) return;dbg.location(402,12);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:402:12: ( ws )?
			int alt78=2;
			try { dbg.enterSubRule(78);
			try { dbg.enterDecision(78, decisionCanBacktrack[78]);

			int LA78_0 = input.LA(1);
			if ( (LA78_0==COMMENT||LA78_0==NL||LA78_0==WS) ) {
				alt78=1;
			}
			} finally {dbg.exitDecision(78);}

			switch (alt78) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:402:12: ws
					{
					dbg.location(402,12);
					pushFollow(FOLLOW_ws_in_media1112);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(78);}
			dbg.location(402,16);
			pushFollow(FOLLOW_syncToFollow_in_media1115);
			syncToFollow();
			state._fsp--;
			if (state.failed) return;dbg.location(403,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:403:9: ( mediaBody )?
			int alt79=2;
			try { dbg.enterSubRule(79);
			try { dbg.enterDecision(79, decisionCanBacktrack[79]);

			int LA79_0 = input.LA(1);
			if ( ((LA79_0 >= AT_IDENT && LA79_0 <= AT_SIGN)||(LA79_0 >= BOTTOMCENTER_SYM && LA79_0 <= BOTTOMRIGHT_SYM)||(LA79_0 >= CHARSET_SYM && LA79_0 <= COLON)||LA79_0==COUNTER_STYLE_SYM||(LA79_0 >= DCOLON && LA79_0 <= DOT)||LA79_0==FONT_FACE_SYM||(LA79_0 >= GEN && LA79_0 <= GREATER)||(LA79_0 >= HASH && LA79_0 <= HASH_SYMBOL)||LA79_0==IDENT||LA79_0==IMPORT_SYM||(LA79_0 >= LBRACKET && LA79_0 <= LEFTTOP_SYM)||LA79_0==LESS_AND||(LA79_0 >= MEDIA_SYM && LA79_0 <= MOZ_DOCUMENT_SYM)||LA79_0==NAMESPACE_SYM||LA79_0==PAGE_SYM||(LA79_0 >= PIPE && LA79_0 <= PLUS)||(LA79_0 >= RIGHTBOTTOM_SYM && LA79_0 <= RIGHTTOP_SYM)||(LA79_0 >= SASS_AT_ROOT && LA79_0 <= SASS_DEBUG)||(LA79_0 >= SASS_EACH && LA79_0 <= SASS_ELSE)||(LA79_0 >= SASS_EXTEND && LA79_0 <= SASS_FUNCTION)||(LA79_0 >= SASS_IF && LA79_0 <= SASS_MIXIN)||(LA79_0 >= SASS_RETURN && LA79_0 <= SEMI)||LA79_0==STAR||LA79_0==SUPPORTS_SYM||LA79_0==TILDE||(LA79_0 >= TOPCENTER_SYM && LA79_0 <= TOPRIGHT_SYM)||LA79_0==VARIABLE||LA79_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt79=1;
			}
			} finally {dbg.exitDecision(79);}

			switch (alt79) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:403:9: mediaBody
					{
					dbg.location(403,9);
					pushFollow(FOLLOW_mediaBody_in_media1125);
					mediaBody();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(79);}
			dbg.location(404,5);
			match(input,RBRACE,FOLLOW_RBRACE_in_media1132); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(405, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "media");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "media"



	// $ANTLR start "mediaBody"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:407:1: mediaBody : ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) | ({...}? sass_extend ( ws | ( SEMI ) ) ) )+ ;
	public final void mediaBody() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaBody");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(407, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:408:5: ( ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) | ({...}? sass_extend ( ws | ( SEMI ) ) ) )+ )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:409:5: ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) | ({...}? sass_extend ( ws | ( SEMI ) ) ) )+
			{
			dbg.location(409,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:409:5: ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) | ({...}? sass_extend ( ws | ( SEMI ) ) ) )+
			int cnt85=0;
			try { dbg.enterSubRule(85);

			loop85:
			while (true) {
				int alt85=4;
				try { dbg.enterDecision(85, decisionCanBacktrack[85]);

				switch ( input.LA(1) ) {
				case AT_IDENT:
				case AT_SIGN:
				case BOTTOMCENTER_SYM:
				case BOTTOMLEFTCORNER_SYM:
				case BOTTOMLEFT_SYM:
				case BOTTOMRIGHTCORNER_SYM:
				case BOTTOMRIGHT_SYM:
				case CHARSET_SYM:
				case COLON:
				case COUNTER_STYLE_SYM:
				case DCOLON:
				case DIMENSION:
				case DOT:
				case FONT_FACE_SYM:
				case GEN:
				case GREATER:
				case HASH:
				case HASH_SYMBOL:
				case IDENT:
				case IMPORT_SYM:
				case LBRACKET:
				case LEFTBOTTOM_SYM:
				case LEFTMIDDLE_SYM:
				case LEFTTOP_SYM:
				case LESS_AND:
				case MEDIA_SYM:
				case MINUS:
				case MOZ_DOCUMENT_SYM:
				case NAMESPACE_SYM:
				case PAGE_SYM:
				case PIPE:
				case PLUS:
				case RIGHTBOTTOM_SYM:
				case RIGHTMIDDLE_SYM:
				case RIGHTTOP_SYM:
				case SASS_AT_ROOT:
				case SASS_CONTENT:
				case SASS_DEBUG:
				case SASS_EACH:
				case SASS_ELSE:
				case SASS_EXTEND_ONLY_SELECTOR:
				case SASS_FOR:
				case SASS_FORWARD:
				case SASS_FUNCTION:
				case SASS_IF:
				case SASS_INCLUDE:
				case SASS_MIXIN:
				case SASS_RETURN:
				case SASS_USE:
				case SASS_VAR:
				case SASS_WARN:
				case SASS_WHILE:
				case STAR:
				case SUPPORTS_SYM:
				case TILDE:
				case TOPCENTER_SYM:
				case TOPLEFTCORNER_SYM:
				case TOPLEFT_SYM:
				case TOPRIGHTCORNER_SYM:
				case TOPRIGHT_SYM:
				case VARIABLE:
				case WEBKIT_KEYFRAMES_SYM:
					{
					alt85=1;
					}
					break;
				case SASS_EXTEND:
					{
					int LA85_35 = input.LA(2);
					if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
						alt85=1;
					}
					else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
						alt85=3;
					}

					}
					break;
				case SEMI:
					{
					alt85=2;
					}
					break;
				}
				} finally {dbg.exitDecision(85);}

				switch (alt85) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:10: ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
					{
					dbg.location(410,10);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:10: ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:12: mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )?
					{
					dbg.location(410,12);
					pushFollow(FOLLOW_mediaBodyItem_in_mediaBody1166);
					mediaBodyItem();
					state._fsp--;
					if (state.failed) return;dbg.location(410,26);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:26: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?
					int alt81=2;
					try { dbg.enterSubRule(81);
					try { dbg.enterDecision(81, decisionCanBacktrack[81]);

					try {
						isCyclicDecision = true;
						alt81 = dfa81.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(81);}

					switch (alt81) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:27: ( ( ws )? SEMI )=> ( ws )? SEMI
							{
							dbg.location(410,39);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:39: ( ws )?
							int alt80=2;
							try { dbg.enterSubRule(80);
							try { dbg.enterDecision(80, decisionCanBacktrack[80]);

							int LA80_0 = input.LA(1);
							if ( (LA80_0==COMMENT||LA80_0==NL||LA80_0==WS) ) {
								alt80=1;
							}
							} finally {dbg.exitDecision(80);}

							switch (alt80) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:39: ws
									{
									dbg.location(410,39);
									pushFollow(FOLLOW_ws_in_mediaBody1176);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(80);}
							dbg.location(410,43);
							match(input,SEMI,FOLLOW_SEMI_in_mediaBody1179); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(81);}
					dbg.location(410,50);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:50: ( ws )?
					int alt82=2;
					try { dbg.enterSubRule(82);
					try { dbg.enterDecision(82, decisionCanBacktrack[82]);

					int LA82_0 = input.LA(1);
					if ( (LA82_0==COMMENT||LA82_0==NL||LA82_0==WS) ) {
						alt82=1;
					}
					} finally {dbg.exitDecision(82);}

					switch (alt82) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:50: ws
							{
							dbg.location(410,50);
							pushFollow(FOLLOW_ws_in_mediaBody1183);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(82);}

					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:412:10: ( SEMI ( ws )? )
					{
					dbg.location(412,10);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:412:10: ( SEMI ( ws )? )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:412:12: SEMI ( ws )?
					{
					dbg.location(412,12);
					match(input,SEMI,FOLLOW_SEMI_in_mediaBody1210); if (state.failed) return;dbg.location(412,17);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:412:17: ( ws )?
					int alt83=2;
					try { dbg.enterSubRule(83);
					try { dbg.enterDecision(83, decisionCanBacktrack[83]);

					int LA83_0 = input.LA(1);
					if ( (LA83_0==COMMENT||LA83_0==NL||LA83_0==WS) ) {
						alt83=1;
					}
					} finally {dbg.exitDecision(83);}

					switch (alt83) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:412:17: ws
							{
							dbg.location(412,17);
							pushFollow(FOLLOW_ws_in_mediaBody1212);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(83);}

					}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:12: ({...}? sass_extend ( ws | ( SEMI ) ) )
					{
					dbg.location(413,12);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:12: ({...}? sass_extend ( ws | ( SEMI ) ) )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:13: {...}? sass_extend ( ws | ( SEMI ) )
					{
					dbg.location(413,13);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaBody", "isScssSource()");
					}dbg.location(413,31);
					pushFollow(FOLLOW_sass_extend_in_mediaBody1231);
					sass_extend();
					state._fsp--;
					if (state.failed) return;dbg.location(413,43);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:43: ( ws | ( SEMI ) )
					int alt84=2;
					try { dbg.enterSubRule(84);
					try { dbg.enterDecision(84, decisionCanBacktrack[84]);

					int LA84_0 = input.LA(1);
					if ( (LA84_0==COMMENT||LA84_0==NL||LA84_0==WS) ) {
						alt84=1;
					}
					else if ( (LA84_0==SEMI) ) {
						alt84=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 84, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(84);}

					switch (alt84) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:44: ws
							{
							dbg.location(413,44);
							pushFollow(FOLLOW_ws_in_mediaBody1234);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:49: ( SEMI )
							{
							dbg.location(413,49);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:49: ( SEMI )
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:50: SEMI
							{
							dbg.location(413,50);
							match(input,SEMI,FOLLOW_SEMI_in_mediaBody1239); if (state.failed) return;
							}

							}
							break;

					}
					} finally {dbg.exitSubRule(84);}

					}

					}
					break;

				default :
					if ( cnt85 >= 1 ) break loop85;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(85, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt85++;
			}
			} finally {dbg.exitSubRule(85);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(415, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaBody");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaBody"



	// $ANTLR start "mediaBodyItem"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:1: mediaBodyItem : ( ( SASS_MIXIN | ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE )=> rule | ( propertyDeclaration )=> propertyDeclaration |{...}? sass_debug |{...}? sass_control |{...}? sass_content |{...}? importItem | rule | page | fontFace | vendorAtRule | media | supportsAtRule );
	public final void mediaBodyItem() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaBodyItem");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(417, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:418:5: ( ( SASS_MIXIN | ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE )=> rule | ( propertyDeclaration )=> propertyDeclaration |{...}? sass_debug |{...}? sass_control |{...}? sass_content |{...}? importItem | rule | page | fontFace | vendorAtRule | media | supportsAtRule )
			int alt90=15;
			try { dbg.enterDecision(90, decisionCanBacktrack[90]);

			int LA90_0 = input.LA(1);
			if ( (LA90_0==LESS_AND) ) {
				int LA90_1 = input.LA(2);
				if ( ((synpred5_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt90=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred6_Css3())) ) {
					alt90=2;
				}
				else if ( (((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&synpred7_Css3())) ) {
					alt90=3;
				}
				else if ( (synpred8_Css3()) ) {
					alt90=4;
				}
				else if ( (true) ) {
					alt90=10;
				}

			}
			else if ( (LA90_0==DOT) ) {
				int LA90_2 = input.LA(2);
				if ( ((synpred5_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt90=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred6_Css3())) ) {
					alt90=2;
				}
				else if ( (((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&synpred7_Css3())) ) {
					alt90=3;
				}
				else if ( (synpred8_Css3()) ) {
					alt90=4;
				}
				else if ( (true) ) {
					alt90=10;
				}

			}
			else if ( (LA90_0==HASH) ) {
				int LA90_3 = input.LA(2);
				if ( ((synpred5_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt90=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred6_Css3())) ) {
					alt90=2;
				}
				else if ( (((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&synpred7_Css3())) ) {
					alt90=3;
				}
				else if ( (synpred8_Css3()) ) {
					alt90=4;
				}
				else if ( (true) ) {
					alt90=10;
				}

			}
			else if ( (LA90_0==SASS_MIXIN) ) {
				int LA90_4 = input.LA(2);
				if ( ((synpred5_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt90=1;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt90=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 90, 4, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA90_0==AT_IDENT) ) {
				int LA90_5 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred6_Css3())) ) {
					alt90=2;
				}
				else if ( (((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&synpred7_Css3())) ) {
					alt90=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt90=5;
				}
				else if ( (true) ) {
					alt90=13;
				}

			}
			else if ( (LA90_0==SASS_INCLUDE) ) {
				int LA90_6 = input.LA(2);
				if ( (((evalPredicate(isLessSource(),"isLessSource()")&&synpred6_Css3())&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt90=2;
				}
				else if ( ((evalPredicate(isScssSource(),"isScssSource()")&&synpred7_Css3())) ) {
					alt90=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt90=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 90, 6, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA90_0==SASS_AT_ROOT) ) {
				int LA90_7 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt90=4;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt90=5;
				}
				else if ( (true) ) {
					alt90=10;
				}

			}
			else if ( (LA90_0==GREATER||LA90_0==PLUS||LA90_0==TILDE) ) {
				int LA90_8 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt90=4;
				}
				else if ( (true) ) {
					alt90=10;
				}

			}
			else if ( (LA90_0==SASS_EXTEND_ONLY_SELECTOR) ) {
				int LA90_9 = input.LA(2);
				if ( ((synpred8_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt90=4;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt90=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 90, 9, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA90_0==HASH_SYMBOL) ) {
				int LA90_10 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt90=4;
				}
				else if ( ((synpred9_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt90=5;
				}
				else if ( (true) ) {
					alt90=10;
				}

			}
			else if ( (LA90_0==DIMENSION) ) {
				int LA90_11 = input.LA(2);
				if ( ((synpred8_Css3()&&evalPredicate(tokenNameStartsWith("."),"tokenNameStartsWith(\".\")"))) ) {
					alt90=4;
				}
				else if ( (evalPredicate(tokenNameStartsWith("."),"tokenNameStartsWith(\".\")")) ) {
					alt90=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 90, 11, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA90_0==LBRACKET) ) {
				int LA90_12 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt90=4;
				}
				else if ( (true) ) {
					alt90=10;
				}

			}
			else if ( (LA90_0==COLON||LA90_0==DCOLON) ) {
				int LA90_13 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt90=4;
				}
				else if ( (true) ) {
					alt90=10;
				}

			}
			else if ( (LA90_0==IDENT) ) {
				int LA90_14 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt90=4;
				}
				else if ( (synpred9_Css3()) ) {
					alt90=5;
				}
				else if ( (true) ) {
					alt90=10;
				}

			}
			else if ( (LA90_0==AT_SIGN) ) {
				int LA90_15 = input.LA(2);
				if ( ((synpred8_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt90=4;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred9_Css3())) ) {
					alt90=5;
				}
				else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
					alt90=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 90, 15, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA90_0==MINUS) ) {
				int LA90_16 = input.LA(2);
				if ( ((synpred8_Css3()&&(evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")))) ) {
					alt90=4;
				}
				else if ( ((synpred9_Css3()&&((evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")&&(evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")))||evalPredicate(isScssSource(),"isScssSource()")))) ) {
					alt90=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt90=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 90, 16, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA90_0==STAR) ) {
				int LA90_17 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt90=4;
				}
				else if ( (synpred9_Css3()) ) {
					alt90=5;
				}
				else if ( (true) ) {
					alt90=10;
				}

			}
			else if ( (LA90_0==PIPE) ) {
				int LA90_18 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt90=4;
				}
				else if ( (true) ) {
					alt90=10;
				}

			}
			else if ( (LA90_0==GEN) ) {
				int LA90_19 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt90=4;
				}
				else if ( (synpred9_Css3()) ) {
					alt90=5;
				}
				else if ( (true) ) {
					alt90=10;
				}

			}
			else if ( (LA90_0==VARIABLE) && (synpred9_Css3())) {
				alt90=5;
			}
			else if ( (LA90_0==SASS_DEBUG||LA90_0==SASS_WARN) ) {
				int LA90_21 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt90=5;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt90=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 90, 21, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA90_0==SASS_VAR) && (synpred9_Css3())) {
				alt90=5;
			}
			else if ( (LA90_0==SASS_IF) ) {
				int LA90_23 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt90=5;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt90=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 90, 23, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA90_0==SASS_FOR) ) {
				int LA90_24 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt90=5;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt90=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 90, 24, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA90_0==SASS_EACH) ) {
				int LA90_25 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt90=5;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt90=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 90, 25, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA90_0==SASS_WHILE) ) {
				int LA90_26 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt90=5;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt90=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 90, 26, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA90_0==SASS_CONTENT) ) {
				int LA90_27 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt90=5;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt90=8;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 90, 27, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA90_0==IMPORT_SYM) ) {
				int LA90_28 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt90=5;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt90=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 90, 28, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA90_0==PAGE_SYM) ) {
				int LA90_29 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt90=5;
				}
				else if ( (true) ) {
					alt90=11;
				}

			}
			else if ( (LA90_0==FONT_FACE_SYM) ) {
				int LA90_30 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt90=5;
				}
				else if ( (true) ) {
					alt90=12;
				}

			}
			else if ( (LA90_0==MOZ_DOCUMENT_SYM) ) {
				int LA90_31 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt90=5;
				}
				else if ( (true) ) {
					alt90=13;
				}

			}
			else if ( (LA90_0==WEBKIT_KEYFRAMES_SYM) ) {
				int LA90_32 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt90=5;
				}
				else if ( (true) ) {
					alt90=13;
				}

			}
			else if ( (LA90_0==MEDIA_SYM) ) {
				int LA90_33 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt90=5;
				}
				else if ( (true) ) {
					alt90=14;
				}

			}
			else if ( ((LA90_0 >= BOTTOMCENTER_SYM && LA90_0 <= BOTTOMRIGHT_SYM)||LA90_0==CHARSET_SYM||LA90_0==COUNTER_STYLE_SYM||(LA90_0 >= LEFTBOTTOM_SYM && LA90_0 <= LEFTTOP_SYM)||LA90_0==NAMESPACE_SYM||(LA90_0 >= RIGHTBOTTOM_SYM && LA90_0 <= RIGHTTOP_SYM)||LA90_0==SASS_ELSE||LA90_0==SASS_EXTEND||(LA90_0 >= SASS_FORWARD && LA90_0 <= SASS_FUNCTION)||(LA90_0 >= SASS_RETURN && LA90_0 <= SASS_USE)||(LA90_0 >= TOPCENTER_SYM && LA90_0 <= TOPRIGHT_SYM)) && (synpred9_Css3())) {
				alt90=5;
			}
			else if ( (LA90_0==SUPPORTS_SYM) ) {
				alt90=15;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 90, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(90);}

			switch (alt90) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:5: ( SASS_MIXIN | ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration
					{
					dbg.location(419,96);
					pushFollow(FOLLOW_cp_mixin_declaration_in_mediaBodyItem1313);
					cp_mixin_declaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:421:7: ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )?
					{
					dbg.location(421,55);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaBodyItem", "isLessSource()");
					}dbg.location(421,73);
					pushFollow(FOLLOW_cp_mixin_call_in_mediaBodyItem1346);
					cp_mixin_call();
					state._fsp--;
					if (state.failed) return;dbg.location(421,87);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:421:87: ( ( ws )? IMPORTANT_SYM )?
					int alt87=2;
					try { dbg.enterSubRule(87);
					try { dbg.enterDecision(87, decisionCanBacktrack[87]);

					try {
						isCyclicDecision = true;
						alt87 = dfa87.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(87);}

					switch (alt87) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:421:88: ( ws )? IMPORTANT_SYM
							{
							dbg.location(421,88);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:421:88: ( ws )?
							int alt86=2;
							try { dbg.enterSubRule(86);
							try { dbg.enterDecision(86, decisionCanBacktrack[86]);

							int LA86_0 = input.LA(1);
							if ( (LA86_0==COMMENT||LA86_0==NL||LA86_0==WS) ) {
								alt86=1;
							}
							} finally {dbg.exitDecision(86);}

							switch (alt86) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:421:88: ws
									{
									dbg.location(421,88);
									pushFollow(FOLLOW_ws_in_mediaBodyItem1349);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(86);}
							dbg.location(421,92);
							match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_mediaBodyItem1352); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(87);}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:422:7: ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )?
					{
					dbg.location(422,25);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
					}dbg.location(422,43);
					pushFollow(FOLLOW_cp_mixin_call_in_mediaBodyItem1369);
					cp_mixin_call();
					state._fsp--;
					if (state.failed) return;dbg.location(422,57);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:422:57: ( ( ws )? IMPORTANT_SYM )?
					int alt89=2;
					try { dbg.enterSubRule(89);
					try { dbg.enterDecision(89, decisionCanBacktrack[89]);

					try {
						isCyclicDecision = true;
						alt89 = dfa89.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(89);}

					switch (alt89) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:422:58: ( ws )? IMPORTANT_SYM
							{
							dbg.location(422,58);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:422:58: ( ws )?
							int alt88=2;
							try { dbg.enterSubRule(88);
							try { dbg.enterDecision(88, decisionCanBacktrack[88]);

							int LA88_0 = input.LA(1);
							if ( (LA88_0==COMMENT||LA88_0==NL||LA88_0==WS) ) {
								alt88=1;
							}
							} finally {dbg.exitDecision(88);}

							switch (alt88) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:422:58: ws
									{
									dbg.location(422,58);
									pushFollow(FOLLOW_ws_in_mediaBodyItem1372);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(88);}
							dbg.location(422,62);
							match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_mediaBodyItem1375); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(89);}

					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:7: ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE )=> rule
					{
					dbg.location(423,145);
					pushFollow(FOLLOW_rule_in_mediaBodyItem1440);
					rule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:424:7: ( propertyDeclaration )=> propertyDeclaration
					{
					dbg.location(424,30);
					pushFollow(FOLLOW_propertyDeclaration_in_mediaBodyItem1452);
					propertyDeclaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:425:7: {...}? sass_debug
					{
					dbg.location(425,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
					}dbg.location(425,25);
					pushFollow(FOLLOW_sass_debug_in_mediaBodyItem1462);
					sass_debug();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 7 :
					dbg.enterAlt(7);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:426:7: {...}? sass_control
					{
					dbg.location(426,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
					}dbg.location(426,25);
					pushFollow(FOLLOW_sass_control_in_mediaBodyItem1472);
					sass_control();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 8 :
					dbg.enterAlt(8);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:427:7: {...}? sass_content
					{
					dbg.location(427,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
					}dbg.location(427,25);
					pushFollow(FOLLOW_sass_content_in_mediaBodyItem1482);
					sass_content();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 9 :
					dbg.enterAlt(9);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:428:7: {...}? importItem
					{
					dbg.location(428,7);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaBodyItem", "isCssPreprocessorSource()");
					}dbg.location(428,36);
					pushFollow(FOLLOW_importItem_in_mediaBodyItem1492);
					importItem();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 10 :
					dbg.enterAlt(10);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:429:7: rule
					{
					dbg.location(429,7);
					pushFollow(FOLLOW_rule_in_mediaBodyItem1500);
					rule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 11 :
					dbg.enterAlt(11);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:430:7: page
					{
					dbg.location(430,7);
					pushFollow(FOLLOW_page_in_mediaBodyItem1508);
					page();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 12 :
					dbg.enterAlt(12);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:431:7: fontFace
					{
					dbg.location(431,7);
					pushFollow(FOLLOW_fontFace_in_mediaBodyItem1516);
					fontFace();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 13 :
					dbg.enterAlt(13);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:432:7: vendorAtRule
					{
					dbg.location(432,7);
					pushFollow(FOLLOW_vendorAtRule_in_mediaBodyItem1524);
					vendorAtRule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 14 :
					dbg.enterAlt(14);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:434:7: media
					{
					dbg.location(434,7);
					pushFollow(FOLLOW_media_in_mediaBodyItem1537);
					media();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 15 :
					dbg.enterAlt(15);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:435:7: supportsAtRule
					{
					dbg.location(435,7);
					pushFollow(FOLLOW_supportsAtRule_in_mediaBodyItem1545);
					supportsAtRule();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(436, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaBodyItem");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaBodyItem"



	// $ANTLR start "mediaQueryList"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:1: mediaQueryList : mediaQuery ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )* ;
	public final void mediaQueryList() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaQueryList");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(438, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:439:2: ( mediaQuery ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:439:4: mediaQuery ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )*
			{
			dbg.location(439,4);
			pushFollow(FOLLOW_mediaQuery_in_mediaQueryList1559);
			mediaQuery();
			state._fsp--;
			if (state.failed) return;dbg.location(439,15);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:439:15: ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )*
			try { dbg.enterSubRule(93);

			loop93:
			while (true) {
				int alt93=2;
				try { dbg.enterDecision(93, decisionCanBacktrack[93]);

				try {
					isCyclicDecision = true;
					alt93 = dfa93.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(93);}

				switch (alt93) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:439:17: ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery
					{
					dbg.location(439,31);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:439:31: ( ws )?
					int alt91=2;
					try { dbg.enterSubRule(91);
					try { dbg.enterDecision(91, decisionCanBacktrack[91]);

					int LA91_0 = input.LA(1);
					if ( (LA91_0==COMMENT||LA91_0==NL||LA91_0==WS) ) {
						alt91=1;
					}
					} finally {dbg.exitDecision(91);}

					switch (alt91) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:439:31: ws
							{
							dbg.location(439,31);
							pushFollow(FOLLOW_ws_in_mediaQueryList1571);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(91);}
					dbg.location(439,35);
					match(input,COMMA,FOLLOW_COMMA_in_mediaQueryList1574); if (state.failed) return;dbg.location(439,41);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:439:41: ( ws )?
					int alt92=2;
					try { dbg.enterSubRule(92);
					try { dbg.enterDecision(92, decisionCanBacktrack[92]);

					int LA92_0 = input.LA(1);
					if ( (LA92_0==COMMENT||LA92_0==NL||LA92_0==WS) ) {
						alt92=1;
					}
					} finally {dbg.exitDecision(92);}

					switch (alt92) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:439:41: ws
							{
							dbg.location(439,41);
							pushFollow(FOLLOW_ws_in_mediaQueryList1576);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(92);}
					dbg.location(439,45);
					pushFollow(FOLLOW_mediaQuery_in_mediaQueryList1579);
					mediaQuery();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop93;
				}
			}
			} finally {dbg.exitSubRule(93);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(440, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaQueryList");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaQueryList"



	// $ANTLR start "mediaQuery"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:442:1: mediaQuery : ( ( mediaQueryOperator ( ws )? )? mediaType ( ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression )* | mediaExpression ( ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression )* |{...}? cp_variable );
	public final void mediaQuery() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaQuery");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(442, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:443:2: ( ( mediaQueryOperator ( ws )? )? mediaType ( ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression )* | mediaExpression ( ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression )* |{...}? cp_variable )
			int alt102=3;
			try { dbg.enterDecision(102, decisionCanBacktrack[102]);

			switch ( input.LA(1) ) {
			case IDENT:
				{
				int LA102_1 = input.LA(2);
				if ( (!(evalPredicate((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()")),""))) ) {
					alt102=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt102=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 102, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case GEN:
			case NOT:
				{
				alt102=1;
				}
				break;
			case HASH_SYMBOL:
				{
				int LA102_4 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt102=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt102=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 102, 4, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LPAREN:
				{
				alt102=2;
				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_VAR:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				alt102=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 102, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(102);}

			switch (alt102) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:5: ( mediaQueryOperator ( ws )? )? mediaType ( ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression )*
					{
					dbg.location(444,5);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:5: ( mediaQueryOperator ( ws )? )?
					int alt95=2;
					try { dbg.enterSubRule(95);
					try { dbg.enterDecision(95, decisionCanBacktrack[95]);

					int LA95_0 = input.LA(1);
					if ( (LA95_0==IDENT) ) {
						int LA95_1 = input.LA(2);
						if ( (evalPredicate(tokenNameEquals("only"),"tokenNameEquals(\"only\")")) ) {
							alt95=1;
						}
					}
					else if ( (LA95_0==NOT) ) {
						alt95=1;
					}
					} finally {dbg.exitDecision(95);}

					switch (alt95) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:6: mediaQueryOperator ( ws )?
							{
							dbg.location(444,6);
							pushFollow(FOLLOW_mediaQueryOperator_in_mediaQuery1598);
							mediaQueryOperator();
							state._fsp--;
							if (state.failed) return;dbg.location(444,25);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:25: ( ws )?
							int alt94=2;
							try { dbg.enterSubRule(94);
							try { dbg.enterDecision(94, decisionCanBacktrack[94]);

							int LA94_0 = input.LA(1);
							if ( (LA94_0==COMMENT||LA94_0==NL||LA94_0==WS) ) {
								alt94=1;
							}
							} finally {dbg.exitDecision(94);}

							switch (alt94) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:25: ws
									{
									dbg.location(444,25);
									pushFollow(FOLLOW_ws_in_mediaQuery1600);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(94);}

							}
							break;

					}
					} finally {dbg.exitSubRule(95);}
					dbg.location(444,33);
					pushFollow(FOLLOW_mediaType_in_mediaQuery1607);
					mediaType();
					state._fsp--;
					if (state.failed) return;dbg.location(444,43);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:43: ( ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression )*
					try { dbg.enterSubRule(98);

					loop98:
					while (true) {
						int alt98=2;
						try { dbg.enterDecision(98, decisionCanBacktrack[98]);

						int LA98_0 = input.LA(1);
						if ( (LA98_0==COMMENT||LA98_0==NL||LA98_0==WS) ) {
							int LA98_1 = input.LA(2);
							if ( (synpred11_Css3()) ) {
								alt98=1;
							}

						}
						else if ( (LA98_0==IDENT) ) {
							int LA98_18 = input.LA(2);
							if ( ((synpred11_Css3()&&evalPredicate(tokenNameEquals("and"),"tokenNameEquals(\"and\")"))) ) {
								alt98=1;
							}

						}

						} finally {dbg.exitDecision(98);}

						switch (alt98) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:44: ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression
							{
							dbg.location(444,60);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:60: ( ws )?
							int alt96=2;
							try { dbg.enterSubRule(96);
							try { dbg.enterDecision(96, decisionCanBacktrack[96]);

							int LA96_0 = input.LA(1);
							if ( (LA96_0==COMMENT||LA96_0==NL||LA96_0==WS) ) {
								alt96=1;
							}
							} finally {dbg.exitDecision(96);}

							switch (alt96) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:60: ws
									{
									dbg.location(444,60);
									pushFollow(FOLLOW_ws_in_mediaQuery1618);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(96);}
							dbg.location(444,64);
							pushFollow(FOLLOW_key_and_in_mediaQuery1621);
							key_and();
							state._fsp--;
							if (state.failed) return;dbg.location(444,72);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:72: ( ws )?
							int alt97=2;
							try { dbg.enterSubRule(97);
							try { dbg.enterDecision(97, decisionCanBacktrack[97]);

							int LA97_0 = input.LA(1);
							if ( (LA97_0==COMMENT||LA97_0==NL||LA97_0==WS) ) {
								alt97=1;
							}
							} finally {dbg.exitDecision(97);}

							switch (alt97) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:72: ws
									{
									dbg.location(444,72);
									pushFollow(FOLLOW_ws_in_mediaQuery1623);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(97);}
							dbg.location(444,76);
							pushFollow(FOLLOW_mediaExpression_in_mediaQuery1626);
							mediaExpression();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop98;
						}
					}
					} finally {dbg.exitSubRule(98);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:7: mediaExpression ( ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression )*
					{
					dbg.location(445,7);
					pushFollow(FOLLOW_mediaExpression_in_mediaQuery1637);
					mediaExpression();
					state._fsp--;
					if (state.failed) return;dbg.location(445,23);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:23: ( ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression )*
					try { dbg.enterSubRule(101);

					loop101:
					while (true) {
						int alt101=2;
						try { dbg.enterDecision(101, decisionCanBacktrack[101]);

						int LA101_0 = input.LA(1);
						if ( (LA101_0==COMMENT||LA101_0==NL||LA101_0==WS) ) {
							int LA101_1 = input.LA(2);
							if ( (synpred12_Css3()) ) {
								alt101=1;
							}

						}
						else if ( (LA101_0==IDENT) ) {
							int LA101_18 = input.LA(2);
							if ( ((evalPredicate(tokenNameEquals("and"),"tokenNameEquals(\"and\")")&&synpred12_Css3())) ) {
								alt101=1;
							}

						}

						} finally {dbg.exitDecision(101);}

						switch (alt101) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:24: ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression
							{
							dbg.location(445,40);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:40: ( ws )?
							int alt99=2;
							try { dbg.enterSubRule(99);
							try { dbg.enterDecision(99, decisionCanBacktrack[99]);

							int LA99_0 = input.LA(1);
							if ( (LA99_0==COMMENT||LA99_0==NL||LA99_0==WS) ) {
								alt99=1;
							}
							} finally {dbg.exitDecision(99);}

							switch (alt99) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:40: ws
									{
									dbg.location(445,40);
									pushFollow(FOLLOW_ws_in_mediaQuery1648);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(99);}
							dbg.location(445,44);
							pushFollow(FOLLOW_key_and_in_mediaQuery1651);
							key_and();
							state._fsp--;
							if (state.failed) return;dbg.location(445,52);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:52: ( ws )?
							int alt100=2;
							try { dbg.enterSubRule(100);
							try { dbg.enterDecision(100, decisionCanBacktrack[100]);

							int LA100_0 = input.LA(1);
							if ( (LA100_0==COMMENT||LA100_0==NL||LA100_0==WS) ) {
								alt100=1;
							}
							} finally {dbg.exitDecision(100);}

							switch (alt100) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:52: ws
									{
									dbg.location(445,52);
									pushFollow(FOLLOW_ws_in_mediaQuery1653);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(100);}
							dbg.location(445,56);
							pushFollow(FOLLOW_mediaExpression_in_mediaQuery1656);
							mediaExpression();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop101;
						}
					}
					} finally {dbg.exitSubRule(101);}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:446:7: {...}? cp_variable
					{
					dbg.location(446,7);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaQuery", "isLessSource()");
					}dbg.location(446,25);
					pushFollow(FOLLOW_cp_variable_in_mediaQuery1669);
					cp_variable();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(447, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaQuery");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaQuery"



	// $ANTLR start "mediaQueryOperator"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:449:1: mediaQueryOperator : ( key_only | NOT );
	public final void mediaQueryOperator() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaQueryOperator");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(449, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:450:3: ( key_only | NOT )
			int alt103=2;
			try { dbg.enterDecision(103, decisionCanBacktrack[103]);

			int LA103_0 = input.LA(1);
			if ( (LA103_0==IDENT) ) {
				alt103=1;
			}
			else if ( (LA103_0==NOT) ) {
				alt103=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 103, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(103);}

			switch (alt103) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:450:5: key_only
					{
					dbg.location(450,5);
					pushFollow(FOLLOW_key_only_in_mediaQueryOperator1681);
					key_only();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:450:16: NOT
					{
					dbg.location(450,16);
					match(input,NOT,FOLLOW_NOT_in_mediaQueryOperator1685); if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(451, 2);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaQueryOperator");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaQueryOperator"



	// $ANTLR start "mediaType"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:453:1: mediaType : ( IDENT | GEN |{...}? sass_interpolation_expression_var );
	public final void mediaType() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaType");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(453, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:454:2: ( IDENT | GEN |{...}? sass_interpolation_expression_var )
			int alt104=3;
			try { dbg.enterDecision(104, decisionCanBacktrack[104]);

			switch ( input.LA(1) ) {
			case IDENT:
				{
				alt104=1;
				}
				break;
			case GEN:
				{
				alt104=2;
				}
				break;
			case HASH_SYMBOL:
				{
				alt104=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 104, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(104);}

			switch (alt104) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:454:4: IDENT
					{
					dbg.location(454,4);
					match(input,IDENT,FOLLOW_IDENT_in_mediaType1697); if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:454:12: GEN
					{
					dbg.location(454,12);
					match(input,GEN,FOLLOW_GEN_in_mediaType1701); if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:454:18: {...}? sass_interpolation_expression_var
					{
					dbg.location(454,18);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaType", "isCssPreprocessorSource()");
					}dbg.location(454,47);
					pushFollow(FOLLOW_sass_interpolation_expression_var_in_mediaType1707);
					sass_interpolation_expression_var();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(455, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaType");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaType"



	// $ANTLR start "mediaExpression"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:457:1: mediaExpression : ( ( LPAREN )=> ( LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN ) | ( HASH )=>{...}? sass_interpolation_expression_var );
	public final void mediaExpression() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaExpression");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(457, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:458:5: ( ( LPAREN )=> ( LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN ) | ( HASH )=>{...}? sass_interpolation_expression_var )
			int alt108=2;
			try { dbg.enterDecision(108, decisionCanBacktrack[108]);

			int LA108_0 = input.LA(1);
			if ( (LA108_0==LPAREN) && (synpred13_Css3())) {
				alt108=1;
			}
			else if ( (LA108_0==HASH_SYMBOL) && (synpred14_Css3())) {
				alt108=2;
			}

			} finally {dbg.exitDecision(108);}

			switch (alt108) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:5: ( LPAREN )=> ( LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN )
					{
					dbg.location(459,17);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:17: ( LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:18: LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN
					{
					dbg.location(459,18);
					match(input,LPAREN,FOLLOW_LPAREN_in_mediaExpression1732); if (state.failed) return;dbg.location(459,25);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:25: ( ws )?
					int alt105=2;
					try { dbg.enterSubRule(105);
					try { dbg.enterDecision(105, decisionCanBacktrack[105]);

					int LA105_0 = input.LA(1);
					if ( (LA105_0==COMMENT||LA105_0==NL||LA105_0==WS) ) {
						alt105=1;
					}
					} finally {dbg.exitDecision(105);}

					switch (alt105) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:25: ws
							{
							dbg.location(459,25);
							pushFollow(FOLLOW_ws_in_mediaExpression1734);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(105);}
					dbg.location(459,29);
					pushFollow(FOLLOW_mediaFeature_in_mediaExpression1737);
					mediaFeature();
					state._fsp--;
					if (state.failed) return;dbg.location(459,42);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:42: ( mediaFeatureValue )?
					int alt106=2;
					try { dbg.enterSubRule(106);
					try { dbg.enterDecision(106, decisionCanBacktrack[106]);

					try {
						isCyclicDecision = true;
						alt106 = dfa106.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(106);}

					switch (alt106) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:42: mediaFeatureValue
							{
							dbg.location(459,42);
							pushFollow(FOLLOW_mediaFeatureValue_in_mediaExpression1739);
							mediaFeatureValue();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(106);}
					dbg.location(459,61);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:61: ( ws )?
					int alt107=2;
					try { dbg.enterSubRule(107);
					try { dbg.enterDecision(107, decisionCanBacktrack[107]);

					int LA107_0 = input.LA(1);
					if ( (LA107_0==COMMENT||LA107_0==NL||LA107_0==WS) ) {
						alt107=1;
					}
					} finally {dbg.exitDecision(107);}

					switch (alt107) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:61: ws
							{
							dbg.location(459,61);
							pushFollow(FOLLOW_ws_in_mediaExpression1742);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(107);}
					dbg.location(459,65);
					match(input,RPAREN,FOLLOW_RPAREN_in_mediaExpression1745); if (state.failed) return;
					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:460:7: ( HASH )=>{...}? sass_interpolation_expression_var
					{
					dbg.location(460,17);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaExpression", "isCssPreprocessorSource()");
					}dbg.location(460,46);
					pushFollow(FOLLOW_sass_interpolation_expression_var_in_mediaExpression1762);
					sass_interpolation_expression_var();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(461, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaExpression");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaExpression"



	// $ANTLR start "mediaFeatureValue"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:463:1: mediaFeatureValue : ( ws )? COLON ( ws )? ({...}? cp_expression | expression ) ;
	public final void mediaFeatureValue() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaFeatureValue");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(463, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:464:5: ( ( ws )? COLON ( ws )? ({...}? cp_expression | expression ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:465:5: ( ws )? COLON ( ws )? ({...}? cp_expression | expression )
			{
			dbg.location(465,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:465:5: ( ws )?
			int alt109=2;
			try { dbg.enterSubRule(109);
			try { dbg.enterDecision(109, decisionCanBacktrack[109]);

			int LA109_0 = input.LA(1);
			if ( (LA109_0==COMMENT||LA109_0==NL||LA109_0==WS) ) {
				alt109=1;
			}
			} finally {dbg.exitDecision(109);}

			switch (alt109) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:465:5: ws
					{
					dbg.location(465,5);
					pushFollow(FOLLOW_ws_in_mediaFeatureValue1783);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(109);}
			dbg.location(465,9);
			match(input,COLON,FOLLOW_COLON_in_mediaFeatureValue1786); if (state.failed) return;dbg.location(465,15);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:465:15: ( ws )?
			int alt110=2;
			try { dbg.enterSubRule(110);
			try { dbg.enterDecision(110, decisionCanBacktrack[110]);

			int LA110_0 = input.LA(1);
			if ( (LA110_0==COMMENT||LA110_0==NL||LA110_0==WS) ) {
				alt110=1;
			}
			} finally {dbg.exitDecision(110);}

			switch (alt110) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:465:15: ws
					{
					dbg.location(465,15);
					pushFollow(FOLLOW_ws_in_mediaFeatureValue1788);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(110);}
			dbg.location(466,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:466:5: ({...}? cp_expression | expression )
			int alt111=2;
			try { dbg.enterSubRule(111);
			try { dbg.enterDecision(111, decisionCanBacktrack[111]);

			switch ( input.LA(1) ) {
			case IMPORTANT_SYM:
			case LBRACE:
			case LPAREN:
			case NOT:
				{
				alt111=1;
				}
				break;
			case MINUS:
			case PLUS:
				{
				int LA111_3 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case IDENT:
				{
				int LA111_4 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case VARIABLE:
				{
				int LA111_5 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case LBRACKET:
				{
				int LA111_6 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case NUMBER:
				{
				int LA111_7 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case URANGE:
				{
				int LA111_8 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case PERCENTAGE:
				{
				int LA111_9 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case LENGTH:
				{
				int LA111_10 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case EMS:
				{
				int LA111_11 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case REM:
				{
				int LA111_12 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case EXS:
				{
				int LA111_13 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case ANGLE:
				{
				int LA111_14 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case TIME:
				{
				int LA111_15 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case FREQ:
				{
				int LA111_16 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case RESOLUTION:
				{
				int LA111_17 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case DIMENSION:
				{
				int LA111_18 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case STRING:
				{
				int LA111_19 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case TILDE:
				{
				int LA111_20 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case LESS_JS_STRING:
				{
				int LA111_21 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case GEN:
				{
				int LA111_22 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case URI:
				{
				int LA111_23 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case HASH:
				{
				int LA111_24 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (true) ) {
					alt111=2;
				}

				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				int LA111_25 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt111=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt111=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 111, 25, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_VAR:
				{
				int LA111_26 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt111=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt111=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 111, 26, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LESS_AND:
				{
				int LA111_27 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt111=1;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt111=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 111, 27, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case HASH_SYMBOL:
				{
				int LA111_28 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt111=1;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt111=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 111, 28, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT_SIGN:
				{
				int LA111_29 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt111=1;
				}
				else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
					alt111=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 111, 29, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PERCENTAGE_SYMBOL:
				{
				int LA111_30 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt111=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 111, 30, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 111, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(111);}

			switch (alt111) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:467:9: {...}? cp_expression
					{
					dbg.location(467,9);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaFeatureValue", "isCssPreprocessorSource()");
					}dbg.location(467,38);
					pushFollow(FOLLOW_cp_expression_in_mediaFeatureValue1807);
					cp_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:469:9: expression
					{
					dbg.location(469,9);
					pushFollow(FOLLOW_expression_in_mediaFeatureValue1827);
					expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(111);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(471, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaFeatureValue");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaFeatureValue"



	// $ANTLR start "mediaFeature"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:473:1: mediaFeature : ( IDENT | GEN |{...}? ( cp_variable | sass_interpolation_expression_var ) );
	public final void mediaFeature() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaFeature");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(473, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:474:2: ( IDENT | GEN |{...}? ( cp_variable | sass_interpolation_expression_var ) )
			int alt113=3;
			try { dbg.enterDecision(113, decisionCanBacktrack[113]);

			switch ( input.LA(1) ) {
			case IDENT:
				{
				int LA113_1 = input.LA(2);
				if ( (LA113_1==DOT) ) {
					alt113=3;
				}
				else if ( (LA113_1==COLON||LA113_1==COMMENT||LA113_1==NL||LA113_1==RPAREN||LA113_1==WS) ) {
					alt113=1;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 113, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case GEN:
				{
				alt113=2;
				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case HASH_SYMBOL:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_VAR:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				alt113=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 113, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(113);}

			switch (alt113) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:474:4: IDENT
					{
					dbg.location(474,4);
					match(input,IDENT,FOLLOW_IDENT_in_mediaFeature1847); if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:474:12: GEN
					{
					dbg.location(474,12);
					match(input,GEN,FOLLOW_GEN_in_mediaFeature1851); if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:474:18: {...}? ( cp_variable | sass_interpolation_expression_var )
					{
					dbg.location(474,18);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaFeature", "isCssPreprocessorSource()");
					}dbg.location(474,47);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:474:47: ( cp_variable | sass_interpolation_expression_var )
					int alt112=2;
					try { dbg.enterSubRule(112);
					try { dbg.enterDecision(112, decisionCanBacktrack[112]);

					int LA112_0 = input.LA(1);
					if ( (LA112_0==AT_IDENT||(LA112_0 >= BOTTOMCENTER_SYM && LA112_0 <= BOTTOMRIGHT_SYM)||LA112_0==CHARSET_SYM||LA112_0==COUNTER_STYLE_SYM||LA112_0==FONT_FACE_SYM||LA112_0==IDENT||LA112_0==IMPORT_SYM||(LA112_0 >= LEFTBOTTOM_SYM && LA112_0 <= LEFTTOP_SYM)||LA112_0==MEDIA_SYM||LA112_0==MOZ_DOCUMENT_SYM||LA112_0==NAMESPACE_SYM||LA112_0==PAGE_SYM||(LA112_0 >= RIGHTBOTTOM_SYM && LA112_0 <= RIGHTTOP_SYM)||(LA112_0 >= SASS_AT_ROOT && LA112_0 <= SASS_DEBUG)||(LA112_0 >= SASS_EACH && LA112_0 <= SASS_ELSE)||LA112_0==SASS_EXTEND||(LA112_0 >= SASS_FOR && LA112_0 <= SASS_FUNCTION)||(LA112_0 >= SASS_IF && LA112_0 <= SASS_MIXIN)||(LA112_0 >= SASS_RETURN && LA112_0 <= SASS_WHILE)||(LA112_0 >= TOPCENTER_SYM && LA112_0 <= TOPRIGHT_SYM)||LA112_0==WEBKIT_KEYFRAMES_SYM) ) {
						alt112=1;
					}
					else if ( (LA112_0==HASH_SYMBOL) ) {
						alt112=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 112, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(112);}

					switch (alt112) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:474:49: cp_variable
							{
							dbg.location(474,49);
							pushFollow(FOLLOW_cp_variable_in_mediaFeature1859);
							cp_variable();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:474:63: sass_interpolation_expression_var
							{
							dbg.location(474,63);
							pushFollow(FOLLOW_sass_interpolation_expression_var_in_mediaFeature1863);
							sass_interpolation_expression_var();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(112);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(475, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaFeature");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaFeature"



	// $ANTLR start "body"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:477:2: body : ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ ;
	public final void body() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "body");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(477, 1);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:478:5: ( ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:479:5: ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
			{
			dbg.location(479,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:479:5: ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
			int cnt118=0;
			try { dbg.enterSubRule(118);

			loop118:
			while (true) {
				int alt118=3;
				try { dbg.enterDecision(118, decisionCanBacktrack[118]);

				int LA118_0 = input.LA(1);
				if ( ((LA118_0 >= AT_IDENT && LA118_0 <= AT_SIGN)||(LA118_0 >= BOTTOMCENTER_SYM && LA118_0 <= BOTTOMRIGHT_SYM)||(LA118_0 >= CHARSET_SYM && LA118_0 <= COLON)||LA118_0==COUNTER_STYLE_SYM||(LA118_0 >= DCOLON && LA118_0 <= DOT)||LA118_0==FONT_FACE_SYM||(LA118_0 >= GEN && LA118_0 <= GREATER)||(LA118_0 >= HASH && LA118_0 <= HASH_SYMBOL)||LA118_0==IDENT||LA118_0==IMPORT_SYM||LA118_0==LAYER_SYM||(LA118_0 >= LBRACKET && LA118_0 <= LEFTTOP_SYM)||LA118_0==LESS_AND||(LA118_0 >= MEDIA_SYM && LA118_0 <= MOZ_DOCUMENT_SYM)||LA118_0==NAMESPACE_SYM||LA118_0==PAGE_SYM||(LA118_0 >= PIPE && LA118_0 <= PLUS)||(LA118_0 >= RIGHTBOTTOM_SYM && LA118_0 <= RIGHTTOP_SYM)||(LA118_0 >= SASS_AT_ROOT && LA118_0 <= SASS_DEBUG)||(LA118_0 >= SASS_EACH && LA118_0 <= SASS_ELSE)||(LA118_0 >= SASS_EXTEND && LA118_0 <= SASS_FUNCTION)||(LA118_0 >= SASS_IF && LA118_0 <= SASS_MIXIN)||(LA118_0 >= SASS_RETURN && LA118_0 <= SASS_WHILE)||LA118_0==STAR||LA118_0==SUPPORTS_SYM||LA118_0==TILDE||(LA118_0 >= TOPCENTER_SYM && LA118_0 <= TOPRIGHT_SYM)||LA118_0==WEBKIT_KEYFRAMES_SYM) ) {
					alt118=1;
				}
				else if ( (LA118_0==SEMI) ) {
					alt118=2;
				}

				} finally {dbg.exitDecision(118);}

				switch (alt118) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:480:10: ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
					{
					dbg.location(480,10);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:480:10: ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:480:12: bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )?
					{
					dbg.location(480,12);
					pushFollow(FOLLOW_bodyItem_in_body1897);
					bodyItem();
					state._fsp--;
					if (state.failed) return;dbg.location(480,21);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:480:21: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?
					int alt115=2;
					try { dbg.enterSubRule(115);
					try { dbg.enterDecision(115, decisionCanBacktrack[115]);

					try {
						isCyclicDecision = true;
						alt115 = dfa115.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(115);}

					switch (alt115) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:480:22: ( ( ws )? SEMI )=> ( ws )? SEMI
							{
							dbg.location(480,34);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:480:34: ( ws )?
							int alt114=2;
							try { dbg.enterSubRule(114);
							try { dbg.enterDecision(114, decisionCanBacktrack[114]);

							int LA114_0 = input.LA(1);
							if ( (LA114_0==COMMENT||LA114_0==NL||LA114_0==WS) ) {
								alt114=1;
							}
							} finally {dbg.exitDecision(114);}

							switch (alt114) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:480:34: ws
									{
									dbg.location(480,34);
									pushFollow(FOLLOW_ws_in_body1907);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(114);}
							dbg.location(480,38);
							match(input,SEMI,FOLLOW_SEMI_in_body1910); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(115);}
					dbg.location(480,45);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:480:45: ( ws )?
					int alt116=2;
					try { dbg.enterSubRule(116);
					try { dbg.enterDecision(116, decisionCanBacktrack[116]);

					int LA116_0 = input.LA(1);
					if ( (LA116_0==COMMENT||LA116_0==NL||LA116_0==WS) ) {
						alt116=1;
					}
					} finally {dbg.exitDecision(116);}

					switch (alt116) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:480:45: ws
							{
							dbg.location(480,45);
							pushFollow(FOLLOW_ws_in_body1914);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(116);}

					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:482:10: ( SEMI ( ws )? )
					{
					dbg.location(482,10);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:482:10: ( SEMI ( ws )? )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:482:12: SEMI ( ws )?
					{
					dbg.location(482,12);
					match(input,SEMI,FOLLOW_SEMI_in_body1941); if (state.failed) return;dbg.location(482,17);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:482:17: ( ws )?
					int alt117=2;
					try { dbg.enterSubRule(117);
					try { dbg.enterDecision(117, decisionCanBacktrack[117]);

					int LA117_0 = input.LA(1);
					if ( (LA117_0==COMMENT||LA117_0==NL||LA117_0==WS) ) {
						alt117=1;
					}
					} finally {dbg.exitDecision(117);}

					switch (alt117) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:482:17: ws
							{
							dbg.location(482,17);
							pushFollow(FOLLOW_ws_in_body1943);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(117);}

					}

					}
					break;

				default :
					if ( cnt118 >= 1 ) break loop118;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(118, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt118++;
			}
			} finally {dbg.exitSubRule(118);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(484, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "body");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "body"



	// $ANTLR start "bodyItem"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:486:1: bodyItem : ( ( SASS_MIXIN | ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ws )? SEMI )=>{...}? cp_mixin_call | ( cp_mixin_call )=>{...}? cp_mixin_call | rule | ( cp_variable ( ws )? COLON )=> cp_variable_declaration | ( sass_map )=> sass_map | at_rule |{...}? importItem |{...}? sass_debug |{...}? sass_control |{...}? sass_function_declaration );
	public final void bodyItem() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "bodyItem");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(486, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:487:5: ( ( SASS_MIXIN | ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ws )? SEMI )=>{...}? cp_mixin_call | ( cp_mixin_call )=>{...}? cp_mixin_call | rule | ( cp_variable ( ws )? COLON )=> cp_variable_declaration | ( sass_map )=> sass_map | at_rule |{...}? importItem |{...}? sass_debug |{...}? sass_control |{...}? sass_function_declaration )
			int alt119=11;
			try { dbg.enterDecision(119, decisionCanBacktrack[119]);

			switch ( input.LA(1) ) {
			case LESS_AND:
				{
				int LA119_1 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred16_Css3())) ) {
					alt119=1;
				}
				else if ( ((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=2;
				}
				else if ( (((synpred18_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt119=3;
				}
				else if ( (true) ) {
					alt119=4;
				}

				}
				break;
			case DOT:
				{
				int LA119_2 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred16_Css3())) ) {
					alt119=1;
				}
				else if ( ((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=2;
				}
				else if ( (((synpred18_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt119=3;
				}
				else if ( (true) ) {
					alt119=4;
				}

				}
				break;
			case HASH:
				{
				int LA119_3 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred16_Css3())) ) {
					alt119=1;
				}
				else if ( ((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=2;
				}
				else if ( (((synpred18_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt119=3;
				}
				else if ( (true) ) {
					alt119=4;
				}

				}
				break;
			case SASS_MIXIN:
				{
				int LA119_4 = input.LA(2);
				if ( ((evalPredicate(isScssSource(),"isScssSource()")&&synpred16_Css3())) ) {
					alt119=1;
				}
				else if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 119, 4, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT_IDENT:
				{
				int LA119_5 = input.LA(2);
				if ( ((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=2;
				}
				else if ( (((synpred18_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt119=3;
				}
				else if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}
				else if ( (true) ) {
					alt119=7;
				}

				}
				break;
			case SASS_INCLUDE:
				{
				int LA119_6 = input.LA(2);
				if ( (((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt119=2;
				}
				else if ( ((synpred18_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt119=3;
				}
				else if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 119, 6, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_AT_ROOT:
				{
				int LA119_7 = input.LA(2);
				if ( (true) ) {
					alt119=4;
				}
				else if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 119, 7, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT_SIGN:
			case COLON:
			case DCOLON:
			case DIMENSION:
			case GEN:
			case GREATER:
			case HASH_SYMBOL:
			case LBRACKET:
			case MINUS:
			case PIPE:
			case PLUS:
			case SASS_EXTEND_ONLY_SELECTOR:
			case STAR:
			case TILDE:
				{
				alt119=4;
				}
				break;
			case IDENT:
				{
				int LA119_14 = input.LA(2);
				if ( (true) ) {
					alt119=4;
				}
				else if ( ((synpred19_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isScssSource(),"isScssSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 119, 14, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case MEDIA_SYM:
				{
				int LA119_20 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}
				else if ( (true) ) {
					alt119=7;
				}

				}
				break;
			case SASS_VAR:
				{
				int LA119_21 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isScssSource(),"isScssSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 119, 21, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PAGE_SYM:
				{
				int LA119_22 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}
				else if ( (true) ) {
					alt119=7;
				}

				}
				break;
			case COUNTER_STYLE_SYM:
				{
				int LA119_23 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}
				else if ( (true) ) {
					alt119=7;
				}

				}
				break;
			case FONT_FACE_SYM:
				{
				int LA119_24 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}
				else if ( (true) ) {
					alt119=7;
				}

				}
				break;
			case MOZ_DOCUMENT_SYM:
				{
				int LA119_25 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}
				else if ( (true) ) {
					alt119=7;
				}

				}
				break;
			case LAYER_SYM:
			case SUPPORTS_SYM:
				{
				alt119=7;
				}
				break;
			case WEBKIT_KEYFRAMES_SYM:
				{
				int LA119_27 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}
				else if ( (true) ) {
					alt119=7;
				}

				}
				break;
			case IMPORT_SYM:
				{
				int LA119_28 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt119=8;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 119, 28, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_DEBUG:
			case SASS_WARN:
				{
				int LA119_30 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt119=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 119, 30, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_IF:
				{
				int LA119_31 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt119=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 119, 31, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_FOR:
				{
				int LA119_32 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt119=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 119, 32, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_EACH:
				{
				int LA119_33 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt119=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 119, 33, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_WHILE:
				{
				int LA119_34 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt119=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 119, 34, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_FUNCTION:
				{
				int LA119_35 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt119=11;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 119, 35, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case NAMESPACE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_CONTENT:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FORWARD:
			case SASS_RETURN:
			case SASS_USE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
				{
				int LA119_36 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt119=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt119=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 119, 36, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 119, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(119);}

			switch (alt119) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:488:9: ( SASS_MIXIN | ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration
					{
					dbg.location(488,107);
					pushFollow(FOLLOW_cp_mixin_declaration_in_bodyItem2023);
					cp_mixin_declaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:490:11: ( cp_mixin_call ( ws )? SEMI )=>{...}? cp_mixin_call
					{
					dbg.location(490,38);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "bodyItem", "isLessSource()");
					}dbg.location(490,56);
					pushFollow(FOLLOW_cp_mixin_call_in_bodyItem2056);
					cp_mixin_call();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:491:11: ( cp_mixin_call )=>{...}? cp_mixin_call
					{
					dbg.location(491,29);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
					}dbg.location(491,47);
					pushFollow(FOLLOW_cp_mixin_call_in_bodyItem2075);
					cp_mixin_call();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:492:8: rule
					{
					dbg.location(492,8);
					pushFollow(FOLLOW_rule_in_bodyItem2084);
					rule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:493:11: ( cp_variable ( ws )? COLON )=> cp_variable_declaration
					{
					dbg.location(493,37);
					pushFollow(FOLLOW_cp_variable_declaration_in_bodyItem2106);
					cp_variable_declaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:494:11: ( sass_map )=> sass_map
					{
					dbg.location(494,24);
					pushFollow(FOLLOW_sass_map_in_bodyItem2123);
					sass_map();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 7 :
					dbg.enterAlt(7);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:495:11: at_rule
					{
					dbg.location(495,11);
					pushFollow(FOLLOW_at_rule_in_bodyItem2135);
					at_rule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 8 :
					dbg.enterAlt(8);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:497:11: {...}? importItem
					{
					dbg.location(497,11);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "bodyItem", "isCssPreprocessorSource()");
					}dbg.location(497,40);
					pushFollow(FOLLOW_importItem_in_bodyItem2158);
					importItem();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 9 :
					dbg.enterAlt(9);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:498:11: {...}? sass_debug
					{
					dbg.location(498,11);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
					}dbg.location(498,29);
					pushFollow(FOLLOW_sass_debug_in_bodyItem2172);
					sass_debug();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 10 :
					dbg.enterAlt(10);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:499:11: {...}? sass_control
					{
					dbg.location(499,11);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
					}dbg.location(499,29);
					pushFollow(FOLLOW_sass_control_in_bodyItem2186);
					sass_control();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 11 :
					dbg.enterAlt(11);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:500:11: {...}? sass_function_declaration
					{
					dbg.location(500,11);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
					}dbg.location(500,29);
					pushFollow(FOLLOW_sass_function_declaration_in_bodyItem2200);
					sass_function_declaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(NL));
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(501, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "bodyItem");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "bodyItem"



	// $ANTLR start "supportsAtRule"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:506:1: supportsAtRule : SUPPORTS_SYM ( ws )? supportsCondition ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE ;
	public final void supportsAtRule() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "supportsAtRule");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(506, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:507:2: ( SUPPORTS_SYM ( ws )? supportsCondition ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:508:2: SUPPORTS_SYM ( ws )? supportsCondition ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE
			{
			dbg.location(508,2);
			match(input,SUPPORTS_SYM,FOLLOW_SUPPORTS_SYM_in_supportsAtRule2220); if (state.failed) return;dbg.location(508,15);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:508:15: ( ws )?
			int alt120=2;
			try { dbg.enterSubRule(120);
			try { dbg.enterDecision(120, decisionCanBacktrack[120]);

			int LA120_0 = input.LA(1);
			if ( (LA120_0==COMMENT||LA120_0==NL||LA120_0==WS) ) {
				alt120=1;
			}
			} finally {dbg.exitDecision(120);}

			switch (alt120) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:508:15: ws
					{
					dbg.location(508,15);
					pushFollow(FOLLOW_ws_in_supportsAtRule2222);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(120);}
			dbg.location(508,19);
			pushFollow(FOLLOW_supportsCondition_in_supportsAtRule2225);
			supportsCondition();
			state._fsp--;
			if (state.failed) return;dbg.location(508,37);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:508:37: ( ws )?
			int alt121=2;
			try { dbg.enterSubRule(121);
			try { dbg.enterDecision(121, decisionCanBacktrack[121]);

			int LA121_0 = input.LA(1);
			if ( (LA121_0==COMMENT||LA121_0==NL||LA121_0==WS) ) {
				alt121=1;
			}
			} finally {dbg.exitDecision(121);}

			switch (alt121) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:508:37: ws
					{
					dbg.location(508,37);
					pushFollow(FOLLOW_ws_in_supportsAtRule2227);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(121);}
			dbg.location(508,41);
			match(input,LBRACE,FOLLOW_LBRACE_in_supportsAtRule2230); if (state.failed) return;dbg.location(508,48);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:508:48: ( ws )?
			int alt122=2;
			try { dbg.enterSubRule(122);
			try { dbg.enterDecision(122, decisionCanBacktrack[122]);

			int LA122_0 = input.LA(1);
			if ( (LA122_0==COMMENT||LA122_0==NL||LA122_0==WS) ) {
				alt122=1;
			}
			} finally {dbg.exitDecision(122);}

			switch (alt122) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:508:48: ws
					{
					dbg.location(508,48);
					pushFollow(FOLLOW_ws_in_supportsAtRule2232);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(122);}
			dbg.location(508,52);
			pushFollow(FOLLOW_syncToFollow_in_supportsAtRule2235);
			syncToFollow();
			state._fsp--;
			if (state.failed) return;dbg.location(508,65);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:508:65: ( mediaBody )?
			int alt123=2;
			try { dbg.enterSubRule(123);
			try { dbg.enterDecision(123, decisionCanBacktrack[123]);

			int LA123_0 = input.LA(1);
			if ( ((LA123_0 >= AT_IDENT && LA123_0 <= AT_SIGN)||(LA123_0 >= BOTTOMCENTER_SYM && LA123_0 <= BOTTOMRIGHT_SYM)||(LA123_0 >= CHARSET_SYM && LA123_0 <= COLON)||LA123_0==COUNTER_STYLE_SYM||(LA123_0 >= DCOLON && LA123_0 <= DOT)||LA123_0==FONT_FACE_SYM||(LA123_0 >= GEN && LA123_0 <= GREATER)||(LA123_0 >= HASH && LA123_0 <= HASH_SYMBOL)||LA123_0==IDENT||LA123_0==IMPORT_SYM||(LA123_0 >= LBRACKET && LA123_0 <= LEFTTOP_SYM)||LA123_0==LESS_AND||(LA123_0 >= MEDIA_SYM && LA123_0 <= MOZ_DOCUMENT_SYM)||LA123_0==NAMESPACE_SYM||LA123_0==PAGE_SYM||(LA123_0 >= PIPE && LA123_0 <= PLUS)||(LA123_0 >= RIGHTBOTTOM_SYM && LA123_0 <= RIGHTTOP_SYM)||(LA123_0 >= SASS_AT_ROOT && LA123_0 <= SASS_DEBUG)||(LA123_0 >= SASS_EACH && LA123_0 <= SASS_ELSE)||(LA123_0 >= SASS_EXTEND && LA123_0 <= SASS_FUNCTION)||(LA123_0 >= SASS_IF && LA123_0 <= SASS_MIXIN)||(LA123_0 >= SASS_RETURN && LA123_0 <= SEMI)||LA123_0==STAR||LA123_0==SUPPORTS_SYM||LA123_0==TILDE||(LA123_0 >= TOPCENTER_SYM && LA123_0 <= TOPRIGHT_SYM)||LA123_0==VARIABLE||LA123_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt123=1;
			}
			} finally {dbg.exitDecision(123);}

			switch (alt123) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:508:65: mediaBody
					{
					dbg.location(508,65);
					pushFollow(FOLLOW_mediaBody_in_supportsAtRule2237);
					mediaBody();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(123);}
			dbg.location(508,76);
			match(input,RBRACE,FOLLOW_RBRACE_in_supportsAtRule2240); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(509, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "supportsAtRule");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "supportsAtRule"



	// $ANTLR start "supportsCondition"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:512:1: supportsCondition : ( NOT ws supportsInParens | supportsInParens ( ws supportsWithOperator )? );
	public final void supportsCondition() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "supportsCondition");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(512, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:513:2: ( NOT ws supportsInParens | supportsInParens ( ws supportsWithOperator )? )
			int alt125=2;
			try { dbg.enterDecision(125, decisionCanBacktrack[125]);

			int LA125_0 = input.LA(1);
			if ( (LA125_0==NOT) ) {
				alt125=1;
			}
			else if ( (LA125_0==LPAREN) ) {
				alt125=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 125, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(125);}

			switch (alt125) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:514:2: NOT ws supportsInParens
					{
					dbg.location(514,2);
					match(input,NOT,FOLLOW_NOT_in_supportsCondition2253); if (state.failed) return;dbg.location(514,6);
					pushFollow(FOLLOW_ws_in_supportsCondition2255);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(514,9);
					pushFollow(FOLLOW_supportsInParens_in_supportsCondition2257);
					supportsInParens();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:515:4: supportsInParens ( ws supportsWithOperator )?
					{
					dbg.location(515,4);
					pushFollow(FOLLOW_supportsInParens_in_supportsCondition2262);
					supportsInParens();
					state._fsp--;
					if (state.failed) return;dbg.location(515,21);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:515:21: ( ws supportsWithOperator )?
					int alt124=2;
					try { dbg.enterSubRule(124);
					try { dbg.enterDecision(124, decisionCanBacktrack[124]);

					try {
						isCyclicDecision = true;
						alt124 = dfa124.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(124);}

					switch (alt124) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:515:22: ws supportsWithOperator
							{
							dbg.location(515,22);
							pushFollow(FOLLOW_ws_in_supportsCondition2265);
							ws();
							state._fsp--;
							if (state.failed) return;dbg.location(515,25);
							pushFollow(FOLLOW_supportsWithOperator_in_supportsCondition2267);
							supportsWithOperator();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(124);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(516, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "supportsCondition");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "supportsCondition"



	// $ANTLR start "supportsWithOperator"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:518:1: supportsWithOperator : ( supportsConjunction ( ws supportsConjunction )* | supportsDisjunction ( ws supportsDisjunction )* );
	public final void supportsWithOperator() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "supportsWithOperator");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(518, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:519:9: ( supportsConjunction ( ws supportsConjunction )* | supportsDisjunction ( ws supportsDisjunction )* )
			int alt128=2;
			try { dbg.enterDecision(128, decisionCanBacktrack[128]);

			int LA128_0 = input.LA(1);
			if ( (LA128_0==IDENT) ) {
				int LA128_1 = input.LA(2);
				if ( (evalPredicate(tokenNameEquals("and"),"tokenNameEquals(\"and\")")) ) {
					alt128=1;
				}
				else if ( (evalPredicate(tokenNameEquals("or"),"tokenNameEquals(\"or\")")) ) {
					alt128=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 128, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 128, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(128);}

			switch (alt128) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:520:9: supportsConjunction ( ws supportsConjunction )*
					{
					dbg.location(520,9);
					pushFollow(FOLLOW_supportsConjunction_in_supportsWithOperator2295);
					supportsConjunction();
					state._fsp--;
					if (state.failed) return;dbg.location(520,29);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:520:29: ( ws supportsConjunction )*
					try { dbg.enterSubRule(126);

					loop126:
					while (true) {
						int alt126=2;
						try { dbg.enterDecision(126, decisionCanBacktrack[126]);

						try {
							isCyclicDecision = true;
							alt126 = dfa126.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(126);}

						switch (alt126) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:520:30: ws supportsConjunction
							{
							dbg.location(520,30);
							pushFollow(FOLLOW_ws_in_supportsWithOperator2298);
							ws();
							state._fsp--;
							if (state.failed) return;dbg.location(520,33);
							pushFollow(FOLLOW_supportsConjunction_in_supportsWithOperator2300);
							supportsConjunction();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop126;
						}
					}
					} finally {dbg.exitSubRule(126);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:521:11: supportsDisjunction ( ws supportsDisjunction )*
					{
					dbg.location(521,11);
					pushFollow(FOLLOW_supportsDisjunction_in_supportsWithOperator2314);
					supportsDisjunction();
					state._fsp--;
					if (state.failed) return;dbg.location(521,31);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:521:31: ( ws supportsDisjunction )*
					try { dbg.enterSubRule(127);

					loop127:
					while (true) {
						int alt127=2;
						try { dbg.enterDecision(127, decisionCanBacktrack[127]);

						try {
							isCyclicDecision = true;
							alt127 = dfa127.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(127);}

						switch (alt127) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:521:32: ws supportsDisjunction
							{
							dbg.location(521,32);
							pushFollow(FOLLOW_ws_in_supportsWithOperator2317);
							ws();
							state._fsp--;
							if (state.failed) return;dbg.location(521,35);
							pushFollow(FOLLOW_supportsDisjunction_in_supportsWithOperator2319);
							supportsDisjunction();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop127;
						}
					}
					} finally {dbg.exitSubRule(127);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(522, 8);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "supportsWithOperator");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "supportsWithOperator"



	// $ANTLR start "supportsConjunction"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:1: supportsConjunction : ( key_and ws supportsInParens ) ;
	public final void supportsConjunction() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "supportsConjunction");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(524, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:525:9: ( ( key_and ws supportsInParens ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:525:11: ( key_and ws supportsInParens )
			{
			dbg.location(525,11);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:525:11: ( key_and ws supportsInParens )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:525:12: key_and ws supportsInParens
			{
			dbg.location(525,12);
			pushFollow(FOLLOW_key_and_in_supportsConjunction2347);
			key_and();
			state._fsp--;
			if (state.failed) return;dbg.location(525,20);
			pushFollow(FOLLOW_ws_in_supportsConjunction2349);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(525,23);
			pushFollow(FOLLOW_supportsInParens_in_supportsConjunction2351);
			supportsInParens();
			state._fsp--;
			if (state.failed) return;
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(526, 8);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "supportsConjunction");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "supportsConjunction"



	// $ANTLR start "supportsDisjunction"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:528:1: supportsDisjunction : ( key_or ws supportsInParens ) ;
	public final void supportsDisjunction() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "supportsDisjunction");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(528, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:529:9: ( ( key_or ws supportsInParens ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:529:11: ( key_or ws supportsInParens )
			{
			dbg.location(529,11);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:529:11: ( key_or ws supportsInParens )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:529:12: key_or ws supportsInParens
			{
			dbg.location(529,12);
			pushFollow(FOLLOW_key_or_in_supportsDisjunction2378);
			key_or();
			state._fsp--;
			if (state.failed) return;dbg.location(529,19);
			pushFollow(FOLLOW_ws_in_supportsDisjunction2380);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(529,22);
			pushFollow(FOLLOW_supportsInParens_in_supportsDisjunction2382);
			supportsInParens();
			state._fsp--;
			if (state.failed) return;
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(530, 8);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "supportsDisjunction");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "supportsDisjunction"



	// $ANTLR start "supportsInParens"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:1: supportsInParens : LPAREN ( ws )? ( supportsCondition | supportsFeature ) ( ws )? RPAREN ;
	public final void supportsInParens() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "supportsInParens");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(532, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:533:2: ( LPAREN ( ws )? ( supportsCondition | supportsFeature ) ( ws )? RPAREN )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:2: LPAREN ( ws )? ( supportsCondition | supportsFeature ) ( ws )? RPAREN
			{
			dbg.location(534,2);
			match(input,LPAREN,FOLLOW_LPAREN_in_supportsInParens2402); if (state.failed) return;dbg.location(534,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:9: ( ws )?
			int alt129=2;
			try { dbg.enterSubRule(129);
			try { dbg.enterDecision(129, decisionCanBacktrack[129]);

			int LA129_0 = input.LA(1);
			if ( (LA129_0==COMMENT||LA129_0==NL||LA129_0==WS) ) {
				alt129=1;
			}
			} finally {dbg.exitDecision(129);}

			switch (alt129) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:9: ws
					{
					dbg.location(534,9);
					pushFollow(FOLLOW_ws_in_supportsInParens2404);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(129);}
			dbg.location(534,13);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:13: ( supportsCondition | supportsFeature )
			int alt130=2;
			try { dbg.enterSubRule(130);
			try { dbg.enterDecision(130, decisionCanBacktrack[130]);

			int LA130_0 = input.LA(1);
			if ( (LA130_0==LPAREN||LA130_0==NOT) ) {
				alt130=1;
			}
			else if ( ((LA130_0 >= AT_IDENT && LA130_0 <= AT_SIGN)||(LA130_0 >= BOTTOMCENTER_SYM && LA130_0 <= BOTTOMRIGHT_SYM)||(LA130_0 >= CHARSET_SYM && LA130_0 <= COLON)||LA130_0==COUNTER_STYLE_SYM||(LA130_0 >= DCOLON && LA130_0 <= DOT)||LA130_0==FONT_FACE_SYM||(LA130_0 >= GEN && LA130_0 <= GREATER)||(LA130_0 >= HASH && LA130_0 <= HASH_SYMBOL)||LA130_0==IDENT||LA130_0==IMPORT_SYM||LA130_0==LAYER_SYM||(LA130_0 >= LBRACKET && LA130_0 <= LEFTTOP_SYM)||LA130_0==LESS_AND||(LA130_0 >= MEDIA_SYM && LA130_0 <= MOZ_DOCUMENT_SYM)||LA130_0==NAMESPACE_SYM||LA130_0==PAGE_SYM||(LA130_0 >= PIPE && LA130_0 <= PLUS)||(LA130_0 >= RIGHTBOTTOM_SYM && LA130_0 <= RIGHTTOP_SYM)||(LA130_0 >= SASS_AT_ROOT && LA130_0 <= SASS_DEBUG)||(LA130_0 >= SASS_EACH && LA130_0 <= SASS_ELSE)||(LA130_0 >= SASS_ERROR && LA130_0 <= SASS_FUNCTION)||(LA130_0 >= SASS_IF && LA130_0 <= SASS_MIXIN)||(LA130_0 >= SASS_RETURN && LA130_0 <= SASS_WHILE)||LA130_0==STAR||LA130_0==SUPPORTS_SYM||LA130_0==TILDE||(LA130_0 >= TOPCENTER_SYM && LA130_0 <= TOPRIGHT_SYM)||LA130_0==VARIABLE||LA130_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt130=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 130, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(130);}

			switch (alt130) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:14: supportsCondition
					{
					dbg.location(534,14);
					pushFollow(FOLLOW_supportsCondition_in_supportsInParens2408);
					supportsCondition();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:34: supportsFeature
					{
					dbg.location(534,34);
					pushFollow(FOLLOW_supportsFeature_in_supportsInParens2412);
					supportsFeature();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(130);}
			dbg.location(534,51);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:51: ( ws )?
			int alt131=2;
			try { dbg.enterSubRule(131);
			try { dbg.enterDecision(131, decisionCanBacktrack[131]);

			int LA131_0 = input.LA(1);
			if ( (LA131_0==COMMENT||LA131_0==NL||LA131_0==WS) ) {
				alt131=1;
			}
			} finally {dbg.exitDecision(131);}

			switch (alt131) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:51: ws
					{
					dbg.location(534,51);
					pushFollow(FOLLOW_ws_in_supportsInParens2415);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(131);}
			dbg.location(534,55);
			match(input,RPAREN,FOLLOW_RPAREN_in_supportsInParens2418); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(535, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "supportsInParens");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "supportsInParens"



	// $ANTLR start "supportsFeature"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:537:1: supportsFeature : supportsDecl ;
	public final void supportsFeature() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "supportsFeature");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(537, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:538:2: ( supportsDecl )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:539:2: supportsDecl
			{
			dbg.location(539,2);
			pushFollow(FOLLOW_supportsDecl_in_supportsFeature2431);
			supportsDecl();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(540, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "supportsFeature");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "supportsFeature"



	// $ANTLR start "supportsDecl"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:542:1: supportsDecl : declaration ;
	public final void supportsDecl() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "supportsDecl");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(542, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:543:2: ( declaration )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:544:2: declaration
			{
			dbg.location(544,2);
			pushFollow(FOLLOW_declaration_in_supportsDecl2444);
			declaration();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(545, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "supportsDecl");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "supportsDecl"



	// $ANTLR start "layerAtRule"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:547:1: layerAtRule : ( layerBlock | layerStatement );
	public final void layerAtRule() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "layerAtRule");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(547, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:548:9: ( layerBlock | layerStatement )
			int alt132=2;
			try { dbg.enterDecision(132, decisionCanBacktrack[132]);

			try {
				isCyclicDecision = true;
				alt132 = dfa132.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(132);}

			switch (alt132) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:549:9: layerBlock
					{
					dbg.location(549,9);
					pushFollow(FOLLOW_layerBlock_in_layerAtRule2470);
					layerBlock();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:551:9: layerStatement
					{
					dbg.location(551,9);
					pushFollow(FOLLOW_layerStatement_in_layerAtRule2490);
					layerStatement();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(552, 8);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "layerAtRule");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "layerAtRule"



	// $ANTLR start "layerBlock"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:554:1: layerBlock : ( LAYER_SYM ws ( layerName )? ( ws )? layerBody ) ;
	public final void layerBlock() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "layerBlock");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(554, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:555:9: ( ( LAYER_SYM ws ( layerName )? ( ws )? layerBody ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:556:9: ( LAYER_SYM ws ( layerName )? ( ws )? layerBody )
			{
			dbg.location(556,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:556:9: ( LAYER_SYM ws ( layerName )? ( ws )? layerBody )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:556:10: LAYER_SYM ws ( layerName )? ( ws )? layerBody
			{
			dbg.location(556,10);
			match(input,LAYER_SYM,FOLLOW_LAYER_SYM_in_layerBlock2524); if (state.failed) return;dbg.location(556,20);
			pushFollow(FOLLOW_ws_in_layerBlock2526);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(556,23);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:556:23: ( layerName )?
			int alt133=2;
			try { dbg.enterSubRule(133);
			try { dbg.enterDecision(133, decisionCanBacktrack[133]);

			int LA133_0 = input.LA(1);
			if ( (LA133_0==IDENT) ) {
				alt133=1;
			}
			} finally {dbg.exitDecision(133);}

			switch (alt133) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:556:23: layerName
					{
					dbg.location(556,23);
					pushFollow(FOLLOW_layerName_in_layerBlock2528);
					layerName();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(133);}
			dbg.location(556,34);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:556:34: ( ws )?
			int alt134=2;
			try { dbg.enterSubRule(134);
			try { dbg.enterDecision(134, decisionCanBacktrack[134]);

			int LA134_0 = input.LA(1);
			if ( (LA134_0==COMMENT||LA134_0==NL||LA134_0==WS) ) {
				alt134=1;
			}
			} finally {dbg.exitDecision(134);}

			switch (alt134) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:556:34: ws
					{
					dbg.location(556,34);
					pushFollow(FOLLOW_ws_in_layerBlock2531);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(134);}
			dbg.location(556,38);
			pushFollow(FOLLOW_layerBody_in_layerBlock2534);
			layerBody();
			state._fsp--;
			if (state.failed) return;
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(557, 8);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "layerBlock");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "layerBlock"



	// $ANTLR start "layerStatement"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:559:1: layerStatement : ( LAYER_SYM ws layerName ( ( ws )? COMMA ( ws )? layerName )* SEMI ) ;
	public final void layerStatement() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "layerStatement");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(559, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:560:9: ( ( LAYER_SYM ws layerName ( ( ws )? COMMA ( ws )? layerName )* SEMI ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:561:9: ( LAYER_SYM ws layerName ( ( ws )? COMMA ( ws )? layerName )* SEMI )
			{
			dbg.location(561,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:561:9: ( LAYER_SYM ws layerName ( ( ws )? COMMA ( ws )? layerName )* SEMI )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:561:10: LAYER_SYM ws layerName ( ( ws )? COMMA ( ws )? layerName )* SEMI
			{
			dbg.location(561,10);
			match(input,LAYER_SYM,FOLLOW_LAYER_SYM_in_layerStatement2569); if (state.failed) return;dbg.location(561,20);
			pushFollow(FOLLOW_ws_in_layerStatement2571);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(561,23);
			pushFollow(FOLLOW_layerName_in_layerStatement2573);
			layerName();
			state._fsp--;
			if (state.failed) return;dbg.location(561,33);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:561:33: ( ( ws )? COMMA ( ws )? layerName )*
			try { dbg.enterSubRule(137);

			loop137:
			while (true) {
				int alt137=2;
				try { dbg.enterDecision(137, decisionCanBacktrack[137]);

				int LA137_0 = input.LA(1);
				if ( ((LA137_0 >= COMMA && LA137_0 <= COMMENT)||LA137_0==NL||LA137_0==WS) ) {
					alt137=1;
				}

				} finally {dbg.exitDecision(137);}

				switch (alt137) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:561:35: ( ws )? COMMA ( ws )? layerName
					{
					dbg.location(561,35);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:561:35: ( ws )?
					int alt135=2;
					try { dbg.enterSubRule(135);
					try { dbg.enterDecision(135, decisionCanBacktrack[135]);

					int LA135_0 = input.LA(1);
					if ( (LA135_0==COMMENT||LA135_0==NL||LA135_0==WS) ) {
						alt135=1;
					}
					} finally {dbg.exitDecision(135);}

					switch (alt135) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:561:35: ws
							{
							dbg.location(561,35);
							pushFollow(FOLLOW_ws_in_layerStatement2577);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(135);}
					dbg.location(561,39);
					match(input,COMMA,FOLLOW_COMMA_in_layerStatement2580); if (state.failed) return;dbg.location(561,45);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:561:45: ( ws )?
					int alt136=2;
					try { dbg.enterSubRule(136);
					try { dbg.enterDecision(136, decisionCanBacktrack[136]);

					int LA136_0 = input.LA(1);
					if ( (LA136_0==COMMENT||LA136_0==NL||LA136_0==WS) ) {
						alt136=1;
					}
					} finally {dbg.exitDecision(136);}

					switch (alt136) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:561:45: ws
							{
							dbg.location(561,45);
							pushFollow(FOLLOW_ws_in_layerStatement2582);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(136);}
					dbg.location(561,49);
					pushFollow(FOLLOW_layerName_in_layerStatement2585);
					layerName();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop137;
				}
			}
			} finally {dbg.exitSubRule(137);}
			dbg.location(561,61);
			match(input,SEMI,FOLLOW_SEMI_in_layerStatement2589); if (state.failed) return;
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(562, 8);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "layerStatement");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "layerStatement"



	// $ANTLR start "layerName"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:564:1: layerName : IDENT ( DOT IDENT )* ;
	public final void layerName() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "layerName");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(564, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:565:9: ( IDENT ( DOT IDENT )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:566:9: IDENT ( DOT IDENT )*
			{
			dbg.location(566,9);
			match(input,IDENT,FOLLOW_IDENT_in_layerName2623); if (state.failed) return;dbg.location(566,15);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:566:15: ( DOT IDENT )*
			try { dbg.enterSubRule(138);

			loop138:
			while (true) {
				int alt138=2;
				try { dbg.enterDecision(138, decisionCanBacktrack[138]);

				int LA138_0 = input.LA(1);
				if ( (LA138_0==DOT) ) {
					alt138=1;
				}

				} finally {dbg.exitDecision(138);}

				switch (alt138) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:566:16: DOT IDENT
					{
					dbg.location(566,16);
					match(input,DOT,FOLLOW_DOT_in_layerName2626); if (state.failed) return;dbg.location(566,20);
					match(input,IDENT,FOLLOW_IDENT_in_layerName2628); if (state.failed) return;
					}
					break;

				default :
					break loop138;
				}
			}
			} finally {dbg.exitSubRule(138);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(567, 8);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "layerName");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "layerName"



	// $ANTLR start "layerBody"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:569:1: layerBody : LBRACE ( ws )? ( body )? ( ws )? RBRACE ;
	public final void layerBody() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "layerBody");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(569, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:570:9: ( LBRACE ( ws )? ( body )? ( ws )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:571:9: LBRACE ( ws )? ( body )? ( ws )? RBRACE
			{
			dbg.location(571,9);
			match(input,LBRACE,FOLLOW_LBRACE_in_layerBody2663); if (state.failed) return;dbg.location(571,16);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:571:16: ( ws )?
			int alt139=2;
			try { dbg.enterSubRule(139);
			try { dbg.enterDecision(139, decisionCanBacktrack[139]);

			int LA139_0 = input.LA(1);
			if ( (LA139_0==COMMENT||LA139_0==NL||LA139_0==WS) ) {
				alt139=1;
			}
			} finally {dbg.exitDecision(139);}

			switch (alt139) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:571:16: ws
					{
					dbg.location(571,16);
					pushFollow(FOLLOW_ws_in_layerBody2665);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(139);}
			dbg.location(571,20);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:571:20: ( body )?
			int alt140=2;
			try { dbg.enterSubRule(140);
			try { dbg.enterDecision(140, decisionCanBacktrack[140]);

			int LA140_0 = input.LA(1);
			if ( ((LA140_0 >= AT_IDENT && LA140_0 <= AT_SIGN)||(LA140_0 >= BOTTOMCENTER_SYM && LA140_0 <= BOTTOMRIGHT_SYM)||(LA140_0 >= CHARSET_SYM && LA140_0 <= COLON)||LA140_0==COUNTER_STYLE_SYM||(LA140_0 >= DCOLON && LA140_0 <= DOT)||LA140_0==FONT_FACE_SYM||(LA140_0 >= GEN && LA140_0 <= GREATER)||(LA140_0 >= HASH && LA140_0 <= HASH_SYMBOL)||LA140_0==IDENT||LA140_0==IMPORT_SYM||LA140_0==LAYER_SYM||(LA140_0 >= LBRACKET && LA140_0 <= LEFTTOP_SYM)||LA140_0==LESS_AND||(LA140_0 >= MEDIA_SYM && LA140_0 <= MOZ_DOCUMENT_SYM)||LA140_0==NAMESPACE_SYM||LA140_0==PAGE_SYM||(LA140_0 >= PIPE && LA140_0 <= PLUS)||(LA140_0 >= RIGHTBOTTOM_SYM && LA140_0 <= RIGHTTOP_SYM)||(LA140_0 >= SASS_AT_ROOT && LA140_0 <= SASS_DEBUG)||(LA140_0 >= SASS_EACH && LA140_0 <= SASS_ELSE)||(LA140_0 >= SASS_EXTEND && LA140_0 <= SASS_FUNCTION)||(LA140_0 >= SASS_IF && LA140_0 <= SASS_MIXIN)||(LA140_0 >= SASS_RETURN && LA140_0 <= SEMI)||LA140_0==STAR||LA140_0==SUPPORTS_SYM||LA140_0==TILDE||(LA140_0 >= TOPCENTER_SYM && LA140_0 <= TOPRIGHT_SYM)||LA140_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt140=1;
			}
			} finally {dbg.exitDecision(140);}

			switch (alt140) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:571:20: body
					{
					dbg.location(571,20);
					pushFollow(FOLLOW_body_in_layerBody2668);
					body();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(140);}
			dbg.location(571,26);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:571:26: ( ws )?
			int alt141=2;
			try { dbg.enterSubRule(141);
			try { dbg.enterDecision(141, decisionCanBacktrack[141]);

			int LA141_0 = input.LA(1);
			if ( (LA141_0==COMMENT||LA141_0==NL||LA141_0==WS) ) {
				alt141=1;
			}
			} finally {dbg.exitDecision(141);}

			switch (alt141) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:571:26: ws
					{
					dbg.location(571,26);
					pushFollow(FOLLOW_ws_in_layerBody2671);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(141);}
			dbg.location(571,30);
			match(input,RBRACE,FOLLOW_RBRACE_in_layerBody2674); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(572, 8);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "layerBody");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "layerBody"



	// $ANTLR start "at_rule"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:574:1: at_rule : ( media | page | counterStyle | fontFace | supportsAtRule | vendorAtRule | layerAtRule );
	public final void at_rule() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "at_rule");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(574, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:575:5: ( media | page | counterStyle | fontFace | supportsAtRule | vendorAtRule | layerAtRule )
			int alt142=7;
			try { dbg.enterDecision(142, decisionCanBacktrack[142]);

			switch ( input.LA(1) ) {
			case MEDIA_SYM:
				{
				alt142=1;
				}
				break;
			case PAGE_SYM:
				{
				alt142=2;
				}
				break;
			case COUNTER_STYLE_SYM:
				{
				alt142=3;
				}
				break;
			case FONT_FACE_SYM:
				{
				alt142=4;
				}
				break;
			case SUPPORTS_SYM:
				{
				alt142=5;
				}
				break;
			case AT_IDENT:
			case MOZ_DOCUMENT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				alt142=6;
				}
				break;
			case LAYER_SYM:
				{
				alt142=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 142, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(142);}

			switch (alt142) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:576:5: media
					{
					dbg.location(576,5);
					pushFollow(FOLLOW_media_in_at_rule2699);
					media();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:577:7: page
					{
					dbg.location(577,7);
					pushFollow(FOLLOW_page_in_at_rule2707);
					page();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:578:7: counterStyle
					{
					dbg.location(578,7);
					pushFollow(FOLLOW_counterStyle_in_at_rule2715);
					counterStyle();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:579:7: fontFace
					{
					dbg.location(579,7);
					pushFollow(FOLLOW_fontFace_in_at_rule2723);
					fontFace();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:580:7: supportsAtRule
					{
					dbg.location(580,7);
					pushFollow(FOLLOW_supportsAtRule_in_at_rule2731);
					supportsAtRule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:581:7: vendorAtRule
					{
					dbg.location(581,7);
					pushFollow(FOLLOW_vendorAtRule_in_at_rule2739);
					vendorAtRule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 7 :
					dbg.enterAlt(7);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:582:7: layerAtRule
					{
					dbg.location(582,7);
					pushFollow(FOLLOW_layerAtRule_in_at_rule2747);
					layerAtRule();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(583, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "at_rule");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "at_rule"



	// $ANTLR start "vendorAtRule"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:585:1: vendorAtRule : ( moz_document | webkitKeyframes | generic_at_rule );
	public final void vendorAtRule() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "vendorAtRule");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(585, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:586:3: ( moz_document | webkitKeyframes | generic_at_rule )
			int alt143=3;
			try { dbg.enterDecision(143, decisionCanBacktrack[143]);

			switch ( input.LA(1) ) {
			case MOZ_DOCUMENT_SYM:
				{
				alt143=1;
				}
				break;
			case WEBKIT_KEYFRAMES_SYM:
				{
				alt143=2;
				}
				break;
			case AT_IDENT:
				{
				alt143=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 143, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(143);}

			switch (alt143) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:586:3: moz_document
					{
					dbg.location(586,3);
					pushFollow(FOLLOW_moz_document_in_vendorAtRule2760);
					moz_document();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:586:18: webkitKeyframes
					{
					dbg.location(586,18);
					pushFollow(FOLLOW_webkitKeyframes_in_vendorAtRule2764);
					webkitKeyframes();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:586:36: generic_at_rule
					{
					dbg.location(586,36);
					pushFollow(FOLLOW_generic_at_rule_in_vendorAtRule2768);
					generic_at_rule();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(586, 50);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "vendorAtRule");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "vendorAtRule"



	// $ANTLR start "atRuleId"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:588:1: atRuleId : ( IDENT | STRING |{...}? ( cp_variable | sass_interpolation_expression_var ) );
	public final void atRuleId() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "atRuleId");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(588, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:589:2: ( IDENT | STRING |{...}? ( cp_variable | sass_interpolation_expression_var ) )
			int alt145=3;
			try { dbg.enterDecision(145, decisionCanBacktrack[145]);

			switch ( input.LA(1) ) {
			case IDENT:
				{
				int LA145_1 = input.LA(2);
				if ( (LA145_1==DOT) ) {
					alt145=3;
				}
				else if ( (LA145_1==COMMENT||LA145_1==LBRACE||LA145_1==NL||LA145_1==WS) ) {
					alt145=1;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 145, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case STRING:
				{
				alt145=2;
				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case HASH_SYMBOL:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_VAR:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				alt145=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 145, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(145);}

			switch (alt145) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:590:2: IDENT
					{
					dbg.location(590,2);
					match(input,IDENT,FOLLOW_IDENT_in_atRuleId2778); if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:590:10: STRING
					{
					dbg.location(590,10);
					match(input,STRING,FOLLOW_STRING_in_atRuleId2782); if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:590:19: {...}? ( cp_variable | sass_interpolation_expression_var )
					{
					dbg.location(590,19);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "atRuleId", "isCssPreprocessorSource()");
					}dbg.location(590,48);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:590:48: ( cp_variable | sass_interpolation_expression_var )
					int alt144=2;
					try { dbg.enterSubRule(144);
					try { dbg.enterDecision(144, decisionCanBacktrack[144]);

					int LA144_0 = input.LA(1);
					if ( (LA144_0==AT_IDENT||(LA144_0 >= BOTTOMCENTER_SYM && LA144_0 <= BOTTOMRIGHT_SYM)||LA144_0==CHARSET_SYM||LA144_0==COUNTER_STYLE_SYM||LA144_0==FONT_FACE_SYM||LA144_0==IDENT||LA144_0==IMPORT_SYM||(LA144_0 >= LEFTBOTTOM_SYM && LA144_0 <= LEFTTOP_SYM)||LA144_0==MEDIA_SYM||LA144_0==MOZ_DOCUMENT_SYM||LA144_0==NAMESPACE_SYM||LA144_0==PAGE_SYM||(LA144_0 >= RIGHTBOTTOM_SYM && LA144_0 <= RIGHTTOP_SYM)||(LA144_0 >= SASS_AT_ROOT && LA144_0 <= SASS_DEBUG)||(LA144_0 >= SASS_EACH && LA144_0 <= SASS_ELSE)||LA144_0==SASS_EXTEND||(LA144_0 >= SASS_FOR && LA144_0 <= SASS_FUNCTION)||(LA144_0 >= SASS_IF && LA144_0 <= SASS_MIXIN)||(LA144_0 >= SASS_RETURN && LA144_0 <= SASS_WHILE)||(LA144_0 >= TOPCENTER_SYM && LA144_0 <= TOPRIGHT_SYM)||LA144_0==WEBKIT_KEYFRAMES_SYM) ) {
						alt144=1;
					}
					else if ( (LA144_0==HASH_SYMBOL) ) {
						alt144=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 144, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(144);}

					switch (alt144) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:590:50: cp_variable
							{
							dbg.location(590,50);
							pushFollow(FOLLOW_cp_variable_in_atRuleId2790);
							cp_variable();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:590:64: sass_interpolation_expression_var
							{
							dbg.location(590,64);
							pushFollow(FOLLOW_sass_interpolation_expression_var_in_atRuleId2794);
							sass_interpolation_expression_var();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(144);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(591, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "atRuleId");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "atRuleId"



	// $ANTLR start "generic_at_rule"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:593:1: generic_at_rule : AT_IDENT ( ws )? ( atRuleId ( ws )? )? LBRACE syncTo_RBRACE RBRACE ;
	public final void generic_at_rule() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "generic_at_rule");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(593, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:594:5: ( AT_IDENT ( ws )? ( atRuleId ( ws )? )? LBRACE syncTo_RBRACE RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:594:7: AT_IDENT ( ws )? ( atRuleId ( ws )? )? LBRACE syncTo_RBRACE RBRACE
			{
			dbg.location(594,7);
			match(input,AT_IDENT,FOLLOW_AT_IDENT_in_generic_at_rule2810); if (state.failed) return;dbg.location(594,16);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:594:16: ( ws )?
			int alt146=2;
			try { dbg.enterSubRule(146);
			try { dbg.enterDecision(146, decisionCanBacktrack[146]);

			int LA146_0 = input.LA(1);
			if ( (LA146_0==COMMENT||LA146_0==NL||LA146_0==WS) ) {
				alt146=1;
			}
			} finally {dbg.exitDecision(146);}

			switch (alt146) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:594:16: ws
					{
					dbg.location(594,16);
					pushFollow(FOLLOW_ws_in_generic_at_rule2812);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(146);}
			dbg.location(594,20);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:594:20: ( atRuleId ( ws )? )?
			int alt148=2;
			try { dbg.enterSubRule(148);
			try { dbg.enterDecision(148, decisionCanBacktrack[148]);

			int LA148_0 = input.LA(1);
			if ( (LA148_0==AT_IDENT||(LA148_0 >= BOTTOMCENTER_SYM && LA148_0 <= BOTTOMRIGHT_SYM)||LA148_0==CHARSET_SYM||LA148_0==COUNTER_STYLE_SYM||LA148_0==FONT_FACE_SYM||LA148_0==HASH_SYMBOL||LA148_0==IDENT||LA148_0==IMPORT_SYM||(LA148_0 >= LEFTBOTTOM_SYM && LA148_0 <= LEFTTOP_SYM)||LA148_0==MEDIA_SYM||LA148_0==MOZ_DOCUMENT_SYM||LA148_0==NAMESPACE_SYM||LA148_0==PAGE_SYM||(LA148_0 >= RIGHTBOTTOM_SYM && LA148_0 <= RIGHTTOP_SYM)||(LA148_0 >= SASS_AT_ROOT && LA148_0 <= SASS_DEBUG)||(LA148_0 >= SASS_EACH && LA148_0 <= SASS_ELSE)||LA148_0==SASS_EXTEND||(LA148_0 >= SASS_FOR && LA148_0 <= SASS_FUNCTION)||(LA148_0 >= SASS_IF && LA148_0 <= SASS_MIXIN)||(LA148_0 >= SASS_RETURN && LA148_0 <= SASS_WHILE)||LA148_0==STRING||(LA148_0 >= TOPCENTER_SYM && LA148_0 <= TOPRIGHT_SYM)||LA148_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt148=1;
			}
			} finally {dbg.exitDecision(148);}

			switch (alt148) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:594:22: atRuleId ( ws )?
					{
					dbg.location(594,22);
					pushFollow(FOLLOW_atRuleId_in_generic_at_rule2817);
					atRuleId();
					state._fsp--;
					if (state.failed) return;dbg.location(594,31);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:594:31: ( ws )?
					int alt147=2;
					try { dbg.enterSubRule(147);
					try { dbg.enterDecision(147, decisionCanBacktrack[147]);

					int LA147_0 = input.LA(1);
					if ( (LA147_0==COMMENT||LA147_0==NL||LA147_0==WS) ) {
						alt147=1;
					}
					} finally {dbg.exitDecision(147);}

					switch (alt147) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:594:31: ws
							{
							dbg.location(594,31);
							pushFollow(FOLLOW_ws_in_generic_at_rule2819);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(147);}

					}
					break;

			}
			} finally {dbg.exitSubRule(148);}
			dbg.location(595,9);
			match(input,LBRACE,FOLLOW_LBRACE_in_generic_at_rule2833); if (state.failed) return;dbg.location(596,10);
			pushFollow(FOLLOW_syncTo_RBRACE_in_generic_at_rule2844);
			syncTo_RBRACE();
			state._fsp--;
			if (state.failed) return;dbg.location(597,9);
			match(input,RBRACE,FOLLOW_RBRACE_in_generic_at_rule2854); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(598, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "generic_at_rule");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "generic_at_rule"



	// $ANTLR start "moz_document"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:599:1: moz_document : MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE ;
	public final void moz_document() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "moz_document");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(599, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:600:2: ( MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:601:2: MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE
			{
			dbg.location(601,2);
			match(input,MOZ_DOCUMENT_SYM,FOLLOW_MOZ_DOCUMENT_SYM_in_moz_document2865); if (state.failed) return;dbg.location(601,19);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:601:19: ( ws )?
			int alt149=2;
			try { dbg.enterSubRule(149);
			try { dbg.enterDecision(149, decisionCanBacktrack[149]);

			int LA149_0 = input.LA(1);
			if ( (LA149_0==COMMENT||LA149_0==NL||LA149_0==WS) ) {
				alt149=1;
			}
			} finally {dbg.exitDecision(149);}

			switch (alt149) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:601:19: ws
					{
					dbg.location(601,19);
					pushFollow(FOLLOW_ws_in_moz_document2867);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(149);}
			dbg.location(601,23);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:601:23: ( moz_document_function ( ws )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:601:25: moz_document_function ( ws )?
			{
			dbg.location(601,25);
			pushFollow(FOLLOW_moz_document_function_in_moz_document2872);
			moz_document_function();
			state._fsp--;
			if (state.failed) return;dbg.location(601,47);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:601:47: ( ws )?
			int alt150=2;
			try { dbg.enterSubRule(150);
			try { dbg.enterDecision(150, decisionCanBacktrack[150]);

			int LA150_0 = input.LA(1);
			if ( (LA150_0==COMMENT||LA150_0==NL||LA150_0==WS) ) {
				alt150=1;
			}
			} finally {dbg.exitDecision(150);}

			switch (alt150) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:601:47: ws
					{
					dbg.location(601,47);
					pushFollow(FOLLOW_ws_in_moz_document2874);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(150);}

			}
			dbg.location(601,52);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:601:52: ( COMMA ( ws )? moz_document_function ( ws )? )*
			try { dbg.enterSubRule(153);

			loop153:
			while (true) {
				int alt153=2;
				try { dbg.enterDecision(153, decisionCanBacktrack[153]);

				int LA153_0 = input.LA(1);
				if ( (LA153_0==COMMA) ) {
					alt153=1;
				}

				} finally {dbg.exitDecision(153);}

				switch (alt153) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:601:54: COMMA ( ws )? moz_document_function ( ws )?
					{
					dbg.location(601,54);
					match(input,COMMA,FOLLOW_COMMA_in_moz_document2880); if (state.failed) return;dbg.location(601,60);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:601:60: ( ws )?
					int alt151=2;
					try { dbg.enterSubRule(151);
					try { dbg.enterDecision(151, decisionCanBacktrack[151]);

					int LA151_0 = input.LA(1);
					if ( (LA151_0==COMMENT||LA151_0==NL||LA151_0==WS) ) {
						alt151=1;
					}
					} finally {dbg.exitDecision(151);}

					switch (alt151) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:601:60: ws
							{
							dbg.location(601,60);
							pushFollow(FOLLOW_ws_in_moz_document2882);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(151);}
					dbg.location(601,64);
					pushFollow(FOLLOW_moz_document_function_in_moz_document2885);
					moz_document_function();
					state._fsp--;
					if (state.failed) return;dbg.location(601,86);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:601:86: ( ws )?
					int alt152=2;
					try { dbg.enterSubRule(152);
					try { dbg.enterDecision(152, decisionCanBacktrack[152]);

					int LA152_0 = input.LA(1);
					if ( (LA152_0==COMMENT||LA152_0==NL||LA152_0==WS) ) {
						alt152=1;
					}
					} finally {dbg.exitDecision(152);}

					switch (alt152) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:601:86: ws
							{
							dbg.location(601,86);
							pushFollow(FOLLOW_ws_in_moz_document2887);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(152);}

					}
					break;

				default :
					break loop153;
				}
			}
			} finally {dbg.exitSubRule(153);}
			dbg.location(602,2);
			match(input,LBRACE,FOLLOW_LBRACE_in_moz_document2894); if (state.failed) return;dbg.location(602,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:602:9: ( ws )?
			int alt154=2;
			try { dbg.enterSubRule(154);
			try { dbg.enterDecision(154, decisionCanBacktrack[154]);

			int LA154_0 = input.LA(1);
			if ( (LA154_0==COMMENT||LA154_0==NL||LA154_0==WS) ) {
				alt154=1;
			}
			} finally {dbg.exitDecision(154);}

			switch (alt154) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:602:9: ws
					{
					dbg.location(602,9);
					pushFollow(FOLLOW_ws_in_moz_document2896);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(154);}
			dbg.location(603,3);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:603:3: ( body )?
			int alt155=2;
			try { dbg.enterSubRule(155);
			try { dbg.enterDecision(155, decisionCanBacktrack[155]);

			int LA155_0 = input.LA(1);
			if ( ((LA155_0 >= AT_IDENT && LA155_0 <= AT_SIGN)||(LA155_0 >= BOTTOMCENTER_SYM && LA155_0 <= BOTTOMRIGHT_SYM)||(LA155_0 >= CHARSET_SYM && LA155_0 <= COLON)||LA155_0==COUNTER_STYLE_SYM||(LA155_0 >= DCOLON && LA155_0 <= DOT)||LA155_0==FONT_FACE_SYM||(LA155_0 >= GEN && LA155_0 <= GREATER)||(LA155_0 >= HASH && LA155_0 <= HASH_SYMBOL)||LA155_0==IDENT||LA155_0==IMPORT_SYM||LA155_0==LAYER_SYM||(LA155_0 >= LBRACKET && LA155_0 <= LEFTTOP_SYM)||LA155_0==LESS_AND||(LA155_0 >= MEDIA_SYM && LA155_0 <= MOZ_DOCUMENT_SYM)||LA155_0==NAMESPACE_SYM||LA155_0==PAGE_SYM||(LA155_0 >= PIPE && LA155_0 <= PLUS)||(LA155_0 >= RIGHTBOTTOM_SYM && LA155_0 <= RIGHTTOP_SYM)||(LA155_0 >= SASS_AT_ROOT && LA155_0 <= SASS_DEBUG)||(LA155_0 >= SASS_EACH && LA155_0 <= SASS_ELSE)||(LA155_0 >= SASS_EXTEND && LA155_0 <= SASS_FUNCTION)||(LA155_0 >= SASS_IF && LA155_0 <= SASS_MIXIN)||(LA155_0 >= SASS_RETURN && LA155_0 <= SEMI)||LA155_0==STAR||LA155_0==SUPPORTS_SYM||LA155_0==TILDE||(LA155_0 >= TOPCENTER_SYM && LA155_0 <= TOPRIGHT_SYM)||LA155_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt155=1;
			}
			} finally {dbg.exitDecision(155);}

			switch (alt155) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:603:3: body
					{
					dbg.location(603,3);
					pushFollow(FOLLOW_body_in_moz_document2901);
					body();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(155);}
			dbg.location(604,2);
			match(input,RBRACE,FOLLOW_RBRACE_in_moz_document2906); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(605, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "moz_document");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "moz_document"



	// $ANTLR start "moz_document_function"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:607:1: moz_document_function : ( URI | MOZ_URL_PREFIX | MOZ_DOMAIN | MOZ_REGEXP );
	public final void moz_document_function() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "moz_document_function");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(607, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:608:2: ( URI | MOZ_URL_PREFIX | MOZ_DOMAIN | MOZ_REGEXP )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(608,2);
			if ( (input.LA(1) >= MOZ_DOMAIN && input.LA(1) <= MOZ_URL_PREFIX)||input.LA(1)==URI ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(610, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "moz_document_function");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "moz_document_function"



	// $ANTLR start "webkitKeyframes"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:613:1: webkitKeyframes : WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE ;
	public final void webkitKeyframes() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "webkitKeyframes");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(613, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:614:2: ( WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:615:2: WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE
			{
			dbg.location(615,2);
			match(input,WEBKIT_KEYFRAMES_SYM,FOLLOW_WEBKIT_KEYFRAMES_SYM_in_webkitKeyframes2943); if (state.failed) return;dbg.location(615,23);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:615:23: ( ws )?
			int alt156=2;
			try { dbg.enterSubRule(156);
			try { dbg.enterDecision(156, decisionCanBacktrack[156]);

			int LA156_0 = input.LA(1);
			if ( (LA156_0==COMMENT||LA156_0==NL||LA156_0==WS) ) {
				alt156=1;
			}
			} finally {dbg.exitDecision(156);}

			switch (alt156) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:615:23: ws
					{
					dbg.location(615,23);
					pushFollow(FOLLOW_ws_in_webkitKeyframes2945);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(156);}
			dbg.location(615,27);
			pushFollow(FOLLOW_atRuleId_in_webkitKeyframes2948);
			atRuleId();
			state._fsp--;
			if (state.failed) return;dbg.location(615,36);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:615:36: ( ws )?
			int alt157=2;
			try { dbg.enterSubRule(157);
			try { dbg.enterDecision(157, decisionCanBacktrack[157]);

			int LA157_0 = input.LA(1);
			if ( (LA157_0==COMMENT||LA157_0==NL||LA157_0==WS) ) {
				alt157=1;
			}
			} finally {dbg.exitDecision(157);}

			switch (alt157) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:615:36: ws
					{
					dbg.location(615,36);
					pushFollow(FOLLOW_ws_in_webkitKeyframes2950);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(157);}
			dbg.location(616,2);
			match(input,LBRACE,FOLLOW_LBRACE_in_webkitKeyframes2954); if (state.failed) return;dbg.location(616,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:616:9: ( ws )?
			int alt158=2;
			try { dbg.enterSubRule(158);
			try { dbg.enterDecision(158, decisionCanBacktrack[158]);

			int LA158_0 = input.LA(1);
			if ( (LA158_0==COMMENT||LA158_0==NL||LA158_0==WS) ) {
				alt158=1;
			}
			} finally {dbg.exitDecision(158);}

			switch (alt158) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:616:9: ws
					{
					dbg.location(616,9);
					pushFollow(FOLLOW_ws_in_webkitKeyframes2956);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(158);}
			dbg.location(617,3);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:617:3: ( webkitKeyframesBlock ( ws )? )*
			try { dbg.enterSubRule(160);

			loop160:
			while (true) {
				int alt160=2;
				try { dbg.enterDecision(160, decisionCanBacktrack[160]);

				int LA160_0 = input.LA(1);
				if ( (LA160_0==IDENT||LA160_0==PERCENTAGE||LA160_0==SASS_CONTENT) ) {
					alt160=1;
				}

				} finally {dbg.exitDecision(160);}

				switch (alt160) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:617:5: webkitKeyframesBlock ( ws )?
					{
					dbg.location(617,5);
					pushFollow(FOLLOW_webkitKeyframesBlock_in_webkitKeyframes2963);
					webkitKeyframesBlock();
					state._fsp--;
					if (state.failed) return;dbg.location(617,26);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:617:26: ( ws )?
					int alt159=2;
					try { dbg.enterSubRule(159);
					try { dbg.enterDecision(159, decisionCanBacktrack[159]);

					int LA159_0 = input.LA(1);
					if ( (LA159_0==COMMENT||LA159_0==NL||LA159_0==WS) ) {
						alt159=1;
					}
					} finally {dbg.exitDecision(159);}

					switch (alt159) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:617:26: ws
							{
							dbg.location(617,26);
							pushFollow(FOLLOW_ws_in_webkitKeyframes2965);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(159);}

					}
					break;

				default :
					break loop160;
				}
			}
			} finally {dbg.exitSubRule(160);}
			dbg.location(618,2);
			match(input,RBRACE,FOLLOW_RBRACE_in_webkitKeyframes2972); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(619, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "webkitKeyframes");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "webkitKeyframes"



	// $ANTLR start "webkitKeyframesBlock"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:621:1: webkitKeyframesBlock : ( webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE |{...}?{...}? sass_content ( SEMI )? );
	public final void webkitKeyframesBlock() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "webkitKeyframesBlock");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(621, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:622:2: ( webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE |{...}?{...}? sass_content ( SEMI )? )
			int alt165=2;
			try { dbg.enterDecision(165, decisionCanBacktrack[165]);

			int LA165_0 = input.LA(1);
			if ( (LA165_0==IDENT||LA165_0==PERCENTAGE) ) {
				alt165=1;
			}
			else if ( (LA165_0==SASS_CONTENT) ) {
				alt165=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 165, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(165);}

			switch (alt165) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:2: webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
					{
					dbg.location(623,2);
					pushFollow(FOLLOW_webkitKeyframeSelectors_in_webkitKeyframesBlock2984);
					webkitKeyframeSelectors();
					state._fsp--;
					if (state.failed) return;dbg.location(623,26);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:26: ( ws )?
					int alt161=2;
					try { dbg.enterSubRule(161);
					try { dbg.enterDecision(161, decisionCanBacktrack[161]);

					int LA161_0 = input.LA(1);
					if ( (LA161_0==COMMENT||LA161_0==NL||LA161_0==WS) ) {
						alt161=1;
					}
					} finally {dbg.exitDecision(161);}

					switch (alt161) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:26: ws
							{
							dbg.location(623,26);
							pushFollow(FOLLOW_ws_in_webkitKeyframesBlock2986);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(161);}
					dbg.location(624,2);
					match(input,LBRACE,FOLLOW_LBRACE_in_webkitKeyframesBlock2990); if (state.failed) return;dbg.location(624,10);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:624:10: ( ws )?
					int alt162=2;
					try { dbg.enterSubRule(162);
					try { dbg.enterDecision(162, decisionCanBacktrack[162]);

					int LA162_0 = input.LA(1);
					if ( (LA162_0==COMMENT||LA162_0==NL||LA162_0==WS) ) {
						alt162=1;
					}
					} finally {dbg.exitDecision(162);}

					switch (alt162) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:624:10: ws
							{
							dbg.location(624,10);
							pushFollow(FOLLOW_ws_in_webkitKeyframesBlock2993);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(162);}
					dbg.location(624,14);
					pushFollow(FOLLOW_syncToFollow_in_webkitKeyframesBlock2996);
					syncToFollow();
					state._fsp--;
					if (state.failed) return;dbg.location(625,3);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:625:3: ( declarations )?
					int alt163=2;
					try { dbg.enterSubRule(163);
					try { dbg.enterDecision(163, decisionCanBacktrack[163]);

					int LA163_0 = input.LA(1);
					if ( ((LA163_0 >= AT_IDENT && LA163_0 <= AT_SIGN)||(LA163_0 >= BOTTOMCENTER_SYM && LA163_0 <= BOTTOMRIGHT_SYM)||(LA163_0 >= CHARSET_SYM && LA163_0 <= COLON)||LA163_0==COUNTER_STYLE_SYM||(LA163_0 >= DCOLON && LA163_0 <= DOT)||LA163_0==FONT_FACE_SYM||(LA163_0 >= GEN && LA163_0 <= GREATER)||(LA163_0 >= HASH && LA163_0 <= HASH_SYMBOL)||LA163_0==IDENT||LA163_0==IMPORT_SYM||LA163_0==LAYER_SYM||(LA163_0 >= LBRACKET && LA163_0 <= LEFTTOP_SYM)||LA163_0==LESS_AND||(LA163_0 >= MEDIA_SYM && LA163_0 <= MOZ_DOCUMENT_SYM)||LA163_0==NAMESPACE_SYM||LA163_0==PAGE_SYM||(LA163_0 >= PIPE && LA163_0 <= PLUS)||(LA163_0 >= RIGHTBOTTOM_SYM && LA163_0 <= RIGHTTOP_SYM)||(LA163_0 >= SASS_AT_ROOT && LA163_0 <= SASS_DEBUG)||(LA163_0 >= SASS_EACH && LA163_0 <= SASS_ELSE)||(LA163_0 >= SASS_ERROR && LA163_0 <= SASS_FUNCTION)||(LA163_0 >= SASS_IF && LA163_0 <= SASS_MIXIN)||(LA163_0 >= SASS_RETURN && LA163_0 <= SEMI)||LA163_0==STAR||LA163_0==SUPPORTS_SYM||LA163_0==TILDE||(LA163_0 >= TOPCENTER_SYM && LA163_0 <= TOPRIGHT_SYM)||LA163_0==VARIABLE||LA163_0==WEBKIT_KEYFRAMES_SYM) ) {
						alt163=1;
					}
					} finally {dbg.exitDecision(163);}

					switch (alt163) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:625:3: declarations
							{
							dbg.location(625,3);
							pushFollow(FOLLOW_declarations_in_webkitKeyframesBlock3000);
							declarations();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(163);}
					dbg.location(626,2);
					match(input,RBRACE,FOLLOW_RBRACE_in_webkitKeyframesBlock3004); if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:11: {...}?{...}? sass_content ( SEMI )?
					{
					dbg.location(627,11);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "webkitKeyframesBlock", "isScssSource()");
					}dbg.location(627,30);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "webkitKeyframesBlock", "isScssSource()");
					}dbg.location(627,48);
					pushFollow(FOLLOW_sass_content_in_webkitKeyframesBlock3021);
					sass_content();
					state._fsp--;
					if (state.failed) return;dbg.location(627,61);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:61: ( SEMI )?
					int alt164=2;
					try { dbg.enterSubRule(164);
					try { dbg.enterDecision(164, decisionCanBacktrack[164]);

					int LA164_0 = input.LA(1);
					if ( (LA164_0==SEMI) ) {
						alt164=1;
					}
					} finally {dbg.exitDecision(164);}

					switch (alt164) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:61: SEMI
							{
							dbg.location(627,61);
							match(input,SEMI,FOLLOW_SEMI_in_webkitKeyframesBlock3023); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(164);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(628, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "webkitKeyframesBlock");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "webkitKeyframesBlock"



	// $ANTLR start "webkitKeyframeSelectors"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:630:1: webkitKeyframeSelectors : ({...}? IDENT |{...}? IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ({...}? IDENT |{...}? IDENT | PERCENTAGE ) )* ;
	public final void webkitKeyframeSelectors() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "webkitKeyframeSelectors");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(630, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:631:2: ( ({...}? IDENT |{...}? IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ({...}? IDENT |{...}? IDENT | PERCENTAGE ) )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:632:2: ({...}? IDENT |{...}? IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ({...}? IDENT |{...}? IDENT | PERCENTAGE ) )*
			{
			dbg.location(632,2);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:632:2: ({...}? IDENT |{...}? IDENT | PERCENTAGE )
			int alt166=3;
			try { dbg.enterSubRule(166);
			try { dbg.enterDecision(166, decisionCanBacktrack[166]);

			int LA166_0 = input.LA(1);
			if ( (LA166_0==IDENT) ) {
				int LA166_1 = input.LA(2);
				if ( (evalPredicate(tokenNameEquals("from"),"tokenNameEquals(\"from\")")) ) {
					alt166=1;
				}
				else if ( (evalPredicate(tokenNameEquals("to"),"tokenNameEquals(\"to\")")) ) {
					alt166=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 166, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA166_0==PERCENTAGE) ) {
				alt166=3;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 166, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(166);}

			switch (alt166) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:632:4: {...}? IDENT
					{
					dbg.location(632,4);
					if ( !(evalPredicate(tokenNameEquals("from"),"tokenNameEquals(\"from\")")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "webkitKeyframeSelectors", "tokenNameEquals(\"from\")");
					}dbg.location(632,31);
					match(input,IDENT,FOLLOW_IDENT_in_webkitKeyframeSelectors3040); if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:632:39: {...}? IDENT
					{
					dbg.location(632,39);
					if ( !(evalPredicate(tokenNameEquals("to"),"tokenNameEquals(\"to\")")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "webkitKeyframeSelectors", "tokenNameEquals(\"to\")");
					}dbg.location(632,64);
					match(input,IDENT,FOLLOW_IDENT_in_webkitKeyframeSelectors3046); if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:632:72: PERCENTAGE
					{
					dbg.location(632,72);
					match(input,PERCENTAGE,FOLLOW_PERCENTAGE_in_webkitKeyframeSelectors3050); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(166);}
			dbg.location(632,85);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:632:85: ( ( ws )? COMMA ( ws )? ({...}? IDENT |{...}? IDENT | PERCENTAGE ) )*
			try { dbg.enterSubRule(170);

			loop170:
			while (true) {
				int alt170=2;
				try { dbg.enterDecision(170, decisionCanBacktrack[170]);

				try {
					isCyclicDecision = true;
					alt170 = dfa170.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(170);}

				switch (alt170) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:632:87: ( ws )? COMMA ( ws )? ({...}? IDENT |{...}? IDENT | PERCENTAGE )
					{
					dbg.location(632,87);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:632:87: ( ws )?
					int alt167=2;
					try { dbg.enterSubRule(167);
					try { dbg.enterDecision(167, decisionCanBacktrack[167]);

					int LA167_0 = input.LA(1);
					if ( (LA167_0==COMMENT||LA167_0==NL||LA167_0==WS) ) {
						alt167=1;
					}
					} finally {dbg.exitDecision(167);}

					switch (alt167) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:632:87: ws
							{
							dbg.location(632,87);
							pushFollow(FOLLOW_ws_in_webkitKeyframeSelectors3056);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(167);}
					dbg.location(632,91);
					match(input,COMMA,FOLLOW_COMMA_in_webkitKeyframeSelectors3059); if (state.failed) return;dbg.location(632,97);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:632:97: ( ws )?
					int alt168=2;
					try { dbg.enterSubRule(168);
					try { dbg.enterDecision(168, decisionCanBacktrack[168]);

					int LA168_0 = input.LA(1);
					if ( (LA168_0==COMMENT||LA168_0==NL||LA168_0==WS) ) {
						alt168=1;
					}
					} finally {dbg.exitDecision(168);}

					switch (alt168) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:632:97: ws
							{
							dbg.location(632,97);
							pushFollow(FOLLOW_ws_in_webkitKeyframeSelectors3061);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(168);}
					dbg.location(632,101);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:632:101: ({...}? IDENT |{...}? IDENT | PERCENTAGE )
					int alt169=3;
					try { dbg.enterSubRule(169);
					try { dbg.enterDecision(169, decisionCanBacktrack[169]);

					int LA169_0 = input.LA(1);
					if ( (LA169_0==IDENT) ) {
						int LA169_1 = input.LA(2);
						if ( (evalPredicate(tokenNameEquals("from"),"tokenNameEquals(\"from\")")) ) {
							alt169=1;
						}
						else if ( (evalPredicate(tokenNameEquals("to"),"tokenNameEquals(\"to\")")) ) {
							alt169=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 169, 1, input);
								dbg.recognitionException(nvae);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}
					else if ( (LA169_0==PERCENTAGE) ) {
						alt169=3;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 169, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(169);}

					switch (alt169) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:632:103: {...}? IDENT
							{
							dbg.location(632,103);
							if ( !(evalPredicate(tokenNameEquals("from"),"tokenNameEquals(\"from\")")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "webkitKeyframeSelectors", "tokenNameEquals(\"from\")");
							}dbg.location(632,130);
							match(input,IDENT,FOLLOW_IDENT_in_webkitKeyframeSelectors3068); if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:632:138: {...}? IDENT
							{
							dbg.location(632,138);
							if ( !(evalPredicate(tokenNameEquals("to"),"tokenNameEquals(\"to\")")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "webkitKeyframeSelectors", "tokenNameEquals(\"to\")");
							}dbg.location(632,163);
							match(input,IDENT,FOLLOW_IDENT_in_webkitKeyframeSelectors3074); if (state.failed) return;
							}
							break;
						case 3 :
							dbg.enterAlt(3);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:632:171: PERCENTAGE
							{
							dbg.location(632,171);
							match(input,PERCENTAGE,FOLLOW_PERCENTAGE_in_webkitKeyframeSelectors3078); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(169);}

					}
					break;

				default :
					break loop170;
				}
			}
			} finally {dbg.exitSubRule(170);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(633, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "webkitKeyframeSelectors");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "webkitKeyframeSelectors"



	// $ANTLR start "page"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:1: page : PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ( ws )? ({...}? ( SEMI ( ws )? ) | ( SEMI ( ws )? )? ) ( propertyDeclaration | margin ) )* ( SEMI )? ( ws )? RBRACE ;
	public final void page() throws RecognitionException {

		    boolean semiRequired = false;

		try { dbg.enterRule(getGrammarFileName(), "page");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(635, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:639:5: ( PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ( ws )? ({...}? ( SEMI ( ws )? ) | ( SEMI ( ws )? )? ) ( propertyDeclaration | margin ) )* ( SEMI )? ( ws )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:639:7: PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ( ws )? ({...}? ( SEMI ( ws )? ) | ( SEMI ( ws )? )? ) ( propertyDeclaration | margin ) )* ( SEMI )? ( ws )? RBRACE
			{
			dbg.location(639,7);
			match(input,PAGE_SYM,FOLLOW_PAGE_SYM_in_page3102); if (state.failed) return;dbg.location(639,16);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:639:16: ( ws )?
			int alt171=2;
			try { dbg.enterSubRule(171);
			try { dbg.enterDecision(171, decisionCanBacktrack[171]);

			int LA171_0 = input.LA(1);
			if ( (LA171_0==COMMENT||LA171_0==NL||LA171_0==WS) ) {
				alt171=1;
			}
			} finally {dbg.exitDecision(171);}

			switch (alt171) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:639:16: ws
					{
					dbg.location(639,16);
					pushFollow(FOLLOW_ws_in_page3104);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(171);}
			dbg.location(639,20);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:639:20: ( IDENT ( ws )? )?
			int alt173=2;
			try { dbg.enterSubRule(173);
			try { dbg.enterDecision(173, decisionCanBacktrack[173]);

			int LA173_0 = input.LA(1);
			if ( (LA173_0==IDENT) ) {
				alt173=1;
			}
			} finally {dbg.exitDecision(173);}

			switch (alt173) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:639:22: IDENT ( ws )?
					{
					dbg.location(639,22);
					match(input,IDENT,FOLLOW_IDENT_in_page3109); if (state.failed) return;dbg.location(639,28);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:639:28: ( ws )?
					int alt172=2;
					try { dbg.enterSubRule(172);
					try { dbg.enterDecision(172, decisionCanBacktrack[172]);

					int LA172_0 = input.LA(1);
					if ( (LA172_0==COMMENT||LA172_0==NL||LA172_0==WS) ) {
						alt172=1;
					}
					} finally {dbg.exitDecision(172);}

					switch (alt172) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:639:28: ws
							{
							dbg.location(639,28);
							pushFollow(FOLLOW_ws_in_page3111);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(172);}

					}
					break;

			}
			} finally {dbg.exitSubRule(173);}
			dbg.location(639,35);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:639:35: ( pseudoPage ( ws )? )?
			int alt175=2;
			try { dbg.enterSubRule(175);
			try { dbg.enterDecision(175, decisionCanBacktrack[175]);

			int LA175_0 = input.LA(1);
			if ( (LA175_0==COLON) ) {
				alt175=1;
			}
			} finally {dbg.exitDecision(175);}

			switch (alt175) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:639:36: pseudoPage ( ws )?
					{
					dbg.location(639,36);
					pushFollow(FOLLOW_pseudoPage_in_page3118);
					pseudoPage();
					state._fsp--;
					if (state.failed) return;dbg.location(639,47);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:639:47: ( ws )?
					int alt174=2;
					try { dbg.enterSubRule(174);
					try { dbg.enterDecision(174, decisionCanBacktrack[174]);

					int LA174_0 = input.LA(1);
					if ( (LA174_0==COMMENT||LA174_0==NL||LA174_0==WS) ) {
						alt174=1;
					}
					} finally {dbg.exitDecision(174);}

					switch (alt174) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:639:47: ws
							{
							dbg.location(639,47);
							pushFollow(FOLLOW_ws_in_page3120);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(174);}

					}
					break;

			}
			} finally {dbg.exitSubRule(175);}
			dbg.location(640,9);
			match(input,LBRACE,FOLLOW_LBRACE_in_page3133); if (state.failed) return;dbg.location(643,13);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:13: ( ( ws )? ({...}? ( SEMI ( ws )? ) | ( SEMI ( ws )? )? ) ( propertyDeclaration | margin ) )*
			try { dbg.enterSubRule(182);

			loop182:
			while (true) {
				int alt182=2;
				try { dbg.enterDecision(182, decisionCanBacktrack[182]);

				try {
					isCyclicDecision = true;
					alt182 = dfa182.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(182);}

				switch (alt182) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:15: ( ws )? ({...}? ( SEMI ( ws )? ) | ( SEMI ( ws )? )? ) ( propertyDeclaration | margin )
					{
					dbg.location(643,15);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:15: ( ws )?
					int alt176=2;
					try { dbg.enterSubRule(176);
					try { dbg.enterDecision(176, decisionCanBacktrack[176]);

					int LA176_0 = input.LA(1);
					if ( (LA176_0==COMMENT||LA176_0==NL||LA176_0==WS) ) {
						alt176=1;
					}
					} finally {dbg.exitDecision(176);}

					switch (alt176) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:15: ws
							{
							dbg.location(643,15);
							pushFollow(FOLLOW_ws_in_page3175);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(176);}
					dbg.location(643,19);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:19: ({...}? ( SEMI ( ws )? ) | ( SEMI ( ws )? )? )
					int alt180=2;
					try { dbg.enterSubRule(180);
					try { dbg.enterDecision(180, decisionCanBacktrack[180]);

					int LA180_0 = input.LA(1);
					if ( (LA180_0==SEMI) ) {
						int LA180_1 = input.LA(2);
						if ( (evalPredicate(semiRequired,"semiRequired")) ) {
							alt180=1;
						}
						else if ( (true) ) {
							alt180=2;
						}

					}
					else if ( ((LA180_0 >= AT_IDENT && LA180_0 <= AT_SIGN)||(LA180_0 >= BOTTOMCENTER_SYM && LA180_0 <= BOTTOMRIGHT_SYM)||LA180_0==CHARSET_SYM||LA180_0==COUNTER_STYLE_SYM||LA180_0==FONT_FACE_SYM||LA180_0==GEN||LA180_0==HASH_SYMBOL||LA180_0==IDENT||LA180_0==IMPORT_SYM||(LA180_0 >= LEFTBOTTOM_SYM && LA180_0 <= LEFTTOP_SYM)||(LA180_0 >= MEDIA_SYM && LA180_0 <= MOZ_DOCUMENT_SYM)||LA180_0==NAMESPACE_SYM||LA180_0==PAGE_SYM||(LA180_0 >= RIGHTBOTTOM_SYM && LA180_0 <= RIGHTTOP_SYM)||(LA180_0 >= SASS_AT_ROOT && LA180_0 <= SASS_DEBUG)||(LA180_0 >= SASS_EACH && LA180_0 <= SASS_ELSE)||LA180_0==SASS_EXTEND||(LA180_0 >= SASS_FOR && LA180_0 <= SASS_FUNCTION)||(LA180_0 >= SASS_IF && LA180_0 <= SASS_MIXIN)||(LA180_0 >= SASS_RETURN && LA180_0 <= SASS_WHILE)||LA180_0==STAR||(LA180_0 >= TOPCENTER_SYM && LA180_0 <= TOPRIGHT_SYM)||LA180_0==VARIABLE||LA180_0==WEBKIT_KEYFRAMES_SYM) ) {
						alt180=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 180, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(180);}

					switch (alt180) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:20: {...}? ( SEMI ( ws )? )
							{
							dbg.location(643,20);
							if ( !(evalPredicate(semiRequired,"semiRequired")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "page", "semiRequired");
							}dbg.location(643,36);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:36: ( SEMI ( ws )? )
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:37: SEMI ( ws )?
							{
							dbg.location(643,37);
							match(input,SEMI,FOLLOW_SEMI_in_page3182); if (state.failed) return;dbg.location(643,42);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:42: ( ws )?
							int alt177=2;
							try { dbg.enterSubRule(177);
							try { dbg.enterDecision(177, decisionCanBacktrack[177]);

							int LA177_0 = input.LA(1);
							if ( (LA177_0==COMMENT||LA177_0==NL||LA177_0==WS) ) {
								alt177=1;
							}
							} finally {dbg.exitDecision(177);}

							switch (alt177) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:42: ws
									{
									dbg.location(643,42);
									pushFollow(FOLLOW_ws_in_page3184);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(177);}

							}

							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:49: ( SEMI ( ws )? )?
							{
							dbg.location(643,49);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:49: ( SEMI ( ws )? )?
							int alt179=2;
							try { dbg.enterSubRule(179);
							try { dbg.enterDecision(179, decisionCanBacktrack[179]);

							int LA179_0 = input.LA(1);
							if ( (LA179_0==SEMI) ) {
								alt179=1;
							}
							} finally {dbg.exitDecision(179);}

							switch (alt179) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:50: SEMI ( ws )?
									{
									dbg.location(643,50);
									match(input,SEMI,FOLLOW_SEMI_in_page3191); if (state.failed) return;dbg.location(643,55);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:55: ( ws )?
									int alt178=2;
									try { dbg.enterSubRule(178);
									try { dbg.enterDecision(178, decisionCanBacktrack[178]);

									int LA178_0 = input.LA(1);
									if ( (LA178_0==COMMENT||LA178_0==NL||LA178_0==WS) ) {
										alt178=1;
									}
									} finally {dbg.exitDecision(178);}

									switch (alt178) {
										case 1 :
											dbg.enterAlt(1);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:55: ws
											{
											dbg.location(643,55);
											pushFollow(FOLLOW_ws_in_page3193);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(178);}

									}
									break;

							}
							} finally {dbg.exitSubRule(179);}

							}
							break;

					}
					} finally {dbg.exitSubRule(180);}
					dbg.location(643,62);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:62: ( propertyDeclaration | margin )
					int alt181=2;
					try { dbg.enterSubRule(181);
					try { dbg.enterDecision(181, decisionCanBacktrack[181]);

					try {
						isCyclicDecision = true;
						alt181 = dfa181.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(181);}

					switch (alt181) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:63: propertyDeclaration
							{
							dbg.location(643,63);
							pushFollow(FOLLOW_propertyDeclaration_in_page3200);
							propertyDeclaration();
							state._fsp--;
							if (state.failed) return;dbg.location(643,82);
							if ( state.backtracking==0 ) {semiRequired=true;}
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:103: margin
							{
							dbg.location(643,103);
							pushFollow(FOLLOW_margin_in_page3203);
							margin();
							state._fsp--;
							if (state.failed) return;dbg.location(643,109);
							if ( state.backtracking==0 ) {semiRequired=false;}
							}
							break;

					}
					} finally {dbg.exitSubRule(181);}

					}
					break;

				default :
					break loop182;
				}
			}
			} finally {dbg.exitSubRule(182);}
			dbg.location(644,13);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:644:13: ( SEMI )?
			int alt183=2;
			try { dbg.enterSubRule(183);
			try { dbg.enterDecision(183, decisionCanBacktrack[183]);

			int LA183_0 = input.LA(1);
			if ( (LA183_0==SEMI) ) {
				alt183=1;
			}
			} finally {dbg.exitDecision(183);}

			switch (alt183) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:644:13: SEMI
					{
					dbg.location(644,13);
					match(input,SEMI,FOLLOW_SEMI_in_page3221); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(183);}
			dbg.location(645,13);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:645:13: ( ws )?
			int alt184=2;
			try { dbg.enterSubRule(184);
			try { dbg.enterDecision(184, decisionCanBacktrack[184]);

			int LA184_0 = input.LA(1);
			if ( (LA184_0==COMMENT||LA184_0==NL||LA184_0==WS) ) {
				alt184=1;
			}
			} finally {dbg.exitDecision(184);}

			switch (alt184) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:645:13: ws
					{
					dbg.location(645,13);
					pushFollow(FOLLOW_ws_in_page3236);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(184);}
			dbg.location(646,9);
			match(input,RBRACE,FOLLOW_RBRACE_in_page3247); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(647, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "page");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "page"



	// $ANTLR start "counterStyle"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:649:1: counterStyle : COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE ;
	public final void counterStyle() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "counterStyle");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(649, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:650:5: ( COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:650:7: COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE
			{
			dbg.location(650,7);
			match(input,COUNTER_STYLE_SYM,FOLLOW_COUNTER_STYLE_SYM_in_counterStyle3264); if (state.failed) return;dbg.location(650,25);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:650:25: ( ws )?
			int alt185=2;
			try { dbg.enterSubRule(185);
			try { dbg.enterDecision(185, decisionCanBacktrack[185]);

			int LA185_0 = input.LA(1);
			if ( (LA185_0==COMMENT||LA185_0==NL||LA185_0==WS) ) {
				alt185=1;
			}
			} finally {dbg.exitDecision(185);}

			switch (alt185) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:650:25: ws
					{
					dbg.location(650,25);
					pushFollow(FOLLOW_ws_in_counterStyle3266);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(185);}
			dbg.location(650,29);
			match(input,IDENT,FOLLOW_IDENT_in_counterStyle3269); if (state.failed) return;dbg.location(650,35);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:650:35: ( ws )?
			int alt186=2;
			try { dbg.enterSubRule(186);
			try { dbg.enterDecision(186, decisionCanBacktrack[186]);

			int LA186_0 = input.LA(1);
			if ( (LA186_0==COMMENT||LA186_0==NL||LA186_0==WS) ) {
				alt186=1;
			}
			} finally {dbg.exitDecision(186);}

			switch (alt186) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:650:35: ws
					{
					dbg.location(650,35);
					pushFollow(FOLLOW_ws_in_counterStyle3271);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(186);}
			dbg.location(651,9);
			match(input,LBRACE,FOLLOW_LBRACE_in_counterStyle3282); if (state.failed) return;dbg.location(651,16);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:651:16: ( ws )?
			int alt187=2;
			try { dbg.enterSubRule(187);
			try { dbg.enterDecision(187, decisionCanBacktrack[187]);

			int LA187_0 = input.LA(1);
			if ( (LA187_0==COMMENT||LA187_0==NL||LA187_0==WS) ) {
				alt187=1;
			}
			} finally {dbg.exitDecision(187);}

			switch (alt187) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:651:16: ws
					{
					dbg.location(651,16);
					pushFollow(FOLLOW_ws_in_counterStyle3284);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(187);}
			dbg.location(651,20);
			pushFollow(FOLLOW_syncToDeclarationsRule_in_counterStyle3287);
			syncToDeclarationsRule();
			state._fsp--;
			if (state.failed) return;dbg.location(652,3);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:652:3: ( declarations )?
			int alt188=2;
			try { dbg.enterSubRule(188);
			try { dbg.enterDecision(188, decisionCanBacktrack[188]);

			int LA188_0 = input.LA(1);
			if ( ((LA188_0 >= AT_IDENT && LA188_0 <= AT_SIGN)||(LA188_0 >= BOTTOMCENTER_SYM && LA188_0 <= BOTTOMRIGHT_SYM)||(LA188_0 >= CHARSET_SYM && LA188_0 <= COLON)||LA188_0==COUNTER_STYLE_SYM||(LA188_0 >= DCOLON && LA188_0 <= DOT)||LA188_0==FONT_FACE_SYM||(LA188_0 >= GEN && LA188_0 <= GREATER)||(LA188_0 >= HASH && LA188_0 <= HASH_SYMBOL)||LA188_0==IDENT||LA188_0==IMPORT_SYM||LA188_0==LAYER_SYM||(LA188_0 >= LBRACKET && LA188_0 <= LEFTTOP_SYM)||LA188_0==LESS_AND||(LA188_0 >= MEDIA_SYM && LA188_0 <= MOZ_DOCUMENT_SYM)||LA188_0==NAMESPACE_SYM||LA188_0==PAGE_SYM||(LA188_0 >= PIPE && LA188_0 <= PLUS)||(LA188_0 >= RIGHTBOTTOM_SYM && LA188_0 <= RIGHTTOP_SYM)||(LA188_0 >= SASS_AT_ROOT && LA188_0 <= SASS_DEBUG)||(LA188_0 >= SASS_EACH && LA188_0 <= SASS_ELSE)||(LA188_0 >= SASS_ERROR && LA188_0 <= SASS_FUNCTION)||(LA188_0 >= SASS_IF && LA188_0 <= SASS_MIXIN)||(LA188_0 >= SASS_RETURN && LA188_0 <= SEMI)||LA188_0==STAR||LA188_0==SUPPORTS_SYM||LA188_0==TILDE||(LA188_0 >= TOPCENTER_SYM && LA188_0 <= TOPRIGHT_SYM)||LA188_0==VARIABLE||LA188_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt188=1;
			}
			} finally {dbg.exitDecision(188);}

			switch (alt188) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:652:3: declarations
					{
					dbg.location(652,3);
					pushFollow(FOLLOW_declarations_in_counterStyle3291);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(188);}
			dbg.location(653,9);
			match(input,RBRACE,FOLLOW_RBRACE_in_counterStyle3302); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(654, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "counterStyle");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "counterStyle"



	// $ANTLR start "fontFace"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:656:1: fontFace : FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE ;
	public final void fontFace() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "fontFace");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(656, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:657:5: ( FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:657:7: FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE
			{
			dbg.location(657,7);
			match(input,FONT_FACE_SYM,FOLLOW_FONT_FACE_SYM_in_fontFace3319); if (state.failed) return;dbg.location(657,21);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:657:21: ( ws )?
			int alt189=2;
			try { dbg.enterSubRule(189);
			try { dbg.enterDecision(189, decisionCanBacktrack[189]);

			int LA189_0 = input.LA(1);
			if ( (LA189_0==COMMENT||LA189_0==NL||LA189_0==WS) ) {
				alt189=1;
			}
			} finally {dbg.exitDecision(189);}

			switch (alt189) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:657:21: ws
					{
					dbg.location(657,21);
					pushFollow(FOLLOW_ws_in_fontFace3321);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(189);}
			dbg.location(658,9);
			match(input,LBRACE,FOLLOW_LBRACE_in_fontFace3332); if (state.failed) return;dbg.location(658,16);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:658:16: ( ws )?
			int alt190=2;
			try { dbg.enterSubRule(190);
			try { dbg.enterDecision(190, decisionCanBacktrack[190]);

			int LA190_0 = input.LA(1);
			if ( (LA190_0==COMMENT||LA190_0==NL||LA190_0==WS) ) {
				alt190=1;
			}
			} finally {dbg.exitDecision(190);}

			switch (alt190) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:658:16: ws
					{
					dbg.location(658,16);
					pushFollow(FOLLOW_ws_in_fontFace3334);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(190);}
			dbg.location(658,20);
			pushFollow(FOLLOW_syncToDeclarationsRule_in_fontFace3337);
			syncToDeclarationsRule();
			state._fsp--;
			if (state.failed) return;dbg.location(659,3);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:659:3: ( declarations )?
			int alt191=2;
			try { dbg.enterSubRule(191);
			try { dbg.enterDecision(191, decisionCanBacktrack[191]);

			int LA191_0 = input.LA(1);
			if ( ((LA191_0 >= AT_IDENT && LA191_0 <= AT_SIGN)||(LA191_0 >= BOTTOMCENTER_SYM && LA191_0 <= BOTTOMRIGHT_SYM)||(LA191_0 >= CHARSET_SYM && LA191_0 <= COLON)||LA191_0==COUNTER_STYLE_SYM||(LA191_0 >= DCOLON && LA191_0 <= DOT)||LA191_0==FONT_FACE_SYM||(LA191_0 >= GEN && LA191_0 <= GREATER)||(LA191_0 >= HASH && LA191_0 <= HASH_SYMBOL)||LA191_0==IDENT||LA191_0==IMPORT_SYM||LA191_0==LAYER_SYM||(LA191_0 >= LBRACKET && LA191_0 <= LEFTTOP_SYM)||LA191_0==LESS_AND||(LA191_0 >= MEDIA_SYM && LA191_0 <= MOZ_DOCUMENT_SYM)||LA191_0==NAMESPACE_SYM||LA191_0==PAGE_SYM||(LA191_0 >= PIPE && LA191_0 <= PLUS)||(LA191_0 >= RIGHTBOTTOM_SYM && LA191_0 <= RIGHTTOP_SYM)||(LA191_0 >= SASS_AT_ROOT && LA191_0 <= SASS_DEBUG)||(LA191_0 >= SASS_EACH && LA191_0 <= SASS_ELSE)||(LA191_0 >= SASS_ERROR && LA191_0 <= SASS_FUNCTION)||(LA191_0 >= SASS_IF && LA191_0 <= SASS_MIXIN)||(LA191_0 >= SASS_RETURN && LA191_0 <= SEMI)||LA191_0==STAR||LA191_0==SUPPORTS_SYM||LA191_0==TILDE||(LA191_0 >= TOPCENTER_SYM && LA191_0 <= TOPRIGHT_SYM)||LA191_0==VARIABLE||LA191_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt191=1;
			}
			} finally {dbg.exitDecision(191);}

			switch (alt191) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:659:3: declarations
					{
					dbg.location(659,3);
					pushFollow(FOLLOW_declarations_in_fontFace3341);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(191);}
			dbg.location(660,9);
			match(input,RBRACE,FOLLOW_RBRACE_in_fontFace3352); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(661, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "fontFace");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "fontFace"



	// $ANTLR start "margin"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:663:1: margin : margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE ;
	public final void margin() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "margin");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(663, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:664:2: ( margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:664:4: margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE
			{
			dbg.location(664,4);
			pushFollow(FOLLOW_margin_sym_in_margin3366);
			margin_sym();
			state._fsp--;
			if (state.failed) return;dbg.location(664,15);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:664:15: ( ws )?
			int alt192=2;
			try { dbg.enterSubRule(192);
			try { dbg.enterDecision(192, decisionCanBacktrack[192]);

			int LA192_0 = input.LA(1);
			if ( (LA192_0==COMMENT||LA192_0==NL||LA192_0==WS) ) {
				alt192=1;
			}
			} finally {dbg.exitDecision(192);}

			switch (alt192) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:664:15: ws
					{
					dbg.location(664,15);
					pushFollow(FOLLOW_ws_in_margin3368);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(192);}
			dbg.location(664,19);
			match(input,LBRACE,FOLLOW_LBRACE_in_margin3371); if (state.failed) return;dbg.location(664,26);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:664:26: ( ws )?
			int alt193=2;
			try { dbg.enterSubRule(193);
			try { dbg.enterDecision(193, decisionCanBacktrack[193]);

			int LA193_0 = input.LA(1);
			if ( (LA193_0==COMMENT||LA193_0==NL||LA193_0==WS) ) {
				alt193=1;
			}
			} finally {dbg.exitDecision(193);}

			switch (alt193) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:664:26: ws
					{
					dbg.location(664,26);
					pushFollow(FOLLOW_ws_in_margin3373);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(193);}
			dbg.location(664,30);
			pushFollow(FOLLOW_syncToDeclarationsRule_in_margin3376);
			syncToDeclarationsRule();
			state._fsp--;
			if (state.failed) return;dbg.location(664,53);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:664:53: ( declarations )?
			int alt194=2;
			try { dbg.enterSubRule(194);
			try { dbg.enterDecision(194, decisionCanBacktrack[194]);

			int LA194_0 = input.LA(1);
			if ( ((LA194_0 >= AT_IDENT && LA194_0 <= AT_SIGN)||(LA194_0 >= BOTTOMCENTER_SYM && LA194_0 <= BOTTOMRIGHT_SYM)||(LA194_0 >= CHARSET_SYM && LA194_0 <= COLON)||LA194_0==COUNTER_STYLE_SYM||(LA194_0 >= DCOLON && LA194_0 <= DOT)||LA194_0==FONT_FACE_SYM||(LA194_0 >= GEN && LA194_0 <= GREATER)||(LA194_0 >= HASH && LA194_0 <= HASH_SYMBOL)||LA194_0==IDENT||LA194_0==IMPORT_SYM||LA194_0==LAYER_SYM||(LA194_0 >= LBRACKET && LA194_0 <= LEFTTOP_SYM)||LA194_0==LESS_AND||(LA194_0 >= MEDIA_SYM && LA194_0 <= MOZ_DOCUMENT_SYM)||LA194_0==NAMESPACE_SYM||LA194_0==PAGE_SYM||(LA194_0 >= PIPE && LA194_0 <= PLUS)||(LA194_0 >= RIGHTBOTTOM_SYM && LA194_0 <= RIGHTTOP_SYM)||(LA194_0 >= SASS_AT_ROOT && LA194_0 <= SASS_DEBUG)||(LA194_0 >= SASS_EACH && LA194_0 <= SASS_ELSE)||(LA194_0 >= SASS_ERROR && LA194_0 <= SASS_FUNCTION)||(LA194_0 >= SASS_IF && LA194_0 <= SASS_MIXIN)||(LA194_0 >= SASS_RETURN && LA194_0 <= SEMI)||LA194_0==STAR||LA194_0==SUPPORTS_SYM||LA194_0==TILDE||(LA194_0 >= TOPCENTER_SYM && LA194_0 <= TOPRIGHT_SYM)||LA194_0==VARIABLE||LA194_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt194=1;
			}
			} finally {dbg.exitDecision(194);}

			switch (alt194) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:664:53: declarations
					{
					dbg.location(664,53);
					pushFollow(FOLLOW_declarations_in_margin3378);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(194);}
			dbg.location(664,67);
			match(input,RBRACE,FOLLOW_RBRACE_in_margin3381); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(665, 7);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "margin");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "margin"



	// $ANTLR start "margin_sym"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:1: margin_sym : ( TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM );
	public final void margin_sym() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "margin_sym");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(667, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:2: ( TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(668,2);
			if ( (input.LA(1) >= BOTTOMCENTER_SYM && input.LA(1) <= BOTTOMRIGHT_SYM)||(input.LA(1) >= LEFTBOTTOM_SYM && input.LA(1) <= LEFTTOP_SYM)||(input.LA(1) >= RIGHTBOTTOM_SYM && input.LA(1) <= RIGHTTOP_SYM)||(input.LA(1) >= TOPCENTER_SYM && input.LA(1) <= TOPRIGHT_SYM) ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(685, 7);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "margin_sym");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "margin_sym"



	// $ANTLR start "pseudoPage"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:687:1: pseudoPage : COLON IDENT ;
	public final void pseudoPage() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "pseudoPage");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(687, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:688:5: ( COLON IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:688:7: COLON IDENT
			{
			dbg.location(688,7);
			match(input,COLON,FOLLOW_COLON_in_pseudoPage3590); if (state.failed) return;dbg.location(688,13);
			match(input,IDENT,FOLLOW_IDENT_in_pseudoPage3592); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(689, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "pseudoPage");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "pseudoPage"



	// $ANTLR start "operator"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:691:1: operator : ( SOLIDUS | COMMA );
	public final void operator() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "operator");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(691, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:692:5: ( SOLIDUS | COMMA )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(692,5);
			if ( input.LA(1)==COMMA||input.LA(1)==SOLIDUS ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(694, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "operator");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "operator"



	// $ANTLR start "unaryOperator"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:1: unaryOperator : ( MINUS | PLUS );
	public final void unaryOperator() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "unaryOperator");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(696, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:697:5: ( MINUS | PLUS )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(697,5);
			if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(699, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "unaryOperator");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "unaryOperator"



	// $ANTLR start "property"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:701:1: property : ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp | VARIABLE | IDENT | GEN |{...}? cp_variable );
	public final void property() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "property");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(701, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:702:5: ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp | VARIABLE | IDENT | GEN |{...}? cp_variable )
			int alt195=6;
			try { dbg.enterDecision(195, decisionCanBacktrack[195]);

			switch ( input.LA(1) ) {
			case IDENT:
				{
				switch ( input.LA(2) ) {
				case DOT:
					{
					alt195=6;
					}
					break;
				case HASH_SYMBOL:
					{
					alt195=1;
					}
					break;
				case AT_SIGN:
					{
					alt195=2;
					}
					break;
				case COLON:
				case COMMENT:
				case NL:
				case WS:
					{
					alt195=4;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 195, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case HASH_SYMBOL:
				{
				alt195=1;
				}
				break;
			case AT_SIGN:
				{
				alt195=2;
				}
				break;
			case VARIABLE:
				{
				alt195=3;
				}
				break;
			case MINUS:
				{
				int LA195_5 = input.LA(2);
				if ( (LA195_5==HASH_SYMBOL) ) {
					alt195=1;
				}
				else if ( (LA195_5==AT_SIGN) ) {
					alt195=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 195, 5, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case GEN:
				{
				alt195=5;
				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_VAR:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				alt195=6;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 195, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(195);}

			switch (alt195) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:706:5: {...}? sass_selector_interpolation_exp
					{
					dbg.location(706,5);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "property", "isScssSource()");
					}dbg.location(706,23);
					pushFollow(FOLLOW_sass_selector_interpolation_exp_in_property3676);
					sass_selector_interpolation_exp();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:707:7: {...}? less_selector_interpolation_exp
					{
					dbg.location(707,7);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "property", "isLessSource()");
					}dbg.location(707,25);
					pushFollow(FOLLOW_less_selector_interpolation_exp_in_property3686);
					less_selector_interpolation_exp();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:7: VARIABLE
					{
					dbg.location(708,7);
					match(input,VARIABLE,FOLLOW_VARIABLE_in_property3694); if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:709:7: IDENT
					{
					dbg.location(709,7);
					match(input,IDENT,FOLLOW_IDENT_in_property3702); if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:710:7: GEN
					{
					dbg.location(710,7);
					match(input,GEN,FOLLOW_GEN_in_property3710); if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:711:7: {...}? cp_variable
					{
					dbg.location(711,7);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "property", "isCssPreprocessorSource()");
					}dbg.location(711,36);
					pushFollow(FOLLOW_cp_variable_in_property3720);
					cp_variable();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(COLON));
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(713, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "property");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "property"



	// $ANTLR start "sass_map"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:718:1: sass_map : sass_map_name COLON ( ws )? LPAREN ( ws )? syncToFollow ( sass_map_pairs )? RPAREN ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )* ;
	public final void sass_map() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_map");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(718, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:719:5: ( sass_map_name COLON ( ws )? LPAREN ( ws )? syncToFollow ( sass_map_pairs )? RPAREN ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:720:5: sass_map_name COLON ( ws )? LPAREN ( ws )? syncToFollow ( sass_map_pairs )? RPAREN ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )*
			{
			dbg.location(720,5);
			pushFollow(FOLLOW_sass_map_name_in_sass_map3747);
			sass_map_name();
			state._fsp--;
			if (state.failed) return;dbg.location(720,19);
			match(input,COLON,FOLLOW_COLON_in_sass_map3749); if (state.failed) return;dbg.location(720,25);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:720:25: ( ws )?
			int alt196=2;
			try { dbg.enterSubRule(196);
			try { dbg.enterDecision(196, decisionCanBacktrack[196]);

			int LA196_0 = input.LA(1);
			if ( (LA196_0==COMMENT||LA196_0==NL||LA196_0==WS) ) {
				alt196=1;
			}
			} finally {dbg.exitDecision(196);}

			switch (alt196) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:720:25: ws
					{
					dbg.location(720,25);
					pushFollow(FOLLOW_ws_in_sass_map3751);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(196);}
			dbg.location(720,29);
			match(input,LPAREN,FOLLOW_LPAREN_in_sass_map3754); if (state.failed) return;dbg.location(720,36);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:720:36: ( ws )?
			int alt197=2;
			try { dbg.enterSubRule(197);
			try { dbg.enterDecision(197, decisionCanBacktrack[197]);

			int LA197_0 = input.LA(1);
			if ( (LA197_0==COMMENT||LA197_0==NL||LA197_0==WS) ) {
				alt197=1;
			}
			} finally {dbg.exitDecision(197);}

			switch (alt197) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:720:36: ws
					{
					dbg.location(720,36);
					pushFollow(FOLLOW_ws_in_sass_map3756);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(197);}
			dbg.location(720,40);
			pushFollow(FOLLOW_syncToFollow_in_sass_map3759);
			syncToFollow();
			state._fsp--;
			if (state.failed) return;dbg.location(722,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:722:9: ( sass_map_pairs )?
			int alt198=2;
			try { dbg.enterSubRule(198);
			try { dbg.enterDecision(198, decisionCanBacktrack[198]);

			int LA198_0 = input.LA(1);
			if ( ((LA198_0 >= AT_IDENT && LA198_0 <= AT_SIGN)||(LA198_0 >= BOTTOMCENTER_SYM && LA198_0 <= BOTTOMRIGHT_SYM)||LA198_0==CHARSET_SYM||LA198_0==COMMA||LA198_0==COUNTER_STYLE_SYM||LA198_0==FONT_FACE_SYM||LA198_0==GEN||LA198_0==HASH_SYMBOL||LA198_0==IDENT||LA198_0==IMPORT_SYM||(LA198_0 >= LEFTBOTTOM_SYM && LA198_0 <= LEFTTOP_SYM)||(LA198_0 >= MEDIA_SYM && LA198_0 <= MOZ_DOCUMENT_SYM)||LA198_0==NAMESPACE_SYM||LA198_0==NUMBER||LA198_0==PAGE_SYM||(LA198_0 >= RIGHTBOTTOM_SYM && LA198_0 <= RIGHTTOP_SYM)||(LA198_0 >= SASS_AT_ROOT && LA198_0 <= SASS_DEBUG)||(LA198_0 >= SASS_EACH && LA198_0 <= SASS_ELSE)||LA198_0==SASS_EXTEND||(LA198_0 >= SASS_FOR && LA198_0 <= SASS_FUNCTION)||(LA198_0 >= SASS_IF && LA198_0 <= SASS_MIXIN)||(LA198_0 >= SASS_RETURN && LA198_0 <= SASS_WHILE)||LA198_0==STRING||(LA198_0 >= TOPCENTER_SYM && LA198_0 <= TOPRIGHT_SYM)||LA198_0==VARIABLE||LA198_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt198=1;
			}
			} finally {dbg.exitDecision(198);}

			switch (alt198) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:722:9: sass_map_pairs
					{
					dbg.location(722,9);
					pushFollow(FOLLOW_sass_map_pairs_in_sass_map3778);
					sass_map_pairs();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(198);}
			dbg.location(723,5);
			match(input,RPAREN,FOLLOW_RPAREN_in_sass_map3785); if (state.failed) return;dbg.location(723,12);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:723:12: ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )*
			try { dbg.enterSubRule(201);

			loop201:
			while (true) {
				int alt201=3;
				try { dbg.enterDecision(201, decisionCanBacktrack[201]);

				try {
					isCyclicDecision = true;
					alt201 = dfa201.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(201);}

				switch (alt201) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:723:13: ( ( ws )? SASS_DEFAULT )
					{
					dbg.location(723,13);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:723:13: ( ( ws )? SASS_DEFAULT )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:723:14: ( ws )? SASS_DEFAULT
					{
					dbg.location(723,14);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:723:14: ( ws )?
					int alt199=2;
					try { dbg.enterSubRule(199);
					try { dbg.enterDecision(199, decisionCanBacktrack[199]);

					int LA199_0 = input.LA(1);
					if ( (LA199_0==COMMENT||LA199_0==NL||LA199_0==WS) ) {
						alt199=1;
					}
					} finally {dbg.exitDecision(199);}

					switch (alt199) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:723:14: ws
							{
							dbg.location(723,14);
							pushFollow(FOLLOW_ws_in_sass_map3789);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(199);}
					dbg.location(723,18);
					match(input,SASS_DEFAULT,FOLLOW_SASS_DEFAULT_in_sass_map3792); if (state.failed) return;
					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:723:34: ( ( ws )? SASS_GLOBAL )
					{
					dbg.location(723,34);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:723:34: ( ( ws )? SASS_GLOBAL )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:723:35: ( ws )? SASS_GLOBAL
					{
					dbg.location(723,35);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:723:35: ( ws )?
					int alt200=2;
					try { dbg.enterSubRule(200);
					try { dbg.enterDecision(200, decisionCanBacktrack[200]);

					int LA200_0 = input.LA(1);
					if ( (LA200_0==COMMENT||LA200_0==NL||LA200_0==WS) ) {
						alt200=1;
					}
					} finally {dbg.exitDecision(200);}

					switch (alt200) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:723:35: ws
							{
							dbg.location(723,35);
							pushFollow(FOLLOW_ws_in_sass_map3798);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(200);}
					dbg.location(723,39);
					match(input,SASS_GLOBAL,FOLLOW_SASS_GLOBAL_in_sass_map3801); if (state.failed) return;
					}

					}
					break;

				default :
					break loop201;
				}
			}
			} finally {dbg.exitSubRule(201);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(724, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_map");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_map"



	// $ANTLR start "sass_map_name"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:726:1: sass_map_name : cp_variable ;
	public final void sass_map_name() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_map_name");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(726, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:727:5: ( cp_variable )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:728:5: cp_variable
			{
			dbg.location(728,5);
			pushFollow(FOLLOW_cp_variable_in_sass_map_name3825);
			cp_variable();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(729, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_map_name");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_map_name"



	// $ANTLR start "sass_map_pairs"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:731:1: sass_map_pairs : ( ( sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )? ) | ( COMMA ( ws )? ) )+ ;
	public final void sass_map_pairs() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_map_pairs");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(731, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:732:5: ( ( ( sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )? ) | ( COMMA ( ws )? ) )+ )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:733:5: ( ( sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )? ) | ( COMMA ( ws )? ) )+
			{
			dbg.location(733,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:733:5: ( ( sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )? ) | ( COMMA ( ws )? ) )+
			int cnt206=0;
			try { dbg.enterSubRule(206);

			loop206:
			while (true) {
				int alt206=3;
				try { dbg.enterDecision(206, decisionCanBacktrack[206]);

				int LA206_0 = input.LA(1);
				if ( ((LA206_0 >= AT_IDENT && LA206_0 <= AT_SIGN)||(LA206_0 >= BOTTOMCENTER_SYM && LA206_0 <= BOTTOMRIGHT_SYM)||LA206_0==CHARSET_SYM||LA206_0==COUNTER_STYLE_SYM||LA206_0==FONT_FACE_SYM||LA206_0==GEN||LA206_0==HASH_SYMBOL||LA206_0==IDENT||LA206_0==IMPORT_SYM||(LA206_0 >= LEFTBOTTOM_SYM && LA206_0 <= LEFTTOP_SYM)||(LA206_0 >= MEDIA_SYM && LA206_0 <= MOZ_DOCUMENT_SYM)||LA206_0==NAMESPACE_SYM||LA206_0==NUMBER||LA206_0==PAGE_SYM||(LA206_0 >= RIGHTBOTTOM_SYM && LA206_0 <= RIGHTTOP_SYM)||(LA206_0 >= SASS_AT_ROOT && LA206_0 <= SASS_DEBUG)||(LA206_0 >= SASS_EACH && LA206_0 <= SASS_ELSE)||LA206_0==SASS_EXTEND||(LA206_0 >= SASS_FOR && LA206_0 <= SASS_FUNCTION)||(LA206_0 >= SASS_IF && LA206_0 <= SASS_MIXIN)||(LA206_0 >= SASS_RETURN && LA206_0 <= SASS_WHILE)||LA206_0==STRING||(LA206_0 >= TOPCENTER_SYM && LA206_0 <= TOPRIGHT_SYM)||LA206_0==VARIABLE||LA206_0==WEBKIT_KEYFRAMES_SYM) ) {
					alt206=1;
				}
				else if ( (LA206_0==COMMA) ) {
					alt206=2;
				}

				} finally {dbg.exitDecision(206);}

				switch (alt206) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:734:10: ( sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )? )
					{
					dbg.location(734,10);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:734:10: ( sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )? )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:734:12: sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )?
					{
					dbg.location(734,12);
					pushFollow(FOLLOW_sass_map_pair_in_sass_map_pairs3859);
					sass_map_pair();
					state._fsp--;
					if (state.failed) return;dbg.location(734,26);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:734:26: ( ( ( ws )? COMMA )=> ( ws )? COMMA )?
					int alt203=2;
					try { dbg.enterSubRule(203);
					try { dbg.enterDecision(203, decisionCanBacktrack[203]);

					try {
						isCyclicDecision = true;
						alt203 = dfa203.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(203);}

					switch (alt203) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:734:27: ( ( ws )? COMMA )=> ( ws )? COMMA
							{
							dbg.location(734,40);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:734:40: ( ws )?
							int alt202=2;
							try { dbg.enterSubRule(202);
							try { dbg.enterDecision(202, decisionCanBacktrack[202]);

							int LA202_0 = input.LA(1);
							if ( (LA202_0==COMMENT||LA202_0==NL||LA202_0==WS) ) {
								alt202=1;
							}
							} finally {dbg.exitDecision(202);}

							switch (alt202) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:734:40: ws
									{
									dbg.location(734,40);
									pushFollow(FOLLOW_ws_in_sass_map_pairs3869);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(202);}
							dbg.location(734,44);
							match(input,COMMA,FOLLOW_COMMA_in_sass_map_pairs3872); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(203);}
					dbg.location(734,52);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:734:52: ( ws )?
					int alt204=2;
					try { dbg.enterSubRule(204);
					try { dbg.enterDecision(204, decisionCanBacktrack[204]);

					int LA204_0 = input.LA(1);
					if ( (LA204_0==COMMENT||LA204_0==NL||LA204_0==WS) ) {
						alt204=1;
					}
					} finally {dbg.exitDecision(204);}

					switch (alt204) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:734:52: ws
							{
							dbg.location(734,52);
							pushFollow(FOLLOW_ws_in_sass_map_pairs3876);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(204);}

					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:736:10: ( COMMA ( ws )? )
					{
					dbg.location(736,10);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:736:10: ( COMMA ( ws )? )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:736:12: COMMA ( ws )?
					{
					dbg.location(736,12);
					match(input,COMMA,FOLLOW_COMMA_in_sass_map_pairs3903); if (state.failed) return;dbg.location(736,18);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:736:18: ( ws )?
					int alt205=2;
					try { dbg.enterSubRule(205);
					try { dbg.enterDecision(205, decisionCanBacktrack[205]);

					int LA205_0 = input.LA(1);
					if ( (LA205_0==COMMENT||LA205_0==NL||LA205_0==WS) ) {
						alt205=1;
					}
					} finally {dbg.exitDecision(205);}

					switch (alt205) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:736:18: ws
							{
							dbg.location(736,18);
							pushFollow(FOLLOW_ws_in_sass_map_pairs3905);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(205);}

					}

					}
					break;

				default :
					if ( cnt206 >= 1 ) break loop206;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(206, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt206++;
			}
			} finally {dbg.exitSubRule(206);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(738, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_map_pairs");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_map_pairs"



	// $ANTLR start "sass_map_pair"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:740:1: sass_map_pair : ( NUMBER | ( STRING ( ( ws )? STRING )* ) | ( ( function )=> function ) | property | sass_map ) ( ws )? COLON ( ws )? cp_expression ( ( ws )? prio )? ;
	public final void sass_map_pair() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_map_pair");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(740, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:741:5: ( ( NUMBER | ( STRING ( ( ws )? STRING )* ) | ( ( function )=> function ) | property | sass_map ) ( ws )? COLON ( ws )? cp_expression ( ( ws )? prio )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:742:9: ( NUMBER | ( STRING ( ( ws )? STRING )* ) | ( ( function )=> function ) | property | sass_map ) ( ws )? COLON ( ws )? cp_expression ( ( ws )? prio )?
			{
			dbg.location(742,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:742:9: ( NUMBER | ( STRING ( ( ws )? STRING )* ) | ( ( function )=> function ) | property | sass_map )
			int alt209=5;
			try { dbg.enterSubRule(209);
			try { dbg.enterDecision(209, decisionCanBacktrack[209]);

			switch ( input.LA(1) ) {
			case NUMBER:
				{
				alt209=1;
				}
				break;
			case STRING:
				{
				alt209=2;
				}
				break;
			case IDENT:
				{
				int LA209_3 = input.LA(2);
				if ( (synpred22_Css3()) ) {
					alt209=3;
				}
				else if ( (true) ) {
					alt209=4;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt209=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 209, 3, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT_SIGN:
			case GEN:
			case HASH_SYMBOL:
			case MINUS:
			case VARIABLE:
				{
				alt209=4;
				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				int LA209_9 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt209=4;
				}
				else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
					alt209=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 209, 9, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_VAR:
				{
				int LA209_10 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt209=4;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt209=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 209, 10, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 209, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(209);}

			switch (alt209) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:742:10: NUMBER
					{
					dbg.location(742,10);
					match(input,NUMBER,FOLLOW_NUMBER_in_sass_map_pair3941); if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:742:17: ( STRING ( ( ws )? STRING )* )
					{
					dbg.location(742,17);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:742:17: ( STRING ( ( ws )? STRING )* )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:742:18: STRING ( ( ws )? STRING )*
					{
					dbg.location(742,18);
					match(input,STRING,FOLLOW_STRING_in_sass_map_pair3944); if (state.failed) return;dbg.location(742,25);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:742:25: ( ( ws )? STRING )*
					try { dbg.enterSubRule(208);

					loop208:
					while (true) {
						int alt208=2;
						try { dbg.enterDecision(208, decisionCanBacktrack[208]);

						try {
							isCyclicDecision = true;
							alt208 = dfa208.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(208);}

						switch (alt208) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:742:26: ( ws )? STRING
							{
							dbg.location(742,26);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:742:26: ( ws )?
							int alt207=2;
							try { dbg.enterSubRule(207);
							try { dbg.enterDecision(207, decisionCanBacktrack[207]);

							int LA207_0 = input.LA(1);
							if ( (LA207_0==COMMENT||LA207_0==NL||LA207_0==WS) ) {
								alt207=1;
							}
							} finally {dbg.exitDecision(207);}

							switch (alt207) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:742:26: ws
									{
									dbg.location(742,26);
									pushFollow(FOLLOW_ws_in_sass_map_pair3947);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(207);}
							dbg.location(742,30);
							match(input,STRING,FOLLOW_STRING_in_sass_map_pair3950); if (state.failed) return;
							}
							break;

						default :
							break loop208;
						}
					}
					} finally {dbg.exitSubRule(208);}

					}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:742:40: ( ( function )=> function )
					{
					dbg.location(742,40);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:742:40: ( ( function )=> function )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:742:41: ( function )=> function
					{
					dbg.location(742,53);
					pushFollow(FOLLOW_function_in_sass_map_pair3960);
					function();
					state._fsp--;
					if (state.failed) return;
					}

					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:742:63: property
					{
					dbg.location(742,63);
					pushFollow(FOLLOW_property_in_sass_map_pair3963);
					property();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:742:72: sass_map
					{
					dbg.location(742,72);
					pushFollow(FOLLOW_sass_map_in_sass_map_pair3965);
					sass_map();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(209);}
			dbg.location(742,82);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:742:82: ( ws )?
			int alt210=2;
			try { dbg.enterSubRule(210);
			try { dbg.enterDecision(210, decisionCanBacktrack[210]);

			int LA210_0 = input.LA(1);
			if ( (LA210_0==COMMENT||LA210_0==NL||LA210_0==WS) ) {
				alt210=1;
			}
			} finally {dbg.exitDecision(210);}

			switch (alt210) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:742:82: ws
					{
					dbg.location(742,82);
					pushFollow(FOLLOW_ws_in_sass_map_pair3968);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(210);}
			dbg.location(742,86);
			match(input,COLON,FOLLOW_COLON_in_sass_map_pair3971); if (state.failed) return;dbg.location(742,92);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:742:92: ( ws )?
			int alt211=2;
			try { dbg.enterSubRule(211);
			try { dbg.enterDecision(211, decisionCanBacktrack[211]);

			int LA211_0 = input.LA(1);
			if ( (LA211_0==COMMENT||LA211_0==NL||LA211_0==WS) ) {
				alt211=1;
			}
			} finally {dbg.exitDecision(211);}

			switch (alt211) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:742:92: ws
					{
					dbg.location(742,92);
					pushFollow(FOLLOW_ws_in_sass_map_pair3973);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(211);}
			dbg.location(742,96);
			pushFollow(FOLLOW_cp_expression_in_sass_map_pair3976);
			cp_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(742,110);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:742:110: ( ( ws )? prio )?
			int alt213=2;
			try { dbg.enterSubRule(213);
			try { dbg.enterDecision(213, decisionCanBacktrack[213]);

			try {
				isCyclicDecision = true;
				alt213 = dfa213.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(213);}

			switch (alt213) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:742:111: ( ws )? prio
					{
					dbg.location(742,111);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:742:111: ( ws )?
					int alt212=2;
					try { dbg.enterSubRule(212);
					try { dbg.enterDecision(212, decisionCanBacktrack[212]);

					int LA212_0 = input.LA(1);
					if ( (LA212_0==COMMENT||LA212_0==NL||LA212_0==WS) ) {
						alt212=1;
					}
					} finally {dbg.exitDecision(212);}

					switch (alt212) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:742:111: ws
							{
							dbg.location(742,111);
							pushFollow(FOLLOW_ws_in_sass_map_pair3979);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(212);}
					dbg.location(742,115);
					pushFollow(FOLLOW_prio_in_sass_map_pair3982);
					prio();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(213);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(743, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_map_pair");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_map_pair"



	// $ANTLR start "rule"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:745:1: rule : ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? {...}? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
	public final void rule() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "rule");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(745, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:746:5: ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? {...}? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:747:9: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? {...}? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
			{
			dbg.location(747,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:747:9: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? {...}? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup )
			int alt219=3;
			try { dbg.enterSubRule(219);
			try { dbg.enterDecision(219, decisionCanBacktrack[219]);

			try {
				isCyclicDecision = true;
				alt219 = dfa219.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(219);}

			switch (alt219) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:748:13: ( SASS_AT_ROOT ( ws selectorsGroup )? )
					{
					dbg.location(748,13);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:748:13: ( SASS_AT_ROOT ( ws selectorsGroup )? )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:748:14: SASS_AT_ROOT ( ws selectorsGroup )?
					{
					dbg.location(748,14);
					match(input,SASS_AT_ROOT,FOLLOW_SASS_AT_ROOT_in_rule4024); if (state.failed) return;dbg.location(748,27);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:748:27: ( ws selectorsGroup )?
					int alt214=2;
					try { dbg.enterSubRule(214);
					try { dbg.enterDecision(214, decisionCanBacktrack[214]);

					try {
						isCyclicDecision = true;
						alt214 = dfa214.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(214);}

					switch (alt214) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:748:28: ws selectorsGroup
							{
							dbg.location(748,28);
							pushFollow(FOLLOW_ws_in_rule4027);
							ws();
							state._fsp--;
							if (state.failed) return;dbg.location(748,31);
							pushFollow(FOLLOW_selectorsGroup_in_rule4029);
							selectorsGroup();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(214);}

					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:749:15: ( SASS_AT_ROOT ws LPAREN ( ws )? {...}? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN )
					{
					dbg.location(749,15);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:749:15: ( SASS_AT_ROOT ws LPAREN ( ws )? {...}? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:749:16: SASS_AT_ROOT ws LPAREN ( ws )? {...}? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN
					{
					dbg.location(749,16);
					match(input,SASS_AT_ROOT,FOLLOW_SASS_AT_ROOT_in_rule4050); if (state.failed) return;dbg.location(749,29);
					pushFollow(FOLLOW_ws_in_rule4052);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(749,32);
					match(input,LPAREN,FOLLOW_LPAREN_in_rule4054); if (state.failed) return;dbg.location(749,39);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:749:39: ( ws )?
					int alt215=2;
					try { dbg.enterSubRule(215);
					try { dbg.enterDecision(215, decisionCanBacktrack[215]);

					int LA215_0 = input.LA(1);
					if ( (LA215_0==COMMENT||LA215_0==NL||LA215_0==WS) ) {
						alt215=1;
					}
					} finally {dbg.exitDecision(215);}

					switch (alt215) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:749:39: ws
							{
							dbg.location(749,39);
							pushFollow(FOLLOW_ws_in_rule4056);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(215);}
					dbg.location(749,43);
					if ( !(evalPredicate(tokenNameEquals("without") || tokenNameEquals("with"),"tokenNameEquals(\"without\") || tokenNameEquals(\"with\")")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "rule", "tokenNameEquals(\"without\") || tokenNameEquals(\"with\")");
					}dbg.location(749,100);
					match(input,IDENT,FOLLOW_IDENT_in_rule4061); if (state.failed) return;dbg.location(749,128);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:749:128: ( ws )?
					int alt216=2;
					try { dbg.enterSubRule(216);
					try { dbg.enterDecision(216, decisionCanBacktrack[216]);

					int LA216_0 = input.LA(1);
					if ( (LA216_0==COMMENT||LA216_0==NL||LA216_0==WS) ) {
						alt216=1;
					}
					} finally {dbg.exitDecision(216);}

					switch (alt216) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:749:128: ws
							{
							dbg.location(749,128);
							pushFollow(FOLLOW_ws_in_rule4065);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(216);}
					dbg.location(749,132);
					match(input,COLON,FOLLOW_COLON_in_rule4068); if (state.failed) return;dbg.location(749,138);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:749:138: ( ws )?
					int alt217=2;
					try { dbg.enterSubRule(217);
					try { dbg.enterDecision(217, decisionCanBacktrack[217]);

					int LA217_0 = input.LA(1);
					if ( (LA217_0==COMMENT||LA217_0==NL||LA217_0==WS) ) {
						alt217=1;
					}
					} finally {dbg.exitDecision(217);}

					switch (alt217) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:749:138: ws
							{
							dbg.location(749,138);
							pushFollow(FOLLOW_ws_in_rule4070);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(217);}
					dbg.location(749,142);
					match(input,IDENT,FOLLOW_IDENT_in_rule4073); if (state.failed) return;dbg.location(749,148);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:749:148: ( ws )?
					int alt218=2;
					try { dbg.enterSubRule(218);
					try { dbg.enterDecision(218, decisionCanBacktrack[218]);

					int LA218_0 = input.LA(1);
					if ( (LA218_0==COMMENT||LA218_0==NL||LA218_0==WS) ) {
						alt218=1;
					}
					} finally {dbg.exitDecision(218);}

					switch (alt218) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:749:148: ws
							{
							dbg.location(749,148);
							pushFollow(FOLLOW_ws_in_rule4075);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(218);}
					dbg.location(749,152);
					match(input,RPAREN,FOLLOW_RPAREN_in_rule4078); if (state.failed) return;
					}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:750:15: selectorsGroup
					{
					dbg.location(750,15);
					pushFollow(FOLLOW_selectorsGroup_in_rule4096);
					selectorsGroup();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(219);}
			dbg.location(751,11);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:751:11: ( ws )?
			int alt220=2;
			try { dbg.enterSubRule(220);
			try { dbg.enterDecision(220, decisionCanBacktrack[220]);

			int LA220_0 = input.LA(1);
			if ( (LA220_0==COMMENT||LA220_0==NL||LA220_0==WS) ) {
				alt220=1;
			}
			} finally {dbg.exitDecision(220);}

			switch (alt220) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:751:11: ws
					{
					dbg.location(751,11);
					pushFollow(FOLLOW_ws_in_rule4108);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(220);}
			dbg.location(752,5);
			match(input,LBRACE,FOLLOW_LBRACE_in_rule4115); if (state.failed) return;dbg.location(752,12);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:752:12: ( ws )?
			int alt221=2;
			try { dbg.enterSubRule(221);
			try { dbg.enterDecision(221, decisionCanBacktrack[221]);

			int LA221_0 = input.LA(1);
			if ( (LA221_0==COMMENT||LA221_0==NL||LA221_0==WS) ) {
				alt221=1;
			}
			} finally {dbg.exitDecision(221);}

			switch (alt221) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:752:12: ws
					{
					dbg.location(752,12);
					pushFollow(FOLLOW_ws_in_rule4117);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(221);}
			dbg.location(752,16);
			pushFollow(FOLLOW_syncToFollow_in_rule4120);
			syncToFollow();
			state._fsp--;
			if (state.failed) return;dbg.location(753,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:753:9: ( declarations )?
			int alt222=2;
			try { dbg.enterSubRule(222);
			try { dbg.enterDecision(222, decisionCanBacktrack[222]);

			int LA222_0 = input.LA(1);
			if ( ((LA222_0 >= AT_IDENT && LA222_0 <= AT_SIGN)||(LA222_0 >= BOTTOMCENTER_SYM && LA222_0 <= BOTTOMRIGHT_SYM)||(LA222_0 >= CHARSET_SYM && LA222_0 <= COLON)||LA222_0==COUNTER_STYLE_SYM||(LA222_0 >= DCOLON && LA222_0 <= DOT)||LA222_0==FONT_FACE_SYM||(LA222_0 >= GEN && LA222_0 <= GREATER)||(LA222_0 >= HASH && LA222_0 <= HASH_SYMBOL)||LA222_0==IDENT||LA222_0==IMPORT_SYM||LA222_0==LAYER_SYM||(LA222_0 >= LBRACKET && LA222_0 <= LEFTTOP_SYM)||LA222_0==LESS_AND||(LA222_0 >= MEDIA_SYM && LA222_0 <= MOZ_DOCUMENT_SYM)||LA222_0==NAMESPACE_SYM||LA222_0==PAGE_SYM||(LA222_0 >= PIPE && LA222_0 <= PLUS)||(LA222_0 >= RIGHTBOTTOM_SYM && LA222_0 <= RIGHTTOP_SYM)||(LA222_0 >= SASS_AT_ROOT && LA222_0 <= SASS_DEBUG)||(LA222_0 >= SASS_EACH && LA222_0 <= SASS_ELSE)||(LA222_0 >= SASS_ERROR && LA222_0 <= SASS_FUNCTION)||(LA222_0 >= SASS_IF && LA222_0 <= SASS_MIXIN)||(LA222_0 >= SASS_RETURN && LA222_0 <= SEMI)||LA222_0==STAR||LA222_0==SUPPORTS_SYM||LA222_0==TILDE||(LA222_0 >= TOPCENTER_SYM && LA222_0 <= TOPRIGHT_SYM)||LA222_0==VARIABLE||LA222_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt222=1;
			}
			} finally {dbg.exitDecision(222);}

			switch (alt222) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:753:9: declarations
					{
					dbg.location(753,9);
					pushFollow(FOLLOW_declarations_in_rule4130);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(222);}
			dbg.location(754,5);
			match(input,RBRACE,FOLLOW_RBRACE_in_rule4137); if (state.failed) return;
			}

		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(RBRACE));
			        input.consume(); //consume the RBRACE as well
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(755, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "rule");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "rule"



	// $ANTLR start "declarations"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:762:1: declarations : ( ( SEMI ( ws )? )* declaration ( ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws ) declaration )* ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws )? | ( SEMI ( ws )? )+ );
	public final void declarations() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "declarations");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(762, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:763:5: ( ( SEMI ( ws )? )* declaration ( ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws ) declaration )* ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws )? | ( SEMI ( ws )? )+ )
			int alt236=2;
			try { dbg.enterDecision(236, decisionCanBacktrack[236]);

			try {
				isCyclicDecision = true;
				alt236 = dfa236.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(236);}

			switch (alt236) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:764:8: ( SEMI ( ws )? )* declaration ( ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws ) declaration )* ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws )?
					{
					dbg.location(764,8);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:764:8: ( SEMI ( ws )? )*
					try { dbg.enterSubRule(224);

					loop224:
					while (true) {
						int alt224=2;
						try { dbg.enterDecision(224, decisionCanBacktrack[224]);

						int LA224_0 = input.LA(1);
						if ( (LA224_0==SEMI) ) {
							alt224=1;
						}

						} finally {dbg.exitDecision(224);}

						switch (alt224) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:764:9: SEMI ( ws )?
							{
							dbg.location(764,9);
							match(input,SEMI,FOLLOW_SEMI_in_declarations4171); if (state.failed) return;dbg.location(764,14);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:764:14: ( ws )?
							int alt223=2;
							try { dbg.enterSubRule(223);
							try { dbg.enterDecision(223, decisionCanBacktrack[223]);

							int LA223_0 = input.LA(1);
							if ( (LA223_0==COMMENT||LA223_0==NL||LA223_0==WS) ) {
								alt223=1;
							}
							} finally {dbg.exitDecision(223);}

							switch (alt223) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:764:14: ws
									{
									dbg.location(764,14);
									pushFollow(FOLLOW_ws_in_declarations4173);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(223);}

							}
							break;

						default :
							break loop224;
						}
					}
					} finally {dbg.exitSubRule(224);}
					dbg.location(764,21);
					pushFollow(FOLLOW_declaration_in_declarations4179);
					declaration();
					state._fsp--;
					if (state.failed) return;dbg.location(764,33);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:764:33: ( ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws ) declaration )*
					try { dbg.enterSubRule(229);

					loop229:
					while (true) {
						int alt229=2;
						try { dbg.enterDecision(229, decisionCanBacktrack[229]);

						try {
							isCyclicDecision = true;
							alt229 = dfa229.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(229);}

						switch (alt229) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:764:34: ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws ) declaration
							{
							dbg.location(764,34);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:764:34: ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws )
							int alt228=2;
							try { dbg.enterSubRule(228);
							try { dbg.enterDecision(228, decisionCanBacktrack[228]);

							try {
								isCyclicDecision = true;
								alt228 = dfa228.predict(input);
							}
							catch (NoViableAltException nvae) {
								dbg.recognitionException(nvae);
								throw nvae;
							}
							} finally {dbg.exitDecision(228);}

							switch (alt228) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:764:35: ( ( ws )? ( SEMI ( ws )? )+ )
									{
									dbg.location(764,35);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:764:35: ( ( ws )? ( SEMI ( ws )? )+ )
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:764:36: ( ws )? ( SEMI ( ws )? )+
									{
									dbg.location(764,36);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:764:36: ( ws )?
									int alt225=2;
									try { dbg.enterSubRule(225);
									try { dbg.enterDecision(225, decisionCanBacktrack[225]);

									int LA225_0 = input.LA(1);
									if ( (LA225_0==COMMENT||LA225_0==NL||LA225_0==WS) ) {
										alt225=1;
									}
									} finally {dbg.exitDecision(225);}

									switch (alt225) {
										case 1 :
											dbg.enterAlt(1);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:764:36: ws
											{
											dbg.location(764,36);
											pushFollow(FOLLOW_ws_in_declarations4184);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(225);}
									dbg.location(764,40);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:764:40: ( SEMI ( ws )? )+
									int cnt227=0;
									try { dbg.enterSubRule(227);

									loop227:
									while (true) {
										int alt227=2;
										try { dbg.enterDecision(227, decisionCanBacktrack[227]);

										int LA227_0 = input.LA(1);
										if ( (LA227_0==SEMI) ) {
											alt227=1;
										}

										} finally {dbg.exitDecision(227);}

										switch (alt227) {
										case 1 :
											dbg.enterAlt(1);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:764:41: SEMI ( ws )?
											{
											dbg.location(764,41);
											match(input,SEMI,FOLLOW_SEMI_in_declarations4188); if (state.failed) return;dbg.location(764,46);
											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:764:46: ( ws )?
											int alt226=2;
											try { dbg.enterSubRule(226);
											try { dbg.enterDecision(226, decisionCanBacktrack[226]);

											int LA226_0 = input.LA(1);
											if ( (LA226_0==COMMENT||LA226_0==NL||LA226_0==WS) ) {
												alt226=1;
											}
											} finally {dbg.exitDecision(226);}

											switch (alt226) {
												case 1 :
													dbg.enterAlt(1);

													// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:764:46: ws
													{
													dbg.location(764,46);
													pushFollow(FOLLOW_ws_in_declarations4190);
													ws();
													state._fsp--;
													if (state.failed) return;
													}
													break;

											}
											} finally {dbg.exitSubRule(226);}

											}
											break;

										default :
											if ( cnt227 >= 1 ) break loop227;
											if (state.backtracking>0) {state.failed=true; return;}
											EarlyExitException eee = new EarlyExitException(227, input);
											dbg.recognitionException(eee);

											throw eee;
										}
										cnt227++;
									}
									} finally {dbg.exitSubRule(227);}

									}

									}
									break;
								case 2 :
									dbg.enterAlt(2);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:764:53: ws
									{
									dbg.location(764,53);
									pushFollow(FOLLOW_ws_in_declarations4196);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(228);}
							dbg.location(764,57);
							pushFollow(FOLLOW_declaration_in_declarations4199);
							declaration();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop229;
						}
					}
					} finally {dbg.exitSubRule(229);}
					dbg.location(764,71);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:764:71: ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws )?
					int alt233=3;
					try { dbg.enterSubRule(233);
					try { dbg.enterDecision(233, decisionCanBacktrack[233]);

					try {
						isCyclicDecision = true;
						alt233 = dfa233.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(233);}

					switch (alt233) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:764:72: ( ( ws )? ( SEMI ( ws )? )+ )
							{
							dbg.location(764,72);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:764:72: ( ( ws )? ( SEMI ( ws )? )+ )
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:764:73: ( ws )? ( SEMI ( ws )? )+
							{
							dbg.location(764,73);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:764:73: ( ws )?
							int alt230=2;
							try { dbg.enterSubRule(230);
							try { dbg.enterDecision(230, decisionCanBacktrack[230]);

							int LA230_0 = input.LA(1);
							if ( (LA230_0==COMMENT||LA230_0==NL||LA230_0==WS) ) {
								alt230=1;
							}
							} finally {dbg.exitDecision(230);}

							switch (alt230) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:764:73: ws
									{
									dbg.location(764,73);
									pushFollow(FOLLOW_ws_in_declarations4205);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(230);}
							dbg.location(764,77);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:764:77: ( SEMI ( ws )? )+
							int cnt232=0;
							try { dbg.enterSubRule(232);

							loop232:
							while (true) {
								int alt232=2;
								try { dbg.enterDecision(232, decisionCanBacktrack[232]);

								int LA232_0 = input.LA(1);
								if ( (LA232_0==SEMI) ) {
									alt232=1;
								}

								} finally {dbg.exitDecision(232);}

								switch (alt232) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:764:78: SEMI ( ws )?
									{
									dbg.location(764,78);
									match(input,SEMI,FOLLOW_SEMI_in_declarations4209); if (state.failed) return;dbg.location(764,83);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:764:83: ( ws )?
									int alt231=2;
									try { dbg.enterSubRule(231);
									try { dbg.enterDecision(231, decisionCanBacktrack[231]);

									int LA231_0 = input.LA(1);
									if ( (LA231_0==COMMENT||LA231_0==NL||LA231_0==WS) ) {
										alt231=1;
									}
									} finally {dbg.exitDecision(231);}

									switch (alt231) {
										case 1 :
											dbg.enterAlt(1);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:764:83: ws
											{
											dbg.location(764,83);
											pushFollow(FOLLOW_ws_in_declarations4211);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(231);}

									}
									break;

								default :
									if ( cnt232 >= 1 ) break loop232;
									if (state.backtracking>0) {state.failed=true; return;}
									EarlyExitException eee = new EarlyExitException(232, input);
									dbg.recognitionException(eee);

									throw eee;
								}
								cnt232++;
							}
							} finally {dbg.exitSubRule(232);}

							}

							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:764:90: ws
							{
							dbg.location(764,90);
							pushFollow(FOLLOW_ws_in_declarations4217);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(233);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:765:8: ( SEMI ( ws )? )+
					{
					dbg.location(765,8);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:765:8: ( SEMI ( ws )? )+
					int cnt235=0;
					try { dbg.enterSubRule(235);

					loop235:
					while (true) {
						int alt235=2;
						try { dbg.enterDecision(235, decisionCanBacktrack[235]);

						int LA235_0 = input.LA(1);
						if ( (LA235_0==SEMI) ) {
							alt235=1;
						}

						} finally {dbg.exitDecision(235);}

						switch (alt235) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:765:9: SEMI ( ws )?
							{
							dbg.location(765,9);
							match(input,SEMI,FOLLOW_SEMI_in_declarations4229); if (state.failed) return;dbg.location(765,14);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:765:14: ( ws )?
							int alt234=2;
							try { dbg.enterSubRule(234);
							try { dbg.enterDecision(234, decisionCanBacktrack[234]);

							int LA234_0 = input.LA(1);
							if ( (LA234_0==COMMENT||LA234_0==NL||LA234_0==WS) ) {
								alt234=1;
							}
							} finally {dbg.exitDecision(234);}

							switch (alt234) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:765:14: ws
									{
									dbg.location(765,14);
									pushFollow(FOLLOW_ws_in_declarations4231);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(234);}

							}
							break;

						default :
							if ( cnt235 >= 1 ) break loop235;
							if (state.backtracking>0) {state.failed=true; return;}
							EarlyExitException eee = new EarlyExitException(235, input);
							dbg.recognitionException(eee);

							throw eee;
						}
						cnt235++;
					}
					} finally {dbg.exitSubRule(235);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(766, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "declarations");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "declarations"



	// $ANTLR start "declaration"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:1: declaration : ( ( cp_variable_declaration )=> cp_variable_declaration | ( sass_map )=> sass_map | ( sass_nested_properties )=> sass_nested_properties | ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE )=> rule | ( propertyDeclaration )=> propertyDeclaration | ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration | ( cp_mixin_declaration )=> cp_mixin_declaration | ( cp_mixin_call )=> cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? |{...}? at_rule |{...}? sass_control |{...}? sass_extend |{...}? sass_debug |{...}? sass_content |{...}? sass_function_return |{...}? sass_error |{...}? importItem | GEN );
	public final void declaration() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "declaration");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(768, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:769:5: ( ( cp_variable_declaration )=> cp_variable_declaration | ( sass_map )=> sass_map | ( sass_nested_properties )=> sass_nested_properties | ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE )=> rule | ( propertyDeclaration )=> propertyDeclaration | ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration | ( cp_mixin_declaration )=> cp_mixin_declaration | ( cp_mixin_call )=> cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? |{...}? at_rule |{...}? sass_control |{...}? sass_extend |{...}? sass_debug |{...}? sass_content |{...}? sass_function_return |{...}? sass_error |{...}? importItem | GEN )
			int alt241=18;
			try { dbg.enterDecision(241, decisionCanBacktrack[241]);

			int LA241_0 = input.LA(1);
			if ( (LA241_0==SASS_AT_ROOT) ) {
				int LA241_1 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt241=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt241=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt241=3;
				}
				else if ( (synpred26_Css3()) ) {
					alt241=4;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt241=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt241=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 241, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA241_0==SASS_VAR) ) {
				int LA241_2 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt241=1;
				}
				else if ( ((evalPredicate(isScssSource(),"isScssSource()")&&synpred24_Css3())) ) {
					alt241=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&synpred25_Css3())&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt241=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&synpred27_Css3())&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt241=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&synpred28_Css3())) ) {
					alt241=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 241, 2, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA241_0==IDENT) ) {
				int LA241_3 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt241=1;
				}
				else if ( ((evalPredicate(isScssSource(),"isScssSource()")&&synpred24_Css3())) ) {
					alt241=2;
				}
				else if ( (synpred25_Css3()) ) {
					alt241=3;
				}
				else if ( (synpred26_Css3()) ) {
					alt241=4;
				}
				else if ( (synpred27_Css3()) ) {
					alt241=5;
				}
				else if ( (synpred28_Css3()) ) {
					alt241=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 241, 3, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA241_0==MINUS) ) {
				int LA241_4 = input.LA(2);
				if ( (((evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()"))&&synpred25_Css3())) ) {
					alt241=3;
				}
				else if ( ((synpred26_Css3()&&(evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")))) ) {
					alt241=4;
				}
				else if ( ((synpred27_Css3()&&((evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")&&(evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")))||evalPredicate(isScssSource(),"isScssSource()")))) ) {
					alt241=5;
				}
				else if ( ((((evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")&&(evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")))||evalPredicate(isScssSource(),"isScssSource()"))&&synpred28_Css3())) ) {
					alt241=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 241, 4, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA241_0==HASH_SYMBOL) ) {
				int LA241_5 = input.LA(2);
				if ( ((synpred25_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt241=3;
				}
				else if ( (synpred26_Css3()) ) {
					alt241=4;
				}
				else if ( ((synpred27_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt241=5;
				}
				else if ( ((evalPredicate(isScssSource(),"isScssSource()")&&synpred28_Css3())) ) {
					alt241=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 241, 5, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA241_0==AT_SIGN) ) {
				int LA241_6 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred25_Css3())) ) {
					alt241=3;
				}
				else if ( ((synpred26_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt241=4;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred27_Css3())) ) {
					alt241=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred28_Css3())) ) {
					alt241=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 241, 6, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA241_0==VARIABLE) ) {
				int LA241_7 = input.LA(2);
				if ( (synpred25_Css3()) ) {
					alt241=3;
				}
				else if ( (synpred27_Css3()) ) {
					alt241=5;
				}
				else if ( (synpred28_Css3()) ) {
					alt241=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 241, 7, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA241_0==GEN) ) {
				int LA241_8 = input.LA(2);
				if ( (synpred25_Css3()) ) {
					alt241=3;
				}
				else if ( (synpred26_Css3()) ) {
					alt241=4;
				}
				else if ( (synpred27_Css3()) ) {
					alt241=5;
				}
				else if ( (synpred28_Css3()) ) {
					alt241=6;
				}
				else if ( (true) ) {
					alt241=18;
				}

			}
			else if ( (LA241_0==SASS_MIXIN) ) {
				int LA241_9 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt241=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt241=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt241=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt241=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt241=6;
				}
				else if ( ((synpred29_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt241=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 241, 9, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA241_0==GREATER||LA241_0==PLUS||LA241_0==TILDE) && (synpred26_Css3())) {
				alt241=4;
			}
			else if ( (LA241_0==SASS_EXTEND_ONLY_SELECTOR) && (synpred26_Css3())) {
				alt241=4;
			}
			else if ( (LA241_0==LESS_AND) ) {
				int LA241_12 = input.LA(2);
				if ( (synpred26_Css3()) ) {
					alt241=4;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred29_Css3())) ) {
					alt241=7;
				}
				else if ( ((synpred30_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt241=8;
				}
				else if ( (((evalPredicate(isLessSource(),"isLessSource()")&&synpred31_Css3())&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt241=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 241, 12, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA241_0==HASH) ) {
				int LA241_13 = input.LA(2);
				if ( (synpred26_Css3()) ) {
					alt241=4;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred29_Css3())) ) {
					alt241=7;
				}
				else if ( ((synpred30_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt241=8;
				}
				else if ( (((evalPredicate(isLessSource(),"isLessSource()")&&synpred31_Css3())&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt241=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 241, 13, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA241_0==DOT) ) {
				int LA241_14 = input.LA(2);
				if ( (synpred26_Css3()) ) {
					alt241=4;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred29_Css3())) ) {
					alt241=7;
				}
				else if ( ((synpred30_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt241=8;
				}
				else if ( (((evalPredicate(isLessSource(),"isLessSource()")&&synpred31_Css3())&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt241=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 241, 14, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA241_0==DIMENSION) && (synpred26_Css3())) {
				alt241=4;
			}
			else if ( (LA241_0==LBRACKET) && (synpred26_Css3())) {
				alt241=4;
			}
			else if ( (LA241_0==COLON||LA241_0==DCOLON) && (synpred26_Css3())) {
				alt241=4;
			}
			else if ( (LA241_0==STAR) ) {
				int LA241_18 = input.LA(2);
				if ( (synpred26_Css3()) ) {
					alt241=4;
				}
				else if ( (synpred27_Css3()) ) {
					alt241=5;
				}
				else if ( (synpred28_Css3()) ) {
					alt241=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 241, 18, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA241_0==PIPE) && (synpred26_Css3())) {
				alt241=4;
			}
			else if ( (LA241_0==AT_IDENT) ) {
				int LA241_20 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt241=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt241=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt241=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt241=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt241=6;
				}
				else if ( ((synpred30_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt241=8;
				}
				else if ( (((evalPredicate(isLessSource(),"isLessSource()")&&synpred31_Css3())&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt241=9;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt241=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 241, 20, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA241_0==SASS_INCLUDE) ) {
				int LA241_21 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt241=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt241=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt241=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt241=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt241=6;
				}
				else if ( ((synpred30_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt241=8;
				}
				else if ( ((synpred31_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt241=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 241, 21, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA241_0==MEDIA_SYM) ) {
				int LA241_22 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt241=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt241=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt241=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt241=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt241=6;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt241=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 241, 22, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA241_0==PAGE_SYM) ) {
				int LA241_23 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt241=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt241=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt241=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt241=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt241=6;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt241=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 241, 23, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA241_0==COUNTER_STYLE_SYM) ) {
				int LA241_24 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt241=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt241=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt241=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt241=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt241=6;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt241=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 241, 24, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA241_0==FONT_FACE_SYM) ) {
				int LA241_25 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt241=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt241=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt241=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt241=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt241=6;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt241=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 241, 25, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA241_0==MOZ_DOCUMENT_SYM) ) {
				int LA241_26 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt241=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt241=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt241=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt241=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt241=6;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt241=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 241, 26, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA241_0==LAYER_SYM||LA241_0==SUPPORTS_SYM) ) {
				alt241=10;
			}
			else if ( (LA241_0==WEBKIT_KEYFRAMES_SYM) ) {
				int LA241_28 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt241=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt241=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt241=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt241=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt241=6;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt241=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 241, 28, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA241_0==SASS_IF) ) {
				int LA241_29 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt241=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt241=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt241=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt241=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt241=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt241=11;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 241, 29, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA241_0==SASS_FOR) ) {
				int LA241_31 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt241=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt241=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt241=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt241=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt241=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt241=11;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 241, 31, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA241_0==SASS_EACH) ) {
				int LA241_32 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt241=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt241=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt241=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt241=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt241=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt241=11;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 241, 32, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA241_0==SASS_WHILE) ) {
				int LA241_33 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt241=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt241=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt241=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt241=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt241=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt241=11;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 241, 33, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA241_0==SASS_EXTEND) ) {
				int LA241_34 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt241=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt241=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt241=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt241=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt241=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt241=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 241, 34, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA241_0==SASS_DEBUG||LA241_0==SASS_WARN) ) {
				int LA241_35 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt241=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt241=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt241=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt241=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt241=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt241=13;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 241, 35, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA241_0==SASS_CONTENT) ) {
				int LA241_36 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt241=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt241=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt241=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt241=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt241=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt241=14;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 241, 36, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA241_0==SASS_RETURN) ) {
				int LA241_37 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt241=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt241=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt241=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt241=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt241=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt241=15;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 241, 37, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA241_0==IMPORT_SYM) ) {
				int LA241_38 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt241=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt241=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt241=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt241=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt241=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt241=17;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 241, 38, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA241_0==SASS_ERROR) ) {
				alt241=16;
			}
			else if ( ((LA241_0 >= BOTTOMCENTER_SYM && LA241_0 <= BOTTOMRIGHT_SYM)||LA241_0==CHARSET_SYM||(LA241_0 >= LEFTBOTTOM_SYM && LA241_0 <= LEFTTOP_SYM)||LA241_0==NAMESPACE_SYM||(LA241_0 >= RIGHTBOTTOM_SYM && LA241_0 <= RIGHTTOP_SYM)||LA241_0==SASS_ELSE||(LA241_0 >= SASS_FORWARD && LA241_0 <= SASS_FUNCTION)||LA241_0==SASS_USE||(LA241_0 >= TOPCENTER_SYM && LA241_0 <= TOPRIGHT_SYM)) ) {
				int LA241_40 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt241=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt241=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt241=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt241=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt241=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 241, 40, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 241, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(241);}

			switch (alt241) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:770:5: ( cp_variable_declaration )=> cp_variable_declaration
					{
					dbg.location(770,32);
					pushFollow(FOLLOW_cp_variable_declaration_in_declaration4260);
					cp_variable_declaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:771:7: ( sass_map )=> sass_map
					{
					dbg.location(771,20);
					pushFollow(FOLLOW_sass_map_in_declaration4273);
					sass_map();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:772:7: ( sass_nested_properties )=> sass_nested_properties
					{
					dbg.location(772,33);
					pushFollow(FOLLOW_sass_nested_properties_in_declaration4285);
					sass_nested_properties();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:773:7: ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE )=> rule
					{
					dbg.location(773,145);
					pushFollow(FOLLOW_rule_in_declaration4348);
					rule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:774:7: ( propertyDeclaration )=> propertyDeclaration
					{
					dbg.location(774,30);
					pushFollow(FOLLOW_propertyDeclaration_in_declaration4360);
					propertyDeclaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:776:7: ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration
					{
					dbg.location(776,67);
					pushFollow(FOLLOW_propertyDeclaration_in_declaration4399);
					propertyDeclaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 7 :
					dbg.enterAlt(7);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:777:7: ( cp_mixin_declaration )=> cp_mixin_declaration
					{
					dbg.location(777,31);
					pushFollow(FOLLOW_cp_mixin_declaration_in_declaration4411);
					cp_mixin_declaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 8 :
					dbg.enterAlt(8);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:778:7: ( cp_mixin_call )=> cp_mixin_call ( ( ws )? IMPORTANT_SYM )?
					{
					dbg.location(778,25);
					pushFollow(FOLLOW_cp_mixin_call_in_declaration4424);
					cp_mixin_call();
					state._fsp--;
					if (state.failed) return;dbg.location(778,39);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:778:39: ( ( ws )? IMPORTANT_SYM )?
					int alt238=2;
					try { dbg.enterSubRule(238);
					try { dbg.enterDecision(238, decisionCanBacktrack[238]);

					try {
						isCyclicDecision = true;
						alt238 = dfa238.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(238);}

					switch (alt238) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:778:40: ( ws )? IMPORTANT_SYM
							{
							dbg.location(778,40);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:778:40: ( ws )?
							int alt237=2;
							try { dbg.enterSubRule(237);
							try { dbg.enterDecision(237, decisionCanBacktrack[237]);

							int LA237_0 = input.LA(1);
							if ( (LA237_0==COMMENT||LA237_0==NL||LA237_0==WS) ) {
								alt237=1;
							}
							} finally {dbg.exitDecision(237);}

							switch (alt237) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:778:40: ws
									{
									dbg.location(778,40);
									pushFollow(FOLLOW_ws_in_declaration4427);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(237);}
							dbg.location(778,44);
							match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_declaration4430); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(238);}

					}
					break;
				case 9 :
					dbg.enterAlt(9);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:779:7: ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )?
					{
					dbg.location(779,25);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(779,43);
					pushFollow(FOLLOW_cp_mixin_call_in_declaration4447);
					cp_mixin_call();
					state._fsp--;
					if (state.failed) return;dbg.location(779,57);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:779:57: ( ( ws )? IMPORTANT_SYM )?
					int alt240=2;
					try { dbg.enterSubRule(240);
					try { dbg.enterDecision(240, decisionCanBacktrack[240]);

					try {
						isCyclicDecision = true;
						alt240 = dfa240.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(240);}

					switch (alt240) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:779:58: ( ws )? IMPORTANT_SYM
							{
							dbg.location(779,58);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:779:58: ( ws )?
							int alt239=2;
							try { dbg.enterSubRule(239);
							try { dbg.enterDecision(239, decisionCanBacktrack[239]);

							int LA239_0 = input.LA(1);
							if ( (LA239_0==COMMENT||LA239_0==NL||LA239_0==WS) ) {
								alt239=1;
							}
							} finally {dbg.exitDecision(239);}

							switch (alt239) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:779:58: ws
									{
									dbg.location(779,58);
									pushFollow(FOLLOW_ws_in_declaration4450);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(239);}
							dbg.location(779,62);
							match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_declaration4453); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(240);}

					}
					break;
				case 10 :
					dbg.enterAlt(10);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:780:7: {...}? at_rule
					{
					dbg.location(780,7);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isCssPreprocessorSource()");
					}dbg.location(780,36);
					pushFollow(FOLLOW_at_rule_in_declaration4469);
					at_rule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 11 :
					dbg.enterAlt(11);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:781:7: {...}? sass_control
					{
					dbg.location(781,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(781,25);
					pushFollow(FOLLOW_sass_control_in_declaration4479);
					sass_control();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 12 :
					dbg.enterAlt(12);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:782:7: {...}? sass_extend
					{
					dbg.location(782,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(782,25);
					pushFollow(FOLLOW_sass_extend_in_declaration4489);
					sass_extend();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 13 :
					dbg.enterAlt(13);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:783:7: {...}? sass_debug
					{
					dbg.location(783,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(783,25);
					pushFollow(FOLLOW_sass_debug_in_declaration4499);
					sass_debug();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 14 :
					dbg.enterAlt(14);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:784:7: {...}? sass_content
					{
					dbg.location(784,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(784,25);
					pushFollow(FOLLOW_sass_content_in_declaration4509);
					sass_content();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 15 :
					dbg.enterAlt(15);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:785:7: {...}? sass_function_return
					{
					dbg.location(785,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(785,25);
					pushFollow(FOLLOW_sass_function_return_in_declaration4519);
					sass_function_return();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 16 :
					dbg.enterAlt(16);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:786:7: {...}? sass_error
					{
					dbg.location(786,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(786,25);
					pushFollow(FOLLOW_sass_error_in_declaration4529);
					sass_error();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 17 :
					dbg.enterAlt(17);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:787:7: {...}? importItem
					{
					dbg.location(787,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(787,25);
					pushFollow(FOLLOW_importItem_in_declaration4539);
					importItem();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 18 :
					dbg.enterAlt(18);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:788:7: GEN
					{
					dbg.location(788,7);
					match(input,GEN,FOLLOW_GEN_in_declaration4547); if (state.failed) return;
					}
					break;

			}
		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(SEMI));
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(789, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "declaration");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "declaration"



	// $ANTLR start "selectorsGroup"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:795:1: selectorsGroup : selector ( ( ws )? COMMA ( ws )? selector )* ({...}? COMMA )? ;
	public final void selectorsGroup() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "selectorsGroup");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(795, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:796:5: ( selector ( ( ws )? COMMA ( ws )? selector )* ({...}? COMMA )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:797:9: selector ( ( ws )? COMMA ( ws )? selector )* ({...}? COMMA )?
			{
			dbg.location(797,9);
			pushFollow(FOLLOW_selector_in_selectorsGroup4581);
			selector();
			state._fsp--;
			if (state.failed) return;dbg.location(797,18);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:797:18: ( ( ws )? COMMA ( ws )? selector )*
			try { dbg.enterSubRule(244);

			loop244:
			while (true) {
				int alt244=2;
				try { dbg.enterDecision(244, decisionCanBacktrack[244]);

				try {
					isCyclicDecision = true;
					alt244 = dfa244.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(244);}

				switch (alt244) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:797:19: ( ws )? COMMA ( ws )? selector
					{
					dbg.location(797,19);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:797:19: ( ws )?
					int alt242=2;
					try { dbg.enterSubRule(242);
					try { dbg.enterDecision(242, decisionCanBacktrack[242]);

					int LA242_0 = input.LA(1);
					if ( (LA242_0==COMMENT||LA242_0==NL||LA242_0==WS) ) {
						alt242=1;
					}
					} finally {dbg.exitDecision(242);}

					switch (alt242) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:797:19: ws
							{
							dbg.location(797,19);
							pushFollow(FOLLOW_ws_in_selectorsGroup4584);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(242);}
					dbg.location(797,23);
					match(input,COMMA,FOLLOW_COMMA_in_selectorsGroup4587); if (state.failed) return;dbg.location(797,29);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:797:29: ( ws )?
					int alt243=2;
					try { dbg.enterSubRule(243);
					try { dbg.enterDecision(243, decisionCanBacktrack[243]);

					int LA243_0 = input.LA(1);
					if ( (LA243_0==COMMENT||LA243_0==NL||LA243_0==WS) ) {
						alt243=1;
					}
					} finally {dbg.exitDecision(243);}

					switch (alt243) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:797:29: ws
							{
							dbg.location(797,29);
							pushFollow(FOLLOW_ws_in_selectorsGroup4589);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(243);}
					dbg.location(797,33);
					pushFollow(FOLLOW_selector_in_selectorsGroup4592);
					selector();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop244;
				}
			}
			} finally {dbg.exitSubRule(244);}
			dbg.location(797,44);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:797:44: ({...}? COMMA )?
			int alt245=2;
			try { dbg.enterSubRule(245);
			try { dbg.enterDecision(245, decisionCanBacktrack[245]);

			int LA245_0 = input.LA(1);
			if ( (LA245_0==COMMA) ) {
				alt245=1;
			}
			} finally {dbg.exitDecision(245);}

			switch (alt245) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:797:45: {...}? COMMA
					{
					dbg.location(797,45);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "selectorsGroup", "isCssPreprocessorSource()");
					}dbg.location(797,74);
					match(input,COMMA,FOLLOW_COMMA_in_selectorsGroup4599); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(245);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(798, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "selectorsGroup");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "selectorsGroup"



	// $ANTLR start "selector"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:800:1: selector : ( ( combinator ( ws )? )? simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence )* |{...}? combinator );
	public final void selector() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "selector");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(800, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:801:5: ( ( combinator ( ws )? )? simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence )* |{...}? combinator )
			int alt252=2;
			try { dbg.enterDecision(252, decisionCanBacktrack[252]);

			try {
				isCyclicDecision = true;
				alt252 = dfa252.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(252);}

			switch (alt252) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:801:8: ( combinator ( ws )? )? simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence )*
					{
					dbg.location(801,8);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:801:8: ( combinator ( ws )? )?
					int alt247=2;
					try { dbg.enterSubRule(247);
					try { dbg.enterDecision(247, decisionCanBacktrack[247]);

					int LA247_0 = input.LA(1);
					if ( (LA247_0==GREATER||LA247_0==PLUS||LA247_0==TILDE) ) {
						alt247=1;
					}
					} finally {dbg.exitDecision(247);}

					switch (alt247) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:801:9: combinator ( ws )?
							{
							dbg.location(801,9);
							pushFollow(FOLLOW_combinator_in_selector4620);
							combinator();
							state._fsp--;
							if (state.failed) return;dbg.location(801,20);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:801:20: ( ws )?
							int alt246=2;
							try { dbg.enterSubRule(246);
							try { dbg.enterDecision(246, decisionCanBacktrack[246]);

							int LA246_0 = input.LA(1);
							if ( (LA246_0==COMMENT||LA246_0==NL||LA246_0==WS) ) {
								alt246=1;
							}
							} finally {dbg.exitDecision(246);}

							switch (alt246) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:801:20: ws
									{
									dbg.location(801,20);
									pushFollow(FOLLOW_ws_in_selector4622);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(246);}

							}
							break;

					}
					} finally {dbg.exitSubRule(247);}
					dbg.location(801,26);
					pushFollow(FOLLOW_simpleSelectorSequence_in_selector4627);
					simpleSelectorSequence();
					state._fsp--;
					if (state.failed) return;dbg.location(801,49);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:801:49: ( ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence )*
					try { dbg.enterSubRule(251);

					loop251:
					while (true) {
						int alt251=2;
						try { dbg.enterDecision(251, decisionCanBacktrack[251]);

						try {
							isCyclicDecision = true;
							alt251 = dfa251.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(251);}

						switch (alt251) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:801:51: ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence
							{
							dbg.location(801,51);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:801:51: ( ( ( ws )? combinator ( ws )? ) | ws )
							int alt250=2;
							try { dbg.enterSubRule(250);
							try { dbg.enterDecision(250, decisionCanBacktrack[250]);

							try {
								isCyclicDecision = true;
								alt250 = dfa250.predict(input);
							}
							catch (NoViableAltException nvae) {
								dbg.recognitionException(nvae);
								throw nvae;
							}
							} finally {dbg.exitDecision(250);}

							switch (alt250) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:801:52: ( ( ws )? combinator ( ws )? )
									{
									dbg.location(801,52);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:801:52: ( ( ws )? combinator ( ws )? )
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:801:53: ( ws )? combinator ( ws )?
									{
									dbg.location(801,53);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:801:53: ( ws )?
									int alt248=2;
									try { dbg.enterSubRule(248);
									try { dbg.enterDecision(248, decisionCanBacktrack[248]);

									int LA248_0 = input.LA(1);
									if ( (LA248_0==COMMENT||LA248_0==NL||LA248_0==WS) ) {
										alt248=1;
									}
									} finally {dbg.exitDecision(248);}

									switch (alt248) {
										case 1 :
											dbg.enterAlt(1);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:801:53: ws
											{
											dbg.location(801,53);
											pushFollow(FOLLOW_ws_in_selector4633);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(248);}
									dbg.location(801,57);
									pushFollow(FOLLOW_combinator_in_selector4636);
									combinator();
									state._fsp--;
									if (state.failed) return;dbg.location(801,68);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:801:68: ( ws )?
									int alt249=2;
									try { dbg.enterSubRule(249);
									try { dbg.enterDecision(249, decisionCanBacktrack[249]);

									int LA249_0 = input.LA(1);
									if ( (LA249_0==COMMENT||LA249_0==NL||LA249_0==WS) ) {
										alt249=1;
									}
									} finally {dbg.exitDecision(249);}

									switch (alt249) {
										case 1 :
											dbg.enterAlt(1);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:801:68: ws
											{
											dbg.location(801,68);
											pushFollow(FOLLOW_ws_in_selector4638);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(249);}

									}

									}
									break;
								case 2 :
									dbg.enterAlt(2);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:801:73: ws
									{
									dbg.location(801,73);
									pushFollow(FOLLOW_ws_in_selector4642);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(250);}
							dbg.location(801,77);
							pushFollow(FOLLOW_simpleSelectorSequence_in_selector4645);
							simpleSelectorSequence();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop251;
						}
					}
					} finally {dbg.exitSubRule(251);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:802:10: {...}? combinator
					{
					dbg.location(802,10);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "selector", "isScssSource()");
					}dbg.location(802,28);
					pushFollow(FOLLOW_combinator_in_selector4660);
					combinator();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(803, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "selector");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "selector"



	// $ANTLR start "combinator"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:805:1: combinator : ( PLUS | GREATER | TILDE );
	public final void combinator() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "combinator");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(805, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:806:5: ( PLUS | GREATER | TILDE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(806,5);
			if ( input.LA(1)==GREATER||input.LA(1)==PLUS||input.LA(1)==TILDE ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(808, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "combinator");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "combinator"



	// $ANTLR start "simpleSelectorSequence"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:810:1: simpleSelectorSequence : ( ( elementSubsequent |{...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ( ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) | ( ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ) ) )* | ( typeSelector )=> typeSelector ( ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) |{...}? ws sass_selector_interpolation_exp ) )* );
	public final void simpleSelectorSequence() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "simpleSelectorSequence");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(810, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:811:2: ( ( elementSubsequent |{...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ( ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) | ( ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ) ) )* | ( typeSelector )=> typeSelector ( ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) |{...}? ws sass_selector_interpolation_exp ) )* )
			int alt261=2;
			try { dbg.enterDecision(261, decisionCanBacktrack[261]);

			int LA261_0 = input.LA(1);
			if ( (LA261_0==AT_SIGN||LA261_0==COLON||(LA261_0 >= DCOLON && LA261_0 <= DOT)||(LA261_0 >= HASH && LA261_0 <= HASH_SYMBOL)||LA261_0==LBRACKET||LA261_0==MINUS||LA261_0==SASS_EXTEND_ONLY_SELECTOR) ) {
				alt261=1;
			}
			else if ( (LA261_0==LESS_AND) ) {
				int LA261_2 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt261=1;
				}
				else if ( (synpred33_Css3()) ) {
					alt261=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 261, 2, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA261_0==IDENT) ) {
				int LA261_3 = input.LA(2);
				if ( (LA261_3==HASH_SYMBOL) ) {
					int LA261_7 = input.LA(3);
					if ( (LA261_7==LBRACE) ) {
						alt261=1;
					}
					else if ( (LA261_7==NAME) && (synpred33_Css3())) {
						alt261=2;
					}
					else if ( (LA261_7==IDENT||LA261_7==MINUS) && (synpred33_Css3())) {
						alt261=2;
					}
					else if ( (LA261_7==AT_SIGN) && (synpred33_Css3())) {
						alt261=2;
					}

				}
				else if ( (LA261_3==AT_SIGN) ) {
					alt261=1;
				}
				else if ( (LA261_3==PIPE) && (synpred33_Css3())) {
					alt261=2;
				}
				else if ( (LA261_3==COMMENT||LA261_3==NL||LA261_3==WS) && (synpred33_Css3())) {
					alt261=2;
				}
				else if ( (LA261_3==SASS_EXTEND_ONLY_SELECTOR) && (synpred33_Css3())) {
					alt261=2;
				}
				else if ( (LA261_3==LESS_AND) && (synpred33_Css3())) {
					alt261=2;
				}
				else if ( (LA261_3==HASH) && (synpred33_Css3())) {
					alt261=2;
				}
				else if ( (LA261_3==DOT) && (synpred33_Css3())) {
					alt261=2;
				}
				else if ( (LA261_3==DIMENSION) && (synpred33_Css3())) {
					alt261=2;
				}
				else if ( (LA261_3==LBRACKET) && (synpred33_Css3())) {
					alt261=2;
				}
				else if ( (LA261_3==COLON||LA261_3==DCOLON) && (synpred33_Css3())) {
					alt261=2;
				}
				else if ( (LA261_3==GREATER||LA261_3==PLUS||LA261_3==TILDE) && (synpred33_Css3())) {
					alt261=2;
				}
				else if ( (LA261_3==COMMA) && (synpred33_Css3())) {
					alt261=2;
				}
				else if ( (LA261_3==LBRACE) && (synpred33_Css3())) {
					alt261=2;
				}
				else if ( (LA261_3==RPAREN) && (synpred33_Css3())) {
					alt261=2;
				}
				else if ( (LA261_3==SEMI) && (synpred33_Css3())) {
					alt261=2;
				}
				else if ( (LA261_3==RBRACE) && (synpred33_Css3())) {
					alt261=2;
				}

			}
			else if ( (LA261_0==STAR) && (synpred33_Css3())) {
				alt261=2;
			}
			else if ( (LA261_0==PIPE) && (synpred33_Css3())) {
				alt261=2;
			}
			else if ( (LA261_0==GEN) && (synpred33_Css3())) {
				alt261=2;
			}

			} finally {dbg.exitDecision(261);}

			switch (alt261) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:812:9: ( elementSubsequent |{...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ( ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) | ( ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ) ) )*
					{
					dbg.location(812,9);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:812:9: ( elementSubsequent |{...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp )
					int alt253=3;
					try { dbg.enterSubRule(253);
					try { dbg.enterDecision(253, decisionCanBacktrack[253]);

					switch ( input.LA(1) ) {
					case COLON:
					case DCOLON:
					case DIMENSION:
					case DOT:
					case HASH:
					case LBRACKET:
					case LESS_AND:
					case SASS_EXTEND_ONLY_SELECTOR:
						{
						alt253=1;
						}
						break;
					case HASH_SYMBOL:
						{
						int LA253_2 = input.LA(2);
						if ( (LA253_2==LBRACE) ) {
							alt253=2;
						}
						else if ( (LA253_2==AT_SIGN||LA253_2==IDENT||LA253_2==MINUS||LA253_2==NAME) ) {
							alt253=1;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 253, 2, input);
								dbg.recognitionException(nvae);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case IDENT:
					case MINUS:
						{
						int LA253_3 = input.LA(2);
						if ( (LA253_3==HASH_SYMBOL) ) {
							alt253=2;
						}
						else if ( (LA253_3==AT_SIGN) ) {
							alt253=3;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 253, 3, input);
								dbg.recognitionException(nvae);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case AT_SIGN:
						{
						alt253=3;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 253, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(253);}

					switch (alt253) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:812:10: elementSubsequent
							{
							dbg.location(812,10);
							pushFollow(FOLLOW_elementSubsequent_in_simpleSelectorSequence4712);
							elementSubsequent();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:812:30: {...}? sass_selector_interpolation_exp
							{
							dbg.location(812,30);
							if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "simpleSelectorSequence", "isScssSource()");
							}dbg.location(812,48);
							pushFollow(FOLLOW_sass_selector_interpolation_exp_in_simpleSelectorSequence4718);
							sass_selector_interpolation_exp();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 3 :
							dbg.enterAlt(3);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:813:11: {...}? less_selector_interpolation_exp
							{
							dbg.location(813,11);
							if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "simpleSelectorSequence", "isLessSource()");
							}dbg.location(813,29);
							pushFollow(FOLLOW_less_selector_interpolation_exp_in_simpleSelectorSequence4732);
							less_selector_interpolation_exp();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(253);}
					dbg.location(813,64);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:813:64: ( ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) | ( ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ) ) )*
					try { dbg.enterSubRule(257);

					loop257:
					while (true) {
						int alt257=2;
						try { dbg.enterDecision(257, decisionCanBacktrack[257]);

						int LA257_0 = input.LA(1);
						if ( (LA257_0==COMMENT||LA257_0==NL||LA257_0==WS) ) {
							int LA257_1 = input.LA(2);
							if ( (synpred32_Css3()) ) {
								alt257=1;
							}

						}
						else if ( (LA257_0==SASS_EXTEND_ONLY_SELECTOR) && (synpred32_Css3())) {
							alt257=1;
						}
						else if ( (LA257_0==LESS_AND) && (synpred32_Css3())) {
							alt257=1;
						}
						else if ( (LA257_0==HASH) && (synpred32_Css3())) {
							alt257=1;
						}
						else if ( (LA257_0==HASH_SYMBOL) && (synpred32_Css3())) {
							alt257=1;
						}
						else if ( (LA257_0==DOT) && (synpred32_Css3())) {
							alt257=1;
						}
						else if ( (LA257_0==DIMENSION) && (synpred32_Css3())) {
							alt257=1;
						}
						else if ( (LA257_0==LBRACKET) && (synpred32_Css3())) {
							alt257=1;
						}
						else if ( (LA257_0==COLON||LA257_0==DCOLON) && (synpred32_Css3())) {
							alt257=1;
						}

						} finally {dbg.exitDecision(257);}

						switch (alt257) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:813:65: ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) | ( ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ) )
							{
							dbg.location(813,79);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:813:79: ( ( ( ws )? elementSubsequent ) | ( ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ) )
							int alt256=2;
							try { dbg.enterSubRule(256);
							try { dbg.enterDecision(256, decisionCanBacktrack[256]);

							try {
								isCyclicDecision = true;
								alt256 = dfa256.predict(input);
							}
							catch (NoViableAltException nvae) {
								dbg.recognitionException(nvae);
								throw nvae;
							}
							} finally {dbg.exitDecision(256);}

							switch (alt256) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:813:80: ( ( ws )? elementSubsequent )
									{
									dbg.location(813,80);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:813:80: ( ( ws )? elementSubsequent )
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:813:81: ( ws )? elementSubsequent
									{
									dbg.location(813,81);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:813:81: ( ws )?
									int alt254=2;
									try { dbg.enterSubRule(254);
									try { dbg.enterDecision(254, decisionCanBacktrack[254]);

									int LA254_0 = input.LA(1);
									if ( (LA254_0==COMMENT||LA254_0==NL||LA254_0==WS) ) {
										alt254=1;
									}
									} finally {dbg.exitDecision(254);}

									switch (alt254) {
										case 1 :
											dbg.enterAlt(1);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:813:81: ws
											{
											dbg.location(813,81);
											pushFollow(FOLLOW_ws_in_simpleSelectorSequence4747);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(254);}
									dbg.location(813,85);
									pushFollow(FOLLOW_elementSubsequent_in_simpleSelectorSequence4750);
									elementSubsequent();
									state._fsp--;
									if (state.failed) return;
									}

									}
									break;
								case 2 :
									dbg.enterAlt(2);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:813:105: ( ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) )
									{
									dbg.location(813,105);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:813:105: ( ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) )
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:813:106: ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp )
									{
									dbg.location(813,106);
									pushFollow(FOLLOW_ws_in_simpleSelectorSequence4755);
									ws();
									state._fsp--;
									if (state.failed) return;dbg.location(813,109);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:813:109: ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp )
									int alt255=2;
									try { dbg.enterSubRule(255);
									try { dbg.enterDecision(255, decisionCanBacktrack[255]);

									switch ( input.LA(1) ) {
									case IDENT:
									case MINUS:
										{
										int LA255_1 = input.LA(2);
										if ( (LA255_1==HASH_SYMBOL) ) {
											alt255=1;
										}
										else if ( (LA255_1==AT_SIGN) ) {
											alt255=2;
										}

										else {
											if (state.backtracking>0) {state.failed=true; return;}
											int nvaeMark = input.mark();
											try {
												input.consume();
												NoViableAltException nvae =
													new NoViableAltException("", 255, 1, input);
												dbg.recognitionException(nvae);
												throw nvae;
											} finally {
												input.rewind(nvaeMark);
											}
										}

										}
										break;
									case HASH_SYMBOL:
										{
										alt255=1;
										}
										break;
									case AT_SIGN:
										{
										alt255=2;
										}
										break;
									default:
										if (state.backtracking>0) {state.failed=true; return;}
										NoViableAltException nvae =
											new NoViableAltException("", 255, 0, input);
										dbg.recognitionException(nvae);
										throw nvae;
									}
									} finally {dbg.exitDecision(255);}

									switch (alt255) {
										case 1 :
											dbg.enterAlt(1);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:813:110: {...}? sass_selector_interpolation_exp
											{
											dbg.location(813,110);
											if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
												if (state.backtracking>0) {state.failed=true; return;}
												throw new FailedPredicateException(input, "simpleSelectorSequence", "isScssSource()");
											}dbg.location(813,128);
											pushFollow(FOLLOW_sass_selector_interpolation_exp_in_simpleSelectorSequence4760);
											sass_selector_interpolation_exp();
											state._fsp--;
											if (state.failed) return;
											}
											break;
										case 2 :
											dbg.enterAlt(2);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:813:162: {...}? less_selector_interpolation_exp
											{
											dbg.location(813,162);
											if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
												if (state.backtracking>0) {state.failed=true; return;}
												throw new FailedPredicateException(input, "simpleSelectorSequence", "isLessSource()");
											}dbg.location(813,180);
											pushFollow(FOLLOW_less_selector_interpolation_exp_in_simpleSelectorSequence4766);
											less_selector_interpolation_exp();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(255);}

									}

									}
									break;

							}
							} finally {dbg.exitSubRule(256);}

							}
							break;

						default :
							break loop257;
						}
					}
					} finally {dbg.exitSubRule(257);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:814:4: ( typeSelector )=> typeSelector ( ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) |{...}? ws sass_selector_interpolation_exp ) )*
					{
					dbg.location(814,20);
					pushFollow(FOLLOW_typeSelector_in_simpleSelectorSequence4780);
					typeSelector();
					state._fsp--;
					if (state.failed) return;dbg.location(814,33);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:814:33: ( ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) |{...}? ws sass_selector_interpolation_exp ) )*
					try { dbg.enterSubRule(260);

					loop260:
					while (true) {
						int alt260=2;
						try { dbg.enterDecision(260, decisionCanBacktrack[260]);

						int LA260_0 = input.LA(1);
						if ( (LA260_0==COMMENT||LA260_0==NL||LA260_0==WS) ) {
							int LA260_1 = input.LA(2);
							if ( (synpred34_Css3()) ) {
								alt260=1;
							}

						}
						else if ( (LA260_0==SASS_EXTEND_ONLY_SELECTOR) && (synpred34_Css3())) {
							alt260=1;
						}
						else if ( (LA260_0==LESS_AND) && (synpred34_Css3())) {
							alt260=1;
						}
						else if ( (LA260_0==HASH) && (synpred34_Css3())) {
							alt260=1;
						}
						else if ( (LA260_0==HASH_SYMBOL) && (synpred34_Css3())) {
							alt260=1;
						}
						else if ( (LA260_0==DOT) && (synpred34_Css3())) {
							alt260=1;
						}
						else if ( (LA260_0==DIMENSION) && (synpred34_Css3())) {
							alt260=1;
						}
						else if ( (LA260_0==LBRACKET) && (synpred34_Css3())) {
							alt260=1;
						}
						else if ( (LA260_0==COLON||LA260_0==DCOLON) && (synpred34_Css3())) {
							alt260=1;
						}

						} finally {dbg.exitDecision(260);}

						switch (alt260) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:814:34: ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) |{...}? ws sass_selector_interpolation_exp )
							{
							dbg.location(814,48);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:814:48: ( ( ( ws )? elementSubsequent ) |{...}? ws sass_selector_interpolation_exp )
							int alt259=2;
							try { dbg.enterSubRule(259);
							try { dbg.enterDecision(259, decisionCanBacktrack[259]);

							try {
								isCyclicDecision = true;
								alt259 = dfa259.predict(input);
							}
							catch (NoViableAltException nvae) {
								dbg.recognitionException(nvae);
								throw nvae;
							}
							} finally {dbg.exitDecision(259);}

							switch (alt259) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:814:49: ( ( ws )? elementSubsequent )
									{
									dbg.location(814,49);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:814:49: ( ( ws )? elementSubsequent )
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:814:50: ( ws )? elementSubsequent
									{
									dbg.location(814,50);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:814:50: ( ws )?
									int alt258=2;
									try { dbg.enterSubRule(258);
									try { dbg.enterDecision(258, decisionCanBacktrack[258]);

									int LA258_0 = input.LA(1);
									if ( (LA258_0==COMMENT||LA258_0==NL||LA258_0==WS) ) {
										alt258=1;
									}
									} finally {dbg.exitDecision(258);}

									switch (alt258) {
										case 1 :
											dbg.enterAlt(1);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:814:50: ws
											{
											dbg.location(814,50);
											pushFollow(FOLLOW_ws_in_simpleSelectorSequence4792);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(258);}
									dbg.location(814,54);
									pushFollow(FOLLOW_elementSubsequent_in_simpleSelectorSequence4795);
									elementSubsequent();
									state._fsp--;
									if (state.failed) return;
									}

									}
									break;
								case 2 :
									dbg.enterAlt(2);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:814:75: {...}? ws sass_selector_interpolation_exp
									{
									dbg.location(814,75);
									if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
										if (state.backtracking>0) {state.failed=true; return;}
										throw new FailedPredicateException(input, "simpleSelectorSequence", "isScssSource()");
									}dbg.location(814,93);
									pushFollow(FOLLOW_ws_in_simpleSelectorSequence4802);
									ws();
									state._fsp--;
									if (state.failed) return;dbg.location(814,96);
									pushFollow(FOLLOW_sass_selector_interpolation_exp_in_simpleSelectorSequence4804);
									sass_selector_interpolation_exp();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(259);}

							}
							break;

						default :
							break loop260;
						}
					}
					} finally {dbg.exitSubRule(260);}

					}
					break;

			}
		}
		catch ( RecognitionException rce) {

			            reportError(rce);
			            consumeUntil(input, BitSet.of(LBRACE));
			        
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(815, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "simpleSelectorSequence");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "simpleSelectorSequence"



	// $ANTLR start "esPred"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:822:1: esPred : ( HASH_SYMBOL | HASH | DOT | LBRACKET | COLON | DCOLON | SASS_EXTEND_ONLY_SELECTOR |{...}? LESS_AND );
	public final void esPred() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "esPred");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(822, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:823:5: ( HASH_SYMBOL | HASH | DOT | LBRACKET | COLON | DCOLON | SASS_EXTEND_ONLY_SELECTOR |{...}? LESS_AND )
			int alt262=8;
			try { dbg.enterDecision(262, decisionCanBacktrack[262]);

			switch ( input.LA(1) ) {
			case HASH_SYMBOL:
				{
				alt262=1;
				}
				break;
			case HASH:
				{
				alt262=2;
				}
				break;
			case DOT:
				{
				alt262=3;
				}
				break;
			case LBRACKET:
				{
				alt262=4;
				}
				break;
			case COLON:
				{
				alt262=5;
				}
				break;
			case DCOLON:
				{
				alt262=6;
				}
				break;
			case SASS_EXTEND_ONLY_SELECTOR:
				{
				alt262=7;
				}
				break;
			case LESS_AND:
				{
				alt262=8;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 262, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(262);}

			switch (alt262) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:823:7: HASH_SYMBOL
					{
					dbg.location(823,7);
					match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_esPred4829); if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:823:21: HASH
					{
					dbg.location(823,21);
					match(input,HASH,FOLLOW_HASH_in_esPred4833); if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:823:28: DOT
					{
					dbg.location(823,28);
					match(input,DOT,FOLLOW_DOT_in_esPred4837); if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:823:34: LBRACKET
					{
					dbg.location(823,34);
					match(input,LBRACKET,FOLLOW_LBRACKET_in_esPred4841); if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:823:45: COLON
					{
					dbg.location(823,45);
					match(input,COLON,FOLLOW_COLON_in_esPred4845); if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:823:53: DCOLON
					{
					dbg.location(823,53);
					match(input,DCOLON,FOLLOW_DCOLON_in_esPred4849); if (state.failed) return;
					}
					break;
				case 7 :
					dbg.enterAlt(7);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:823:62: SASS_EXTEND_ONLY_SELECTOR
					{
					dbg.location(823,62);
					match(input,SASS_EXTEND_ONLY_SELECTOR,FOLLOW_SASS_EXTEND_ONLY_SELECTOR_in_esPred4853); if (state.failed) return;
					}
					break;
				case 8 :
					dbg.enterAlt(8);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:823:90: {...}? LESS_AND
					{
					dbg.location(823,90);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "esPred", "isCssPreprocessorSource()");
					}dbg.location(823,119);
					match(input,LESS_AND,FOLLOW_LESS_AND_in_esPred4859); if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(824, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "esPred");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "esPred"



	// $ANTLR start "typeSelector"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:826:1: typeSelector options {k=2; } : ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? elementName ;
	public final void typeSelector() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "typeSelector");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(826, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:828:3: ( ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? elementName )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:828:6: ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? elementName
			{
			dbg.location(828,6);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:828:6: ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )?
			int alt263=2;
			try { dbg.enterSubRule(263);
			try { dbg.enterDecision(263, decisionCanBacktrack[263]);

			int LA263_0 = input.LA(1);
			if ( (LA263_0==IDENT) ) {
				int LA263_1 = input.LA(2);
				if ( (LA263_1==PIPE) && (synpred35_Css3())) {
					alt263=1;
				}
			}
			else if ( (LA263_0==STAR) ) {
				int LA263_2 = input.LA(2);
				if ( (LA263_2==PIPE) && (synpred35_Css3())) {
					alt263=1;
				}
			}
			else if ( (LA263_0==PIPE) && (synpred35_Css3())) {
				alt263=1;
			}
			} finally {dbg.exitDecision(263);}

			switch (alt263) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:828:7: ( ( IDENT | STAR )? PIPE )=> namespacePrefix
					{
					dbg.location(828,31);
					pushFollow(FOLLOW_namespacePrefix_in_typeSelector4901);
					namespacePrefix();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(263);}
			dbg.location(828,49);
			pushFollow(FOLLOW_elementName_in_typeSelector4905);
			elementName();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(829, 2);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "typeSelector");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "typeSelector"



	// $ANTLR start "namespacePrefix"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:831:1: namespacePrefix : ( namespacePrefixName | STAR )? PIPE ;
	public final void namespacePrefix() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "namespacePrefix");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(831, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:832:3: ( ( namespacePrefixName | STAR )? PIPE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:832:5: ( namespacePrefixName | STAR )? PIPE
			{
			dbg.location(832,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:832:5: ( namespacePrefixName | STAR )?
			int alt264=3;
			try { dbg.enterSubRule(264);
			try { dbg.enterDecision(264, decisionCanBacktrack[264]);

			int LA264_0 = input.LA(1);
			if ( (LA264_0==IDENT) ) {
				alt264=1;
			}
			else if ( (LA264_0==STAR) ) {
				alt264=2;
			}
			} finally {dbg.exitDecision(264);}

			switch (alt264) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:832:7: namespacePrefixName
					{
					dbg.location(832,7);
					pushFollow(FOLLOW_namespacePrefixName_in_namespacePrefix4920);
					namespacePrefixName();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:832:29: STAR
					{
					dbg.location(832,29);
					match(input,STAR,FOLLOW_STAR_in_namespacePrefix4924); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(264);}
			dbg.location(832,36);
			match(input,PIPE,FOLLOW_PIPE_in_namespacePrefix4928); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(833, 2);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "namespacePrefix");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "namespacePrefix"



	// $ANTLR start "elementSubsequent"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:836:1: elementSubsequent : ({...}? sass_extend_only_selector |{...}? LESS_AND ( IDENT | NUMBER |{...}? sass_interpolation_expression_var )* |{...}? LESS_AND less_selector_interpolation_exp | cssId | cssClass | slAttribute | pseudo ) ;
	public final void elementSubsequent() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "elementSubsequent");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(836, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:837:5: ( ({...}? sass_extend_only_selector |{...}? LESS_AND ( IDENT | NUMBER |{...}? sass_interpolation_expression_var )* |{...}? LESS_AND less_selector_interpolation_exp | cssId | cssClass | slAttribute | pseudo ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:5: ({...}? sass_extend_only_selector |{...}? LESS_AND ( IDENT | NUMBER |{...}? sass_interpolation_expression_var )* |{...}? LESS_AND less_selector_interpolation_exp | cssId | cssClass | slAttribute | pseudo )
			{
			dbg.location(838,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:5: ({...}? sass_extend_only_selector |{...}? LESS_AND ( IDENT | NUMBER |{...}? sass_interpolation_expression_var )* |{...}? LESS_AND less_selector_interpolation_exp | cssId | cssClass | slAttribute | pseudo )
			int alt266=7;
			try { dbg.enterSubRule(266);
			try { dbg.enterDecision(266, decisionCanBacktrack[266]);

			switch ( input.LA(1) ) {
			case SASS_EXTEND_ONLY_SELECTOR:
				{
				alt266=1;
				}
				break;
			case LESS_AND:
				{
				switch ( input.LA(2) ) {
				case IDENT:
					{
					int LA266_7 = input.LA(3);
					if ( ((LA266_7 >= COLON && LA266_7 <= COMMENT)||(LA266_7 >= DCOLON && LA266_7 <= DOT)||LA266_7==GREATER||(LA266_7 >= HASH && LA266_7 <= HASH_SYMBOL)||LA266_7==IDENT||(LA266_7 >= LBRACE && LA266_7 <= LBRACKET)||LA266_7==LESS_AND||LA266_7==NL||LA266_7==NUMBER||LA266_7==PLUS||LA266_7==RBRACE||LA266_7==RPAREN||LA266_7==SASS_EXTEND_ONLY_SELECTOR||LA266_7==SEMI||LA266_7==TILDE||LA266_7==WS) ) {
						alt266=2;
					}
					else if ( (LA266_7==AT_SIGN) ) {
						alt266=3;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 266, 7, input);
							dbg.recognitionException(nvae);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case COLON:
				case COMMA:
				case COMMENT:
				case DCOLON:
				case DIMENSION:
				case DOT:
				case GREATER:
				case HASH:
				case HASH_SYMBOL:
				case LBRACE:
				case LBRACKET:
				case LESS_AND:
				case NL:
				case NUMBER:
				case PLUS:
				case RBRACE:
				case RPAREN:
				case SASS_EXTEND_ONLY_SELECTOR:
				case SEMI:
				case TILDE:
				case WS:
					{
					alt266=2;
					}
					break;
				case AT_SIGN:
				case MINUS:
					{
					alt266=3;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 266, 2, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case HASH:
			case HASH_SYMBOL:
				{
				alt266=4;
				}
				break;
			case DIMENSION:
			case DOT:
				{
				alt266=5;
				}
				break;
			case LBRACKET:
				{
				alt266=6;
				}
				break;
			case COLON:
			case DCOLON:
				{
				alt266=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 266, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(266);}

			switch (alt266) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:839:9: {...}? sass_extend_only_selector
					{
					dbg.location(839,9);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "elementSubsequent", "isScssSource()");
					}dbg.location(839,27);
					pushFollow(FOLLOW_sass_extend_only_selector_in_elementSubsequent4960);
					sass_extend_only_selector();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:840:11: {...}? LESS_AND ( IDENT | NUMBER |{...}? sass_interpolation_expression_var )*
					{
					dbg.location(840,11);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "elementSubsequent", "isCssPreprocessorSource()");
					}dbg.location(840,40);
					match(input,LESS_AND,FOLLOW_LESS_AND_in_elementSubsequent4974); if (state.failed) return;dbg.location(840,49);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:840:49: ( IDENT | NUMBER |{...}? sass_interpolation_expression_var )*
					try { dbg.enterSubRule(265);

					loop265:
					while (true) {
						int alt265=4;
						try { dbg.enterDecision(265, decisionCanBacktrack[265]);

						switch ( input.LA(1) ) {
						case HASH_SYMBOL:
							{
							int LA265_2 = input.LA(2);
							if ( (LA265_2==LBRACE) ) {
								alt265=3;
							}

							}
							break;
						case IDENT:
							{
							alt265=1;
							}
							break;
						case NUMBER:
							{
							alt265=2;
							}
							break;
						}
						} finally {dbg.exitDecision(265);}

						switch (alt265) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:840:50: IDENT
							{
							dbg.location(840,50);
							match(input,IDENT,FOLLOW_IDENT_in_elementSubsequent4977); if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:840:58: NUMBER
							{
							dbg.location(840,58);
							match(input,NUMBER,FOLLOW_NUMBER_in_elementSubsequent4981); if (state.failed) return;
							}
							break;
						case 3 :
							dbg.enterAlt(3);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:840:67: {...}? sass_interpolation_expression_var
							{
							dbg.location(840,67);
							if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "elementSubsequent", "isScssSource()");
							}dbg.location(840,85);
							pushFollow(FOLLOW_sass_interpolation_expression_var_in_elementSubsequent4987);
							sass_interpolation_expression_var();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop265;
						}
					}
					} finally {dbg.exitSubRule(265);}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:841:11: {...}? LESS_AND less_selector_interpolation_exp
					{
					dbg.location(841,11);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "elementSubsequent", "isLessSource()");
					}dbg.location(841,29);
					match(input,LESS_AND,FOLLOW_LESS_AND_in_elementSubsequent5003); if (state.failed) return;dbg.location(841,38);
					pushFollow(FOLLOW_less_selector_interpolation_exp_in_elementSubsequent5005);
					less_selector_interpolation_exp();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:842:8: cssId
					{
					dbg.location(842,8);
					pushFollow(FOLLOW_cssId_in_elementSubsequent5014);
					cssId();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:843:8: cssClass
					{
					dbg.location(843,8);
					pushFollow(FOLLOW_cssClass_in_elementSubsequent5023);
					cssClass();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:844:11: slAttribute
					{
					dbg.location(844,11);
					pushFollow(FOLLOW_slAttribute_in_elementSubsequent5035);
					slAttribute();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 7 :
					dbg.enterAlt(7);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:845:11: pseudo
					{
					dbg.location(845,11);
					pushFollow(FOLLOW_pseudo_in_elementSubsequent5047);
					pseudo();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(266);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(847, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "elementSubsequent");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "elementSubsequent"



	// $ANTLR start "cssId"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:850:1: cssId : ( HASH ({...}? sass_selector_interpolation_exp )? | ( HASH_SYMBOL ( NAME |{...}? less_selector_interpolation_exp ) ) );
	public final void cssId() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cssId");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(850, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:851:5: ( HASH ({...}? sass_selector_interpolation_exp )? | ( HASH_SYMBOL ( NAME |{...}? less_selector_interpolation_exp ) ) )
			int alt269=2;
			try { dbg.enterDecision(269, decisionCanBacktrack[269]);

			int LA269_0 = input.LA(1);
			if ( (LA269_0==HASH) ) {
				alt269=1;
			}
			else if ( (LA269_0==HASH_SYMBOL) ) {
				alt269=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 269, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(269);}

			switch (alt269) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:851:7: HASH ({...}? sass_selector_interpolation_exp )?
					{
					dbg.location(851,7);
					match(input,HASH,FOLLOW_HASH_in_cssId5071); if (state.failed) return;dbg.location(851,12);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:851:12: ({...}? sass_selector_interpolation_exp )?
					int alt267=2;
					try { dbg.enterSubRule(267);
					try { dbg.enterDecision(267, decisionCanBacktrack[267]);

					int LA267_0 = input.LA(1);
					if ( (LA267_0==IDENT||LA267_0==MINUS) ) {
						alt267=1;
					}
					else if ( (LA267_0==HASH_SYMBOL) ) {
						int LA267_2 = input.LA(2);
						if ( (LA267_2==LBRACE) ) {
							alt267=1;
						}
					}
					} finally {dbg.exitDecision(267);}

					switch (alt267) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:851:13: {...}? sass_selector_interpolation_exp
							{
							dbg.location(851,13);
							if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "cssId", "isScssSource()");
							}dbg.location(851,31);
							pushFollow(FOLLOW_sass_selector_interpolation_exp_in_cssId5076);
							sass_selector_interpolation_exp();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(267);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:853:9: ( HASH_SYMBOL ( NAME |{...}? less_selector_interpolation_exp ) )
					{
					dbg.location(853,9);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:853:9: ( HASH_SYMBOL ( NAME |{...}? less_selector_interpolation_exp ) )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:853:11: HASH_SYMBOL ( NAME |{...}? less_selector_interpolation_exp )
					{
					dbg.location(853,11);
					match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_cssId5098); if (state.failed) return;dbg.location(854,13);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:854:13: ( NAME |{...}? less_selector_interpolation_exp )
					int alt268=2;
					try { dbg.enterSubRule(268);
					try { dbg.enterDecision(268, decisionCanBacktrack[268]);

					int LA268_0 = input.LA(1);
					if ( (LA268_0==NAME) ) {
						alt268=1;
					}
					else if ( (LA268_0==AT_SIGN||LA268_0==IDENT||LA268_0==MINUS) ) {
						alt268=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 268, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(268);}

					switch (alt268) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:854:15: NAME
							{
							dbg.location(854,15);
							match(input,NAME,FOLLOW_NAME_in_cssId5114); if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:855:17: {...}? less_selector_interpolation_exp
							{
							dbg.location(855,17);
							if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "cssId", "isLessSource()");
							}dbg.location(855,35);
							pushFollow(FOLLOW_less_selector_interpolation_exp_in_cssId5134);
							less_selector_interpolation_exp();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(268);}

					}

					}
					break;

			}
		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(WS, IDENT, LBRACE));
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(858, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cssId");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cssId"



	// $ANTLR start "cssClass"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:864:1: cssClass : ( ( DOT ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp | IDENT | NOT | GEN ) ) |{...}? DIMENSION );
	public final void cssClass() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cssClass");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(864, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:865:5: ( ( DOT ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp | IDENT | NOT | GEN ) ) |{...}? DIMENSION )
			int alt271=2;
			try { dbg.enterDecision(271, decisionCanBacktrack[271]);

			int LA271_0 = input.LA(1);
			if ( (LA271_0==DOT) ) {
				alt271=1;
			}
			else if ( (LA271_0==DIMENSION) ) {
				alt271=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 271, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(271);}

			switch (alt271) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:865:7: ( DOT ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp | IDENT | NOT | GEN ) )
					{
					dbg.location(865,7);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:865:7: ( DOT ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp | IDENT | NOT | GEN ) )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:865:8: DOT ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp | IDENT | NOT | GEN )
					{
					dbg.location(865,8);
					match(input,DOT,FOLLOW_DOT_in_cssClass5186); if (state.failed) return;dbg.location(866,9);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:866:9: ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp | IDENT | NOT | GEN )
					int alt270=5;
					try { dbg.enterSubRule(270);
					try { dbg.enterDecision(270, decisionCanBacktrack[270]);

					switch ( input.LA(1) ) {
					case IDENT:
						{
						switch ( input.LA(2) ) {
						case HASH_SYMBOL:
							{
							int LA270_7 = input.LA(3);
							if ( (LA270_7==LBRACE) ) {
								alt270=1;
							}
							else if ( (LA270_7==AT_SIGN||LA270_7==IDENT||LA270_7==MINUS||LA270_7==NAME) ) {
								alt270=3;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 270, 7, input);
									dbg.recognitionException(nvae);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

							}
							break;
						case AT_SIGN:
							{
							alt270=2;
							}
							break;
						case COLON:
						case COMMA:
						case COMMENT:
						case DCOLON:
						case DIMENSION:
						case DOT:
						case GREATER:
						case HASH:
						case LBRACE:
						case LBRACKET:
						case LESS_AND:
						case NL:
						case PLUS:
						case RBRACE:
						case RPAREN:
						case SASS_EXTEND_ONLY_SELECTOR:
						case SEMI:
						case TILDE:
						case WS:
							{
							alt270=3;
							}
							break;
						default:
							if (state.backtracking>0) {state.failed=true; return;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 270, 1, input);
								dbg.recognitionException(nvae);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}
						}
						break;
					case HASH_SYMBOL:
						{
						alt270=1;
						}
						break;
					case AT_SIGN:
						{
						alt270=2;
						}
						break;
					case MINUS:
						{
						int LA270_4 = input.LA(2);
						if ( (LA270_4==HASH_SYMBOL) ) {
							alt270=1;
						}
						else if ( (LA270_4==AT_SIGN) ) {
							alt270=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 270, 4, input);
								dbg.recognitionException(nvae);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case NOT:
						{
						alt270=4;
						}
						break;
					case GEN:
						{
						alt270=5;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 270, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(270);}

					switch (alt270) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:867:14: {...}? sass_selector_interpolation_exp
							{
							dbg.location(867,14);
							if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "cssClass", "isScssSource()");
							}dbg.location(867,33);
							pushFollow(FOLLOW_sass_selector_interpolation_exp_in_cssClass5214);
							sass_selector_interpolation_exp();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:868:15: {...}? less_selector_interpolation_exp
							{
							dbg.location(868,15);
							if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "cssClass", "isLessSource()");
							}dbg.location(868,33);
							pushFollow(FOLLOW_less_selector_interpolation_exp_in_cssClass5232);
							less_selector_interpolation_exp();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 3 :
							dbg.enterAlt(3);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:869:15: IDENT
							{
							dbg.location(869,15);
							match(input,IDENT,FOLLOW_IDENT_in_cssClass5248); if (state.failed) return;
							}
							break;
						case 4 :
							dbg.enterAlt(4);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:870:15: NOT
							{
							dbg.location(870,15);
							match(input,NOT,FOLLOW_NOT_in_cssClass5264); if (state.failed) return;
							}
							break;
						case 5 :
							dbg.enterAlt(5);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:871:15: GEN
							{
							dbg.location(871,15);
							match(input,GEN,FOLLOW_GEN_in_cssClass5280); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(270);}

					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:873:11: {...}? DIMENSION
					{
					dbg.location(873,11);
					if ( !(evalPredicate(tokenNameStartsWith("."),"tokenNameStartsWith(\".\")")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cssClass", "tokenNameStartsWith(\".\")");
					}dbg.location(873,39);
					match(input,DIMENSION,FOLLOW_DIMENSION_in_cssClass5304); if (state.failed) return;
					}
					break;

			}
		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(WS, IDENT, LBRACE));
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(874, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cssClass");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cssClass"



	// $ANTLR start "elementName"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:881:1: elementName : ( IDENT | GEN | LESS_AND | STAR );
	public final void elementName() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "elementName");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(881, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:882:5: ( IDENT | GEN | LESS_AND | STAR )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(882,5);
			if ( input.LA(1)==GEN||input.LA(1)==IDENT||input.LA(1)==LESS_AND||input.LA(1)==STAR ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(883, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "elementName");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "elementName"



	// $ANTLR start "slAttribute"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:885:1: slAttribute : LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET ;
	public final void slAttribute() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "slAttribute");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(885, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:886:5: ( LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:886:7: LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET
			{
			dbg.location(886,7);
			match(input,LBRACKET,FOLLOW_LBRACKET_in_slAttribute5360); if (state.failed) return;dbg.location(887,6);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:887:6: ( namespacePrefix )?
			int alt272=2;
			try { dbg.enterSubRule(272);
			try { dbg.enterDecision(272, decisionCanBacktrack[272]);

			int LA272_0 = input.LA(1);
			if ( (LA272_0==IDENT) ) {
				int LA272_1 = input.LA(2);
				if ( (LA272_1==PIPE) ) {
					alt272=1;
				}
			}
			else if ( (LA272_0==PIPE||LA272_0==STAR) ) {
				alt272=1;
			}
			} finally {dbg.exitDecision(272);}

			switch (alt272) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:887:6: namespacePrefix
					{
					dbg.location(887,6);
					pushFollow(FOLLOW_namespacePrefix_in_slAttribute5367);
					namespacePrefix();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(272);}
			dbg.location(887,23);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:887:23: ( ws )?
			int alt273=2;
			try { dbg.enterSubRule(273);
			try { dbg.enterDecision(273, decisionCanBacktrack[273]);

			int LA273_0 = input.LA(1);
			if ( (LA273_0==COMMENT||LA273_0==NL||LA273_0==WS) ) {
				alt273=1;
			}
			} finally {dbg.exitDecision(273);}

			switch (alt273) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:887:23: ws
					{
					dbg.location(887,23);
					pushFollow(FOLLOW_ws_in_slAttribute5370);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(273);}
			dbg.location(888,9);
			pushFollow(FOLLOW_slAttributeName_in_slAttribute5381);
			slAttributeName();
			state._fsp--;
			if (state.failed) return;dbg.location(888,25);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:888:25: ( ws )?
			int alt274=2;
			try { dbg.enterSubRule(274);
			try { dbg.enterDecision(274, decisionCanBacktrack[274]);

			int LA274_0 = input.LA(1);
			if ( (LA274_0==COMMENT||LA274_0==NL||LA274_0==WS) ) {
				alt274=1;
			}
			} finally {dbg.exitDecision(274);}

			switch (alt274) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:888:25: ws
					{
					dbg.location(888,25);
					pushFollow(FOLLOW_ws_in_slAttribute5383);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(274);}
			dbg.location(890,13);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:890:13: ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )?
			int alt277=2;
			try { dbg.enterSubRule(277);
			try { dbg.enterDecision(277, decisionCanBacktrack[277]);

			int LA277_0 = input.LA(1);
			if ( (LA277_0==BEGINS||LA277_0==CONTAINS||LA277_0==DASHMATCH||LA277_0==ENDS||LA277_0==INCLUDES||LA277_0==OPEQ) ) {
				alt277=1;
			}
			} finally {dbg.exitDecision(277);}

			switch (alt277) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:891:17: ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )?
					{
					dbg.location(891,17);
					if ( input.LA(1)==BEGINS||input.LA(1)==CONTAINS||input.LA(1)==DASHMATCH||input.LA(1)==ENDS||input.LA(1)==INCLUDES||input.LA(1)==OPEQ ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}dbg.location(899,17);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:899:17: ( ws )?
					int alt275=2;
					try { dbg.enterSubRule(275);
					try { dbg.enterDecision(275, decisionCanBacktrack[275]);

					int LA275_0 = input.LA(1);
					if ( (LA275_0==COMMENT||LA275_0==NL||LA275_0==WS) ) {
						alt275=1;
					}
					} finally {dbg.exitDecision(275);}

					switch (alt275) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:899:17: ws
							{
							dbg.location(899,17);
							pushFollow(FOLLOW_ws_in_slAttribute5597);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(275);}
					dbg.location(900,17);
					pushFollow(FOLLOW_slAttributeValue_in_slAttribute5616);
					slAttributeValue();
					state._fsp--;
					if (state.failed) return;dbg.location(901,17);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:901:17: ( ws )?
					int alt276=2;
					try { dbg.enterSubRule(276);
					try { dbg.enterDecision(276, decisionCanBacktrack[276]);

					int LA276_0 = input.LA(1);
					if ( (LA276_0==COMMENT||LA276_0==NL||LA276_0==WS) ) {
						alt276=1;
					}
					} finally {dbg.exitDecision(276);}

					switch (alt276) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:901:17: ws
							{
							dbg.location(901,17);
							pushFollow(FOLLOW_ws_in_slAttribute5634);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(276);}

					}
					break;

			}
			} finally {dbg.exitSubRule(277);}
			dbg.location(904,7);
			match(input,RBRACKET,FOLLOW_RBRACKET_in_slAttribute5659); if (state.failed) return;
			}

		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(IDENT, LBRACE));
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(905, 0);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "slAttribute");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "slAttribute"



	// $ANTLR start "slAttributeName"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:912:1: slAttributeName : IDENT ;
	public final void slAttributeName() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "slAttributeName");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(912, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:913:2: ( IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:913:4: IDENT
			{
			dbg.location(913,4);
			match(input,IDENT,FOLLOW_IDENT_in_slAttributeName5675); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(914, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "slAttributeName");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "slAttributeName"



	// $ANTLR start "slAttributeValue"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:916:1: slAttributeValue : ( IDENT | STRING ) ;
	public final void slAttributeValue() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "slAttributeValue");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(916, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:917:2: ( ( IDENT | STRING ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(917,2);
			if ( input.LA(1)==IDENT||input.LA(1)==STRING ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(922, 8);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "slAttributeValue");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "slAttributeValue"



	// $ANTLR start "pseudo"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:924:1: pseudo : ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) |{...}? sass_interpolation_expression_var | ( NOT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN ) |{...}? ( IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN ) | ({...}?{...}? IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup )? RPAREN ) ) ;
	public final void pseudo() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "pseudo");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(924, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:925:5: ( ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) |{...}? sass_interpolation_expression_var | ( NOT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN ) |{...}? ( IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN ) | ({...}?{...}? IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup )? RPAREN ) ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:925:7: ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) |{...}? sass_interpolation_expression_var | ( NOT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN ) |{...}? ( IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN ) | ({...}?{...}? IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup )? RPAREN ) )
			{
			dbg.location(925,7);
			if ( input.LA(1)==COLON||input.LA(1)==DCOLON ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}dbg.location(926,14);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:926:14: ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) |{...}? sass_interpolation_expression_var | ( NOT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN ) |{...}? ( IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN ) | ({...}?{...}? IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup )? RPAREN ) )
			int alt294=5;
			try { dbg.enterSubRule(294);
			try { dbg.enterDecision(294, decisionCanBacktrack[294]);

			switch ( input.LA(1) ) {
			case IDENT:
				{
				int LA294_1 = input.LA(2);
				if ( (!(evalPredicate(((evalPredicate(tokenNameEquals("extend"),"tokenNameEquals(\"extend\")")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(tokenNameEquals("is") || tokenNameEquals("where") || tokenNameEquals("has"),"tokenNameEquals(\"is\") || tokenNameEquals(\"where\") || tokenNameEquals(\"has\")")),""))) ) {
					alt294=1;
				}
				else if ( (evalPredicate(tokenNameEquals("is") || tokenNameEquals("where") || tokenNameEquals("has"),"tokenNameEquals(\"is\") || tokenNameEquals(\"where\") || tokenNameEquals(\"has\")")) ) {
					alt294=4;
				}
				else if ( ((evalPredicate(tokenNameEquals("extend"),"tokenNameEquals(\"extend\")")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt294=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 294, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case HASH_SYMBOL:
				{
				alt294=2;
				}
				break;
			case NOT:
				{
				alt294=3;
				}
				break;
			case GEN:
				{
				alt294=1;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 294, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(294);}

			switch (alt294) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:927:17: ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? )
					{
					dbg.location(927,17);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:927:17: ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:928:21: ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?
					{
					dbg.location(928,21);
					if ( input.LA(1)==GEN||input.LA(1)==IDENT ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}dbg.location(929,21);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:929:21: ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?
					int alt282=2;
					try { dbg.enterSubRule(282);
					try { dbg.enterDecision(282, decisionCanBacktrack[282]);

					try {
						isCyclicDecision = true;
						alt282 = dfa282.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(282);}

					switch (alt282) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:930:25: ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN
							{
							dbg.location(930,25);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:930:25: ( ws )?
							int alt278=2;
							try { dbg.enterSubRule(278);
							try { dbg.enterDecision(278, decisionCanBacktrack[278]);

							int LA278_0 = input.LA(1);
							if ( (LA278_0==COMMENT||LA278_0==NL||LA278_0==WS) ) {
								alt278=1;
							}
							} finally {dbg.exitDecision(278);}

							switch (alt278) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:930:25: ws
									{
									dbg.location(930,25);
									pushFollow(FOLLOW_ws_in_pseudo5867);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(278);}
							dbg.location(930,29);
							match(input,LPAREN,FOLLOW_LPAREN_in_pseudo5870); if (state.failed) return;dbg.location(930,36);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:930:36: ( ws )?
							int alt279=2;
							try { dbg.enterSubRule(279);
							try { dbg.enterDecision(279, decisionCanBacktrack[279]);

							int LA279_0 = input.LA(1);
							if ( (LA279_0==COMMENT||LA279_0==NL||LA279_0==WS) ) {
								alt279=1;
							}
							} finally {dbg.exitDecision(279);}

							switch (alt279) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:930:36: ws
									{
									dbg.location(930,36);
									pushFollow(FOLLOW_ws_in_pseudo5872);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(279);}
							dbg.location(930,40);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:930:40: ( ( expression ( ws )? ) | STAR )?
							int alt281=3;
							try { dbg.enterSubRule(281);
							try { dbg.enterDecision(281, decisionCanBacktrack[281]);

							int LA281_0 = input.LA(1);
							if ( ((LA281_0 >= ANGLE && LA281_0 <= AT_SIGN)||(LA281_0 >= BOTTOMCENTER_SYM && LA281_0 <= BOTTOMRIGHT_SYM)||LA281_0==CHARSET_SYM||LA281_0==COUNTER_STYLE_SYM||LA281_0==DIMENSION||LA281_0==EMS||LA281_0==EXS||(LA281_0 >= FONT_FACE_SYM && LA281_0 <= FREQ)||LA281_0==GEN||(LA281_0 >= HASH && LA281_0 <= HASH_SYMBOL)||LA281_0==IDENT||LA281_0==IMPORT_SYM||(LA281_0 >= LBRACKET && LA281_0 <= LENGTH)||(LA281_0 >= LESS_AND && LA281_0 <= LESS_JS_STRING)||(LA281_0 >= MEDIA_SYM && LA281_0 <= MOZ_DOCUMENT_SYM)||LA281_0==NAMESPACE_SYM||LA281_0==NUMBER||(LA281_0 >= PAGE_SYM && LA281_0 <= PERCENTAGE_SYMBOL)||LA281_0==PLUS||(LA281_0 >= REM && LA281_0 <= RIGHTTOP_SYM)||(LA281_0 >= SASS_AT_ROOT && LA281_0 <= SASS_DEBUG)||(LA281_0 >= SASS_EACH && LA281_0 <= SASS_ELSE)||LA281_0==SASS_EXTEND||(LA281_0 >= SASS_FOR && LA281_0 <= SASS_FUNCTION)||(LA281_0 >= SASS_IF && LA281_0 <= SASS_MIXIN)||(LA281_0 >= SASS_RETURN && LA281_0 <= SASS_WHILE)||LA281_0==STRING||(LA281_0 >= TILDE && LA281_0 <= TOPRIGHT_SYM)||(LA281_0 >= URANGE && LA281_0 <= URI)||LA281_0==VARIABLE||LA281_0==WEBKIT_KEYFRAMES_SYM) ) {
								alt281=1;
							}
							else if ( (LA281_0==STAR) ) {
								alt281=2;
							}
							} finally {dbg.exitDecision(281);}

							switch (alt281) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:930:42: ( expression ( ws )? )
									{
									dbg.location(930,42);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:930:42: ( expression ( ws )? )
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:930:43: expression ( ws )?
									{
									dbg.location(930,43);
									pushFollow(FOLLOW_expression_in_pseudo5878);
									expression();
									state._fsp--;
									if (state.failed) return;dbg.location(930,54);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:930:54: ( ws )?
									int alt280=2;
									try { dbg.enterSubRule(280);
									try { dbg.enterDecision(280, decisionCanBacktrack[280]);

									int LA280_0 = input.LA(1);
									if ( (LA280_0==COMMENT||LA280_0==NL||LA280_0==WS) ) {
										alt280=1;
									}
									} finally {dbg.exitDecision(280);}

									switch (alt280) {
										case 1 :
											dbg.enterAlt(1);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:930:54: ws
											{
											dbg.location(930,54);
											pushFollow(FOLLOW_ws_in_pseudo5880);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(280);}

									}

									}
									break;
								case 2 :
									dbg.enterAlt(2);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:930:61: STAR
									{
									dbg.location(930,61);
									match(input,STAR,FOLLOW_STAR_in_pseudo5886); if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(281);}
							dbg.location(930,69);
							match(input,RPAREN,FOLLOW_RPAREN_in_pseudo5891); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(282);}

					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:933:19: {...}? sass_interpolation_expression_var
					{
					dbg.location(933,19);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "pseudo", "isScssSource()");
					}dbg.location(933,37);
					pushFollow(FOLLOW_sass_interpolation_expression_var_in_pseudo5954);
					sass_interpolation_expression_var();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:19: ( NOT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN )
					{
					dbg.location(934,19);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:19: ( NOT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:21: NOT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN
					{
					dbg.location(934,21);
					match(input,NOT,FOLLOW_NOT_in_pseudo5976); if (state.failed) return;dbg.location(934,25);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:25: ( ws )?
					int alt283=2;
					try { dbg.enterSubRule(283);
					try { dbg.enterDecision(283, decisionCanBacktrack[283]);

					int LA283_0 = input.LA(1);
					if ( (LA283_0==COMMENT||LA283_0==NL||LA283_0==WS) ) {
						alt283=1;
					}
					} finally {dbg.exitDecision(283);}

					switch (alt283) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:25: ws
							{
							dbg.location(934,25);
							pushFollow(FOLLOW_ws_in_pseudo5978);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(283);}
					dbg.location(934,29);
					match(input,LPAREN,FOLLOW_LPAREN_in_pseudo5981); if (state.failed) return;dbg.location(934,36);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:36: ( ws )?
					int alt284=2;
					try { dbg.enterSubRule(284);
					try { dbg.enterDecision(284, decisionCanBacktrack[284]);

					int LA284_0 = input.LA(1);
					if ( (LA284_0==COMMENT||LA284_0==NL||LA284_0==WS) ) {
						alt284=1;
					}
					} finally {dbg.exitDecision(284);}

					switch (alt284) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:36: ws
							{
							dbg.location(934,36);
							pushFollow(FOLLOW_ws_in_pseudo5983);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(284);}
					dbg.location(934,40);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:40: ( selectorsGroup ( ws )? )?
					int alt286=2;
					try { dbg.enterSubRule(286);
					try { dbg.enterDecision(286, decisionCanBacktrack[286]);

					int LA286_0 = input.LA(1);
					if ( (LA286_0==AT_SIGN||LA286_0==COLON||(LA286_0 >= DCOLON && LA286_0 <= DOT)||(LA286_0 >= GEN && LA286_0 <= GREATER)||(LA286_0 >= HASH && LA286_0 <= HASH_SYMBOL)||LA286_0==IDENT||LA286_0==LBRACKET||LA286_0==LESS_AND||LA286_0==MINUS||(LA286_0 >= PIPE && LA286_0 <= PLUS)||LA286_0==SASS_EXTEND_ONLY_SELECTOR||LA286_0==STAR||LA286_0==TILDE) ) {
						alt286=1;
					}
					} finally {dbg.exitDecision(286);}

					switch (alt286) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:42: selectorsGroup ( ws )?
							{
							dbg.location(934,42);
							pushFollow(FOLLOW_selectorsGroup_in_pseudo5988);
							selectorsGroup();
							state._fsp--;
							if (state.failed) return;dbg.location(934,57);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:57: ( ws )?
							int alt285=2;
							try { dbg.enterSubRule(285);
							try { dbg.enterDecision(285, decisionCanBacktrack[285]);

							int LA285_0 = input.LA(1);
							if ( (LA285_0==COMMENT||LA285_0==NL||LA285_0==WS) ) {
								alt285=1;
							}
							} finally {dbg.exitDecision(285);}

							switch (alt285) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:57: ws
									{
									dbg.location(934,57);
									pushFollow(FOLLOW_ws_in_pseudo5990);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(285);}

							}
							break;

					}
					} finally {dbg.exitSubRule(286);}
					dbg.location(934,63);
					match(input,RPAREN,FOLLOW_RPAREN_in_pseudo5995); if (state.failed) return;
					}

					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:935:19: {...}? ( IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN )
					{
					dbg.location(935,19);
					if ( !(evalPredicate(tokenNameEquals("is") || tokenNameEquals("where") || tokenNameEquals("has"),"tokenNameEquals(\"is\") || tokenNameEquals(\"where\") || tokenNameEquals(\"has\")")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "pseudo", "tokenNameEquals(\"is\") || tokenNameEquals(\"where\") || tokenNameEquals(\"has\")");
					}dbg.location(935,98);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:935:98: ( IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:935:100: IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup ( ws )? )? RPAREN
					{
					dbg.location(935,100);
					match(input,IDENT,FOLLOW_IDENT_in_pseudo6021); if (state.failed) return;dbg.location(935,106);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:935:106: ( ws )?
					int alt287=2;
					try { dbg.enterSubRule(287);
					try { dbg.enterDecision(287, decisionCanBacktrack[287]);

					int LA287_0 = input.LA(1);
					if ( (LA287_0==COMMENT||LA287_0==NL||LA287_0==WS) ) {
						alt287=1;
					}
					} finally {dbg.exitDecision(287);}

					switch (alt287) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:935:106: ws
							{
							dbg.location(935,106);
							pushFollow(FOLLOW_ws_in_pseudo6023);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(287);}
					dbg.location(935,110);
					match(input,LPAREN,FOLLOW_LPAREN_in_pseudo6026); if (state.failed) return;dbg.location(935,117);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:935:117: ( ws )?
					int alt288=2;
					try { dbg.enterSubRule(288);
					try { dbg.enterDecision(288, decisionCanBacktrack[288]);

					int LA288_0 = input.LA(1);
					if ( (LA288_0==COMMENT||LA288_0==NL||LA288_0==WS) ) {
						alt288=1;
					}
					} finally {dbg.exitDecision(288);}

					switch (alt288) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:935:117: ws
							{
							dbg.location(935,117);
							pushFollow(FOLLOW_ws_in_pseudo6028);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(288);}
					dbg.location(935,121);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:935:121: ( selectorsGroup ( ws )? )?
					int alt290=2;
					try { dbg.enterSubRule(290);
					try { dbg.enterDecision(290, decisionCanBacktrack[290]);

					int LA290_0 = input.LA(1);
					if ( (LA290_0==AT_SIGN||LA290_0==COLON||(LA290_0 >= DCOLON && LA290_0 <= DOT)||(LA290_0 >= GEN && LA290_0 <= GREATER)||(LA290_0 >= HASH && LA290_0 <= HASH_SYMBOL)||LA290_0==IDENT||LA290_0==LBRACKET||LA290_0==LESS_AND||LA290_0==MINUS||(LA290_0 >= PIPE && LA290_0 <= PLUS)||LA290_0==SASS_EXTEND_ONLY_SELECTOR||LA290_0==STAR||LA290_0==TILDE) ) {
						alt290=1;
					}
					} finally {dbg.exitDecision(290);}

					switch (alt290) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:935:123: selectorsGroup ( ws )?
							{
							dbg.location(935,123);
							pushFollow(FOLLOW_selectorsGroup_in_pseudo6033);
							selectorsGroup();
							state._fsp--;
							if (state.failed) return;dbg.location(935,138);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:935:138: ( ws )?
							int alt289=2;
							try { dbg.enterSubRule(289);
							try { dbg.enterDecision(289, decisionCanBacktrack[289]);

							int LA289_0 = input.LA(1);
							if ( (LA289_0==COMMENT||LA289_0==NL||LA289_0==WS) ) {
								alt289=1;
							}
							} finally {dbg.exitDecision(289);}

							switch (alt289) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:935:138: ws
									{
									dbg.location(935,138);
									pushFollow(FOLLOW_ws_in_pseudo6035);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(289);}

							}
							break;

					}
					} finally {dbg.exitSubRule(290);}
					dbg.location(935,144);
					match(input,RPAREN,FOLLOW_RPAREN_in_pseudo6040); if (state.failed) return;
					}

					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:936:19: ({...}?{...}? IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup )? RPAREN )
					{
					dbg.location(936,19);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:936:19: ({...}?{...}? IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup )? RPAREN )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:936:20: {...}?{...}? IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup )? RPAREN
					{
					dbg.location(936,20);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "pseudo", "isLessSource()");
					}dbg.location(936,38);
					if ( !(evalPredicate(tokenNameEquals("extend"),"tokenNameEquals(\"extend\")")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "pseudo", "tokenNameEquals(\"extend\")");
					}dbg.location(936,67);
					match(input,IDENT,FOLLOW_IDENT_in_pseudo6067); if (state.failed) return;dbg.location(936,73);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:936:73: ( ws )?
					int alt291=2;
					try { dbg.enterSubRule(291);
					try { dbg.enterDecision(291, decisionCanBacktrack[291]);

					int LA291_0 = input.LA(1);
					if ( (LA291_0==COMMENT||LA291_0==NL||LA291_0==WS) ) {
						alt291=1;
					}
					} finally {dbg.exitDecision(291);}

					switch (alt291) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:936:73: ws
							{
							dbg.location(936,73);
							pushFollow(FOLLOW_ws_in_pseudo6069);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(291);}
					dbg.location(936,77);
					match(input,LPAREN,FOLLOW_LPAREN_in_pseudo6072); if (state.failed) return;dbg.location(936,84);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:936:84: ( ws )?
					int alt292=2;
					try { dbg.enterSubRule(292);
					try { dbg.enterDecision(292, decisionCanBacktrack[292]);

					int LA292_0 = input.LA(1);
					if ( (LA292_0==COMMENT||LA292_0==NL||LA292_0==WS) ) {
						alt292=1;
					}
					} finally {dbg.exitDecision(292);}

					switch (alt292) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:936:84: ws
							{
							dbg.location(936,84);
							pushFollow(FOLLOW_ws_in_pseudo6074);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(292);}
					dbg.location(936,88);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:936:88: ( selectorsGroup )?
					int alt293=2;
					try { dbg.enterSubRule(293);
					try { dbg.enterDecision(293, decisionCanBacktrack[293]);

					int LA293_0 = input.LA(1);
					if ( (LA293_0==AT_SIGN||LA293_0==COLON||(LA293_0 >= DCOLON && LA293_0 <= DOT)||(LA293_0 >= GEN && LA293_0 <= GREATER)||(LA293_0 >= HASH && LA293_0 <= HASH_SYMBOL)||LA293_0==IDENT||LA293_0==LBRACKET||LA293_0==LESS_AND||LA293_0==MINUS||(LA293_0 >= PIPE && LA293_0 <= PLUS)||LA293_0==SASS_EXTEND_ONLY_SELECTOR||LA293_0==STAR||LA293_0==TILDE) ) {
						alt293=1;
					}
					} finally {dbg.exitDecision(293);}

					switch (alt293) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:936:88: selectorsGroup
							{
							dbg.location(936,88);
							pushFollow(FOLLOW_selectorsGroup_in_pseudo6077);
							selectorsGroup();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(293);}
					dbg.location(936,104);
					match(input,RPAREN,FOLLOW_RPAREN_in_pseudo6080); if (state.failed) return;
					}

					}
					break;

			}
			} finally {dbg.exitSubRule(294);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(938, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "pseudo");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "pseudo"



	// $ANTLR start "propertyDeclaration"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:1: propertyDeclaration : ({...}? ( STAR )? property ( ws )? COLON ( ws )? cp_propertyValue |{...}? property ( ws )? COLON ( ws )? ( componentValueOuter )? | ( STAR )? property ( ws )? COLON ( ws )? propertyValue ( ( ws )? prio )? );
	public final void propertyDeclaration() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "propertyDeclaration");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(940, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:941:5: ({...}? ( STAR )? property ( ws )? COLON ( ws )? cp_propertyValue |{...}? property ( ws )? COLON ( ws )? ( componentValueOuter )? | ( STAR )? property ( ws )? COLON ( ws )? propertyValue ( ( ws )? prio )? )
			int alt306=3;
			try { dbg.enterDecision(306, decisionCanBacktrack[306]);

			switch ( input.LA(1) ) {
			case STAR:
				{
				int LA306_1 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")) ) {
					alt306=1;
				}
				else if ( (true) ) {
					alt306=3;
				}

				}
				break;
			case IDENT:
				{
				int LA306_2 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")) ) {
					alt306=1;
				}
				else if ( (evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")) ) {
					alt306=2;
				}
				else if ( (true) ) {
					alt306=3;
				}

				}
				break;
			case HASH_SYMBOL:
				{
				int LA306_3 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt306=1;
				}
				else if ( ((evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt306=2;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt306=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 306, 3, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT_SIGN:
				{
				int LA306_4 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt306=1;
				}
				else if ( ((evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt306=2;
				}
				else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
					alt306=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 306, 4, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case VARIABLE:
				{
				int LA306_5 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")) ) {
					alt306=1;
				}
				else if ( (evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")) ) {
					alt306=2;
				}
				else if ( (true) ) {
					alt306=3;
				}

				}
				break;
			case MINUS:
				{
				int LA306_6 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")&&(evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")))) ) {
					alt306=1;
				}
				else if ( ((evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")&&(evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")))) ) {
					alt306=2;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt306=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 306, 6, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case GEN:
				{
				int LA306_7 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")) ) {
					alt306=1;
				}
				else if ( (evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")) ) {
					alt306=2;
				}
				else if ( (true) ) {
					alt306=3;
				}

				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				int LA306_8 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt306=1;
				}
				else if ( (((evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt306=2;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt306=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 306, 8, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_VAR:
				{
				int LA306_9 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt306=1;
				}
				else if ( (((evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt306=2;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt306=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 306, 9, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 306, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(306);}

			switch (alt306) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:942:7: {...}? ( STAR )? property ( ws )? COLON ( ws )? cp_propertyValue
					{
					dbg.location(942,7);
					if ( !(evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "propertyDeclaration", "isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")");
					}dbg.location(942,66);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:942:66: ( STAR )?
					int alt295=2;
					try { dbg.enterSubRule(295);
					try { dbg.enterDecision(295, decisionCanBacktrack[295]);

					int LA295_0 = input.LA(1);
					if ( (LA295_0==STAR) ) {
						alt295=1;
					}
					} finally {dbg.exitDecision(295);}

					switch (alt295) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:942:66: STAR
							{
							dbg.location(942,66);
							match(input,STAR,FOLLOW_STAR_in_propertyDeclaration6122); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(295);}
					dbg.location(942,72);
					pushFollow(FOLLOW_property_in_propertyDeclaration6125);
					property();
					state._fsp--;
					if (state.failed) return;dbg.location(942,81);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:942:81: ( ws )?
					int alt296=2;
					try { dbg.enterSubRule(296);
					try { dbg.enterDecision(296, decisionCanBacktrack[296]);

					int LA296_0 = input.LA(1);
					if ( (LA296_0==COMMENT||LA296_0==NL||LA296_0==WS) ) {
						alt296=1;
					}
					} finally {dbg.exitDecision(296);}

					switch (alt296) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:942:81: ws
							{
							dbg.location(942,81);
							pushFollow(FOLLOW_ws_in_propertyDeclaration6127);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(296);}
					dbg.location(942,85);
					match(input,COLON,FOLLOW_COLON_in_propertyDeclaration6130); if (state.failed) return;dbg.location(942,91);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:942:91: ( ws )?
					int alt297=2;
					try { dbg.enterSubRule(297);
					try { dbg.enterDecision(297, decisionCanBacktrack[297]);

					int LA297_0 = input.LA(1);
					if ( (LA297_0==COMMENT||LA297_0==NL||LA297_0==WS) ) {
						alt297=1;
					}
					} finally {dbg.exitDecision(297);}

					switch (alt297) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:942:91: ws
							{
							dbg.location(942,91);
							pushFollow(FOLLOW_ws_in_propertyDeclaration6132);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(297);}
					dbg.location(942,95);
					pushFollow(FOLLOW_cp_propertyValue_in_propertyDeclaration6135);
					cp_propertyValue();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:943:7: {...}? property ( ws )? COLON ( ws )? ( componentValueOuter )?
					{
					dbg.location(943,7);
					if ( !(evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "propertyDeclaration", "tokenNameStartsWith(\"--\")");
					}dbg.location(943,36);
					pushFollow(FOLLOW_property_in_propertyDeclaration6146);
					property();
					state._fsp--;
					if (state.failed) return;dbg.location(943,45);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:943:45: ( ws )?
					int alt298=2;
					try { dbg.enterSubRule(298);
					try { dbg.enterDecision(298, decisionCanBacktrack[298]);

					int LA298_0 = input.LA(1);
					if ( (LA298_0==COMMENT||LA298_0==NL||LA298_0==WS) ) {
						alt298=1;
					}
					} finally {dbg.exitDecision(298);}

					switch (alt298) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:943:45: ws
							{
							dbg.location(943,45);
							pushFollow(FOLLOW_ws_in_propertyDeclaration6148);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(298);}
					dbg.location(943,49);
					match(input,COLON,FOLLOW_COLON_in_propertyDeclaration6151); if (state.failed) return;dbg.location(943,55);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:943:55: ( ws )?
					int alt299=2;
					try { dbg.enterSubRule(299);
					try { dbg.enterDecision(299, decisionCanBacktrack[299]);

					int LA299_0 = input.LA(1);
					if ( (LA299_0==COMMENT||LA299_0==NL||LA299_0==WS) ) {
						alt299=1;
					}
					} finally {dbg.exitDecision(299);}

					switch (alt299) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:943:55: ws
							{
							dbg.location(943,55);
							pushFollow(FOLLOW_ws_in_propertyDeclaration6153);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(299);}
					dbg.location(943,59);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:943:59: ( componentValueOuter )?
					int alt300=2;
					try { dbg.enterSubRule(300);
					try { dbg.enterDecision(300, decisionCanBacktrack[300]);

					switch ( input.LA(1) ) {
						case LBRACE:
						case LPAREN:
							{
							alt300=1;
							}
							break;
						case LBRACKET:
							{
							alt300=1;
							}
							break;
						case IDENT:
							{
							alt300=1;
							}
							break;
						case COMMENT:
						case NL:
						case WS:
							{
							alt300=1;
							}
							break;
						case LESS_AND:
							{
							alt300=1;
							}
							break;
						case DOT:
							{
							alt300=1;
							}
							break;
						case HASH:
							{
							alt300=1;
							}
							break;
						case SASS_MIXIN:
							{
							alt300=1;
							}
							break;
						case AT_IDENT:
							{
							alt300=1;
							}
							break;
						case SASS_INCLUDE:
							{
							alt300=1;
							}
							break;
						case SASS_AT_ROOT:
							{
							alt300=1;
							}
							break;
						case GREATER:
						case PLUS:
						case TILDE:
							{
							alt300=1;
							}
							break;
						case SASS_EXTEND_ONLY_SELECTOR:
							{
							int LA300_16 = input.LA(2);
							if ( (!(evalPredicate(evalPredicate(isScssSource(),"isScssSource()"),""))) ) {
								alt300=1;
							}
							}
							break;
						case HASH_SYMBOL:
							{
							alt300=1;
							}
							break;
						case DIMENSION:
							{
							int LA300_18 = input.LA(2);
							if ( (!(evalPredicate(evalPredicate(tokenNameStartsWith("."),"tokenNameStartsWith(\".\")"),""))) ) {
								alt300=1;
							}
							}
							break;
						case COLON:
						case DCOLON:
							{
							alt300=1;
							}
							break;
						case MINUS:
							{
							alt300=1;
							}
							break;
						case AT_SIGN:
							{
							alt300=1;
							}
							break;
						case STAR:
							{
							alt300=1;
							}
							break;
						case PIPE:
							{
							alt300=1;
							}
							break;
						case GEN:
							{
							alt300=1;
							}
							break;
						case VARIABLE:
							{
							alt300=1;
							}
							break;
						case SASS_DEBUG:
						case SASS_WARN:
							{
							alt300=1;
							}
							break;
						case SASS_VAR:
							{
							alt300=1;
							}
							break;
						case SUPPORTS_SYM:
							{
							alt300=1;
							}
							break;
						case SASS_IF:
							{
							alt300=1;
							}
							break;
						case SASS_FOR:
							{
							alt300=1;
							}
							break;
						case SASS_EACH:
							{
							alt300=1;
							}
							break;
						case SASS_WHILE:
							{
							alt300=1;
							}
							break;
						case A:
						case ANGLE:
						case B:
						case BEGINS:
						case C:
						case CDC:
						case CDO:
						case COMMA:
						case CONTAINS:
						case CP_DOTS:
						case CP_EQ:
						case CP_NOT_EQ:
						case D:
						case DASHMATCH:
						case E:
						case EMS:
						case ENDS:
						case ESCAPE:
						case EXCLAMATION_MARK:
						case EXS:
						case F:
						case FREQ:
						case G:
						case GREATER_OR_EQ:
						case H:
						case HEXCHAR:
						case HEXCHAR_WILDCARD:
						case I:
						case IMPORTANT_SYM:
						case INCLUDES:
						case INVALID:
						case J:
						case K:
						case L:
						case LAYER_SYM:
						case LENGTH:
						case LESS:
						case LESS_JS_STRING:
						case LESS_OR_EQ:
						case LESS_REST:
						case LINE_COMMENT:
						case M:
						case MOZ_DOMAIN:
						case MOZ_REGEXP:
						case MOZ_URL_PREFIX:
						case N:
						case NAME:
						case NMCHAR:
						case NMSTART:
						case NONASCII:
						case NOT:
						case NUMBER:
						case O:
						case OPEQ:
						case P:
						case PERCENTAGE:
						case PERCENTAGE_SYMBOL:
						case Q:
						case R:
						case REM:
						case RESOLUTION:
						case S:
						case SASS_CONTENT:
						case SASS_DEFAULT:
						case SASS_ELSEIF:
						case SASS_ERROR:
						case SASS_GLOBAL:
						case SASS_OPTIONAL:
						case SOLIDUS:
						case STRING:
						case T:
						case TIME:
						case U:
						case UNICODE:
						case URANGE:
						case URI:
						case URL:
						case V:
						case W:
						case X:
						case Y:
						case Z:
							{
							alt300=1;
							}
							break;
						case IMPORT_SYM:
							{
							alt300=1;
							}
							break;
						case PAGE_SYM:
							{
							alt300=1;
							}
							break;
						case FONT_FACE_SYM:
							{
							alt300=1;
							}
							break;
						case MOZ_DOCUMENT_SYM:
							{
							alt300=1;
							}
							break;
						case WEBKIT_KEYFRAMES_SYM:
							{
							alt300=1;
							}
							break;
						case MEDIA_SYM:
							{
							alt300=1;
							}
							break;
						case SASS_EXTEND:
							{
							alt300=1;
							}
							break;
						case BOTTOMCENTER_SYM:
						case BOTTOMLEFTCORNER_SYM:
						case BOTTOMLEFT_SYM:
						case BOTTOMRIGHTCORNER_SYM:
						case BOTTOMRIGHT_SYM:
						case LEFTBOTTOM_SYM:
						case LEFTMIDDLE_SYM:
						case LEFTTOP_SYM:
						case RIGHTBOTTOM_SYM:
						case RIGHTMIDDLE_SYM:
						case RIGHTTOP_SYM:
						case TOPCENTER_SYM:
						case TOPLEFTCORNER_SYM:
						case TOPLEFT_SYM:
						case TOPRIGHTCORNER_SYM:
						case TOPRIGHT_SYM:
							{
							alt300=1;
							}
							break;
						case CHARSET_SYM:
						case COUNTER_STYLE_SYM:
						case NAMESPACE_SYM:
						case SASS_ELSE:
						case SASS_FORWARD:
						case SASS_FUNCTION:
						case SASS_RETURN:
						case SASS_USE:
							{
							alt300=1;
							}
							break;
					}
					} finally {dbg.exitDecision(300);}

					switch (alt300) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:943:59: componentValueOuter
							{
							dbg.location(943,59);
							pushFollow(FOLLOW_componentValueOuter_in_propertyDeclaration6156);
							componentValueOuter();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(300);}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:944:7: ( STAR )? property ( ws )? COLON ( ws )? propertyValue ( ( ws )? prio )?
					{
					dbg.location(944,7);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:944:7: ( STAR )?
					int alt301=2;
					try { dbg.enterSubRule(301);
					try { dbg.enterDecision(301, decisionCanBacktrack[301]);

					int LA301_0 = input.LA(1);
					if ( (LA301_0==STAR) ) {
						alt301=1;
					}
					} finally {dbg.exitDecision(301);}

					switch (alt301) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:944:7: STAR
							{
							dbg.location(944,7);
							match(input,STAR,FOLLOW_STAR_in_propertyDeclaration6165); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(301);}
					dbg.location(944,13);
					pushFollow(FOLLOW_property_in_propertyDeclaration6168);
					property();
					state._fsp--;
					if (state.failed) return;dbg.location(944,22);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:944:22: ( ws )?
					int alt302=2;
					try { dbg.enterSubRule(302);
					try { dbg.enterDecision(302, decisionCanBacktrack[302]);

					int LA302_0 = input.LA(1);
					if ( (LA302_0==COMMENT||LA302_0==NL||LA302_0==WS) ) {
						alt302=1;
					}
					} finally {dbg.exitDecision(302);}

					switch (alt302) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:944:22: ws
							{
							dbg.location(944,22);
							pushFollow(FOLLOW_ws_in_propertyDeclaration6170);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(302);}
					dbg.location(944,26);
					match(input,COLON,FOLLOW_COLON_in_propertyDeclaration6173); if (state.failed) return;dbg.location(944,32);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:944:32: ( ws )?
					int alt303=2;
					try { dbg.enterSubRule(303);
					try { dbg.enterDecision(303, decisionCanBacktrack[303]);

					int LA303_0 = input.LA(1);
					if ( (LA303_0==COMMENT||LA303_0==NL||LA303_0==WS) ) {
						alt303=1;
					}
					} finally {dbg.exitDecision(303);}

					switch (alt303) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:944:32: ws
							{
							dbg.location(944,32);
							pushFollow(FOLLOW_ws_in_propertyDeclaration6175);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(303);}
					dbg.location(944,36);
					pushFollow(FOLLOW_propertyValue_in_propertyDeclaration6178);
					propertyValue();
					state._fsp--;
					if (state.failed) return;dbg.location(944,50);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:944:50: ( ( ws )? prio )?
					int alt305=2;
					try { dbg.enterSubRule(305);
					try { dbg.enterDecision(305, decisionCanBacktrack[305]);

					try {
						isCyclicDecision = true;
						alt305 = dfa305.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(305);}

					switch (alt305) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:944:51: ( ws )? prio
							{
							dbg.location(944,51);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:944:51: ( ws )?
							int alt304=2;
							try { dbg.enterSubRule(304);
							try { dbg.enterDecision(304, decisionCanBacktrack[304]);

							int LA304_0 = input.LA(1);
							if ( (LA304_0==COMMENT||LA304_0==NL||LA304_0==WS) ) {
								alt304=1;
							}
							} finally {dbg.exitDecision(304);}

							switch (alt304) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:944:51: ws
									{
									dbg.location(944,51);
									pushFollow(FOLLOW_ws_in_propertyDeclaration6181);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(304);}
							dbg.location(944,55);
							pushFollow(FOLLOW_prio_in_propertyDeclaration6184);
							prio();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(305);}

					}
					break;

			}
		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        //recovery: if an mismatched token occures inside a declaration is found,
			        //then skip all tokens until an end of the rule is found represented by right curly brace
			        consumeUntil(input, BitSet.of(SEMI, RBRACE));
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(946, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "propertyDeclaration");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "propertyDeclaration"



	// $ANTLR start "cp_propertyValue"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:955:1: cp_propertyValue : ({...}? cp_expression_list | propertyValue );
	public final void cp_propertyValue() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_propertyValue");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(955, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:956:5: ({...}? cp_expression_list | propertyValue )
			int alt307=2;
			try { dbg.enterDecision(307, decisionCanBacktrack[307]);

			switch ( input.LA(1) ) {
			case IMPORTANT_SYM:
			case LBRACE:
			case LPAREN:
			case NOT:
				{
				alt307=1;
				}
				break;
			case MINUS:
			case PLUS:
				{
				int LA307_3 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt307=1;
				}
				else if ( (true) ) {
					alt307=2;
				}

				}
				break;
			case IDENT:
				{
				int LA307_4 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt307=1;
				}
				else if ( (true) ) {
					alt307=2;
				}

				}
				break;
			case VARIABLE:
				{
				int LA307_5 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt307=1;
				}
				else if ( (true) ) {
					alt307=2;
				}

				}
				break;
			case LBRACKET:
				{
				int LA307_6 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt307=1;
				}
				else if ( (true) ) {
					alt307=2;
				}

				}
				break;
			case NUMBER:
				{
				int LA307_7 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt307=1;
				}
				else if ( (true) ) {
					alt307=2;
				}

				}
				break;
			case URANGE:
				{
				int LA307_8 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt307=1;
				}
				else if ( (true) ) {
					alt307=2;
				}

				}
				break;
			case PERCENTAGE:
				{
				int LA307_9 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt307=1;
				}
				else if ( (true) ) {
					alt307=2;
				}

				}
				break;
			case LENGTH:
				{
				int LA307_10 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt307=1;
				}
				else if ( (true) ) {
					alt307=2;
				}

				}
				break;
			case EMS:
				{
				int LA307_11 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt307=1;
				}
				else if ( (true) ) {
					alt307=2;
				}

				}
				break;
			case REM:
				{
				int LA307_12 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt307=1;
				}
				else if ( (true) ) {
					alt307=2;
				}

				}
				break;
			case EXS:
				{
				int LA307_13 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt307=1;
				}
				else if ( (true) ) {
					alt307=2;
				}

				}
				break;
			case ANGLE:
				{
				int LA307_14 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt307=1;
				}
				else if ( (true) ) {
					alt307=2;
				}

				}
				break;
			case TIME:
				{
				int LA307_15 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt307=1;
				}
				else if ( (true) ) {
					alt307=2;
				}

				}
				break;
			case FREQ:
				{
				int LA307_16 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt307=1;
				}
				else if ( (true) ) {
					alt307=2;
				}

				}
				break;
			case RESOLUTION:
				{
				int LA307_17 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt307=1;
				}
				else if ( (true) ) {
					alt307=2;
				}

				}
				break;
			case DIMENSION:
				{
				int LA307_18 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt307=1;
				}
				else if ( (true) ) {
					alt307=2;
				}

				}
				break;
			case STRING:
				{
				int LA307_19 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt307=1;
				}
				else if ( (true) ) {
					alt307=2;
				}

				}
				break;
			case TILDE:
				{
				int LA307_20 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt307=1;
				}
				else if ( (true) ) {
					alt307=2;
				}

				}
				break;
			case LESS_JS_STRING:
				{
				int LA307_21 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt307=1;
				}
				else if ( (true) ) {
					alt307=2;
				}

				}
				break;
			case GEN:
				{
				int LA307_22 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt307=1;
				}
				else if ( (true) ) {
					alt307=2;
				}

				}
				break;
			case URI:
				{
				int LA307_23 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt307=1;
				}
				else if ( (true) ) {
					alt307=2;
				}

				}
				break;
			case HASH:
				{
				int LA307_24 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt307=1;
				}
				else if ( (true) ) {
					alt307=2;
				}

				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				int LA307_25 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt307=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt307=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 307, 25, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_VAR:
				{
				int LA307_26 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt307=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt307=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 307, 26, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LESS_AND:
				{
				int LA307_27 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt307=1;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt307=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 307, 27, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case HASH_SYMBOL:
				{
				int LA307_28 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt307=1;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt307=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 307, 28, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT_SIGN:
				{
				int LA307_29 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt307=1;
				}
				else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
					alt307=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 307, 29, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PERCENTAGE_SYMBOL:
				{
				int LA307_30 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt307=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt307=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 307, 30, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 307, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(307);}

			switch (alt307) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:957:5: {...}? cp_expression_list
					{
					dbg.location(957,5);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_propertyValue", "isCssPreprocessorSource()");
					}dbg.location(957,34);
					pushFollow(FOLLOW_cp_expression_list_in_cp_propertyValue6224);
					cp_expression_list();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:958:7: propertyValue
					{
					dbg.location(958,7);
					pushFollow(FOLLOW_propertyValue_in_cp_propertyValue6232);
					propertyValue();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(959, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_propertyValue");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_propertyValue"



	// $ANTLR start "propertyValue"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:1: propertyValue : expression ;
	public final void propertyValue() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "propertyValue");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(961, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:962:2: ( expression )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:963:9: expression
			{
			dbg.location(963,9);
			pushFollow(FOLLOW_expression_in_propertyValue6254);
			expression();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(964, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "propertyValue");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "propertyValue"



	// $ANTLR start "expressionPredicate"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:967:1: expressionPredicate options {k=1; } : (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE ) ;
	public final void expressionPredicate() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "expressionPredicate");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(967, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:969:5: ( (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:970:5: (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE )
			{
			dbg.location(970,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:970:5: (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+
			int cnt308=0;
			try { dbg.enterSubRule(308);

			loop308:
			while (true) {
				int alt308=2;
				try { dbg.enterDecision(308, decisionCanBacktrack[308]);

				int LA308_0 = input.LA(1);
				if ( ((LA308_0 >= A && LA308_0 <= ANGLE)||(LA308_0 >= AT_SIGN && LA308_0 <= LAYER_SYM)||(LA308_0 >= LBRACKET && LA308_0 <= R)||(LA308_0 >= RBRACKET && LA308_0 <= SASS_USE)||(LA308_0 >= SASS_WARN && LA308_0 <= SASS_WHILE)||(LA308_0 >= STRING && LA308_0 <= Z)) ) {
					alt308=1;
				}

				} finally {dbg.exitDecision(308);}

				switch (alt308) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
					{
					dbg.location(970,5);
					if ( (input.LA(1) >= A && input.LA(1) <= ANGLE)||(input.LA(1) >= AT_SIGN && input.LA(1) <= LAYER_SYM)||(input.LA(1) >= LBRACKET && input.LA(1) <= R)||(input.LA(1) >= RBRACKET && input.LA(1) <= SASS_USE)||(input.LA(1) >= SASS_WARN && input.LA(1) <= SASS_WHILE)||(input.LA(1) >= STRING && input.LA(1) <= Z) ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}
					}
					break;

				default :
					if ( cnt308 >= 1 ) break loop308;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(308, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt308++;
			}
			} finally {dbg.exitSubRule(308);}
			dbg.location(970,76);
			if ( input.LA(1)==RBRACE||input.LA(1)==SEMI ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(971, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "expressionPredicate");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "expressionPredicate"



	// $ANTLR start "preservedToken"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:973:1: preservedToken : ~ ( LPAREN | LBRACE | LBRACKET | RPAREN | RBRACE | RBRACKET ) ;
	public final void preservedToken() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "preservedToken");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(973, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:973:15: (~ ( LPAREN | LBRACE | LBRACKET | RPAREN | RBRACE | RBRACKET ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(973,15);
			if ( (input.LA(1) >= A && input.LA(1) <= LAYER_SYM)||(input.LA(1) >= LEFTBOTTOM_SYM && input.LA(1) <= LINE_COMMENT)||(input.LA(1) >= M && input.LA(1) <= R)||(input.LA(1) >= REM && input.LA(1) <= RIGHTTOP_SYM)||(input.LA(1) >= S && input.LA(1) <= Z) ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(973, 75);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "preservedToken");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "preservedToken"



	// $ANTLR start "preservedTokenTopLevel"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:975:1: preservedTokenTopLevel : ~ ( LPAREN | LBRACE | LBRACKET | RPAREN | RBRACE | RBRACKET | SEMI ) ;
	public final void preservedTokenTopLevel() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "preservedTokenTopLevel");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(975, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:975:23: (~ ( LPAREN | LBRACE | LBRACKET | RPAREN | RBRACE | RBRACKET | SEMI ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(975,23);
			if ( (input.LA(1) >= A && input.LA(1) <= LAYER_SYM)||(input.LA(1) >= LEFTBOTTOM_SYM && input.LA(1) <= LINE_COMMENT)||(input.LA(1) >= M && input.LA(1) <= R)||(input.LA(1) >= REM && input.LA(1) <= RIGHTTOP_SYM)||(input.LA(1) >= S && input.LA(1) <= SASS_WHILE)||(input.LA(1) >= SOLIDUS && input.LA(1) <= Z) ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(975, 91);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "preservedTokenTopLevel");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "preservedTokenTopLevel"



	// $ANTLR start "braceBlock"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:977:1: braceBlock : LBRACE ( componentValue )+ RBRACE ;
	public final void braceBlock() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "braceBlock");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(977, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:977:11: ( LBRACE ( componentValue )+ RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:977:13: LBRACE ( componentValue )+ RBRACE
			{
			dbg.location(977,13);
			match(input,LBRACE,FOLLOW_LBRACE_in_braceBlock6410); if (state.failed) return;dbg.location(977,20);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:977:20: ( componentValue )+
			int cnt309=0;
			try { dbg.enterSubRule(309);

			loop309:
			while (true) {
				int alt309=2;
				try { dbg.enterDecision(309, decisionCanBacktrack[309]);

				int LA309_0 = input.LA(1);
				if ( ((LA309_0 >= A && LA309_0 <= R)||(LA309_0 >= REM && LA309_0 <= RIGHTTOP_SYM)||(LA309_0 >= S && LA309_0 <= Z)) ) {
					alt309=1;
				}

				} finally {dbg.exitDecision(309);}

				switch (alt309) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:977:20: componentValue
					{
					dbg.location(977,20);
					pushFollow(FOLLOW_componentValue_in_braceBlock6412);
					componentValue();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					if ( cnt309 >= 1 ) break loop309;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(309, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt309++;
			}
			} finally {dbg.exitSubRule(309);}
			dbg.location(977,36);
			match(input,RBRACE,FOLLOW_RBRACE_in_braceBlock6415); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(977, 41);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "braceBlock");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "braceBlock"



	// $ANTLR start "bracketBlock"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:1: bracketBlock : LBRACKET ( componentValue )+ RBRACKET ;
	public final void bracketBlock() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "bracketBlock");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(979, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:13: ( LBRACKET ( componentValue )+ RBRACKET )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:15: LBRACKET ( componentValue )+ RBRACKET
			{
			dbg.location(979,15);
			match(input,LBRACKET,FOLLOW_LBRACKET_in_bracketBlock6422); if (state.failed) return;dbg.location(979,24);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:24: ( componentValue )+
			int cnt310=0;
			try { dbg.enterSubRule(310);

			loop310:
			while (true) {
				int alt310=2;
				try { dbg.enterDecision(310, decisionCanBacktrack[310]);

				int LA310_0 = input.LA(1);
				if ( ((LA310_0 >= A && LA310_0 <= R)||(LA310_0 >= REM && LA310_0 <= RIGHTTOP_SYM)||(LA310_0 >= S && LA310_0 <= Z)) ) {
					alt310=1;
				}

				} finally {dbg.exitDecision(310);}

				switch (alt310) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:24: componentValue
					{
					dbg.location(979,24);
					pushFollow(FOLLOW_componentValue_in_bracketBlock6424);
					componentValue();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					if ( cnt310 >= 1 ) break loop310;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(310, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt310++;
			}
			} finally {dbg.exitSubRule(310);}
			dbg.location(979,40);
			match(input,RBRACKET,FOLLOW_RBRACKET_in_bracketBlock6427); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(979, 47);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "bracketBlock");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "bracketBlock"



	// $ANTLR start "parenBlock"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:981:1: parenBlock : LPAREN ( componentValue )+ RPAREN ;
	public final void parenBlock() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "parenBlock");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(981, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:981:11: ( LPAREN ( componentValue )+ RPAREN )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:981:13: LPAREN ( componentValue )+ RPAREN
			{
			dbg.location(981,13);
			match(input,LPAREN,FOLLOW_LPAREN_in_parenBlock6434); if (state.failed) return;dbg.location(981,20);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:981:20: ( componentValue )+
			int cnt311=0;
			try { dbg.enterSubRule(311);

			loop311:
			while (true) {
				int alt311=2;
				try { dbg.enterDecision(311, decisionCanBacktrack[311]);

				int LA311_0 = input.LA(1);
				if ( ((LA311_0 >= A && LA311_0 <= R)||(LA311_0 >= REM && LA311_0 <= RIGHTTOP_SYM)||(LA311_0 >= S && LA311_0 <= Z)) ) {
					alt311=1;
				}

				} finally {dbg.exitDecision(311);}

				switch (alt311) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:981:20: componentValue
					{
					dbg.location(981,20);
					pushFollow(FOLLOW_componentValue_in_parenBlock6436);
					componentValue();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					if ( cnt311 >= 1 ) break loop311;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(311, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt311++;
			}
			} finally {dbg.exitSubRule(311);}
			dbg.location(981,36);
			match(input,RPAREN,FOLLOW_RPAREN_in_parenBlock6439); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(981, 41);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "parenBlock");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "parenBlock"



	// $ANTLR start "componentValue"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:983:1: componentValue : ( parenBlock | braceBlock | bracketBlock | ( functionName ( ws )? LPAREN )=> function | preservedToken );
	public final void componentValue() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "componentValue");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(983, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:983:15: ( parenBlock | braceBlock | bracketBlock | ( functionName ( ws )? LPAREN )=> function | preservedToken )
			int alt312=5;
			try { dbg.enterDecision(312, decisionCanBacktrack[312]);

			switch ( input.LA(1) ) {
			case LPAREN:
				{
				alt312=1;
				}
				break;
			case LBRACE:
				{
				alt312=2;
				}
				break;
			case LBRACKET:
				{
				alt312=3;
				}
				break;
			case IDENT:
				{
				int LA312_4 = input.LA(2);
				if ( (synpred36_Css3()) ) {
					alt312=4;
				}
				else if ( (true) ) {
					alt312=5;
				}

				}
				break;
			case A:
			case ANGLE:
			case AT_IDENT:
			case AT_SIGN:
			case B:
			case BEGINS:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case C:
			case CDC:
			case CDO:
			case CHARSET_SYM:
			case COLON:
			case COMMA:
			case COMMENT:
			case CONTAINS:
			case COUNTER_STYLE_SYM:
			case CP_DOTS:
			case CP_EQ:
			case CP_NOT_EQ:
			case D:
			case DASHMATCH:
			case DCOLON:
			case DIMENSION:
			case DOT:
			case E:
			case EMS:
			case ENDS:
			case ESCAPE:
			case EXCLAMATION_MARK:
			case EXS:
			case F:
			case FONT_FACE_SYM:
			case FREQ:
			case G:
			case GEN:
			case GREATER:
			case GREATER_OR_EQ:
			case H:
			case HASH:
			case HASH_SYMBOL:
			case HEXCHAR:
			case HEXCHAR_WILDCARD:
			case I:
			case IMPORTANT_SYM:
			case IMPORT_SYM:
			case INCLUDES:
			case INVALID:
			case J:
			case K:
			case L:
			case LAYER_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case LENGTH:
			case LESS:
			case LESS_AND:
			case LESS_JS_STRING:
			case LESS_OR_EQ:
			case LESS_REST:
			case LINE_COMMENT:
			case M:
			case MEDIA_SYM:
			case MINUS:
			case MOZ_DOCUMENT_SYM:
			case MOZ_DOMAIN:
			case MOZ_REGEXP:
			case MOZ_URL_PREFIX:
			case N:
			case NAME:
			case NAMESPACE_SYM:
			case NL:
			case NMCHAR:
			case NMSTART:
			case NONASCII:
			case NOT:
			case NUMBER:
			case O:
			case OPEQ:
			case P:
			case PAGE_SYM:
			case PERCENTAGE:
			case PERCENTAGE_SYMBOL:
			case PIPE:
			case PLUS:
			case Q:
			case R:
			case REM:
			case RESOLUTION:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case S:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_DEFAULT:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_ELSEIF:
			case SASS_ERROR:
			case SASS_EXTEND:
			case SASS_EXTEND_ONLY_SELECTOR:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_GLOBAL:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_OPTIONAL:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_VAR:
			case SASS_WARN:
			case SASS_WHILE:
			case SEMI:
			case SOLIDUS:
			case STAR:
			case STRING:
			case SUPPORTS_SYM:
			case T:
			case TILDE:
			case TIME:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case U:
			case UNICODE:
			case URANGE:
			case URI:
			case URL:
			case V:
			case VARIABLE:
			case W:
			case WEBKIT_KEYFRAMES_SYM:
			case WS:
			case X:
			case Y:
			case Z:
				{
				alt312=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 312, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(312);}

			switch (alt312) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:983:17: parenBlock
					{
					dbg.location(983,17);
					pushFollow(FOLLOW_parenBlock_in_componentValue6446);
					parenBlock();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:983:30: braceBlock
					{
					dbg.location(983,30);
					pushFollow(FOLLOW_braceBlock_in_componentValue6450);
					braceBlock();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:983:43: bracketBlock
					{
					dbg.location(983,43);
					pushFollow(FOLLOW_bracketBlock_in_componentValue6454);
					bracketBlock();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:983:58: ( functionName ( ws )? LPAREN )=> function
					{
					dbg.location(983,87);
					pushFollow(FOLLOW_function_in_componentValue6469);
					function();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:983:98: preservedToken
					{
					dbg.location(983,98);
					pushFollow(FOLLOW_preservedToken_in_componentValue6473);
					preservedToken();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(983, 111);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "componentValue");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "componentValue"



	// $ANTLR start "componentValueOuter"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:985:1: componentValueOuter : ( parenBlock | braceBlock | bracketBlock | ( functionName ( ws )? LPAREN )=> function | preservedTokenTopLevel ) ( componentValueOuter )* ;
	public final void componentValueOuter() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "componentValueOuter");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(985, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:985:20: ( ( parenBlock | braceBlock | bracketBlock | ( functionName ( ws )? LPAREN )=> function | preservedTokenTopLevel ) ( componentValueOuter )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:985:22: ( parenBlock | braceBlock | bracketBlock | ( functionName ( ws )? LPAREN )=> function | preservedTokenTopLevel ) ( componentValueOuter )*
			{
			dbg.location(985,22);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:985:22: ( parenBlock | braceBlock | bracketBlock | ( functionName ( ws )? LPAREN )=> function | preservedTokenTopLevel )
			int alt313=5;
			try { dbg.enterSubRule(313);
			try { dbg.enterDecision(313, decisionCanBacktrack[313]);

			switch ( input.LA(1) ) {
			case LPAREN:
				{
				alt313=1;
				}
				break;
			case LBRACE:
				{
				alt313=2;
				}
				break;
			case LBRACKET:
				{
				alt313=3;
				}
				break;
			case IDENT:
				{
				int LA313_4 = input.LA(2);
				if ( (synpred37_Css3()) ) {
					alt313=4;
				}
				else if ( (true) ) {
					alt313=5;
				}

				}
				break;
			case A:
			case ANGLE:
			case AT_IDENT:
			case AT_SIGN:
			case B:
			case BEGINS:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case C:
			case CDC:
			case CDO:
			case CHARSET_SYM:
			case COLON:
			case COMMA:
			case COMMENT:
			case CONTAINS:
			case COUNTER_STYLE_SYM:
			case CP_DOTS:
			case CP_EQ:
			case CP_NOT_EQ:
			case D:
			case DASHMATCH:
			case DCOLON:
			case DIMENSION:
			case DOT:
			case E:
			case EMS:
			case ENDS:
			case ESCAPE:
			case EXCLAMATION_MARK:
			case EXS:
			case F:
			case FONT_FACE_SYM:
			case FREQ:
			case G:
			case GEN:
			case GREATER:
			case GREATER_OR_EQ:
			case H:
			case HASH:
			case HASH_SYMBOL:
			case HEXCHAR:
			case HEXCHAR_WILDCARD:
			case I:
			case IMPORTANT_SYM:
			case IMPORT_SYM:
			case INCLUDES:
			case INVALID:
			case J:
			case K:
			case L:
			case LAYER_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case LENGTH:
			case LESS:
			case LESS_AND:
			case LESS_JS_STRING:
			case LESS_OR_EQ:
			case LESS_REST:
			case LINE_COMMENT:
			case M:
			case MEDIA_SYM:
			case MINUS:
			case MOZ_DOCUMENT_SYM:
			case MOZ_DOMAIN:
			case MOZ_REGEXP:
			case MOZ_URL_PREFIX:
			case N:
			case NAME:
			case NAMESPACE_SYM:
			case NL:
			case NMCHAR:
			case NMSTART:
			case NONASCII:
			case NOT:
			case NUMBER:
			case O:
			case OPEQ:
			case P:
			case PAGE_SYM:
			case PERCENTAGE:
			case PERCENTAGE_SYMBOL:
			case PIPE:
			case PLUS:
			case Q:
			case R:
			case REM:
			case RESOLUTION:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case S:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_DEFAULT:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_ELSEIF:
			case SASS_ERROR:
			case SASS_EXTEND:
			case SASS_EXTEND_ONLY_SELECTOR:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_GLOBAL:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_OPTIONAL:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_VAR:
			case SASS_WARN:
			case SASS_WHILE:
			case SOLIDUS:
			case STAR:
			case STRING:
			case SUPPORTS_SYM:
			case T:
			case TILDE:
			case TIME:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case U:
			case UNICODE:
			case URANGE:
			case URI:
			case URL:
			case V:
			case VARIABLE:
			case W:
			case WEBKIT_KEYFRAMES_SYM:
			case WS:
			case X:
			case Y:
			case Z:
				{
				alt313=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 313, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(313);}

			switch (alt313) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:985:23: parenBlock
					{
					dbg.location(985,23);
					pushFollow(FOLLOW_parenBlock_in_componentValueOuter6481);
					parenBlock();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:985:36: braceBlock
					{
					dbg.location(985,36);
					pushFollow(FOLLOW_braceBlock_in_componentValueOuter6485);
					braceBlock();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:985:49: bracketBlock
					{
					dbg.location(985,49);
					pushFollow(FOLLOW_bracketBlock_in_componentValueOuter6489);
					bracketBlock();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:985:64: ( functionName ( ws )? LPAREN )=> function
					{
					dbg.location(985,93);
					pushFollow(FOLLOW_function_in_componentValueOuter6504);
					function();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:985:104: preservedTokenTopLevel
					{
					dbg.location(985,104);
					pushFollow(FOLLOW_preservedTokenTopLevel_in_componentValueOuter6508);
					preservedTokenTopLevel();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(313);}
			dbg.location(985,128);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:985:128: ( componentValueOuter )*
			try { dbg.enterSubRule(314);

			loop314:
			while (true) {
				int alt314=2;
				try { dbg.enterDecision(314, decisionCanBacktrack[314]);

				switch ( input.LA(1) ) {
				case COMMENT:
				case NL:
				case WS:
					{
					alt314=1;
					}
					break;
				case LESS_AND:
					{
					alt314=1;
					}
					break;
				case DOT:
					{
					alt314=1;
					}
					break;
				case HASH:
					{
					alt314=1;
					}
					break;
				case SASS_MIXIN:
					{
					alt314=1;
					}
					break;
				case AT_IDENT:
					{
					alt314=1;
					}
					break;
				case SASS_INCLUDE:
					{
					alt314=1;
					}
					break;
				case SASS_AT_ROOT:
					{
					alt314=1;
					}
					break;
				case GREATER:
				case PLUS:
				case TILDE:
					{
					alt314=1;
					}
					break;
				case SASS_EXTEND_ONLY_SELECTOR:
					{
					alt314=1;
					}
					break;
				case HASH_SYMBOL:
					{
					alt314=1;
					}
					break;
				case DIMENSION:
					{
					alt314=1;
					}
					break;
				case LBRACKET:
					{
					alt314=1;
					}
					break;
				case COLON:
				case DCOLON:
					{
					alt314=1;
					}
					break;
				case IDENT:
					{
					alt314=1;
					}
					break;
				case AT_SIGN:
					{
					alt314=1;
					}
					break;
				case MINUS:
					{
					alt314=1;
					}
					break;
				case STAR:
					{
					alt314=1;
					}
					break;
				case PIPE:
					{
					alt314=1;
					}
					break;
				case GEN:
					{
					alt314=1;
					}
					break;
				case VARIABLE:
					{
					alt314=1;
					}
					break;
				case SASS_DEBUG:
				case SASS_WARN:
					{
					alt314=1;
					}
					break;
				case SASS_VAR:
					{
					alt314=1;
					}
					break;
				case SASS_IF:
					{
					alt314=1;
					}
					break;
				case SASS_FOR:
					{
					alt314=1;
					}
					break;
				case SASS_EACH:
					{
					alt314=1;
					}
					break;
				case SASS_WHILE:
					{
					alt314=1;
					}
					break;
				case SASS_CONTENT:
					{
					alt314=1;
					}
					break;
				case IMPORT_SYM:
					{
					alt314=1;
					}
					break;
				case PAGE_SYM:
					{
					alt314=1;
					}
					break;
				case FONT_FACE_SYM:
					{
					alt314=1;
					}
					break;
				case MOZ_DOCUMENT_SYM:
					{
					alt314=1;
					}
					break;
				case WEBKIT_KEYFRAMES_SYM:
					{
					alt314=1;
					}
					break;
				case MEDIA_SYM:
					{
					alt314=1;
					}
					break;
				case SASS_EXTEND:
					{
					alt314=1;
					}
					break;
				case SUPPORTS_SYM:
					{
					alt314=1;
					}
					break;
				case BOTTOMCENTER_SYM:
				case BOTTOMLEFTCORNER_SYM:
				case BOTTOMLEFT_SYM:
				case BOTTOMRIGHTCORNER_SYM:
				case BOTTOMRIGHT_SYM:
				case LEFTBOTTOM_SYM:
				case LEFTMIDDLE_SYM:
				case LEFTTOP_SYM:
				case RIGHTBOTTOM_SYM:
				case RIGHTMIDDLE_SYM:
				case RIGHTTOP_SYM:
				case TOPCENTER_SYM:
				case TOPLEFTCORNER_SYM:
				case TOPLEFT_SYM:
				case TOPRIGHTCORNER_SYM:
				case TOPRIGHT_SYM:
					{
					alt314=1;
					}
					break;
				case CHARSET_SYM:
				case COUNTER_STYLE_SYM:
				case NAMESPACE_SYM:
				case SASS_ELSE:
				case SASS_FORWARD:
				case SASS_FUNCTION:
				case SASS_RETURN:
				case SASS_USE:
					{
					alt314=1;
					}
					break;
				case LPAREN:
					{
					alt314=1;
					}
					break;
				case LBRACE:
					{
					alt314=1;
					}
					break;
				case A:
				case ANGLE:
				case B:
				case BEGINS:
				case C:
				case CDC:
				case CDO:
				case COMMA:
				case CONTAINS:
				case CP_DOTS:
				case CP_EQ:
				case CP_NOT_EQ:
				case D:
				case DASHMATCH:
				case E:
				case EMS:
				case ENDS:
				case ESCAPE:
				case EXCLAMATION_MARK:
				case EXS:
				case F:
				case FREQ:
				case G:
				case GREATER_OR_EQ:
				case H:
				case HEXCHAR:
				case HEXCHAR_WILDCARD:
				case I:
				case IMPORTANT_SYM:
				case INCLUDES:
				case INVALID:
				case J:
				case K:
				case L:
				case LAYER_SYM:
				case LENGTH:
				case LESS:
				case LESS_JS_STRING:
				case LESS_OR_EQ:
				case LESS_REST:
				case LINE_COMMENT:
				case M:
				case MOZ_DOMAIN:
				case MOZ_REGEXP:
				case MOZ_URL_PREFIX:
				case N:
				case NAME:
				case NMCHAR:
				case NMSTART:
				case NONASCII:
				case NOT:
				case NUMBER:
				case O:
				case OPEQ:
				case P:
				case PERCENTAGE:
				case PERCENTAGE_SYMBOL:
				case Q:
				case R:
				case REM:
				case RESOLUTION:
				case S:
				case SASS_DEFAULT:
				case SASS_ELSEIF:
				case SASS_ERROR:
				case SASS_GLOBAL:
				case SASS_OPTIONAL:
				case SOLIDUS:
				case STRING:
				case T:
				case TIME:
				case U:
				case UNICODE:
				case URANGE:
				case URI:
				case URL:
				case V:
				case W:
				case X:
				case Y:
				case Z:
					{
					alt314=1;
					}
					break;
				}
				} finally {dbg.exitDecision(314);}

				switch (alt314) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:985:128: componentValueOuter
					{
					dbg.location(985,128);
					pushFollow(FOLLOW_componentValueOuter_in_componentValueOuter6511);
					componentValueOuter();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop314;
				}
			}
			} finally {dbg.exitSubRule(314);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(985, 147);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "componentValueOuter");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "componentValueOuter"



	// $ANTLR start "syncToDeclarationsRule"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:989:1: syncToDeclarationsRule :;
	public final void syncToDeclarationsRule() throws RecognitionException {

		        //why sync to DOT? - LESS allows class rules nested
		        syncToSet(BitSet.of(IDENT, RBRACE, STAR, DOT));
		    
		try { dbg.enterRule(getGrammarFileName(), "syncToDeclarationsRule");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(989, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:994:6: ()
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:995:6: 
			{
			}

		}
		finally {
			// do for sure before leaving
		}
		dbg.location(995, 5);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "syncToDeclarationsRule");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "syncToDeclarationsRule"



	// $ANTLR start "syncTo_RBRACE"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:997:1: syncTo_RBRACE :;
	public final void syncTo_RBRACE() throws RecognitionException {

		        syncToRBRACE(1); //initial nest == 1
		    
		try { dbg.enterRule(getGrammarFileName(), "syncTo_RBRACE");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(997, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1001:6: ()
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1002:6: 
			{
			}

		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1002, 5);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "syncTo_RBRACE");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "syncTo_RBRACE"



	// $ANTLR start "syncTo_SEMI"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1004:1: syncTo_SEMI : SEMI ;
	public final void syncTo_SEMI() throws RecognitionException {

		        syncToSet(BitSet.of(SEMI));
		    
		try { dbg.enterRule(getGrammarFileName(), "syncTo_SEMI");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1004, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1008:6: ( SEMI )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1009:13: SEMI
			{
			dbg.location(1009,13);
			match(input,SEMI,FOLLOW_SEMI_in_syncTo_SEMI6600); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1010, 5);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "syncTo_SEMI");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "syncTo_SEMI"



	// $ANTLR start "syncToFollow"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1013:1: syncToFollow :;
	public final void syncToFollow() throws RecognitionException {

		        syncToSet();
		    
		try { dbg.enterRule(getGrammarFileName(), "syncToFollow");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1013, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1017:6: ()
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1018:6: 
			{
			}

		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1018, 5);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "syncToFollow");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "syncToFollow"



	// $ANTLR start "prio"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1020:1: prio : IMPORTANT_SYM ;
	public final void prio() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "prio");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1020, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1021:5: ( IMPORTANT_SYM )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1021:7: IMPORTANT_SYM
			{
			dbg.location(1021,7);
			match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_prio6645); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1022, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "prio");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "prio"



	// $ANTLR start "expression"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1024:1: expression : term ( ( ( ws | ( ( ws )? operator ( ws )? ) |) term )=> ( ws | ( ( ws )? operator ( ws )? ) |) term )* ;
	public final void expression() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "expression");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1024, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1025:5: ( term ( ( ( ws | ( ( ws )? operator ( ws )? ) |) term )=> ( ws | ( ( ws )? operator ( ws )? ) |) term )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1025:7: term ( ( ( ws | ( ( ws )? operator ( ws )? ) |) term )=> ( ws | ( ( ws )? operator ( ws )? ) |) term )*
			{
			dbg.location(1025,7);
			pushFollow(FOLLOW_term_in_expression6662);
			term();
			state._fsp--;
			if (state.failed) return;dbg.location(1025,12);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1025:12: ( ( ( ws | ( ( ws )? operator ( ws )? ) |) term )=> ( ws | ( ( ws )? operator ( ws )? ) |) term )*
			try { dbg.enterSubRule(318);

			loop318:
			while (true) {
				int alt318=2;
				try { dbg.enterDecision(318, decisionCanBacktrack[318]);

				try {
					isCyclicDecision = true;
					alt318 = dfa318.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(318);}

				switch (alt318) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1025:14: ( ( ws | ( ( ws )? operator ( ws )? ) |) term )=> ( ws | ( ( ws )? operator ( ws )? ) |) term
					{
					dbg.location(1025,66);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1025:66: ( ws | ( ( ws )? operator ( ws )? ) |)
					int alt317=3;
					try { dbg.enterSubRule(317);
					try { dbg.enterDecision(317, decisionCanBacktrack[317]);

					try {
						isCyclicDecision = true;
						alt317 = dfa317.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(317);}

					switch (alt317) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1025:68: ws
							{
							dbg.location(1025,68);
							pushFollow(FOLLOW_ws_in_expression6694);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1025:73: ( ( ws )? operator ( ws )? )
							{
							dbg.location(1025,73);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1025:73: ( ( ws )? operator ( ws )? )
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1025:74: ( ws )? operator ( ws )?
							{
							dbg.location(1025,74);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1025:74: ( ws )?
							int alt315=2;
							try { dbg.enterSubRule(315);
							try { dbg.enterDecision(315, decisionCanBacktrack[315]);

							int LA315_0 = input.LA(1);
							if ( (LA315_0==COMMENT||LA315_0==NL||LA315_0==WS) ) {
								alt315=1;
							}
							} finally {dbg.exitDecision(315);}

							switch (alt315) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1025:74: ws
									{
									dbg.location(1025,74);
									pushFollow(FOLLOW_ws_in_expression6699);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(315);}
							dbg.location(1025,78);
							pushFollow(FOLLOW_operator_in_expression6702);
							operator();
							state._fsp--;
							if (state.failed) return;dbg.location(1025,87);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1025:87: ( ws )?
							int alt316=2;
							try { dbg.enterSubRule(316);
							try { dbg.enterDecision(316, decisionCanBacktrack[316]);

							int LA316_0 = input.LA(1);
							if ( (LA316_0==COMMENT||LA316_0==NL||LA316_0==WS) ) {
								alt316=1;
							}
							} finally {dbg.exitDecision(316);}

							switch (alt316) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1025:87: ws
									{
									dbg.location(1025,87);
									pushFollow(FOLLOW_ws_in_expression6704);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(316);}

							}

							}
							break;
						case 3 :
							dbg.enterAlt(3);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1025:107: 
							{
							}
							break;

					}
					} finally {dbg.exitSubRule(317);}
					dbg.location(1025,109);
					pushFollow(FOLLOW_term_in_expression6713);
					term();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop318;
				}
			}
			} finally {dbg.exitSubRule(318);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1026, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "expression");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "expression"



	// $ANTLR start "term"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1028:1: term : ( unaryOperator ( ws )? )? ( ( functionName ( ws )? LPAREN )=> function | VARIABLE |{...}? IDENT | ( LBRACKET ( WS )? IDENT ( WS IDENT )* ( WS )? RBRACKET ) | NUMBER | URANGE | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | TILDE ( STRING | LESS_JS_STRING ) | LESS_JS_STRING | GEN | URI | hexColor |{...}? cp_variable |{...}? LESS_AND |{...}? sass_interpolation_expression_var |{...}? less_selector_interpolation |{...}? cp_term_symbol ) ;
	public final void term() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "term");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1028, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1029:5: ( ( unaryOperator ( ws )? )? ( ( functionName ( ws )? LPAREN )=> function | VARIABLE |{...}? IDENT | ( LBRACKET ( WS )? IDENT ( WS IDENT )* ( WS )? RBRACKET ) | NUMBER | URANGE | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | TILDE ( STRING | LESS_JS_STRING ) | LESS_JS_STRING | GEN | URI | hexColor |{...}? cp_variable |{...}? LESS_AND |{...}? sass_interpolation_expression_var |{...}? less_selector_interpolation |{...}? cp_term_symbol ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1030:5: ( unaryOperator ( ws )? )? ( ( functionName ( ws )? LPAREN )=> function | VARIABLE |{...}? IDENT | ( LBRACKET ( WS )? IDENT ( WS IDENT )* ( WS )? RBRACKET ) | NUMBER | URANGE | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | TILDE ( STRING | LESS_JS_STRING ) | LESS_JS_STRING | GEN | URI | hexColor |{...}? cp_variable |{...}? LESS_AND |{...}? sass_interpolation_expression_var |{...}? less_selector_interpolation |{...}? cp_term_symbol )
			{
			dbg.location(1030,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1030:5: ( unaryOperator ( ws )? )?
			int alt320=2;
			try { dbg.enterSubRule(320);
			try { dbg.enterDecision(320, decisionCanBacktrack[320]);

			int LA320_0 = input.LA(1);
			if ( (LA320_0==MINUS||LA320_0==PLUS) ) {
				alt320=1;
			}
			} finally {dbg.exitDecision(320);}

			switch (alt320) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1030:7: unaryOperator ( ws )?
					{
					dbg.location(1030,7);
					pushFollow(FOLLOW_unaryOperator_in_term6738);
					unaryOperator();
					state._fsp--;
					if (state.failed) return;dbg.location(1030,21);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1030:21: ( ws )?
					int alt319=2;
					try { dbg.enterSubRule(319);
					try { dbg.enterDecision(319, decisionCanBacktrack[319]);

					int LA319_0 = input.LA(1);
					if ( (LA319_0==COMMENT||LA319_0==NL||LA319_0==WS) ) {
						alt319=1;
					}
					} finally {dbg.exitDecision(319);}

					switch (alt319) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1030:21: ws
							{
							dbg.location(1030,21);
							pushFollow(FOLLOW_ws_in_term6740);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(319);}

					}
					break;

			}
			} finally {dbg.exitSubRule(320);}
			dbg.location(1031,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1031:5: ( ( functionName ( ws )? LPAREN )=> function | VARIABLE |{...}? IDENT | ( LBRACKET ( WS )? IDENT ( WS IDENT )* ( WS )? RBRACKET ) | NUMBER | URANGE | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | TILDE ( STRING | LESS_JS_STRING ) | LESS_JS_STRING | GEN | URI | hexColor |{...}? cp_variable |{...}? LESS_AND |{...}? sass_interpolation_expression_var |{...}? less_selector_interpolation |{...}? cp_term_symbol )
			int alt324=27;
			try { dbg.enterSubRule(324);
			try { dbg.enterDecision(324, decisionCanBacktrack[324]);

			switch ( input.LA(1) ) {
			case IDENT:
				{
				int LA324_1 = input.LA(2);
				if ( (synpred39_Css3()) ) {
					alt324=1;
				}
				else if ( (evalPredicate(! (isScssSource() && tokenNameEquals2(".")),"! (isScssSource() && tokenNameEquals2(\".\"))")) ) {
					alt324=3;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt324=23;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 324, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case VARIABLE:
				{
				alt324=2;
				}
				break;
			case LBRACKET:
				{
				alt324=4;
				}
				break;
			case NUMBER:
				{
				alt324=5;
				}
				break;
			case URANGE:
				{
				alt324=6;
				}
				break;
			case PERCENTAGE:
				{
				alt324=7;
				}
				break;
			case LENGTH:
				{
				alt324=8;
				}
				break;
			case EMS:
				{
				alt324=9;
				}
				break;
			case REM:
				{
				alt324=10;
				}
				break;
			case EXS:
				{
				alt324=11;
				}
				break;
			case ANGLE:
				{
				alt324=12;
				}
				break;
			case TIME:
				{
				alt324=13;
				}
				break;
			case FREQ:
				{
				alt324=14;
				}
				break;
			case RESOLUTION:
				{
				alt324=15;
				}
				break;
			case DIMENSION:
				{
				alt324=16;
				}
				break;
			case STRING:
				{
				alt324=17;
				}
				break;
			case TILDE:
				{
				alt324=18;
				}
				break;
			case LESS_JS_STRING:
				{
				alt324=19;
				}
				break;
			case GEN:
				{
				alt324=20;
				}
				break;
			case URI:
				{
				alt324=21;
				}
				break;
			case HASH:
				{
				alt324=22;
				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_VAR:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				alt324=23;
				}
				break;
			case LESS_AND:
				{
				alt324=24;
				}
				break;
			case HASH_SYMBOL:
				{
				alt324=25;
				}
				break;
			case AT_SIGN:
				{
				alt324=26;
				}
				break;
			case PERCENTAGE_SYMBOL:
				{
				alt324=27;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 324, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(324);}

			switch (alt324) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1032:9: ( functionName ( ws )? LPAREN )=> function
					{
					dbg.location(1032,36);
					pushFollow(FOLLOW_function_in_term6769);
					function();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1033:11: VARIABLE
					{
					dbg.location(1033,11);
					match(input,VARIABLE,FOLLOW_VARIABLE_in_term6782); if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1034:11: {...}? IDENT
					{
					dbg.location(1034,11);
					if ( !(evalPredicate(! (isScssSource() && tokenNameEquals2(".")),"! (isScssSource() && tokenNameEquals2(\".\"))")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "term", "! (isScssSource() && tokenNameEquals2(\".\"))");
					}dbg.location(1034,58);
					match(input,IDENT,FOLLOW_IDENT_in_term6796); if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1035:11: ( LBRACKET ( WS )? IDENT ( WS IDENT )* ( WS )? RBRACKET )
					{
					dbg.location(1035,11);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1035:11: ( LBRACKET ( WS )? IDENT ( WS IDENT )* ( WS )? RBRACKET )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1035:12: LBRACKET ( WS )? IDENT ( WS IDENT )* ( WS )? RBRACKET
					{
					dbg.location(1035,12);
					match(input,LBRACKET,FOLLOW_LBRACKET_in_term6809); if (state.failed) return;dbg.location(1035,21);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1035:21: ( WS )?
					int alt321=2;
					try { dbg.enterSubRule(321);
					try { dbg.enterDecision(321, decisionCanBacktrack[321]);

					int LA321_0 = input.LA(1);
					if ( (LA321_0==WS) ) {
						alt321=1;
					}
					} finally {dbg.exitDecision(321);}

					switch (alt321) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1035:21: WS
							{
							dbg.location(1035,21);
							match(input,WS,FOLLOW_WS_in_term6811); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(321);}
					dbg.location(1035,25);
					match(input,IDENT,FOLLOW_IDENT_in_term6814); if (state.failed) return;dbg.location(1035,31);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1035:31: ( WS IDENT )*
					try { dbg.enterSubRule(322);

					loop322:
					while (true) {
						int alt322=2;
						try { dbg.enterDecision(322, decisionCanBacktrack[322]);

						int LA322_0 = input.LA(1);
						if ( (LA322_0==WS) ) {
							int LA322_1 = input.LA(2);
							if ( (LA322_1==IDENT) ) {
								alt322=1;
							}

						}

						} finally {dbg.exitDecision(322);}

						switch (alt322) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1035:32: WS IDENT
							{
							dbg.location(1035,32);
							match(input,WS,FOLLOW_WS_in_term6817); if (state.failed) return;dbg.location(1035,35);
							match(input,IDENT,FOLLOW_IDENT_in_term6819); if (state.failed) return;
							}
							break;

						default :
							break loop322;
						}
					}
					} finally {dbg.exitSubRule(322);}
					dbg.location(1035,43);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1035:43: ( WS )?
					int alt323=2;
					try { dbg.enterSubRule(323);
					try { dbg.enterDecision(323, decisionCanBacktrack[323]);

					int LA323_0 = input.LA(1);
					if ( (LA323_0==WS) ) {
						alt323=1;
					}
					} finally {dbg.exitDecision(323);}

					switch (alt323) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1035:43: WS
							{
							dbg.location(1035,43);
							match(input,WS,FOLLOW_WS_in_term6823); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(323);}
					dbg.location(1035,47);
					match(input,RBRACKET,FOLLOW_RBRACKET_in_term6826); if (state.failed) return;
					}

					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1036:11: NUMBER
					{
					dbg.location(1036,11);
					match(input,NUMBER,FOLLOW_NUMBER_in_term6839); if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1037:11: URANGE
					{
					dbg.location(1037,11);
					match(input,URANGE,FOLLOW_URANGE_in_term6851); if (state.failed) return;
					}
					break;
				case 7 :
					dbg.enterAlt(7);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1038:11: PERCENTAGE
					{
					dbg.location(1038,11);
					match(input,PERCENTAGE,FOLLOW_PERCENTAGE_in_term6863); if (state.failed) return;
					}
					break;
				case 8 :
					dbg.enterAlt(8);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1039:11: LENGTH
					{
					dbg.location(1039,11);
					match(input,LENGTH,FOLLOW_LENGTH_in_term6875); if (state.failed) return;
					}
					break;
				case 9 :
					dbg.enterAlt(9);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1040:11: EMS
					{
					dbg.location(1040,11);
					match(input,EMS,FOLLOW_EMS_in_term6887); if (state.failed) return;
					}
					break;
				case 10 :
					dbg.enterAlt(10);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1041:11: REM
					{
					dbg.location(1041,11);
					match(input,REM,FOLLOW_REM_in_term6899); if (state.failed) return;
					}
					break;
				case 11 :
					dbg.enterAlt(11);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1042:11: EXS
					{
					dbg.location(1042,11);
					match(input,EXS,FOLLOW_EXS_in_term6911); if (state.failed) return;
					}
					break;
				case 12 :
					dbg.enterAlt(12);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1043:11: ANGLE
					{
					dbg.location(1043,11);
					match(input,ANGLE,FOLLOW_ANGLE_in_term6923); if (state.failed) return;
					}
					break;
				case 13 :
					dbg.enterAlt(13);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1044:11: TIME
					{
					dbg.location(1044,11);
					match(input,TIME,FOLLOW_TIME_in_term6935); if (state.failed) return;
					}
					break;
				case 14 :
					dbg.enterAlt(14);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1045:11: FREQ
					{
					dbg.location(1045,11);
					match(input,FREQ,FOLLOW_FREQ_in_term6947); if (state.failed) return;
					}
					break;
				case 15 :
					dbg.enterAlt(15);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1046:11: RESOLUTION
					{
					dbg.location(1046,11);
					match(input,RESOLUTION,FOLLOW_RESOLUTION_in_term6959); if (state.failed) return;
					}
					break;
				case 16 :
					dbg.enterAlt(16);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1047:11: DIMENSION
					{
					dbg.location(1047,11);
					match(input,DIMENSION,FOLLOW_DIMENSION_in_term6971); if (state.failed) return;
					}
					break;
				case 17 :
					dbg.enterAlt(17);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1048:11: STRING
					{
					dbg.location(1048,11);
					match(input,STRING,FOLLOW_STRING_in_term6988); if (state.failed) return;
					}
					break;
				case 18 :
					dbg.enterAlt(18);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1049:11: TILDE ( STRING | LESS_JS_STRING )
					{
					dbg.location(1049,11);
					match(input,TILDE,FOLLOW_TILDE_in_term7000); if (state.failed) return;dbg.location(1049,17);
					if ( input.LA(1)==LESS_JS_STRING||input.LA(1)==STRING ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}
					}
					break;
				case 19 :
					dbg.enterAlt(19);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1050:11: LESS_JS_STRING
					{
					dbg.location(1050,11);
					match(input,LESS_JS_STRING,FOLLOW_LESS_JS_STRING_in_term7023); if (state.failed) return;
					}
					break;
				case 20 :
					dbg.enterAlt(20);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1051:11: GEN
					{
					dbg.location(1051,11);
					match(input,GEN,FOLLOW_GEN_in_term7038); if (state.failed) return;
					}
					break;
				case 21 :
					dbg.enterAlt(21);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1052:11: URI
					{
					dbg.location(1052,11);
					match(input,URI,FOLLOW_URI_in_term7050); if (state.failed) return;
					}
					break;
				case 22 :
					dbg.enterAlt(22);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1053:11: hexColor
					{
					dbg.location(1053,11);
					pushFollow(FOLLOW_hexColor_in_term7062);
					hexColor();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 23 :
					dbg.enterAlt(23);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1054:11: {...}? cp_variable
					{
					dbg.location(1054,11);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "term", "isCssPreprocessorSource()");
					}dbg.location(1054,40);
					pushFollow(FOLLOW_cp_variable_in_term7076);
					cp_variable();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 24 :
					dbg.enterAlt(24);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1055:11: {...}? LESS_AND
					{
					dbg.location(1055,11);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "term", "isScssSource()");
					}dbg.location(1055,29);
					match(input,LESS_AND,FOLLOW_LESS_AND_in_term7090); if (state.failed) return;
					}
					break;
				case 25 :
					dbg.enterAlt(25);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1056:11: {...}? sass_interpolation_expression_var
					{
					dbg.location(1056,11);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "term", "isScssSource()");
					}dbg.location(1056,29);
					pushFollow(FOLLOW_sass_interpolation_expression_var_in_term7104);
					sass_interpolation_expression_var();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 26 :
					dbg.enterAlt(26);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1057:11: {...}? less_selector_interpolation
					{
					dbg.location(1057,11);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "term", "isLessSource()");
					}dbg.location(1057,29);
					pushFollow(FOLLOW_less_selector_interpolation_in_term7118);
					less_selector_interpolation();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 27 :
					dbg.enterAlt(27);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1058:11: {...}? cp_term_symbol
					{
					dbg.location(1058,11);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "term", "isCssPreprocessorSource()");
					}dbg.location(1058,40);
					pushFollow(FOLLOW_cp_term_symbol_in_term7132);
					cp_term_symbol();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(324);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1060, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "term");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "term"



	// $ANTLR start "cp_term_symbol"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1065:1: cp_term_symbol : PERCENTAGE_SYMBOL ;
	public final void cp_term_symbol() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_term_symbol");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1065, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1066:5: ( PERCENTAGE_SYMBOL )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1066:7: PERCENTAGE_SYMBOL
			{
			dbg.location(1066,7);
			match(input,PERCENTAGE_SYMBOL,FOLLOW_PERCENTAGE_SYMBOL_in_cp_term_symbol7159); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1067, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_term_symbol");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_term_symbol"



	// $ANTLR start "function"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1069:1: function : functionName ( ws )? LPAREN ( ws )? ( fnAttributes |) RPAREN ;
	public final void function() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "function");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1069, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1070:2: ( functionName ( ws )? LPAREN ( ws )? ( fnAttributes |) RPAREN )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1070:5: functionName ( ws )? LPAREN ( ws )? ( fnAttributes |) RPAREN
			{
			dbg.location(1070,5);
			pushFollow(FOLLOW_functionName_in_function7175);
			functionName();
			state._fsp--;
			if (state.failed) return;dbg.location(1070,18);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1070:18: ( ws )?
			int alt325=2;
			try { dbg.enterSubRule(325);
			try { dbg.enterDecision(325, decisionCanBacktrack[325]);

			int LA325_0 = input.LA(1);
			if ( (LA325_0==COMMENT||LA325_0==NL||LA325_0==WS) ) {
				alt325=1;
			}
			} finally {dbg.exitDecision(325);}

			switch (alt325) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1070:18: ws
					{
					dbg.location(1070,18);
					pushFollow(FOLLOW_ws_in_function7177);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(325);}
			dbg.location(1071,3);
			match(input,LPAREN,FOLLOW_LPAREN_in_function7182); if (state.failed) return;dbg.location(1071,10);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1071:10: ( ws )?
			int alt326=2;
			try { dbg.enterSubRule(326);
			try { dbg.enterDecision(326, decisionCanBacktrack[326]);

			int LA326_0 = input.LA(1);
			if ( (LA326_0==COMMENT||LA326_0==NL||LA326_0==WS) ) {
				alt326=1;
			}
			} finally {dbg.exitDecision(326);}

			switch (alt326) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1071:10: ws
					{
					dbg.location(1071,10);
					pushFollow(FOLLOW_ws_in_function7184);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(326);}
			dbg.location(1072,3);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1072:3: ( fnAttributes |)
			int alt327=2;
			try { dbg.enterSubRule(327);
			try { dbg.enterDecision(327, decisionCanBacktrack[327]);

			int LA327_0 = input.LA(1);
			if ( ((LA327_0 >= ANGLE && LA327_0 <= AT_SIGN)||(LA327_0 >= BOTTOMCENTER_SYM && LA327_0 <= BOTTOMRIGHT_SYM)||LA327_0==CHARSET_SYM||LA327_0==COUNTER_STYLE_SYM||LA327_0==DIMENSION||LA327_0==EMS||LA327_0==EXS||(LA327_0 >= FONT_FACE_SYM && LA327_0 <= FREQ)||LA327_0==GEN||(LA327_0 >= HASH && LA327_0 <= HASH_SYMBOL)||(LA327_0 >= IDENT && LA327_0 <= IMPORT_SYM)||(LA327_0 >= LBRACE && LA327_0 <= LENGTH)||(LA327_0 >= LESS_AND && LA327_0 <= LESS_JS_STRING)||LA327_0==LPAREN||(LA327_0 >= MEDIA_SYM && LA327_0 <= MOZ_DOCUMENT_SYM)||LA327_0==NAMESPACE_SYM||(LA327_0 >= NOT && LA327_0 <= NUMBER)||(LA327_0 >= PAGE_SYM && LA327_0 <= PERCENTAGE_SYMBOL)||LA327_0==PLUS||(LA327_0 >= REM && LA327_0 <= RIGHTTOP_SYM)||(LA327_0 >= SASS_AT_ROOT && LA327_0 <= SASS_DEBUG)||(LA327_0 >= SASS_EACH && LA327_0 <= SASS_ELSE)||LA327_0==SASS_EXTEND||(LA327_0 >= SASS_FOR && LA327_0 <= SASS_FUNCTION)||(LA327_0 >= SASS_IF && LA327_0 <= SASS_MIXIN)||(LA327_0 >= SASS_RETURN && LA327_0 <= SASS_WHILE)||LA327_0==STRING||(LA327_0 >= TILDE && LA327_0 <= TOPRIGHT_SYM)||(LA327_0 >= URANGE && LA327_0 <= URI)||LA327_0==VARIABLE||LA327_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt327=1;
			}
			else if ( (LA327_0==RPAREN) ) {
				alt327=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 327, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(327);}

			switch (alt327) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1073:21: fnAttributes
					{
					dbg.location(1073,21);
					pushFollow(FOLLOW_fnAttributes_in_function7211);
					fnAttributes();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1075:3: 
					{
					}
					break;

			}
			} finally {dbg.exitSubRule(327);}
			dbg.location(1076,3);
			match(input,RPAREN,FOLLOW_RPAREN_in_function7242); if (state.failed) return;
			}

		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(RPAREN, SEMI, RBRACE));

		}

		finally {
			// do for sure before leaving
		}
		dbg.location(1077, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "function");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "function"



	// $ANTLR start "functionName"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1083:1: functionName : ( IDENT COLON )? IDENT ( DOT IDENT )* ;
	public final void functionName() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "functionName");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1083, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1087:2: ( ( IDENT COLON )? IDENT ( DOT IDENT )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1088:9: ( IDENT COLON )? IDENT ( DOT IDENT )*
			{
			dbg.location(1088,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1088:9: ( IDENT COLON )?
			int alt328=2;
			try { dbg.enterSubRule(328);
			try { dbg.enterDecision(328, decisionCanBacktrack[328]);

			int LA328_0 = input.LA(1);
			if ( (LA328_0==IDENT) ) {
				int LA328_1 = input.LA(2);
				if ( (LA328_1==COLON) ) {
					alt328=1;
				}
			}
			} finally {dbg.exitDecision(328);}

			switch (alt328) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1088:10: IDENT COLON
					{
					dbg.location(1088,10);
					match(input,IDENT,FOLLOW_IDENT_in_functionName7294); if (state.failed) return;dbg.location(1088,16);
					match(input,COLON,FOLLOW_COLON_in_functionName7296); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(328);}
			dbg.location(1088,24);
			match(input,IDENT,FOLLOW_IDENT_in_functionName7300); if (state.failed) return;dbg.location(1088,30);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1088:30: ( DOT IDENT )*
			try { dbg.enterSubRule(329);

			loop329:
			while (true) {
				int alt329=2;
				try { dbg.enterDecision(329, decisionCanBacktrack[329]);

				int LA329_0 = input.LA(1);
				if ( (LA329_0==DOT) ) {
					alt329=1;
				}

				} finally {dbg.exitDecision(329);}

				switch (alt329) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1088:31: DOT IDENT
					{
					dbg.location(1088,31);
					match(input,DOT,FOLLOW_DOT_in_functionName7303); if (state.failed) return;dbg.location(1088,35);
					match(input,IDENT,FOLLOW_IDENT_in_functionName7305); if (state.failed) return;
					}
					break;

				default :
					break loop329;
				}
			}
			} finally {dbg.exitSubRule(329);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1089, 5);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "functionName");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "functionName"



	// $ANTLR start "fnAttributes"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1091:1: fnAttributes : fnAttribute ( ( ws )? ( COMMA |{...}? SEMI ) ( ws )? fnAttribute )* ( ws )? ;
	public final void fnAttributes() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "fnAttributes");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1091, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1092:5: ( fnAttribute ( ( ws )? ( COMMA |{...}? SEMI ) ( ws )? fnAttribute )* ( ws )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1093:5: fnAttribute ( ( ws )? ( COMMA |{...}? SEMI ) ( ws )? fnAttribute )* ( ws )?
			{
			dbg.location(1093,5);
			pushFollow(FOLLOW_fnAttribute_in_fnAttributes7329);
			fnAttribute();
			state._fsp--;
			if (state.failed) return;dbg.location(1093,17);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1093:17: ( ( ws )? ( COMMA |{...}? SEMI ) ( ws )? fnAttribute )*
			try { dbg.enterSubRule(333);

			loop333:
			while (true) {
				int alt333=2;
				try { dbg.enterDecision(333, decisionCanBacktrack[333]);

				try {
					isCyclicDecision = true;
					alt333 = dfa333.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(333);}

				switch (alt333) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1093:18: ( ws )? ( COMMA |{...}? SEMI ) ( ws )? fnAttribute
					{
					dbg.location(1093,18);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1093:18: ( ws )?
					int alt330=2;
					try { dbg.enterSubRule(330);
					try { dbg.enterDecision(330, decisionCanBacktrack[330]);

					int LA330_0 = input.LA(1);
					if ( (LA330_0==COMMENT||LA330_0==NL||LA330_0==WS) ) {
						alt330=1;
					}
					} finally {dbg.exitDecision(330);}

					switch (alt330) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1093:18: ws
							{
							dbg.location(1093,18);
							pushFollow(FOLLOW_ws_in_fnAttributes7332);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(330);}
					dbg.location(1093,22);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1093:22: ( COMMA |{...}? SEMI )
					int alt331=2;
					try { dbg.enterSubRule(331);
					try { dbg.enterDecision(331, decisionCanBacktrack[331]);

					int LA331_0 = input.LA(1);
					if ( (LA331_0==COMMA) ) {
						alt331=1;
					}
					else if ( (LA331_0==SEMI) ) {
						alt331=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 331, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(331);}

					switch (alt331) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1093:23: COMMA
							{
							dbg.location(1093,23);
							match(input,COMMA,FOLLOW_COMMA_in_fnAttributes7336); if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1093:31: {...}? SEMI
							{
							dbg.location(1093,31);
							if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "fnAttributes", "isLessSource()");
							}dbg.location(1093,49);
							match(input,SEMI,FOLLOW_SEMI_in_fnAttributes7342); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(331);}
					dbg.location(1093,55);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1093:55: ( ws )?
					int alt332=2;
					try { dbg.enterSubRule(332);
					try { dbg.enterDecision(332, decisionCanBacktrack[332]);

					int LA332_0 = input.LA(1);
					if ( (LA332_0==COMMENT||LA332_0==NL||LA332_0==WS) ) {
						alt332=1;
					}
					} finally {dbg.exitDecision(332);}

					switch (alt332) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1093:55: ws
							{
							dbg.location(1093,55);
							pushFollow(FOLLOW_ws_in_fnAttributes7345);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(332);}
					dbg.location(1093,59);
					pushFollow(FOLLOW_fnAttribute_in_fnAttributes7348);
					fnAttribute();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop333;
				}
			}
			} finally {dbg.exitSubRule(333);}
			dbg.location(1093,73);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1093:73: ( ws )?
			int alt334=2;
			try { dbg.enterSubRule(334);
			try { dbg.enterDecision(334, decisionCanBacktrack[334]);

			int LA334_0 = input.LA(1);
			if ( (LA334_0==COMMENT||LA334_0==NL||LA334_0==WS) ) {
				alt334=1;
			}
			} finally {dbg.exitDecision(334);}

			switch (alt334) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1093:73: ws
					{
					dbg.location(1093,73);
					pushFollow(FOLLOW_ws_in_fnAttributes7352);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(334);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1094, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "fnAttributes");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "fnAttributes"



	// $ANTLR start "fnAttribute"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1096:1: fnAttribute : ( ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue | ( cp_expression )=> cp_expression | expression );
	public final void fnAttribute() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "fnAttribute");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1096, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1097:2: ( ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue | ( cp_expression )=> cp_expression | expression )
			int alt337=3;
			try { dbg.enterDecision(337, decisionCanBacktrack[337]);

			int LA337_0 = input.LA(1);
			if ( (LA337_0==IDENT) ) {
				int LA337_1 = input.LA(2);
				if ( (synpred40_Css3()) ) {
					alt337=1;
				}
				else if ( (synpred41_Css3()) ) {
					alt337=2;
				}
				else if ( (true) ) {
					alt337=3;
				}

			}
			else if ( (LA337_0==AT_IDENT||(LA337_0 >= BOTTOMCENTER_SYM && LA337_0 <= BOTTOMRIGHT_SYM)||LA337_0==CHARSET_SYM||LA337_0==COUNTER_STYLE_SYM||LA337_0==FONT_FACE_SYM||LA337_0==IMPORT_SYM||(LA337_0 >= LEFTBOTTOM_SYM && LA337_0 <= LEFTTOP_SYM)||LA337_0==MEDIA_SYM||LA337_0==MOZ_DOCUMENT_SYM||LA337_0==NAMESPACE_SYM||LA337_0==PAGE_SYM||(LA337_0 >= RIGHTBOTTOM_SYM && LA337_0 <= RIGHTTOP_SYM)||(LA337_0 >= SASS_AT_ROOT && LA337_0 <= SASS_DEBUG)||(LA337_0 >= SASS_EACH && LA337_0 <= SASS_ELSE)||LA337_0==SASS_EXTEND||(LA337_0 >= SASS_FOR && LA337_0 <= SASS_FUNCTION)||(LA337_0 >= SASS_IF && LA337_0 <= SASS_MIXIN)||(LA337_0 >= SASS_RETURN && LA337_0 <= SASS_USE)||(LA337_0 >= SASS_WARN && LA337_0 <= SASS_WHILE)||(LA337_0 >= TOPCENTER_SYM && LA337_0 <= TOPRIGHT_SYM)||LA337_0==WEBKIT_KEYFRAMES_SYM) ) {
				int LA337_2 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred40_Css3())) ) {
					alt337=1;
				}
				else if ( (((synpred41_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt337=2;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt337=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 337, 2, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA337_0==SASS_VAR) ) {
				int LA337_3 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&synpred40_Css3())) ) {
					alt337=1;
				}
				else if ( (((synpred41_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt337=2;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt337=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 337, 3, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA337_0==LBRACE) && (synpred41_Css3())) {
				alt337=2;
			}
			else if ( (LA337_0==NOT) && (synpred41_Css3())) {
				alt337=2;
			}
			else if ( (LA337_0==MINUS||LA337_0==PLUS) ) {
				int LA337_6 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt337=2;
				}
				else if ( (true) ) {
					alt337=3;
				}

			}
			else if ( (LA337_0==VARIABLE) ) {
				int LA337_7 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt337=2;
				}
				else if ( (true) ) {
					alt337=3;
				}

			}
			else if ( (LA337_0==LBRACKET) ) {
				int LA337_8 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt337=2;
				}
				else if ( (true) ) {
					alt337=3;
				}

			}
			else if ( (LA337_0==NUMBER) ) {
				int LA337_9 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt337=2;
				}
				else if ( (true) ) {
					alt337=3;
				}

			}
			else if ( (LA337_0==URANGE) ) {
				int LA337_10 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt337=2;
				}
				else if ( (true) ) {
					alt337=3;
				}

			}
			else if ( (LA337_0==PERCENTAGE) ) {
				int LA337_11 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt337=2;
				}
				else if ( (true) ) {
					alt337=3;
				}

			}
			else if ( (LA337_0==LENGTH) ) {
				int LA337_12 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt337=2;
				}
				else if ( (true) ) {
					alt337=3;
				}

			}
			else if ( (LA337_0==EMS) ) {
				int LA337_13 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt337=2;
				}
				else if ( (true) ) {
					alt337=3;
				}

			}
			else if ( (LA337_0==REM) ) {
				int LA337_14 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt337=2;
				}
				else if ( (true) ) {
					alt337=3;
				}

			}
			else if ( (LA337_0==EXS) ) {
				int LA337_15 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt337=2;
				}
				else if ( (true) ) {
					alt337=3;
				}

			}
			else if ( (LA337_0==ANGLE) ) {
				int LA337_16 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt337=2;
				}
				else if ( (true) ) {
					alt337=3;
				}

			}
			else if ( (LA337_0==TIME) ) {
				int LA337_17 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt337=2;
				}
				else if ( (true) ) {
					alt337=3;
				}

			}
			else if ( (LA337_0==FREQ) ) {
				int LA337_18 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt337=2;
				}
				else if ( (true) ) {
					alt337=3;
				}

			}
			else if ( (LA337_0==RESOLUTION) ) {
				int LA337_19 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt337=2;
				}
				else if ( (true) ) {
					alt337=3;
				}

			}
			else if ( (LA337_0==DIMENSION) ) {
				int LA337_20 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt337=2;
				}
				else if ( (true) ) {
					alt337=3;
				}

			}
			else if ( (LA337_0==STRING) ) {
				int LA337_21 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt337=2;
				}
				else if ( (true) ) {
					alt337=3;
				}

			}
			else if ( (LA337_0==TILDE) ) {
				int LA337_22 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt337=2;
				}
				else if ( (true) ) {
					alt337=3;
				}

			}
			else if ( (LA337_0==LESS_JS_STRING) ) {
				int LA337_23 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt337=2;
				}
				else if ( (true) ) {
					alt337=3;
				}

			}
			else if ( (LA337_0==GEN) ) {
				int LA337_24 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt337=2;
				}
				else if ( (true) ) {
					alt337=3;
				}

			}
			else if ( (LA337_0==URI) ) {
				int LA337_25 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt337=2;
				}
				else if ( (true) ) {
					alt337=3;
				}

			}
			else if ( (LA337_0==HASH) ) {
				int LA337_26 = input.LA(2);
				if ( (synpred41_Css3()) ) {
					alt337=2;
				}
				else if ( (true) ) {
					alt337=3;
				}

			}
			else if ( (LA337_0==LESS_AND) ) {
				int LA337_27 = input.LA(2);
				if ( ((synpred41_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt337=2;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt337=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 337, 27, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA337_0==HASH_SYMBOL) ) {
				int LA337_28 = input.LA(2);
				if ( ((synpred41_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt337=2;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt337=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 337, 28, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA337_0==AT_SIGN) ) {
				int LA337_29 = input.LA(2);
				if ( ((synpred41_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt337=2;
				}
				else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
					alt337=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 337, 29, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA337_0==PERCENTAGE_SYMBOL) ) {
				int LA337_30 = input.LA(2);
				if ( ((synpred41_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {
					alt337=2;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt337=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 337, 30, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA337_0==IMPORTANT_SYM) && (synpred41_Css3())) {
				alt337=2;
			}
			else if ( (LA337_0==LPAREN) && (synpred41_Css3())) {
				alt337=2;
			}

			} finally {dbg.exitDecision(337);}

			switch (alt337) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1098:9: ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue
					{
					dbg.location(1098,46);
					pushFollow(FOLLOW_fnAttributeName_in_fnAttribute7389);
					fnAttributeName();
					state._fsp--;
					if (state.failed) return;dbg.location(1098,62);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1098:62: ( ws )?
					int alt335=2;
					try { dbg.enterSubRule(335);
					try { dbg.enterDecision(335, decisionCanBacktrack[335]);

					int LA335_0 = input.LA(1);
					if ( (LA335_0==COMMENT||LA335_0==NL||LA335_0==WS) ) {
						alt335=1;
					}
					} finally {dbg.exitDecision(335);}

					switch (alt335) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1098:62: ws
							{
							dbg.location(1098,62);
							pushFollow(FOLLOW_ws_in_fnAttribute7391);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(335);}
					dbg.location(1098,66);
					if ( input.LA(1)==COLON||input.LA(1)==OPEQ ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}dbg.location(1098,79);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1098:79: ( ws )?
					int alt336=2;
					try { dbg.enterSubRule(336);
					try { dbg.enterDecision(336, decisionCanBacktrack[336]);

					int LA336_0 = input.LA(1);
					if ( (LA336_0==COMMENT||LA336_0==NL||LA336_0==WS) ) {
						alt336=1;
					}
					} finally {dbg.exitDecision(336);}

					switch (alt336) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1098:79: ws
							{
							dbg.location(1098,79);
							pushFollow(FOLLOW_ws_in_fnAttribute7400);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(336);}
					dbg.location(1098,83);
					pushFollow(FOLLOW_fnAttributeValue_in_fnAttribute7403);
					fnAttributeValue();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1099:11: ( cp_expression )=> cp_expression
					{
					dbg.location(1099,29);
					pushFollow(FOLLOW_cp_expression_in_fnAttribute7420);
					cp_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1100:11: expression
					{
					dbg.location(1100,11);
					pushFollow(FOLLOW_expression_in_fnAttribute7432);
					expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1101, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "fnAttribute");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "fnAttribute"



	// $ANTLR start "fnAttributeName"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1103:1: fnAttributeName : ( IDENT ( DOT IDENT )* |{...}? cp_variable );
	public final void fnAttributeName() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "fnAttributeName");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1103, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1104:2: ( IDENT ( DOT IDENT )* |{...}? cp_variable )
			int alt339=2;
			try { dbg.enterDecision(339, decisionCanBacktrack[339]);

			int LA339_0 = input.LA(1);
			if ( (LA339_0==IDENT) ) {
				int LA339_1 = input.LA(2);
				if ( (LA339_1==DOT) ) {
					int LA339_3 = input.LA(3);
					if ( (LA339_3==SASS_VAR) ) {
						alt339=2;
					}
					else if ( (LA339_3==IDENT) ) {
						alt339=1;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 339, 3, input);
							dbg.recognitionException(nvae);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}
				else if ( (LA339_1==COLON||LA339_1==COMMENT||LA339_1==NL||LA339_1==OPEQ||LA339_1==WS) ) {
					alt339=1;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 339, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA339_0==AT_IDENT||(LA339_0 >= BOTTOMCENTER_SYM && LA339_0 <= BOTTOMRIGHT_SYM)||LA339_0==CHARSET_SYM||LA339_0==COUNTER_STYLE_SYM||LA339_0==FONT_FACE_SYM||LA339_0==IMPORT_SYM||(LA339_0 >= LEFTBOTTOM_SYM && LA339_0 <= LEFTTOP_SYM)||LA339_0==MEDIA_SYM||LA339_0==MOZ_DOCUMENT_SYM||LA339_0==NAMESPACE_SYM||LA339_0==PAGE_SYM||(LA339_0 >= RIGHTBOTTOM_SYM && LA339_0 <= RIGHTTOP_SYM)||(LA339_0 >= SASS_AT_ROOT && LA339_0 <= SASS_DEBUG)||(LA339_0 >= SASS_EACH && LA339_0 <= SASS_ELSE)||LA339_0==SASS_EXTEND||(LA339_0 >= SASS_FOR && LA339_0 <= SASS_FUNCTION)||(LA339_0 >= SASS_IF && LA339_0 <= SASS_MIXIN)||(LA339_0 >= SASS_RETURN && LA339_0 <= SASS_WHILE)||(LA339_0 >= TOPCENTER_SYM && LA339_0 <= TOPRIGHT_SYM)||LA339_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt339=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 339, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(339);}

			switch (alt339) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1105:13: IDENT ( DOT IDENT )*
					{
					dbg.location(1105,13);
					match(input,IDENT,FOLLOW_IDENT_in_fnAttributeName7455); if (state.failed) return;dbg.location(1105,19);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1105:19: ( DOT IDENT )*
					try { dbg.enterSubRule(338);

					loop338:
					while (true) {
						int alt338=2;
						try { dbg.enterDecision(338, decisionCanBacktrack[338]);

						int LA338_0 = input.LA(1);
						if ( (LA338_0==DOT) ) {
							alt338=1;
						}

						} finally {dbg.exitDecision(338);}

						switch (alt338) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1105:20: DOT IDENT
							{
							dbg.location(1105,20);
							match(input,DOT,FOLLOW_DOT_in_fnAttributeName7458); if (state.failed) return;dbg.location(1105,24);
							match(input,IDENT,FOLLOW_IDENT_in_fnAttributeName7460); if (state.failed) return;
							}
							break;

						default :
							break loop338;
						}
					}
					} finally {dbg.exitSubRule(338);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1106:15: {...}? cp_variable
					{
					dbg.location(1106,15);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "fnAttributeName", "isCssPreprocessorSource()");
					}dbg.location(1106,44);
					pushFollow(FOLLOW_cp_variable_in_fnAttributeName7480);
					cp_variable();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1107, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "fnAttributeName");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "fnAttributeName"



	// $ANTLR start "fnAttributeValue"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1109:1: fnAttributeValue : ( term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )* |{...}? cp_math_expression );
	public final void fnAttributeValue() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "fnAttributeValue");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1109, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1110:2: ( term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )* |{...}? cp_math_expression )
			int alt344=2;
			try { dbg.enterDecision(344, decisionCanBacktrack[344]);

			switch ( input.LA(1) ) {
			case MINUS:
			case PLUS:
				{
				int LA344_1 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt344=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt344=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 344, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case IDENT:
				{
				int LA344_2 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt344=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt344=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 344, 2, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case VARIABLE:
				{
				int LA344_3 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt344=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt344=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 344, 3, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LBRACKET:
				{
				int LA344_4 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt344=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt344=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 344, 4, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case NUMBER:
				{
				int LA344_5 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt344=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt344=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 344, 5, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case URANGE:
				{
				int LA344_6 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt344=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt344=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 344, 6, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PERCENTAGE:
				{
				int LA344_7 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt344=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt344=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 344, 7, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LENGTH:
				{
				int LA344_8 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt344=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt344=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 344, 8, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case EMS:
				{
				int LA344_9 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt344=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt344=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 344, 9, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case REM:
				{
				int LA344_10 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt344=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt344=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 344, 10, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case EXS:
				{
				int LA344_11 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt344=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt344=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 344, 11, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ANGLE:
				{
				int LA344_12 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt344=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt344=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 344, 12, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TIME:
				{
				int LA344_13 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt344=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt344=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 344, 13, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case FREQ:
				{
				int LA344_14 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt344=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt344=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 344, 14, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case RESOLUTION:
				{
				int LA344_15 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt344=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt344=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 344, 15, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case DIMENSION:
				{
				int LA344_16 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt344=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt344=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 344, 16, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case STRING:
				{
				int LA344_17 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt344=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt344=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 344, 17, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TILDE:
				{
				int LA344_18 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt344=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt344=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 344, 18, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LESS_JS_STRING:
				{
				int LA344_19 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt344=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt344=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 344, 19, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case GEN:
				{
				int LA344_20 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt344=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt344=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 344, 20, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case URI:
				{
				int LA344_21 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt344=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt344=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 344, 21, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case HASH:
				{
				int LA344_22 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt344=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt344=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 344, 22, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				int LA344_23 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt344=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt344=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 344, 23, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_VAR:
				{
				int LA344_24 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt344=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt344=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 344, 24, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LESS_AND:
				{
				int LA344_25 = input.LA(2);
				if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt344=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt344=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 344, 25, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case HASH_SYMBOL:
				{
				int LA344_26 = input.LA(2);
				if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt344=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt344=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 344, 26, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT_SIGN:
				{
				int LA344_27 = input.LA(2);
				if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
					alt344=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt344=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 344, 27, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PERCENTAGE_SYMBOL:
				{
				int LA344_28 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt344=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt344=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 344, 28, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case IMPORTANT_SYM:
			case LPAREN:
				{
				alt344=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 344, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(344);}

			switch (alt344) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1111:13: term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )*
					{
					dbg.location(1111,13);
					pushFollow(FOLLOW_term_in_fnAttributeValue7503);
					term();
					state._fsp--;
					if (state.failed) return;dbg.location(1111,18);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1111:18: ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )*
					try { dbg.enterSubRule(343);

					loop343:
					while (true) {
						int alt343=2;
						try { dbg.enterDecision(343, decisionCanBacktrack[343]);

						try {
							isCyclicDecision = true;
							alt343 = dfa343.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(343);}

						switch (alt343) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1111:20: ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term
							{
							dbg.location(1111,71);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1111:71: ( ws | ( ( ws )? SOLIDUS ( ws )? ) |)
							int alt342=3;
							try { dbg.enterSubRule(342);
							try { dbg.enterDecision(342, decisionCanBacktrack[342]);

							try {
								isCyclicDecision = true;
								alt342 = dfa342.predict(input);
							}
							catch (NoViableAltException nvae) {
								dbg.recognitionException(nvae);
								throw nvae;
							}
							} finally {dbg.exitDecision(342);}

							switch (alt342) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1111:73: ws
									{
									dbg.location(1111,73);
									pushFollow(FOLLOW_ws_in_fnAttributeValue7535);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;
								case 2 :
									dbg.enterAlt(2);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1111:78: ( ( ws )? SOLIDUS ( ws )? )
									{
									dbg.location(1111,78);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1111:78: ( ( ws )? SOLIDUS ( ws )? )
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1111:79: ( ws )? SOLIDUS ( ws )?
									{
									dbg.location(1111,79);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1111:79: ( ws )?
									int alt340=2;
									try { dbg.enterSubRule(340);
									try { dbg.enterDecision(340, decisionCanBacktrack[340]);

									int LA340_0 = input.LA(1);
									if ( (LA340_0==COMMENT||LA340_0==NL||LA340_0==WS) ) {
										alt340=1;
									}
									} finally {dbg.exitDecision(340);}

									switch (alt340) {
										case 1 :
											dbg.enterAlt(1);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1111:79: ws
											{
											dbg.location(1111,79);
											pushFollow(FOLLOW_ws_in_fnAttributeValue7540);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(340);}
									dbg.location(1111,83);
									match(input,SOLIDUS,FOLLOW_SOLIDUS_in_fnAttributeValue7543); if (state.failed) return;dbg.location(1111,91);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1111:91: ( ws )?
									int alt341=2;
									try { dbg.enterSubRule(341);
									try { dbg.enterDecision(341, decisionCanBacktrack[341]);

									int LA341_0 = input.LA(1);
									if ( (LA341_0==COMMENT||LA341_0==NL||LA341_0==WS) ) {
										alt341=1;
									}
									} finally {dbg.exitDecision(341);}

									switch (alt341) {
										case 1 :
											dbg.enterAlt(1);

											// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1111:91: ws
											{
											dbg.location(1111,91);
											pushFollow(FOLLOW_ws_in_fnAttributeValue7545);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(341);}

									}

									}
									break;
								case 3 :
									dbg.enterAlt(3);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1111:111: 
									{
									}
									break;

							}
							} finally {dbg.exitSubRule(342);}
							dbg.location(1111,113);
							pushFollow(FOLLOW_term_in_fnAttributeValue7554);
							term();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop343;
						}
					}
					} finally {dbg.exitSubRule(343);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1112:15: {...}? cp_math_expression
					{
					dbg.location(1112,15);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "fnAttributeValue", "isCssPreprocessorSource()");
					}dbg.location(1112,44);
					pushFollow(FOLLOW_cp_math_expression_in_fnAttributeValue7575);
					cp_math_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1113, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "fnAttributeValue");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "fnAttributeValue"



	// $ANTLR start "hexColor"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:1: hexColor : HASH ;
	public final void hexColor() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "hexColor");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1115, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1116:5: ( HASH )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1116:7: HASH
			{
			dbg.location(1116,7);
			match(input,HASH,FOLLOW_HASH_in_hexColor7589); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1117, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "hexColor");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "hexColor"



	// $ANTLR start "ws"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1119:1: ws : ( WS | NL | COMMENT )+ ;
	public final void ws() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "ws");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1119, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1120:5: ( ( WS | NL | COMMENT )+ )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1120:7: ( WS | NL | COMMENT )+
			{
			dbg.location(1120,7);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1120:7: ( WS | NL | COMMENT )+
			int cnt345=0;
			try { dbg.enterSubRule(345);

			loop345:
			while (true) {
				int alt345=2;
				try { dbg.enterDecision(345, decisionCanBacktrack[345]);

				int LA345_0 = input.LA(1);
				if ( (LA345_0==COMMENT||LA345_0==NL||LA345_0==WS) ) {
					alt345=1;
				}

				} finally {dbg.exitDecision(345);}

				switch (alt345) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
					{
					dbg.location(1120,7);
					if ( input.LA(1)==COMMENT||input.LA(1)==NL||input.LA(1)==WS ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}
					}
					break;

				default :
					if ( cnt345 >= 1 ) break loop345;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(345, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt345++;
			}
			} finally {dbg.exitSubRule(345);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1121, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "ws");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "ws"



	// $ANTLR start "cp_variable_declaration"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1126:1: cp_variable_declaration : ({...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list |{...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )* );
	public final void cp_variable_declaration() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_variable_declaration");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1126, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1127:5: ({...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list |{...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )* )
			int alt353=2;
			try { dbg.enterDecision(353, decisionCanBacktrack[353]);

			switch ( input.LA(1) ) {
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FORWARD:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_USE:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				int LA353_1 = input.LA(2);
				if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
					alt353=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt353=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 353, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_VAR:
				{
				int LA353_2 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt353=1;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt353=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 353, 2, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case IDENT:
				{
				int LA353_3 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt353=1;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt353=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 353, 3, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 353, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(353);}

			switch (alt353) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1128:9: {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list
					{
					dbg.location(1128,9);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_variable_declaration", "isLessSource()");
					}dbg.location(1128,27);
					pushFollow(FOLLOW_cp_variable_in_cp_variable_declaration7649);
					cp_variable();
					state._fsp--;
					if (state.failed) return;dbg.location(1128,39);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1128:39: ( ws )?
					int alt346=2;
					try { dbg.enterSubRule(346);
					try { dbg.enterDecision(346, decisionCanBacktrack[346]);

					int LA346_0 = input.LA(1);
					if ( (LA346_0==COMMENT||LA346_0==NL||LA346_0==WS) ) {
						alt346=1;
					}
					} finally {dbg.exitDecision(346);}

					switch (alt346) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1128:39: ws
							{
							dbg.location(1128,39);
							pushFollow(FOLLOW_ws_in_cp_variable_declaration7651);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(346);}
					dbg.location(1128,43);
					match(input,COLON,FOLLOW_COLON_in_cp_variable_declaration7654); if (state.failed) return;dbg.location(1128,49);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1128:49: ( ws )?
					int alt347=2;
					try { dbg.enterSubRule(347);
					try { dbg.enterDecision(347, decisionCanBacktrack[347]);

					int LA347_0 = input.LA(1);
					if ( (LA347_0==COMMENT||LA347_0==NL||LA347_0==WS) ) {
						alt347=1;
					}
					} finally {dbg.exitDecision(347);}

					switch (alt347) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1128:49: ws
							{
							dbg.location(1128,49);
							pushFollow(FOLLOW_ws_in_cp_variable_declaration7656);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(347);}
					dbg.location(1128,53);
					pushFollow(FOLLOW_cp_expression_list_in_cp_variable_declaration7659);
					cp_expression_list();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1130:9: {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )*
					{
					dbg.location(1130,9);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_variable_declaration", "isScssSource()");
					}dbg.location(1130,27);
					pushFollow(FOLLOW_cp_variable_in_cp_variable_declaration7681);
					cp_variable();
					state._fsp--;
					if (state.failed) return;dbg.location(1130,39);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1130:39: ( ws )?
					int alt348=2;
					try { dbg.enterSubRule(348);
					try { dbg.enterDecision(348, decisionCanBacktrack[348]);

					int LA348_0 = input.LA(1);
					if ( (LA348_0==COMMENT||LA348_0==NL||LA348_0==WS) ) {
						alt348=1;
					}
					} finally {dbg.exitDecision(348);}

					switch (alt348) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1130:39: ws
							{
							dbg.location(1130,39);
							pushFollow(FOLLOW_ws_in_cp_variable_declaration7683);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(348);}
					dbg.location(1130,43);
					match(input,COLON,FOLLOW_COLON_in_cp_variable_declaration7686); if (state.failed) return;dbg.location(1130,49);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1130:49: ( ws )?
					int alt349=2;
					try { dbg.enterSubRule(349);
					try { dbg.enterDecision(349, decisionCanBacktrack[349]);

					int LA349_0 = input.LA(1);
					if ( (LA349_0==COMMENT||LA349_0==NL||LA349_0==WS) ) {
						alt349=1;
					}
					} finally {dbg.exitDecision(349);}

					switch (alt349) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1130:49: ws
							{
							dbg.location(1130,49);
							pushFollow(FOLLOW_ws_in_cp_variable_declaration7688);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(349);}
					dbg.location(1130,53);
					pushFollow(FOLLOW_cp_expression_list_in_cp_variable_declaration7691);
					cp_expression_list();
					state._fsp--;
					if (state.failed) return;dbg.location(1130,72);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1130:72: ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )*
					try { dbg.enterSubRule(352);

					loop352:
					while (true) {
						int alt352=3;
						try { dbg.enterDecision(352, decisionCanBacktrack[352]);

						try {
							isCyclicDecision = true;
							alt352 = dfa352.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(352);}

						switch (alt352) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1130:73: ( ( ws )? SASS_DEFAULT )
							{
							dbg.location(1130,73);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1130:73: ( ( ws )? SASS_DEFAULT )
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1130:74: ( ws )? SASS_DEFAULT
							{
							dbg.location(1130,74);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1130:74: ( ws )?
							int alt350=2;
							try { dbg.enterSubRule(350);
							try { dbg.enterDecision(350, decisionCanBacktrack[350]);

							int LA350_0 = input.LA(1);
							if ( (LA350_0==COMMENT||LA350_0==NL||LA350_0==WS) ) {
								alt350=1;
							}
							} finally {dbg.exitDecision(350);}

							switch (alt350) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1130:74: ws
									{
									dbg.location(1130,74);
									pushFollow(FOLLOW_ws_in_cp_variable_declaration7695);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(350);}
							dbg.location(1130,78);
							match(input,SASS_DEFAULT,FOLLOW_SASS_DEFAULT_in_cp_variable_declaration7698); if (state.failed) return;
							}

							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1130:94: ( ( ws )? SASS_GLOBAL )
							{
							dbg.location(1130,94);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1130:94: ( ( ws )? SASS_GLOBAL )
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1130:95: ( ws )? SASS_GLOBAL
							{
							dbg.location(1130,95);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1130:95: ( ws )?
							int alt351=2;
							try { dbg.enterSubRule(351);
							try { dbg.enterDecision(351, decisionCanBacktrack[351]);

							int LA351_0 = input.LA(1);
							if ( (LA351_0==COMMENT||LA351_0==NL||LA351_0==WS) ) {
								alt351=1;
							}
							} finally {dbg.exitDecision(351);}

							switch (alt351) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1130:95: ws
									{
									dbg.location(1130,95);
									pushFollow(FOLLOW_ws_in_cp_variable_declaration7704);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(351);}
							dbg.location(1130,99);
							match(input,SASS_GLOBAL,FOLLOW_SASS_GLOBAL_in_cp_variable_declaration7707); if (state.failed) return;
							}

							}
							break;

						default :
							break loop352;
						}
					}
					} finally {dbg.exitSubRule(352);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1131, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_variable_declaration");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_variable_declaration"



	// $ANTLR start "cp_variable"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:1: cp_variable : ({...}? ( AT_IDENT | IMPORT_SYM | PAGE_SYM | MEDIA_SYM | NAMESPACE_SYM | CHARSET_SYM | COUNTER_STYLE_SYM | FONT_FACE_SYM | TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM | MOZ_DOCUMENT_SYM | WEBKIT_KEYFRAMES_SYM | SASS_CONTENT | SASS_MIXIN | SASS_INCLUDE | SASS_EXTEND | SASS_DEBUG | SASS_WARN | SASS_IF | SASS_ELSE | SASS_FOR | SASS_FUNCTION | SASS_RETURN | SASS_EACH | SASS_WHILE | SASS_AT_ROOT | SASS_USE | SASS_FORWARD ) |{...}? ( SASS_VAR | IDENT DOT SASS_VAR ) );
	public final void cp_variable() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_variable");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1134, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1135:5: ({...}? ( AT_IDENT | IMPORT_SYM | PAGE_SYM | MEDIA_SYM | NAMESPACE_SYM | CHARSET_SYM | COUNTER_STYLE_SYM | FONT_FACE_SYM | TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM | MOZ_DOCUMENT_SYM | WEBKIT_KEYFRAMES_SYM | SASS_CONTENT | SASS_MIXIN | SASS_INCLUDE | SASS_EXTEND | SASS_DEBUG | SASS_WARN | SASS_IF | SASS_ELSE | SASS_FOR | SASS_FUNCTION | SASS_RETURN | SASS_EACH | SASS_WHILE | SASS_AT_ROOT | SASS_USE | SASS_FORWARD ) |{...}? ( SASS_VAR | IDENT DOT SASS_VAR ) )
			int alt355=2;
			try { dbg.enterDecision(355, decisionCanBacktrack[355]);

			int LA355_0 = input.LA(1);
			if ( (LA355_0==AT_IDENT||(LA355_0 >= BOTTOMCENTER_SYM && LA355_0 <= BOTTOMRIGHT_SYM)||LA355_0==CHARSET_SYM||LA355_0==COUNTER_STYLE_SYM||LA355_0==FONT_FACE_SYM||LA355_0==IMPORT_SYM||(LA355_0 >= LEFTBOTTOM_SYM && LA355_0 <= LEFTTOP_SYM)||LA355_0==MEDIA_SYM||LA355_0==MOZ_DOCUMENT_SYM||LA355_0==NAMESPACE_SYM||LA355_0==PAGE_SYM||(LA355_0 >= RIGHTBOTTOM_SYM && LA355_0 <= RIGHTTOP_SYM)||(LA355_0 >= SASS_AT_ROOT && LA355_0 <= SASS_DEBUG)||(LA355_0 >= SASS_EACH && LA355_0 <= SASS_ELSE)||LA355_0==SASS_EXTEND||(LA355_0 >= SASS_FOR && LA355_0 <= SASS_FUNCTION)||(LA355_0 >= SASS_IF && LA355_0 <= SASS_MIXIN)||(LA355_0 >= SASS_RETURN && LA355_0 <= SASS_USE)||(LA355_0 >= SASS_WARN && LA355_0 <= SASS_WHILE)||(LA355_0 >= TOPCENTER_SYM && LA355_0 <= TOPRIGHT_SYM)||LA355_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt355=1;
			}
			else if ( (LA355_0==IDENT||LA355_0==SASS_VAR) ) {
				alt355=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 355, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(355);}

			switch (alt355) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1137:9: {...}? ( AT_IDENT | IMPORT_SYM | PAGE_SYM | MEDIA_SYM | NAMESPACE_SYM | CHARSET_SYM | COUNTER_STYLE_SYM | FONT_FACE_SYM | TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM | MOZ_DOCUMENT_SYM | WEBKIT_KEYFRAMES_SYM | SASS_CONTENT | SASS_MIXIN | SASS_INCLUDE | SASS_EXTEND | SASS_DEBUG | SASS_WARN | SASS_IF | SASS_ELSE | SASS_FOR | SASS_FUNCTION | SASS_RETURN | SASS_EACH | SASS_WHILE | SASS_AT_ROOT | SASS_USE | SASS_FORWARD )
					{
					dbg.location(1137,9);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_variable", "isLessSource()");
					}dbg.location(1137,27);
					if ( input.LA(1)==AT_IDENT||(input.LA(1) >= BOTTOMCENTER_SYM && input.LA(1) <= BOTTOMRIGHT_SYM)||input.LA(1)==CHARSET_SYM||input.LA(1)==COUNTER_STYLE_SYM||input.LA(1)==FONT_FACE_SYM||input.LA(1)==IMPORT_SYM||(input.LA(1) >= LEFTBOTTOM_SYM && input.LA(1) <= LEFTTOP_SYM)||input.LA(1)==MEDIA_SYM||input.LA(1)==MOZ_DOCUMENT_SYM||input.LA(1)==NAMESPACE_SYM||input.LA(1)==PAGE_SYM||(input.LA(1) >= RIGHTBOTTOM_SYM && input.LA(1) <= RIGHTTOP_SYM)||(input.LA(1) >= SASS_AT_ROOT && input.LA(1) <= SASS_DEBUG)||(input.LA(1) >= SASS_EACH && input.LA(1) <= SASS_ELSE)||input.LA(1)==SASS_EXTEND||(input.LA(1) >= SASS_FOR && input.LA(1) <= SASS_FUNCTION)||(input.LA(1) >= SASS_IF && input.LA(1) <= SASS_MIXIN)||(input.LA(1) >= SASS_RETURN && input.LA(1) <= SASS_USE)||(input.LA(1) >= SASS_WARN && input.LA(1) <= SASS_WHILE)||(input.LA(1) >= TOPCENTER_SYM && input.LA(1) <= TOPRIGHT_SYM)||input.LA(1)==WEBKIT_KEYFRAMES_SYM ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1139:9: {...}? ( SASS_VAR | IDENT DOT SASS_VAR )
					{
					dbg.location(1139,9);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_variable", "isScssSource()");
					}dbg.location(1139,27);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1139:27: ( SASS_VAR | IDENT DOT SASS_VAR )
					int alt354=2;
					try { dbg.enterSubRule(354);
					try { dbg.enterDecision(354, decisionCanBacktrack[354]);

					int LA354_0 = input.LA(1);
					if ( (LA354_0==SASS_VAR) ) {
						alt354=1;
					}
					else if ( (LA354_0==IDENT) ) {
						alt354=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 354, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(354);}

					switch (alt354) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1139:29: SASS_VAR
							{
							dbg.location(1139,29);
							match(input,SASS_VAR,FOLLOW_SASS_VAR_in_cp_variable7939); if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1139:40: IDENT DOT SASS_VAR
							{
							dbg.location(1139,40);
							match(input,IDENT,FOLLOW_IDENT_in_cp_variable7943); if (state.failed) return;dbg.location(1139,46);
							match(input,DOT,FOLLOW_DOT_in_cp_variable7945); if (state.failed) return;dbg.location(1139,50);
							match(input,SASS_VAR,FOLLOW_SASS_VAR_in_cp_variable7947); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(354);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1140, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_variable");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_variable"



	// $ANTLR start "cp_expression_list"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1143:1: cp_expression_list : ( cp_expression )=> cp_expression ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )* ;
	public final void cp_expression_list() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_expression_list");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1143, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1144:5: ( ( cp_expression )=> cp_expression ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1145:5: ( cp_expression )=> cp_expression ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )*
			{
			dbg.location(1145,24);
			pushFollow(FOLLOW_cp_expression_in_cp_expression_list7977);
			cp_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(1146,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:5: ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )*
			try { dbg.enterSubRule(358);

			loop358:
			while (true) {
				int alt358=2;
				try { dbg.enterDecision(358, decisionCanBacktrack[358]);

				try {
					isCyclicDecision = true;
					alt358 = dfa358.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(358);}

				switch (alt358) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:6: ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression
					{
					dbg.location(1146,37);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:37: ( ws )?
					int alt356=2;
					try { dbg.enterSubRule(356);
					try { dbg.enterDecision(356, decisionCanBacktrack[356]);

					int LA356_0 = input.LA(1);
					if ( (LA356_0==COMMENT||LA356_0==NL||LA356_0==WS) ) {
						alt356=1;
					}
					} finally {dbg.exitDecision(356);}

					switch (alt356) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:37: ws
							{
							dbg.location(1146,37);
							pushFollow(FOLLOW_ws_in_cp_expression_list7996);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(356);}
					dbg.location(1146,41);
					match(input,COMMA,FOLLOW_COMMA_in_cp_expression_list7999); if (state.failed) return;dbg.location(1146,47);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:47: ( ws )?
					int alt357=2;
					try { dbg.enterSubRule(357);
					try { dbg.enterDecision(357, decisionCanBacktrack[357]);

					int LA357_0 = input.LA(1);
					if ( (LA357_0==COMMENT||LA357_0==NL||LA357_0==WS) ) {
						alt357=1;
					}
					} finally {dbg.exitDecision(357);}

					switch (alt357) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:47: ws
							{
							dbg.location(1146,47);
							pushFollow(FOLLOW_ws_in_cp_expression_list8001);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(357);}
					dbg.location(1146,51);
					pushFollow(FOLLOW_cp_expression_in_cp_expression_list8004);
					cp_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop358;
				}
			}
			} finally {dbg.exitSubRule(358);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1147, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_expression_list");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_expression_list"



	// $ANTLR start "cp_expression"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1159:1: cp_expression : ({...}? ( LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ) | ( cp_expression_atom )=> ( cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )* ) |{...}? LPAREN ( ws )? syncToFollow ( sass_map_pairs )? RPAREN );
	public final void cp_expression() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_expression");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1159, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1160:5: ({...}? ( LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ) | ( cp_expression_atom )=> ( cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )* ) |{...}? LPAREN ( ws )? syncToFollow ( sass_map_pairs )? RPAREN )
			int alt367=3;
			try { dbg.enterDecision(367, decisionCanBacktrack[367]);

			int LA367_0 = input.LA(1);
			if ( (LA367_0==LBRACE) ) {
				alt367=1;
			}
			else if ( (LA367_0==NOT) && (synpred45_Css3())) {
				alt367=2;
			}
			else if ( (LA367_0==MINUS||LA367_0==PLUS) && (synpred45_Css3())) {
				alt367=2;
			}
			else if ( (LA367_0==IDENT) && (synpred45_Css3())) {
				alt367=2;
			}
			else if ( (LA367_0==VARIABLE) && (synpred45_Css3())) {
				alt367=2;
			}
			else if ( (LA367_0==LBRACKET) && (synpred45_Css3())) {
				alt367=2;
			}
			else if ( (LA367_0==NUMBER) && (synpred45_Css3())) {
				alt367=2;
			}
			else if ( (LA367_0==URANGE) && (synpred45_Css3())) {
				alt367=2;
			}
			else if ( (LA367_0==PERCENTAGE) && (synpred45_Css3())) {
				alt367=2;
			}
			else if ( (LA367_0==LENGTH) && (synpred45_Css3())) {
				alt367=2;
			}
			else if ( (LA367_0==EMS) && (synpred45_Css3())) {
				alt367=2;
			}
			else if ( (LA367_0==REM) && (synpred45_Css3())) {
				alt367=2;
			}
			else if ( (LA367_0==EXS) && (synpred45_Css3())) {
				alt367=2;
			}
			else if ( (LA367_0==ANGLE) && (synpred45_Css3())) {
				alt367=2;
			}
			else if ( (LA367_0==TIME) && (synpred45_Css3())) {
				alt367=2;
			}
			else if ( (LA367_0==FREQ) && (synpred45_Css3())) {
				alt367=2;
			}
			else if ( (LA367_0==RESOLUTION) && (synpred45_Css3())) {
				alt367=2;
			}
			else if ( (LA367_0==DIMENSION) && (synpred45_Css3())) {
				alt367=2;
			}
			else if ( (LA367_0==STRING) && (synpred45_Css3())) {
				alt367=2;
			}
			else if ( (LA367_0==TILDE) && (synpred45_Css3())) {
				alt367=2;
			}
			else if ( (LA367_0==LESS_JS_STRING) && (synpred45_Css3())) {
				alt367=2;
			}
			else if ( (LA367_0==GEN) && (synpred45_Css3())) {
				alt367=2;
			}
			else if ( (LA367_0==URI) && (synpred45_Css3())) {
				alt367=2;
			}
			else if ( (LA367_0==HASH) && (synpred45_Css3())) {
				alt367=2;
			}
			else if ( (LA367_0==AT_IDENT||(LA367_0 >= BOTTOMCENTER_SYM && LA367_0 <= BOTTOMRIGHT_SYM)||LA367_0==CHARSET_SYM||LA367_0==COUNTER_STYLE_SYM||LA367_0==FONT_FACE_SYM||LA367_0==IMPORT_SYM||(LA367_0 >= LEFTBOTTOM_SYM && LA367_0 <= LEFTTOP_SYM)||LA367_0==MEDIA_SYM||LA367_0==MOZ_DOCUMENT_SYM||LA367_0==NAMESPACE_SYM||LA367_0==PAGE_SYM||(LA367_0 >= RIGHTBOTTOM_SYM && LA367_0 <= RIGHTTOP_SYM)||(LA367_0 >= SASS_AT_ROOT && LA367_0 <= SASS_DEBUG)||(LA367_0 >= SASS_EACH && LA367_0 <= SASS_ELSE)||LA367_0==SASS_EXTEND||(LA367_0 >= SASS_FOR && LA367_0 <= SASS_FUNCTION)||(LA367_0 >= SASS_IF && LA367_0 <= SASS_MIXIN)||(LA367_0 >= SASS_RETURN && LA367_0 <= SASS_USE)||(LA367_0 >= SASS_WARN && LA367_0 <= SASS_WHILE)||(LA367_0 >= TOPCENTER_SYM && LA367_0 <= TOPRIGHT_SYM)||LA367_0==WEBKIT_KEYFRAMES_SYM) && (synpred45_Css3())) {
				alt367=2;
			}
			else if ( (LA367_0==SASS_VAR) && (synpred45_Css3())) {
				alt367=2;
			}
			else if ( (LA367_0==LESS_AND) && (synpred45_Css3())) {
				alt367=2;
			}
			else if ( (LA367_0==HASH_SYMBOL) && (synpred45_Css3())) {
				alt367=2;
			}
			else if ( (LA367_0==AT_SIGN) && (synpred45_Css3())) {
				alt367=2;
			}
			else if ( (LA367_0==PERCENTAGE_SYMBOL) && (synpred45_Css3())) {
				alt367=2;
			}
			else if ( (LA367_0==IMPORTANT_SYM) && (synpred45_Css3())) {
				alt367=2;
			}
			else if ( (LA367_0==LPAREN) ) {
				int LA367_32 = input.LA(2);
				if ( (synpred45_Css3()) ) {
					alt367=2;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt367=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 367, 32, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 367, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(367);}

			switch (alt367) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1161:5: {...}? ( LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
					{
					dbg.location(1161,5);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_expression", "isLessSource()");
					}dbg.location(1161,23);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1161:23: ( LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1161:24: LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
					{
					dbg.location(1161,24);
					match(input,LBRACE,FOLLOW_LBRACE_in_cp_expression8040); if (state.failed) return;dbg.location(1161,31);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1161:31: ( ws )?
					int alt359=2;
					try { dbg.enterSubRule(359);
					try { dbg.enterDecision(359, decisionCanBacktrack[359]);

					int LA359_0 = input.LA(1);
					if ( (LA359_0==COMMENT||LA359_0==NL||LA359_0==WS) ) {
						alt359=1;
					}
					} finally {dbg.exitDecision(359);}

					switch (alt359) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1161:31: ws
							{
							dbg.location(1161,31);
							pushFollow(FOLLOW_ws_in_cp_expression8042);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(359);}
					dbg.location(1161,35);
					pushFollow(FOLLOW_syncToFollow_in_cp_expression8045);
					syncToFollow();
					state._fsp--;
					if (state.failed) return;dbg.location(1161,48);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1161:48: ( declarations )?
					int alt360=2;
					try { dbg.enterSubRule(360);
					try { dbg.enterDecision(360, decisionCanBacktrack[360]);

					int LA360_0 = input.LA(1);
					if ( ((LA360_0 >= AT_IDENT && LA360_0 <= AT_SIGN)||(LA360_0 >= BOTTOMCENTER_SYM && LA360_0 <= BOTTOMRIGHT_SYM)||(LA360_0 >= CHARSET_SYM && LA360_0 <= COLON)||LA360_0==COUNTER_STYLE_SYM||(LA360_0 >= DCOLON && LA360_0 <= DOT)||LA360_0==FONT_FACE_SYM||(LA360_0 >= GEN && LA360_0 <= GREATER)||(LA360_0 >= HASH && LA360_0 <= HASH_SYMBOL)||LA360_0==IDENT||LA360_0==IMPORT_SYM||LA360_0==LAYER_SYM||(LA360_0 >= LBRACKET && LA360_0 <= LEFTTOP_SYM)||LA360_0==LESS_AND||(LA360_0 >= MEDIA_SYM && LA360_0 <= MOZ_DOCUMENT_SYM)||LA360_0==NAMESPACE_SYM||LA360_0==PAGE_SYM||(LA360_0 >= PIPE && LA360_0 <= PLUS)||(LA360_0 >= RIGHTBOTTOM_SYM && LA360_0 <= RIGHTTOP_SYM)||(LA360_0 >= SASS_AT_ROOT && LA360_0 <= SASS_DEBUG)||(LA360_0 >= SASS_EACH && LA360_0 <= SASS_ELSE)||(LA360_0 >= SASS_ERROR && LA360_0 <= SASS_FUNCTION)||(LA360_0 >= SASS_IF && LA360_0 <= SASS_MIXIN)||(LA360_0 >= SASS_RETURN && LA360_0 <= SEMI)||LA360_0==STAR||LA360_0==SUPPORTS_SYM||LA360_0==TILDE||(LA360_0 >= TOPCENTER_SYM && LA360_0 <= TOPRIGHT_SYM)||LA360_0==VARIABLE||LA360_0==WEBKIT_KEYFRAMES_SYM) ) {
						alt360=1;
					}
					} finally {dbg.exitDecision(360);}

					switch (alt360) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1161:48: declarations
							{
							dbg.location(1161,48);
							pushFollow(FOLLOW_declarations_in_cp_expression8047);
							declarations();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(360);}
					dbg.location(1161,62);
					match(input,RBRACE,FOLLOW_RBRACE_in_cp_expression8050); if (state.failed) return;
					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1162:7: ( cp_expression_atom )=> ( cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )* )
					{
					dbg.location(1162,31);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1162:31: ( cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )* )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1162:32: cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )*
					{
					dbg.location(1162,32);
					pushFollow(FOLLOW_cp_expression_atom_in_cp_expression8066);
					cp_expression_atom();
					state._fsp--;
					if (state.failed) return;dbg.location(1163,5);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1163:5: ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )*
					try { dbg.enterSubRule(364);

					loop364:
					while (true) {
						int alt364=3;
						try { dbg.enterDecision(364, decisionCanBacktrack[364]);

						try {
							isCyclicDecision = true;
							alt364 = dfa364.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(364);}

						switch (alt364) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1164:9: ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom
							{
							dbg.location(1164,39);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1164:39: ( ( ws )? cp_expression_operator ( ws )? )
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1164:40: ( ws )? cp_expression_operator ( ws )?
							{
							dbg.location(1164,40);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1164:40: ( ws )?
							int alt361=2;
							try { dbg.enterSubRule(361);
							try { dbg.enterDecision(361, decisionCanBacktrack[361]);

							int LA361_0 = input.LA(1);
							if ( (LA361_0==COMMENT||LA361_0==NL||LA361_0==WS) ) {
								alt361=1;
							}
							} finally {dbg.exitDecision(361);}

							switch (alt361) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1164:40: ws
									{
									dbg.location(1164,40);
									pushFollow(FOLLOW_ws_in_cp_expression8090);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(361);}
							dbg.location(1164,44);
							pushFollow(FOLLOW_cp_expression_operator_in_cp_expression8093);
							cp_expression_operator();
							state._fsp--;
							if (state.failed) return;dbg.location(1164,67);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1164:67: ( ws )?
							int alt362=2;
							try { dbg.enterSubRule(362);
							try { dbg.enterDecision(362, decisionCanBacktrack[362]);

							int LA362_0 = input.LA(1);
							if ( (LA362_0==COMMENT||LA362_0==NL||LA362_0==WS) ) {
								alt362=1;
							}
							} finally {dbg.exitDecision(362);}

							switch (alt362) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1164:67: ws
									{
									dbg.location(1164,67);
									pushFollow(FOLLOW_ws_in_cp_expression8095);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(362);}

							}
							dbg.location(1164,72);
							pushFollow(FOLLOW_cp_expression_atom_in_cp_expression8099);
							cp_expression_atom();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1165:11: ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom
							{
							dbg.location(1165,37);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1165:37: ( ws )?
							int alt363=2;
							try { dbg.enterSubRule(363);
							try { dbg.enterDecision(363, decisionCanBacktrack[363]);

							int LA363_0 = input.LA(1);
							if ( (LA363_0==COMMENT||LA363_0==NL||LA363_0==WS) ) {
								alt363=1;
							}
							} finally {dbg.exitDecision(363);}

							switch (alt363) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1165:37: ws
									{
									dbg.location(1165,37);
									pushFollow(FOLLOW_ws_in_cp_expression8118);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(363);}
							dbg.location(1165,41);
							pushFollow(FOLLOW_cp_expression_atom_in_cp_expression8121);
							cp_expression_atom();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop364;
						}
					}
					} finally {dbg.exitSubRule(364);}

					}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1167:7: {...}? LPAREN ( ws )? syncToFollow ( sass_map_pairs )? RPAREN
					{
					dbg.location(1167,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_expression", "isScssSource()");
					}dbg.location(1167,25);
					match(input,LPAREN,FOLLOW_LPAREN_in_cp_expression8139); if (state.failed) return;dbg.location(1167,32);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1167:32: ( ws )?
					int alt365=2;
					try { dbg.enterSubRule(365);
					try { dbg.enterDecision(365, decisionCanBacktrack[365]);

					int LA365_0 = input.LA(1);
					if ( (LA365_0==COMMENT||LA365_0==NL||LA365_0==WS) ) {
						alt365=1;
					}
					} finally {dbg.exitDecision(365);}

					switch (alt365) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1167:32: ws
							{
							dbg.location(1167,32);
							pushFollow(FOLLOW_ws_in_cp_expression8141);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(365);}
					dbg.location(1167,36);
					pushFollow(FOLLOW_syncToFollow_in_cp_expression8144);
					syncToFollow();
					state._fsp--;
					if (state.failed) return;dbg.location(1167,49);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1167:49: ( sass_map_pairs )?
					int alt366=2;
					try { dbg.enterSubRule(366);
					try { dbg.enterDecision(366, decisionCanBacktrack[366]);

					int LA366_0 = input.LA(1);
					if ( ((LA366_0 >= AT_IDENT && LA366_0 <= AT_SIGN)||(LA366_0 >= BOTTOMCENTER_SYM && LA366_0 <= BOTTOMRIGHT_SYM)||LA366_0==CHARSET_SYM||LA366_0==COMMA||LA366_0==COUNTER_STYLE_SYM||LA366_0==FONT_FACE_SYM||LA366_0==GEN||LA366_0==HASH_SYMBOL||LA366_0==IDENT||LA366_0==IMPORT_SYM||(LA366_0 >= LEFTBOTTOM_SYM && LA366_0 <= LEFTTOP_SYM)||(LA366_0 >= MEDIA_SYM && LA366_0 <= MOZ_DOCUMENT_SYM)||LA366_0==NAMESPACE_SYM||LA366_0==NUMBER||LA366_0==PAGE_SYM||(LA366_0 >= RIGHTBOTTOM_SYM && LA366_0 <= RIGHTTOP_SYM)||(LA366_0 >= SASS_AT_ROOT && LA366_0 <= SASS_DEBUG)||(LA366_0 >= SASS_EACH && LA366_0 <= SASS_ELSE)||LA366_0==SASS_EXTEND||(LA366_0 >= SASS_FOR && LA366_0 <= SASS_FUNCTION)||(LA366_0 >= SASS_IF && LA366_0 <= SASS_MIXIN)||(LA366_0 >= SASS_RETURN && LA366_0 <= SASS_WHILE)||LA366_0==STRING||(LA366_0 >= TOPCENTER_SYM && LA366_0 <= TOPRIGHT_SYM)||LA366_0==VARIABLE||LA366_0==WEBKIT_KEYFRAMES_SYM) ) {
						alt366=1;
					}
					} finally {dbg.exitDecision(366);}

					switch (alt366) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1167:49: sass_map_pairs
							{
							dbg.location(1167,49);
							pushFollow(FOLLOW_sass_map_pairs_in_cp_expression8146);
							sass_map_pairs();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(366);}
					dbg.location(1167,65);
					match(input,RPAREN,FOLLOW_RPAREN_in_cp_expression8149); if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1168, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_expression");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_expression"



	// $ANTLR start "cp_expression_operator"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1170:1: cp_expression_operator : ( key_or | key_and | CP_EQ | CP_NOT_EQ | LESS | LESS_OR_EQ | GREATER | GREATER_OR_EQ );
	public final void cp_expression_operator() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_expression_operator");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1170, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1171:5: ( key_or | key_and | CP_EQ | CP_NOT_EQ | LESS | LESS_OR_EQ | GREATER | GREATER_OR_EQ )
			int alt368=8;
			try { dbg.enterDecision(368, decisionCanBacktrack[368]);

			switch ( input.LA(1) ) {
			case IDENT:
				{
				int LA368_1 = input.LA(2);
				if ( (evalPredicate(tokenNameEquals("or"),"tokenNameEquals(\"or\")")) ) {
					alt368=1;
				}
				else if ( (evalPredicate(tokenNameEquals("and"),"tokenNameEquals(\"and\")")) ) {
					alt368=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 368, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CP_EQ:
				{
				alt368=3;
				}
				break;
			case CP_NOT_EQ:
				{
				alt368=4;
				}
				break;
			case LESS:
				{
				alt368=5;
				}
				break;
			case LESS_OR_EQ:
				{
				alt368=6;
				}
				break;
			case GREATER:
				{
				alt368=7;
				}
				break;
			case GREATER_OR_EQ:
				{
				alt368=8;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 368, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(368);}

			switch (alt368) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1172:5: key_or
					{
					dbg.location(1172,5);
					pushFollow(FOLLOW_key_or_in_cp_expression_operator8170);
					key_or();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1172:14: key_and
					{
					dbg.location(1172,14);
					pushFollow(FOLLOW_key_and_in_cp_expression_operator8174);
					key_and();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1172:25: CP_EQ
					{
					dbg.location(1172,25);
					match(input,CP_EQ,FOLLOW_CP_EQ_in_cp_expression_operator8179); if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1172:33: CP_NOT_EQ
					{
					dbg.location(1172,33);
					match(input,CP_NOT_EQ,FOLLOW_CP_NOT_EQ_in_cp_expression_operator8183); if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1172:45: LESS
					{
					dbg.location(1172,45);
					match(input,LESS,FOLLOW_LESS_in_cp_expression_operator8187); if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1172:52: LESS_OR_EQ
					{
					dbg.location(1172,52);
					match(input,LESS_OR_EQ,FOLLOW_LESS_OR_EQ_in_cp_expression_operator8191); if (state.failed) return;
					}
					break;
				case 7 :
					dbg.enterAlt(7);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1172:65: GREATER
					{
					dbg.location(1172,65);
					match(input,GREATER,FOLLOW_GREATER_in_cp_expression_operator8195); if (state.failed) return;
					}
					break;
				case 8 :
					dbg.enterAlt(8);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1172:75: GREATER_OR_EQ
					{
					dbg.location(1172,75);
					match(input,GREATER_OR_EQ,FOLLOW_GREATER_OR_EQ_in_cp_expression_operator8199); if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1173, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_expression_operator");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_expression_operator"



	// $ANTLR start "cp_expression_atom"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1175:1: cp_expression_atom : ( NOT ( ws )? )? ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? ( cp_expression_list ( ws )? )? RPAREN ) ;
	public final void cp_expression_atom() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_expression_atom");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1175, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1176:5: ( ( NOT ( ws )? )? ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? ( cp_expression_list ( ws )? )? RPAREN ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1177:9: ( NOT ( ws )? )? ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? ( cp_expression_list ( ws )? )? RPAREN )
			{
			dbg.location(1177,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1177:9: ( NOT ( ws )? )?
			int alt370=2;
			try { dbg.enterSubRule(370);
			try { dbg.enterDecision(370, decisionCanBacktrack[370]);

			int LA370_0 = input.LA(1);
			if ( (LA370_0==NOT) ) {
				alt370=1;
			}
			} finally {dbg.exitDecision(370);}

			switch (alt370) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1177:10: NOT ( ws )?
					{
					dbg.location(1177,10);
					match(input,NOT,FOLLOW_NOT_in_cp_expression_atom8225); if (state.failed) return;dbg.location(1177,14);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1177:14: ( ws )?
					int alt369=2;
					try { dbg.enterSubRule(369);
					try { dbg.enterDecision(369, decisionCanBacktrack[369]);

					int LA369_0 = input.LA(1);
					if ( (LA369_0==COMMENT||LA369_0==NL||LA369_0==WS) ) {
						alt369=1;
					}
					} finally {dbg.exitDecision(369);}

					switch (alt369) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1177:14: ws
							{
							dbg.location(1177,14);
							pushFollow(FOLLOW_ws_in_cp_expression_atom8227);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(369);}

					}
					break;

			}
			} finally {dbg.exitSubRule(370);}
			dbg.location(1178,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1178:9: ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? ( cp_expression_list ( ws )? )? RPAREN )
			int alt374=2;
			try { dbg.enterSubRule(374);
			try { dbg.enterDecision(374, decisionCanBacktrack[374]);

			int LA374_0 = input.LA(1);
			if ( (LA374_0==MINUS||LA374_0==PLUS) && (synpred48_Css3())) {
				alt374=1;
			}
			else if ( (LA374_0==IDENT) && (synpred48_Css3())) {
				alt374=1;
			}
			else if ( (LA374_0==VARIABLE) && (synpred48_Css3())) {
				alt374=1;
			}
			else if ( (LA374_0==LBRACKET) && (synpred48_Css3())) {
				alt374=1;
			}
			else if ( (LA374_0==NUMBER) && (synpred48_Css3())) {
				alt374=1;
			}
			else if ( (LA374_0==URANGE) && (synpred48_Css3())) {
				alt374=1;
			}
			else if ( (LA374_0==PERCENTAGE) && (synpred48_Css3())) {
				alt374=1;
			}
			else if ( (LA374_0==LENGTH) && (synpred48_Css3())) {
				alt374=1;
			}
			else if ( (LA374_0==EMS) && (synpred48_Css3())) {
				alt374=1;
			}
			else if ( (LA374_0==REM) && (synpred48_Css3())) {
				alt374=1;
			}
			else if ( (LA374_0==EXS) && (synpred48_Css3())) {
				alt374=1;
			}
			else if ( (LA374_0==ANGLE) && (synpred48_Css3())) {
				alt374=1;
			}
			else if ( (LA374_0==TIME) && (synpred48_Css3())) {
				alt374=1;
			}
			else if ( (LA374_0==FREQ) && (synpred48_Css3())) {
				alt374=1;
			}
			else if ( (LA374_0==RESOLUTION) && (synpred48_Css3())) {
				alt374=1;
			}
			else if ( (LA374_0==DIMENSION) && (synpred48_Css3())) {
				alt374=1;
			}
			else if ( (LA374_0==STRING) && (synpred48_Css3())) {
				alt374=1;
			}
			else if ( (LA374_0==TILDE) && (synpred48_Css3())) {
				alt374=1;
			}
			else if ( (LA374_0==LESS_JS_STRING) && (synpred48_Css3())) {
				alt374=1;
			}
			else if ( (LA374_0==GEN) && (synpred48_Css3())) {
				alt374=1;
			}
			else if ( (LA374_0==URI) && (synpred48_Css3())) {
				alt374=1;
			}
			else if ( (LA374_0==HASH) && (synpred48_Css3())) {
				alt374=1;
			}
			else if ( (LA374_0==AT_IDENT||(LA374_0 >= BOTTOMCENTER_SYM && LA374_0 <= BOTTOMRIGHT_SYM)||LA374_0==CHARSET_SYM||LA374_0==COUNTER_STYLE_SYM||LA374_0==FONT_FACE_SYM||LA374_0==IMPORT_SYM||(LA374_0 >= LEFTBOTTOM_SYM && LA374_0 <= LEFTTOP_SYM)||LA374_0==MEDIA_SYM||LA374_0==MOZ_DOCUMENT_SYM||LA374_0==NAMESPACE_SYM||LA374_0==PAGE_SYM||(LA374_0 >= RIGHTBOTTOM_SYM && LA374_0 <= RIGHTTOP_SYM)||(LA374_0 >= SASS_AT_ROOT && LA374_0 <= SASS_DEBUG)||(LA374_0 >= SASS_EACH && LA374_0 <= SASS_ELSE)||LA374_0==SASS_EXTEND||(LA374_0 >= SASS_FOR && LA374_0 <= SASS_FUNCTION)||(LA374_0 >= SASS_IF && LA374_0 <= SASS_MIXIN)||(LA374_0 >= SASS_RETURN && LA374_0 <= SASS_USE)||(LA374_0 >= SASS_WARN && LA374_0 <= SASS_WHILE)||(LA374_0 >= TOPCENTER_SYM && LA374_0 <= TOPRIGHT_SYM)||LA374_0==WEBKIT_KEYFRAMES_SYM) && (synpred48_Css3())) {
				alt374=1;
			}
			else if ( (LA374_0==SASS_VAR) && (synpred48_Css3())) {
				alt374=1;
			}
			else if ( (LA374_0==LESS_AND) && (synpred48_Css3())) {
				alt374=1;
			}
			else if ( (LA374_0==HASH_SYMBOL) && (synpred48_Css3())) {
				alt374=1;
			}
			else if ( (LA374_0==AT_SIGN) && (synpred48_Css3())) {
				alt374=1;
			}
			else if ( (LA374_0==PERCENTAGE_SYMBOL) && (synpred48_Css3())) {
				alt374=1;
			}
			else if ( (LA374_0==IMPORTANT_SYM) && (synpred48_Css3())) {
				alt374=1;
			}
			else if ( (LA374_0==LPAREN) ) {
				int LA374_30 = input.LA(2);
				if ( (synpred48_Css3()) ) {
					alt374=1;
				}
				else if ( (true) ) {
					alt374=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 374, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(374);}

			switch (alt374) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1179:13: ( cp_math_expression )=> cp_math_expression
					{
					dbg.location(1179,35);
					pushFollow(FOLLOW_cp_math_expression_in_cp_expression_atom8258);
					cp_math_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1180:15: LPAREN ( ws )? ( cp_expression_list ( ws )? )? RPAREN
					{
					dbg.location(1180,15);
					match(input,LPAREN,FOLLOW_LPAREN_in_cp_expression_atom8274); if (state.failed) return;dbg.location(1180,22);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1180:22: ( ws )?
					int alt371=2;
					try { dbg.enterSubRule(371);
					try { dbg.enterDecision(371, decisionCanBacktrack[371]);

					int LA371_0 = input.LA(1);
					if ( (LA371_0==COMMENT||LA371_0==NL||LA371_0==WS) ) {
						alt371=1;
					}
					} finally {dbg.exitDecision(371);}

					switch (alt371) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1180:22: ws
							{
							dbg.location(1180,22);
							pushFollow(FOLLOW_ws_in_cp_expression_atom8276);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(371);}
					dbg.location(1180,26);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1180:26: ( cp_expression_list ( ws )? )?
					int alt373=2;
					try { dbg.enterSubRule(373);
					try { dbg.enterDecision(373, decisionCanBacktrack[373]);

					int LA373_0 = input.LA(1);
					if ( ((LA373_0 >= ANGLE && LA373_0 <= AT_SIGN)||(LA373_0 >= BOTTOMCENTER_SYM && LA373_0 <= BOTTOMRIGHT_SYM)||LA373_0==CHARSET_SYM||LA373_0==COUNTER_STYLE_SYM||LA373_0==DIMENSION||LA373_0==EMS||LA373_0==EXS||(LA373_0 >= FONT_FACE_SYM && LA373_0 <= FREQ)||LA373_0==GEN||(LA373_0 >= HASH && LA373_0 <= HASH_SYMBOL)||(LA373_0 >= IDENT && LA373_0 <= IMPORT_SYM)||(LA373_0 >= LBRACE && LA373_0 <= LENGTH)||(LA373_0 >= LESS_AND && LA373_0 <= LESS_JS_STRING)||LA373_0==LPAREN||(LA373_0 >= MEDIA_SYM && LA373_0 <= MOZ_DOCUMENT_SYM)||LA373_0==NAMESPACE_SYM||(LA373_0 >= NOT && LA373_0 <= NUMBER)||(LA373_0 >= PAGE_SYM && LA373_0 <= PERCENTAGE_SYMBOL)||LA373_0==PLUS||(LA373_0 >= REM && LA373_0 <= RIGHTTOP_SYM)||(LA373_0 >= SASS_AT_ROOT && LA373_0 <= SASS_DEBUG)||(LA373_0 >= SASS_EACH && LA373_0 <= SASS_ELSE)||LA373_0==SASS_EXTEND||(LA373_0 >= SASS_FOR && LA373_0 <= SASS_FUNCTION)||(LA373_0 >= SASS_IF && LA373_0 <= SASS_MIXIN)||(LA373_0 >= SASS_RETURN && LA373_0 <= SASS_WHILE)||LA373_0==STRING||(LA373_0 >= TILDE && LA373_0 <= TOPRIGHT_SYM)||(LA373_0 >= URANGE && LA373_0 <= URI)||LA373_0==VARIABLE||LA373_0==WEBKIT_KEYFRAMES_SYM) ) {
						alt373=1;
					}
					} finally {dbg.exitDecision(373);}

					switch (alt373) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1180:27: cp_expression_list ( ws )?
							{
							dbg.location(1180,27);
							pushFollow(FOLLOW_cp_expression_list_in_cp_expression_atom8280);
							cp_expression_list();
							state._fsp--;
							if (state.failed) return;dbg.location(1180,46);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1180:46: ( ws )?
							int alt372=2;
							try { dbg.enterSubRule(372);
							try { dbg.enterDecision(372, decisionCanBacktrack[372]);

							int LA372_0 = input.LA(1);
							if ( (LA372_0==COMMENT||LA372_0==NL||LA372_0==WS) ) {
								alt372=1;
							}
							} finally {dbg.exitDecision(372);}

							switch (alt372) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1180:46: ws
									{
									dbg.location(1180,46);
									pushFollow(FOLLOW_ws_in_cp_expression_atom8282);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(372);}

							}
							break;

					}
					} finally {dbg.exitSubRule(373);}
					dbg.location(1180,52);
					match(input,RPAREN,FOLLOW_RPAREN_in_cp_expression_atom8287); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(374);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1182, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_expression_atom");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_expression_atom"



	// $ANTLR start "cp_math_expressions"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1185:1: cp_math_expressions : cp_math_expression ( ws cp_math_expression )* ;
	public final void cp_math_expressions() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_math_expressions");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1185, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1186:5: ( cp_math_expression ( ws cp_math_expression )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1187:5: cp_math_expression ( ws cp_math_expression )*
			{
			dbg.location(1187,5);
			pushFollow(FOLLOW_cp_math_expression_in_cp_math_expressions8319);
			cp_math_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(1188,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1188:5: ( ws cp_math_expression )*
			try { dbg.enterSubRule(375);

			loop375:
			while (true) {
				int alt375=2;
				try { dbg.enterDecision(375, decisionCanBacktrack[375]);

				int LA375_0 = input.LA(1);
				if ( (LA375_0==COMMENT||LA375_0==NL||LA375_0==WS) ) {
					alt375=1;
				}

				} finally {dbg.exitDecision(375);}

				switch (alt375) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1188:6: ws cp_math_expression
					{
					dbg.location(1188,6);
					pushFollow(FOLLOW_ws_in_cp_math_expressions8326);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(1188,9);
					pushFollow(FOLLOW_cp_math_expression_in_cp_math_expressions8328);
					cp_math_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop375;
				}
			}
			} finally {dbg.exitSubRule(375);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1189, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_math_expressions");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_math_expressions"



	// $ANTLR start "cp_math_expression"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1203:1: cp_math_expression : cp_math_expression_atom ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )* ;
	public final void cp_math_expression() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_math_expression");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1203, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:5: ( cp_math_expression_atom ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:10: cp_math_expression_atom ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )*
			{
			dbg.location(1204,10);
			pushFollow(FOLLOW_cp_math_expression_atom_in_cp_math_expression8362);
			cp_math_expression_atom();
			state._fsp--;
			if (state.failed) return;dbg.location(1205,10);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1205:10: ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )*
			try { dbg.enterSubRule(378);

			loop378:
			while (true) {
				int alt378=2;
				try { dbg.enterDecision(378, decisionCanBacktrack[378]);

				try {
					isCyclicDecision = true;
					alt378 = dfa378.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(378);}

				switch (alt378) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1206:13: ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom
					{
					dbg.location(1206,48);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1206:48: ( ws )?
					int alt376=2;
					try { dbg.enterSubRule(376);
					try { dbg.enterDecision(376, decisionCanBacktrack[376]);

					int LA376_0 = input.LA(1);
					if ( (LA376_0==COMMENT||LA376_0==NL||LA376_0==WS) ) {
						alt376=1;
					}
					} finally {dbg.exitDecision(376);}

					switch (alt376) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1206:48: ws
							{
							dbg.location(1206,48);
							pushFollow(FOLLOW_ws_in_cp_math_expression8404);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(376);}
					dbg.location(1206,52);
					if ( input.LA(1)==MINUS||input.LA(1)==PLUS||(input.LA(1) >= SOLIDUS && input.LA(1) <= STAR) ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}dbg.location(1206,78);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1206:78: ( ws )?
					int alt377=2;
					try { dbg.enterSubRule(377);
					try { dbg.enterDecision(377, decisionCanBacktrack[377]);

					int LA377_0 = input.LA(1);
					if ( (LA377_0==COMMENT||LA377_0==NL||LA377_0==WS) ) {
						alt377=1;
					}
					} finally {dbg.exitDecision(377);}

					switch (alt377) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1206:78: ws
							{
							dbg.location(1206,78);
							pushFollow(FOLLOW_ws_in_cp_math_expression8417);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(377);}
					dbg.location(1206,82);
					pushFollow(FOLLOW_cp_math_expression_atom_in_cp_math_expression8420);
					cp_math_expression_atom();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop378;
				}
			}
			} finally {dbg.exitSubRule(378);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1208, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_math_expression");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_math_expression"



	// $ANTLR start "cp_math_expression_atom"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1210:1: cp_math_expression_atom : ( term | IMPORTANT_SYM | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN );
	public final void cp_math_expression_atom() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_math_expression_atom");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1210, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1211:5: ( term | IMPORTANT_SYM | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN )
			int alt383=3;
			try { dbg.enterDecision(383, decisionCanBacktrack[383]);

			try {
				isCyclicDecision = true;
				alt383 = dfa383.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(383);}

			switch (alt383) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1212:5: term
					{
					dbg.location(1212,5);
					pushFollow(FOLLOW_term_in_cp_math_expression_atom8453);
					term();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1213:7: IMPORTANT_SYM
					{
					dbg.location(1213,7);
					match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_cp_math_expression_atom8461); if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1214:7: ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN
					{
					dbg.location(1214,7);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1214:7: ( unaryOperator ( ws )? )?
					int alt380=2;
					try { dbg.enterSubRule(380);
					try { dbg.enterDecision(380, decisionCanBacktrack[380]);

					int LA380_0 = input.LA(1);
					if ( (LA380_0==MINUS||LA380_0==PLUS) ) {
						alt380=1;
					}
					} finally {dbg.exitDecision(380);}

					switch (alt380) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1214:9: unaryOperator ( ws )?
							{
							dbg.location(1214,9);
							pushFollow(FOLLOW_unaryOperator_in_cp_math_expression_atom8472);
							unaryOperator();
							state._fsp--;
							if (state.failed) return;dbg.location(1214,23);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1214:23: ( ws )?
							int alt379=2;
							try { dbg.enterSubRule(379);
							try { dbg.enterDecision(379, decisionCanBacktrack[379]);

							int LA379_0 = input.LA(1);
							if ( (LA379_0==COMMENT||LA379_0==NL||LA379_0==WS) ) {
								alt379=1;
							}
							} finally {dbg.exitDecision(379);}

							switch (alt379) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1214:23: ws
									{
									dbg.location(1214,23);
									pushFollow(FOLLOW_ws_in_cp_math_expression_atom8474);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(379);}

							}
							break;

					}
					} finally {dbg.exitSubRule(380);}
					dbg.location(1214,30);
					match(input,LPAREN,FOLLOW_LPAREN_in_cp_math_expression_atom8480); if (state.failed) return;dbg.location(1214,37);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1214:37: ( ws )?
					int alt381=2;
					try { dbg.enterSubRule(381);
					try { dbg.enterDecision(381, decisionCanBacktrack[381]);

					int LA381_0 = input.LA(1);
					if ( (LA381_0==COMMENT||LA381_0==NL||LA381_0==WS) ) {
						alt381=1;
					}
					} finally {dbg.exitDecision(381);}

					switch (alt381) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1214:37: ws
							{
							dbg.location(1214,37);
							pushFollow(FOLLOW_ws_in_cp_math_expression_atom8482);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(381);}
					dbg.location(1214,41);
					pushFollow(FOLLOW_cp_math_expression_in_cp_math_expression_atom8485);
					cp_math_expression();
					state._fsp--;
					if (state.failed) return;dbg.location(1214,60);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1214:60: ( ws )?
					int alt382=2;
					try { dbg.enterSubRule(382);
					try { dbg.enterDecision(382, decisionCanBacktrack[382]);

					int LA382_0 = input.LA(1);
					if ( (LA382_0==COMMENT||LA382_0==NL||LA382_0==WS) ) {
						alt382=1;
					}
					} finally {dbg.exitDecision(382);}

					switch (alt382) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1214:60: ws
							{
							dbg.location(1214,60);
							pushFollow(FOLLOW_ws_in_cp_math_expression_atom8487);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(382);}
					dbg.location(1214,64);
					match(input,RPAREN,FOLLOW_RPAREN_in_cp_math_expression_atom8490); if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1215, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_math_expression_atom");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_math_expression_atom"



	// $ANTLR start "cp_mixin_declaration"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1223:1: cp_mixin_declaration : ({...}? ( LESS_AND | ( ( ( DOT cp_mixin_name ) | HASH ) ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ) ) ( ( ws )? less_mixin_guarded )? |{...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? ) ( ws )? cp_mixin_block ;
	public final void cp_mixin_declaration() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_mixin_declaration");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1223, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1224:5: ( ({...}? ( LESS_AND | ( ( ( DOT cp_mixin_name ) | HASH ) ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ) ) ( ( ws )? less_mixin_guarded )? |{...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? ) ( ws )? cp_mixin_block )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1225:5: ({...}? ( LESS_AND | ( ( ( DOT cp_mixin_name ) | HASH ) ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ) ) ( ( ws )? less_mixin_guarded )? |{...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? ) ( ws )? cp_mixin_block
			{
			dbg.location(1225,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1225:5: ({...}? ( LESS_AND | ( ( ( DOT cp_mixin_name ) | HASH ) ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ) ) ( ( ws )? less_mixin_guarded )? |{...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? )
			int alt395=2;
			try { dbg.enterSubRule(395);
			try { dbg.enterDecision(395, decisionCanBacktrack[395]);

			int LA395_0 = input.LA(1);
			if ( (LA395_0==DOT||LA395_0==HASH||LA395_0==LESS_AND) ) {
				alt395=1;
			}
			else if ( (LA395_0==SASS_MIXIN) ) {
				alt395=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 395, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(395);}

			switch (alt395) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1226:9: {...}? ( LESS_AND | ( ( ( DOT cp_mixin_name ) | HASH ) ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ) ) ( ( ws )? less_mixin_guarded )?
					{
					dbg.location(1226,9);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_mixin_declaration", "isLessSource()");
					}dbg.location(1226,27);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1226:27: ( LESS_AND | ( ( ( DOT cp_mixin_name ) | HASH ) ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ) )
					int alt388=2;
					try { dbg.enterSubRule(388);
					try { dbg.enterDecision(388, decisionCanBacktrack[388]);

					int LA388_0 = input.LA(1);
					if ( (LA388_0==LESS_AND) ) {
						alt388=1;
					}
					else if ( (LA388_0==DOT||LA388_0==HASH) ) {
						alt388=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 388, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(388);}

					switch (alt388) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1226:28: LESS_AND
							{
							dbg.location(1226,28);
							match(input,LESS_AND,FOLLOW_LESS_AND_in_cp_mixin_declaration8530); if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1226:39: ( ( ( DOT cp_mixin_name ) | HASH ) ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )
							{
							dbg.location(1226,39);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1226:39: ( ( ( DOT cp_mixin_name ) | HASH ) ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1226:40: ( ( DOT cp_mixin_name ) | HASH ) ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN
							{
							dbg.location(1226,40);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1226:40: ( ( DOT cp_mixin_name ) | HASH )
							int alt384=2;
							try { dbg.enterSubRule(384);
							try { dbg.enterDecision(384, decisionCanBacktrack[384]);

							int LA384_0 = input.LA(1);
							if ( (LA384_0==DOT) ) {
								alt384=1;
							}
							else if ( (LA384_0==HASH) ) {
								alt384=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return;}
								NoViableAltException nvae =
									new NoViableAltException("", 384, 0, input);
								dbg.recognitionException(nvae);
								throw nvae;
							}

							} finally {dbg.exitDecision(384);}

							switch (alt384) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1226:41: ( DOT cp_mixin_name )
									{
									dbg.location(1226,41);
									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1226:41: ( DOT cp_mixin_name )
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1226:42: DOT cp_mixin_name
									{
									dbg.location(1226,42);
									match(input,DOT,FOLLOW_DOT_in_cp_mixin_declaration8537); if (state.failed) return;dbg.location(1226,46);
									pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_declaration8539);
									cp_mixin_name();
									state._fsp--;
									if (state.failed) return;
									}

									}
									break;
								case 2 :
									dbg.enterAlt(2);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1226:63: HASH
									{
									dbg.location(1226,63);
									match(input,HASH,FOLLOW_HASH_in_cp_mixin_declaration8544); if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(384);}
							dbg.location(1226,69);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1226:69: ( ws )?
							int alt385=2;
							try { dbg.enterSubRule(385);
							try { dbg.enterDecision(385, decisionCanBacktrack[385]);

							int LA385_0 = input.LA(1);
							if ( (LA385_0==COMMENT||LA385_0==NL||LA385_0==WS) ) {
								alt385=1;
							}
							} finally {dbg.exitDecision(385);}

							switch (alt385) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1226:69: ws
									{
									dbg.location(1226,69);
									pushFollow(FOLLOW_ws_in_cp_mixin_declaration8547);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(385);}
							dbg.location(1226,73);
							match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_declaration8550); if (state.failed) return;dbg.location(1226,80);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1226:80: ( ws )?
							int alt386=2;
							try { dbg.enterSubRule(386);
							try { dbg.enterDecision(386, decisionCanBacktrack[386]);

							int LA386_0 = input.LA(1);
							if ( (LA386_0==COMMENT||LA386_0==NL||LA386_0==WS) ) {
								alt386=1;
							}
							} finally {dbg.exitDecision(386);}

							switch (alt386) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1226:80: ws
									{
									dbg.location(1226,80);
									pushFollow(FOLLOW_ws_in_cp_mixin_declaration8552);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(386);}
							dbg.location(1226,84);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1226:84: ( cp_args_list )?
							int alt387=2;
							try { dbg.enterSubRule(387);
							try { dbg.enterDecision(387, decisionCanBacktrack[387]);

							int LA387_0 = input.LA(1);
							if ( (LA387_0==AT_IDENT||(LA387_0 >= BOTTOMCENTER_SYM && LA387_0 <= BOTTOMRIGHT_SYM)||LA387_0==CHARSET_SYM||(LA387_0 >= COUNTER_STYLE_SYM && LA387_0 <= CP_DOTS)||LA387_0==FONT_FACE_SYM||LA387_0==IDENT||LA387_0==IMPORT_SYM||(LA387_0 >= LEFTBOTTOM_SYM && LA387_0 <= LEFTTOP_SYM)||LA387_0==LESS_REST||LA387_0==MEDIA_SYM||LA387_0==MOZ_DOCUMENT_SYM||LA387_0==NAMESPACE_SYM||LA387_0==PAGE_SYM||(LA387_0 >= RIGHTBOTTOM_SYM && LA387_0 <= RIGHTTOP_SYM)||(LA387_0 >= SASS_AT_ROOT && LA387_0 <= SASS_DEBUG)||(LA387_0 >= SASS_EACH && LA387_0 <= SASS_ELSE)||LA387_0==SASS_EXTEND||(LA387_0 >= SASS_FOR && LA387_0 <= SASS_FUNCTION)||(LA387_0 >= SASS_IF && LA387_0 <= SASS_MIXIN)||(LA387_0 >= SASS_RETURN && LA387_0 <= SASS_WHILE)||(LA387_0 >= TOPCENTER_SYM && LA387_0 <= TOPRIGHT_SYM)||LA387_0==WEBKIT_KEYFRAMES_SYM) ) {
								alt387=1;
							}
							} finally {dbg.exitDecision(387);}

							switch (alt387) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1226:84: cp_args_list
									{
									dbg.location(1226,84);
									pushFollow(FOLLOW_cp_args_list_in_cp_mixin_declaration8555);
									cp_args_list();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(387);}
							dbg.location(1226,98);
							match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_declaration8558); if (state.failed) return;
							}

							}
							break;

					}
					} finally {dbg.exitSubRule(388);}
					dbg.location(1226,107);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1226:107: ( ( ws )? less_mixin_guarded )?
					int alt390=2;
					try { dbg.enterSubRule(390);
					try { dbg.enterDecision(390, decisionCanBacktrack[390]);

					try {
						isCyclicDecision = true;
						alt390 = dfa390.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(390);}

					switch (alt390) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1226:108: ( ws )? less_mixin_guarded
							{
							dbg.location(1226,108);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1226:108: ( ws )?
							int alt389=2;
							try { dbg.enterSubRule(389);
							try { dbg.enterDecision(389, decisionCanBacktrack[389]);

							int LA389_0 = input.LA(1);
							if ( (LA389_0==COMMENT||LA389_0==NL||LA389_0==WS) ) {
								alt389=1;
							}
							} finally {dbg.exitDecision(389);}

							switch (alt389) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1226:108: ws
									{
									dbg.location(1226,108);
									pushFollow(FOLLOW_ws_in_cp_mixin_declaration8563);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(389);}
							dbg.location(1226,112);
							pushFollow(FOLLOW_less_mixin_guarded_in_cp_mixin_declaration8566);
							less_mixin_guarded();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(390);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1228:9: {...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )?
					{
					dbg.location(1228,9);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_mixin_declaration", "isScssSource()");
					}dbg.location(1228,27);
					match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_cp_mixin_declaration8590); if (state.failed) return;dbg.location(1228,38);
					pushFollow(FOLLOW_ws_in_cp_mixin_declaration8592);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(1228,41);
					pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_declaration8594);
					cp_mixin_name();
					state._fsp--;
					if (state.failed) return;dbg.location(1228,55);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1228:55: ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )?
					int alt394=2;
					try { dbg.enterSubRule(394);
					try { dbg.enterDecision(394, decisionCanBacktrack[394]);

					try {
						isCyclicDecision = true;
						alt394 = dfa394.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(394);}

					switch (alt394) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1228:56: ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN
							{
							dbg.location(1228,56);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1228:56: ( ws )?
							int alt391=2;
							try { dbg.enterSubRule(391);
							try { dbg.enterDecision(391, decisionCanBacktrack[391]);

							int LA391_0 = input.LA(1);
							if ( (LA391_0==COMMENT||LA391_0==NL||LA391_0==WS) ) {
								alt391=1;
							}
							} finally {dbg.exitDecision(391);}

							switch (alt391) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1228:56: ws
									{
									dbg.location(1228,56);
									pushFollow(FOLLOW_ws_in_cp_mixin_declaration8597);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(391);}
							dbg.location(1228,60);
							match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_declaration8600); if (state.failed) return;dbg.location(1228,67);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1228:67: ( ws )?
							int alt392=2;
							try { dbg.enterSubRule(392);
							try { dbg.enterDecision(392, decisionCanBacktrack[392]);

							int LA392_0 = input.LA(1);
							if ( (LA392_0==COMMENT||LA392_0==NL||LA392_0==WS) ) {
								alt392=1;
							}
							} finally {dbg.exitDecision(392);}

							switch (alt392) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1228:67: ws
									{
									dbg.location(1228,67);
									pushFollow(FOLLOW_ws_in_cp_mixin_declaration8602);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(392);}
							dbg.location(1228,71);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1228:71: ( cp_args_list )?
							int alt393=2;
							try { dbg.enterSubRule(393);
							try { dbg.enterDecision(393, decisionCanBacktrack[393]);

							int LA393_0 = input.LA(1);
							if ( (LA393_0==AT_IDENT||(LA393_0 >= BOTTOMCENTER_SYM && LA393_0 <= BOTTOMRIGHT_SYM)||LA393_0==CHARSET_SYM||(LA393_0 >= COUNTER_STYLE_SYM && LA393_0 <= CP_DOTS)||LA393_0==FONT_FACE_SYM||LA393_0==IDENT||LA393_0==IMPORT_SYM||(LA393_0 >= LEFTBOTTOM_SYM && LA393_0 <= LEFTTOP_SYM)||LA393_0==LESS_REST||LA393_0==MEDIA_SYM||LA393_0==MOZ_DOCUMENT_SYM||LA393_0==NAMESPACE_SYM||LA393_0==PAGE_SYM||(LA393_0 >= RIGHTBOTTOM_SYM && LA393_0 <= RIGHTTOP_SYM)||(LA393_0 >= SASS_AT_ROOT && LA393_0 <= SASS_DEBUG)||(LA393_0 >= SASS_EACH && LA393_0 <= SASS_ELSE)||LA393_0==SASS_EXTEND||(LA393_0 >= SASS_FOR && LA393_0 <= SASS_FUNCTION)||(LA393_0 >= SASS_IF && LA393_0 <= SASS_MIXIN)||(LA393_0 >= SASS_RETURN && LA393_0 <= SASS_WHILE)||(LA393_0 >= TOPCENTER_SYM && LA393_0 <= TOPRIGHT_SYM)||LA393_0==WEBKIT_KEYFRAMES_SYM) ) {
								alt393=1;
							}
							} finally {dbg.exitDecision(393);}

							switch (alt393) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1228:71: cp_args_list
									{
									dbg.location(1228,71);
									pushFollow(FOLLOW_cp_args_list_in_cp_mixin_declaration8605);
									cp_args_list();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(393);}
							dbg.location(1228,85);
							match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_declaration8608); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(394);}

					}
					break;

			}
			} finally {dbg.exitSubRule(395);}
			dbg.location(1230,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1230:5: ( ws )?
			int alt396=2;
			try { dbg.enterSubRule(396);
			try { dbg.enterDecision(396, decisionCanBacktrack[396]);

			int LA396_0 = input.LA(1);
			if ( (LA396_0==COMMENT||LA396_0==NL||LA396_0==WS) ) {
				alt396=1;
			}
			} finally {dbg.exitDecision(396);}

			switch (alt396) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1230:5: ws
					{
					dbg.location(1230,5);
					pushFollow(FOLLOW_ws_in_cp_mixin_declaration8622);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(396);}
			dbg.location(1230,9);
			pushFollow(FOLLOW_cp_mixin_block_in_cp_mixin_declaration8625);
			cp_mixin_block();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1231, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_mixin_declaration");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_mixin_declaration"



	// $ANTLR start "cp_mixin_call"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1235:1: cp_mixin_call : ({...}? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) ( ( ( ws )? combinator ( ws )? )=> ( ws )? combinator ( ws )? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) )* ( ( pseudo )=> pseudo | ( ( ws )? LPAREN )=> ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN ) )? |{...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? ) ;
	public final void cp_mixin_call() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1235, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1236:5: ( ({...}? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) ( ( ( ws )? combinator ( ws )? )=> ( ws )? combinator ( ws )? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) )* ( ( pseudo )=> pseudo | ( ( ws )? LPAREN )=> ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN ) )? |{...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? ) )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1237:5: ({...}? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) ( ( ( ws )? combinator ( ws )? )=> ( ws )? combinator ( ws )? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) )* ( ( pseudo )=> pseudo | ( ( ws )? LPAREN )=> ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN ) )? |{...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? )
			{
			dbg.location(1237,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1237:5: ({...}? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) ( ( ( ws )? combinator ( ws )? )=> ( ws )? combinator ( ws )? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) )* ( ( pseudo )=> pseudo | ( ( ws )? LPAREN )=> ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN ) )? |{...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? )
			int alt412=2;
			try { dbg.enterSubRule(412);
			try { dbg.enterDecision(412, decisionCanBacktrack[412]);

			int LA412_0 = input.LA(1);
			if ( (LA412_0==AT_IDENT||LA412_0==DOT||LA412_0==HASH||LA412_0==LESS_AND) ) {
				alt412=1;
			}
			else if ( (LA412_0==SASS_INCLUDE) ) {
				alt412=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 412, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(412);}

			switch (alt412) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:9: {...}? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) ( ( ( ws )? combinator ( ws )? )=> ( ws )? combinator ( ws )? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) )* ( ( pseudo )=> pseudo | ( ( ws )? LPAREN )=> ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN ) )?
					{
					dbg.location(1238,9);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_mixin_call", "isLessSource()");
					}dbg.location(1238,27);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:27: ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND )
					int alt397=4;
					try { dbg.enterSubRule(397);
					try { dbg.enterDecision(397, decisionCanBacktrack[397]);

					switch ( input.LA(1) ) {
					case DOT:
						{
						alt397=1;
						}
						break;
					case HASH:
						{
						alt397=2;
						}
						break;
					case AT_IDENT:
						{
						alt397=3;
						}
						break;
					case LESS_AND:
						{
						alt397=4;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 397, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(397);}

					switch (alt397) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:28: DOT cp_mixin_name
							{
							dbg.location(1238,28);
							match(input,DOT,FOLLOW_DOT_in_cp_mixin_call8661); if (state.failed) return;dbg.location(1238,32);
							pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_call8663);
							cp_mixin_name();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:48: HASH
							{
							dbg.location(1238,48);
							match(input,HASH,FOLLOW_HASH_in_cp_mixin_call8667); if (state.failed) return;
							}
							break;
						case 3 :
							dbg.enterAlt(3);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:55: AT_IDENT
							{
							dbg.location(1238,55);
							match(input,AT_IDENT,FOLLOW_AT_IDENT_in_cp_mixin_call8671); if (state.failed) return;
							}
							break;
						case 4 :
							dbg.enterAlt(4);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:66: LESS_AND
							{
							dbg.location(1238,66);
							match(input,LESS_AND,FOLLOW_LESS_AND_in_cp_mixin_call8675); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(397);}
					dbg.location(1238,76);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:76: ( ( ( ws )? combinator ( ws )? )=> ( ws )? combinator ( ws )? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) )*
					try { dbg.enterSubRule(401);

					loop401:
					while (true) {
						int alt401=2;
						try { dbg.enterDecision(401, decisionCanBacktrack[401]);

						int LA401_0 = input.LA(1);
						if ( (LA401_0==COMMENT||LA401_0==NL||LA401_0==WS) ) {
							int LA401_2 = input.LA(2);
							if ( (synpred50_Css3()) ) {
								alt401=1;
							}

						}
						else if ( (LA401_0==GREATER||LA401_0==PLUS||LA401_0==TILDE) ) {
							int LA401_14 = input.LA(2);
							if ( (synpred50_Css3()) ) {
								alt401=1;
							}

						}

						} finally {dbg.exitDecision(401);}

						switch (alt401) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:77: ( ( ws )? combinator ( ws )? )=> ( ws )? combinator ( ws )? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND )
							{
							dbg.location(1238,101);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:101: ( ws )?
							int alt398=2;
							try { dbg.enterSubRule(398);
							try { dbg.enterDecision(398, decisionCanBacktrack[398]);

							int LA398_0 = input.LA(1);
							if ( (LA398_0==COMMENT||LA398_0==NL||LA398_0==WS) ) {
								alt398=1;
							}
							} finally {dbg.exitDecision(398);}

							switch (alt398) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:101: ws
									{
									dbg.location(1238,101);
									pushFollow(FOLLOW_ws_in_cp_mixin_call8691);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(398);}
							dbg.location(1238,105);
							pushFollow(FOLLOW_combinator_in_cp_mixin_call8694);
							combinator();
							state._fsp--;
							if (state.failed) return;dbg.location(1238,116);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:116: ( ws )?
							int alt399=2;
							try { dbg.enterSubRule(399);
							try { dbg.enterDecision(399, decisionCanBacktrack[399]);

							int LA399_0 = input.LA(1);
							if ( (LA399_0==COMMENT||LA399_0==NL||LA399_0==WS) ) {
								alt399=1;
							}
							} finally {dbg.exitDecision(399);}

							switch (alt399) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:116: ws
									{
									dbg.location(1238,116);
									pushFollow(FOLLOW_ws_in_cp_mixin_call8696);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(399);}
							dbg.location(1238,120);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:120: ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND )
							int alt400=4;
							try { dbg.enterSubRule(400);
							try { dbg.enterDecision(400, decisionCanBacktrack[400]);

							switch ( input.LA(1) ) {
							case DOT:
								{
								alt400=1;
								}
								break;
							case HASH:
								{
								alt400=2;
								}
								break;
							case AT_IDENT:
								{
								alt400=3;
								}
								break;
							case LESS_AND:
								{
								alt400=4;
								}
								break;
							default:
								if (state.backtracking>0) {state.failed=true; return;}
								NoViableAltException nvae =
									new NoViableAltException("", 400, 0, input);
								dbg.recognitionException(nvae);
								throw nvae;
							}
							} finally {dbg.exitDecision(400);}

							switch (alt400) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:121: DOT cp_mixin_name
									{
									dbg.location(1238,121);
									match(input,DOT,FOLLOW_DOT_in_cp_mixin_call8700); if (state.failed) return;dbg.location(1238,125);
									pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_call8702);
									cp_mixin_name();
									state._fsp--;
									if (state.failed) return;
									}
									break;
								case 2 :
									dbg.enterAlt(2);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:141: HASH
									{
									dbg.location(1238,141);
									match(input,HASH,FOLLOW_HASH_in_cp_mixin_call8706); if (state.failed) return;
									}
									break;
								case 3 :
									dbg.enterAlt(3);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:148: AT_IDENT
									{
									dbg.location(1238,148);
									match(input,AT_IDENT,FOLLOW_AT_IDENT_in_cp_mixin_call8710); if (state.failed) return;
									}
									break;
								case 4 :
									dbg.enterAlt(4);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:159: LESS_AND
									{
									dbg.location(1238,159);
									match(input,LESS_AND,FOLLOW_LESS_AND_in_cp_mixin_call8714); if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(400);}

							}
							break;

						default :
							break loop401;
						}
					}
					} finally {dbg.exitSubRule(401);}
					dbg.location(1238,171);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:171: ( ( pseudo )=> pseudo | ( ( ws )? LPAREN )=> ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN ) )?
					int alt405=3;
					try { dbg.enterSubRule(405);
					try { dbg.enterDecision(405, decisionCanBacktrack[405]);

					int LA405_0 = input.LA(1);
					if ( (LA405_0==COLON||LA405_0==DCOLON) ) {
						int LA405_1 = input.LA(2);
						if ( (synpred51_Css3()) ) {
							alt405=1;
						}
					}
					else if ( (LA405_0==COMMENT||LA405_0==NL||LA405_0==WS) ) {
						int LA405_2 = input.LA(2);
						if ( (synpred52_Css3()) ) {
							alt405=2;
						}
					}
					else if ( (LA405_0==LPAREN) && (synpred52_Css3())) {
						alt405=2;
					}
					} finally {dbg.exitDecision(405);}

					switch (alt405) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:172: ( pseudo )=> pseudo
							{
							dbg.location(1238,182);
							pushFollow(FOLLOW_pseudo_in_cp_mixin_call8724);
							pseudo();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:191: ( ( ws )? LPAREN )=> ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )
							{
							dbg.location(1238,205);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:205: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:206: ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN
							{
							dbg.location(1238,206);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:206: ( ws )?
							int alt402=2;
							try { dbg.enterSubRule(402);
							try { dbg.enterDecision(402, decisionCanBacktrack[402]);

							int LA402_0 = input.LA(1);
							if ( (LA402_0==COMMENT||LA402_0==NL||LA402_0==WS) ) {
								alt402=1;
							}
							} finally {dbg.exitDecision(402);}

							switch (alt402) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:206: ws
									{
									dbg.location(1238,206);
									pushFollow(FOLLOW_ws_in_cp_mixin_call8736);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(402);}
							dbg.location(1238,210);
							match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_call8739); if (state.failed) return;dbg.location(1238,217);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:217: ( ws )?
							int alt403=2;
							try { dbg.enterSubRule(403);
							try { dbg.enterDecision(403, decisionCanBacktrack[403]);

							int LA403_0 = input.LA(1);
							if ( (LA403_0==COMMENT||LA403_0==NL||LA403_0==WS) ) {
								alt403=1;
							}
							} finally {dbg.exitDecision(403);}

							switch (alt403) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:217: ws
									{
									dbg.location(1238,217);
									pushFollow(FOLLOW_ws_in_cp_mixin_call8741);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(403);}
							dbg.location(1238,221);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:221: ( cp_mixin_call_args )?
							int alt404=2;
							try { dbg.enterSubRule(404);
							try { dbg.enterDecision(404, decisionCanBacktrack[404]);

							int LA404_0 = input.LA(1);
							if ( ((LA404_0 >= ANGLE && LA404_0 <= AT_SIGN)||(LA404_0 >= BOTTOMCENTER_SYM && LA404_0 <= BOTTOMRIGHT_SYM)||LA404_0==CHARSET_SYM||LA404_0==COUNTER_STYLE_SYM||LA404_0==DIMENSION||LA404_0==EMS||LA404_0==EXS||(LA404_0 >= FONT_FACE_SYM && LA404_0 <= FREQ)||LA404_0==GEN||(LA404_0 >= HASH && LA404_0 <= HASH_SYMBOL)||(LA404_0 >= IDENT && LA404_0 <= IMPORT_SYM)||(LA404_0 >= LBRACE && LA404_0 <= LENGTH)||(LA404_0 >= LESS_AND && LA404_0 <= LESS_JS_STRING)||LA404_0==LPAREN||(LA404_0 >= MEDIA_SYM && LA404_0 <= MOZ_DOCUMENT_SYM)||LA404_0==NAMESPACE_SYM||(LA404_0 >= NOT && LA404_0 <= NUMBER)||(LA404_0 >= PAGE_SYM && LA404_0 <= PERCENTAGE_SYMBOL)||LA404_0==PLUS||(LA404_0 >= REM && LA404_0 <= RIGHTTOP_SYM)||(LA404_0 >= SASS_AT_ROOT && LA404_0 <= SASS_DEBUG)||(LA404_0 >= SASS_EACH && LA404_0 <= SASS_ELSE)||LA404_0==SASS_EXTEND||(LA404_0 >= SASS_FOR && LA404_0 <= SASS_FUNCTION)||(LA404_0 >= SASS_IF && LA404_0 <= SASS_MIXIN)||(LA404_0 >= SASS_RETURN && LA404_0 <= SASS_WHILE)||LA404_0==STRING||(LA404_0 >= TILDE && LA404_0 <= TOPRIGHT_SYM)||(LA404_0 >= URANGE && LA404_0 <= URI)||LA404_0==VARIABLE||LA404_0==WEBKIT_KEYFRAMES_SYM) ) {
								alt404=1;
							}
							} finally {dbg.exitDecision(404);}

							switch (alt404) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:221: cp_mixin_call_args
									{
									dbg.location(1238,221);
									pushFollow(FOLLOW_cp_mixin_call_args_in_cp_mixin_call8744);
									cp_mixin_call_args();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(404);}
							dbg.location(1238,241);
							match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_call8747); if (state.failed) return;
							}

							}
							break;

					}
					} finally {dbg.exitSubRule(405);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1240:9: {...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )?
					{
					dbg.location(1240,9);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_mixin_call", "isScssSource()");
					}dbg.location(1240,27);
					match(input,SASS_INCLUDE,FOLLOW_SASS_INCLUDE_in_cp_mixin_call8772); if (state.failed) return;dbg.location(1240,40);
					pushFollow(FOLLOW_ws_in_cp_mixin_call8774);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(1240,43);
					pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_call8776);
					cp_mixin_name();
					state._fsp--;
					if (state.failed) return;dbg.location(1240,57);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1240:57: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?
					int alt409=2;
					try { dbg.enterSubRule(409);
					try { dbg.enterDecision(409, decisionCanBacktrack[409]);

					try {
						isCyclicDecision = true;
						alt409 = dfa409.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(409);}

					switch (alt409) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1240:58: ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN
							{
							dbg.location(1240,58);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1240:58: ( ws )?
							int alt406=2;
							try { dbg.enterSubRule(406);
							try { dbg.enterDecision(406, decisionCanBacktrack[406]);

							int LA406_0 = input.LA(1);
							if ( (LA406_0==COMMENT||LA406_0==NL||LA406_0==WS) ) {
								alt406=1;
							}
							} finally {dbg.exitDecision(406);}

							switch (alt406) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1240:58: ws
									{
									dbg.location(1240,58);
									pushFollow(FOLLOW_ws_in_cp_mixin_call8779);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(406);}
							dbg.location(1240,62);
							match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_call8782); if (state.failed) return;dbg.location(1240,69);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1240:69: ( ws )?
							int alt407=2;
							try { dbg.enterSubRule(407);
							try { dbg.enterDecision(407, decisionCanBacktrack[407]);

							int LA407_0 = input.LA(1);
							if ( (LA407_0==COMMENT||LA407_0==NL||LA407_0==WS) ) {
								alt407=1;
							}
							} finally {dbg.exitDecision(407);}

							switch (alt407) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1240:69: ws
									{
									dbg.location(1240,69);
									pushFollow(FOLLOW_ws_in_cp_mixin_call8784);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(407);}
							dbg.location(1240,73);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1240:73: ( cp_mixin_call_args )?
							int alt408=2;
							try { dbg.enterSubRule(408);
							try { dbg.enterDecision(408, decisionCanBacktrack[408]);

							int LA408_0 = input.LA(1);
							if ( ((LA408_0 >= ANGLE && LA408_0 <= AT_SIGN)||(LA408_0 >= BOTTOMCENTER_SYM && LA408_0 <= BOTTOMRIGHT_SYM)||LA408_0==CHARSET_SYM||LA408_0==COUNTER_STYLE_SYM||LA408_0==DIMENSION||LA408_0==EMS||LA408_0==EXS||(LA408_0 >= FONT_FACE_SYM && LA408_0 <= FREQ)||LA408_0==GEN||(LA408_0 >= HASH && LA408_0 <= HASH_SYMBOL)||(LA408_0 >= IDENT && LA408_0 <= IMPORT_SYM)||(LA408_0 >= LBRACE && LA408_0 <= LENGTH)||(LA408_0 >= LESS_AND && LA408_0 <= LESS_JS_STRING)||LA408_0==LPAREN||(LA408_0 >= MEDIA_SYM && LA408_0 <= MOZ_DOCUMENT_SYM)||LA408_0==NAMESPACE_SYM||(LA408_0 >= NOT && LA408_0 <= NUMBER)||(LA408_0 >= PAGE_SYM && LA408_0 <= PERCENTAGE_SYMBOL)||LA408_0==PLUS||(LA408_0 >= REM && LA408_0 <= RIGHTTOP_SYM)||(LA408_0 >= SASS_AT_ROOT && LA408_0 <= SASS_DEBUG)||(LA408_0 >= SASS_EACH && LA408_0 <= SASS_ELSE)||LA408_0==SASS_EXTEND||(LA408_0 >= SASS_FOR && LA408_0 <= SASS_FUNCTION)||(LA408_0 >= SASS_IF && LA408_0 <= SASS_MIXIN)||(LA408_0 >= SASS_RETURN && LA408_0 <= SASS_WHILE)||LA408_0==STRING||(LA408_0 >= TILDE && LA408_0 <= TOPRIGHT_SYM)||(LA408_0 >= URANGE && LA408_0 <= URI)||LA408_0==VARIABLE||LA408_0==WEBKIT_KEYFRAMES_SYM) ) {
								alt408=1;
							}
							} finally {dbg.exitDecision(408);}

							switch (alt408) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1240:73: cp_mixin_call_args
									{
									dbg.location(1240,73);
									pushFollow(FOLLOW_cp_mixin_call_args_in_cp_mixin_call8787);
									cp_mixin_call_args();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(408);}
							dbg.location(1240,93);
							match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_call8790); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(409);}
					dbg.location(1240,102);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1240:102: ( ( ws )? cp_mixin_block )?
					int alt411=2;
					try { dbg.enterSubRule(411);
					try { dbg.enterDecision(411, decisionCanBacktrack[411]);

					try {
						isCyclicDecision = true;
						alt411 = dfa411.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(411);}

					switch (alt411) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1240:103: ( ws )? cp_mixin_block
							{
							dbg.location(1240,103);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1240:103: ( ws )?
							int alt410=2;
							try { dbg.enterSubRule(410);
							try { dbg.enterDecision(410, decisionCanBacktrack[410]);

							int LA410_0 = input.LA(1);
							if ( (LA410_0==COMMENT||LA410_0==NL||LA410_0==WS) ) {
								alt410=1;
							}
							} finally {dbg.exitDecision(410);}

							switch (alt410) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1240:103: ws
									{
									dbg.location(1240,103);
									pushFollow(FOLLOW_ws_in_cp_mixin_call8795);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(410);}
							dbg.location(1240,107);
							pushFollow(FOLLOW_cp_mixin_block_in_cp_mixin_call8798);
							cp_mixin_block();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(411);}

					}
					break;

			}
			} finally {dbg.exitSubRule(412);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1242, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_mixin_call");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_mixin_call"



	// $ANTLR start "cp_mixin_block"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1244:1: cp_mixin_block : LBRACE ( ws )? syncToFollow ( declarations | ( webkitKeyframeSelectors )=> ( webkitKeyframesBlock ( ws )? )* )? RBRACE ;
	public final void cp_mixin_block() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_mixin_block");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1244, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1245:5: ( LBRACE ( ws )? syncToFollow ( declarations | ( webkitKeyframeSelectors )=> ( webkitKeyframesBlock ( ws )? )* )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1246:5: LBRACE ( ws )? syncToFollow ( declarations | ( webkitKeyframeSelectors )=> ( webkitKeyframesBlock ( ws )? )* )? RBRACE
			{
			dbg.location(1246,5);
			match(input,LBRACE,FOLLOW_LBRACE_in_cp_mixin_block8827); if (state.failed) return;dbg.location(1246,12);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1246:12: ( ws )?
			int alt413=2;
			try { dbg.enterSubRule(413);
			try { dbg.enterDecision(413, decisionCanBacktrack[413]);

			int LA413_0 = input.LA(1);
			if ( (LA413_0==COMMENT||LA413_0==NL||LA413_0==WS) ) {
				alt413=1;
			}
			} finally {dbg.exitDecision(413);}

			switch (alt413) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1246:12: ws
					{
					dbg.location(1246,12);
					pushFollow(FOLLOW_ws_in_cp_mixin_block8829);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(413);}
			dbg.location(1246,16);
			pushFollow(FOLLOW_syncToFollow_in_cp_mixin_block8832);
			syncToFollow();
			state._fsp--;
			if (state.failed) return;dbg.location(1247,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1247:9: ( declarations | ( webkitKeyframeSelectors )=> ( webkitKeyframesBlock ( ws )? )* )?
			int alt416=3;
			try { dbg.enterSubRule(416);
			try { dbg.enterDecision(416, decisionCanBacktrack[416]);

			int LA416_0 = input.LA(1);
			if ( ((LA416_0 >= AT_IDENT && LA416_0 <= AT_SIGN)||(LA416_0 >= BOTTOMCENTER_SYM && LA416_0 <= BOTTOMRIGHT_SYM)||(LA416_0 >= CHARSET_SYM && LA416_0 <= COLON)||LA416_0==COUNTER_STYLE_SYM||(LA416_0 >= DCOLON && LA416_0 <= DOT)||LA416_0==FONT_FACE_SYM||(LA416_0 >= GEN && LA416_0 <= GREATER)||(LA416_0 >= HASH && LA416_0 <= HASH_SYMBOL)||LA416_0==IMPORT_SYM||LA416_0==LAYER_SYM||(LA416_0 >= LBRACKET && LA416_0 <= LEFTTOP_SYM)||LA416_0==LESS_AND||(LA416_0 >= MEDIA_SYM && LA416_0 <= MOZ_DOCUMENT_SYM)||LA416_0==NAMESPACE_SYM||LA416_0==PAGE_SYM||(LA416_0 >= PIPE && LA416_0 <= PLUS)||(LA416_0 >= RIGHTBOTTOM_SYM && LA416_0 <= RIGHTTOP_SYM)||LA416_0==SASS_AT_ROOT||LA416_0==SASS_DEBUG||(LA416_0 >= SASS_EACH && LA416_0 <= SASS_ELSE)||(LA416_0 >= SASS_ERROR && LA416_0 <= SASS_FUNCTION)||(LA416_0 >= SASS_IF && LA416_0 <= SASS_MIXIN)||(LA416_0 >= SASS_RETURN && LA416_0 <= SEMI)||LA416_0==STAR||LA416_0==SUPPORTS_SYM||LA416_0==TILDE||(LA416_0 >= TOPCENTER_SYM && LA416_0 <= TOPRIGHT_SYM)||LA416_0==VARIABLE||LA416_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt416=1;
			}
			else if ( (LA416_0==IDENT) ) {
				int LA416_4 = input.LA(2);
				if ( (true) ) {
					alt416=1;
				}
				else if ( ((synpred53_Css3()&&(evalPredicate(tokenNameEquals("from"),"tokenNameEquals(\"from\")")||evalPredicate(tokenNameEquals("to"),"tokenNameEquals(\"to\")")))) ) {
					alt416=2;
				}
			}
			else if ( (LA416_0==SASS_CONTENT) ) {
				int LA416_37 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource() && !tokenNameStartsWith("--"),"isCssPreprocessorSource() && !tokenNameStartsWith(\"--\")")&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(tokenNameStartsWith("--"),"tokenNameStartsWith(\"--\")")&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt416=1;
				}
				else if ( ((synpred53_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt416=2;
				}
			}
			else if ( (LA416_0==PERCENTAGE) && (synpred53_Css3())) {
				alt416=2;
			}
			else if ( (LA416_0==RBRACE) ) {
				int LA416_43 = input.LA(2);
				if ( (synpred53_Css3()) ) {
					alt416=2;
				}
			}
			} finally {dbg.exitDecision(416);}

			switch (alt416) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1247:10: declarations
					{
					dbg.location(1247,10);
					pushFollow(FOLLOW_declarations_in_cp_mixin_block8843);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1247:25: ( webkitKeyframeSelectors )=> ( webkitKeyframesBlock ( ws )? )*
					{
					dbg.location(1248,3);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1248:3: ( webkitKeyframesBlock ( ws )? )*
					try { dbg.enterSubRule(415);

					loop415:
					while (true) {
						int alt415=2;
						try { dbg.enterDecision(415, decisionCanBacktrack[415]);

						int LA415_0 = input.LA(1);
						if ( (LA415_0==IDENT||LA415_0==PERCENTAGE||LA415_0==SASS_CONTENT) ) {
							alt415=1;
						}

						} finally {dbg.exitDecision(415);}

						switch (alt415) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1248:5: webkitKeyframesBlock ( ws )?
							{
							dbg.location(1248,5);
							pushFollow(FOLLOW_webkitKeyframesBlock_in_cp_mixin_block8858);
							webkitKeyframesBlock();
							state._fsp--;
							if (state.failed) return;dbg.location(1248,26);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1248:26: ( ws )?
							int alt414=2;
							try { dbg.enterSubRule(414);
							try { dbg.enterDecision(414, decisionCanBacktrack[414]);

							int LA414_0 = input.LA(1);
							if ( (LA414_0==COMMENT||LA414_0==NL||LA414_0==WS) ) {
								alt414=1;
							}
							} finally {dbg.exitDecision(414);}

							switch (alt414) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1248:26: ws
									{
									dbg.location(1248,26);
									pushFollow(FOLLOW_ws_in_cp_mixin_block8860);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(414);}

							}
							break;

						default :
							break loop415;
						}
					}
					} finally {dbg.exitSubRule(415);}

					}
					break;

			}
			} finally {dbg.exitSubRule(416);}
			dbg.location(1249,5);
			match(input,RBRACE,FOLLOW_RBRACE_in_cp_mixin_block8872); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1250, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_mixin_block");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_mixin_block"



	// $ANTLR start "cp_mixin_name"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1252:1: cp_mixin_name : IDENT ;
	public final void cp_mixin_name() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_mixin_name");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1252, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1253:5: ( IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1254:5: IDENT
			{
			dbg.location(1254,5);
			match(input,IDENT,FOLLOW_IDENT_in_cp_mixin_name8893); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1255, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_mixin_name");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_mixin_name"



	// $ANTLR start "cp_mixin_call_args"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1257:1: cp_mixin_call_args : cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )* ( CP_DOTS ( ws )? )? ( SEMI )? ;
	public final void cp_mixin_call_args() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call_args");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1257, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1258:5: ( cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )* ( CP_DOTS ( ws )? )? ( SEMI )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1261:5: cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )* ( CP_DOTS ( ws )? )? ( SEMI )?
			{
			dbg.location(1261,5);
			pushFollow(FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args8924);
			cp_mixin_call_arg();
			state._fsp--;
			if (state.failed) return;dbg.location(1261,23);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1261:23: ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )*
			try { dbg.enterSubRule(418);

			loop418:
			while (true) {
				int alt418=2;
				try { dbg.enterDecision(418, decisionCanBacktrack[418]);

				int LA418_0 = input.LA(1);
				if ( (LA418_0==SEMI) ) {
					int LA418_2 = input.LA(2);
					if ( ((LA418_2 >= ANGLE && LA418_2 <= AT_SIGN)||(LA418_2 >= BOTTOMCENTER_SYM && LA418_2 <= BOTTOMRIGHT_SYM)||LA418_2==CHARSET_SYM||LA418_2==COMMENT||LA418_2==COUNTER_STYLE_SYM||LA418_2==DIMENSION||LA418_2==EMS||LA418_2==EXS||(LA418_2 >= FONT_FACE_SYM && LA418_2 <= FREQ)||LA418_2==GEN||(LA418_2 >= HASH && LA418_2 <= HASH_SYMBOL)||(LA418_2 >= IDENT && LA418_2 <= IMPORT_SYM)||(LA418_2 >= LBRACE && LA418_2 <= LENGTH)||(LA418_2 >= LESS_AND && LA418_2 <= LESS_JS_STRING)||LA418_2==LPAREN||(LA418_2 >= MEDIA_SYM && LA418_2 <= MOZ_DOCUMENT_SYM)||(LA418_2 >= NAMESPACE_SYM && LA418_2 <= NL)||(LA418_2 >= NOT && LA418_2 <= NUMBER)||(LA418_2 >= PAGE_SYM && LA418_2 <= PERCENTAGE_SYMBOL)||LA418_2==PLUS||(LA418_2 >= REM && LA418_2 <= RIGHTTOP_SYM)||(LA418_2 >= SASS_AT_ROOT && LA418_2 <= SASS_DEBUG)||(LA418_2 >= SASS_EACH && LA418_2 <= SASS_ELSE)||LA418_2==SASS_EXTEND||(LA418_2 >= SASS_FOR && LA418_2 <= SASS_FUNCTION)||(LA418_2 >= SASS_IF && LA418_2 <= SASS_MIXIN)||(LA418_2 >= SASS_RETURN && LA418_2 <= SASS_WHILE)||LA418_2==STRING||(LA418_2 >= TILDE && LA418_2 <= TOPRIGHT_SYM)||(LA418_2 >= URANGE && LA418_2 <= URI)||LA418_2==VARIABLE||(LA418_2 >= WEBKIT_KEYFRAMES_SYM && LA418_2 <= WS)) ) {
						alt418=1;
					}

				}
				else if ( (LA418_0==COMMA) ) {
					alt418=1;
				}

				} finally {dbg.exitDecision(418);}

				switch (alt418) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1261:25: ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg
					{
					dbg.location(1261,25);
					if ( input.LA(1)==COMMA||input.LA(1)==SEMI ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}dbg.location(1261,40);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1261:40: ( ws )?
					int alt417=2;
					try { dbg.enterSubRule(417);
					try { dbg.enterDecision(417, decisionCanBacktrack[417]);

					int LA417_0 = input.LA(1);
					if ( (LA417_0==COMMENT||LA417_0==NL||LA417_0==WS) ) {
						alt417=1;
					}
					} finally {dbg.exitDecision(417);}

					switch (alt417) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1261:40: ws
							{
							dbg.location(1261,40);
							pushFollow(FOLLOW_ws_in_cp_mixin_call_args8936);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(417);}
					dbg.location(1261,44);
					pushFollow(FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args8939);
					cp_mixin_call_arg();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop418;
				}
			}
			} finally {dbg.exitSubRule(418);}
			dbg.location(1261,65);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1261:65: ( CP_DOTS ( ws )? )?
			int alt420=2;
			try { dbg.enterSubRule(420);
			try { dbg.enterDecision(420, decisionCanBacktrack[420]);

			int LA420_0 = input.LA(1);
			if ( (LA420_0==CP_DOTS) ) {
				alt420=1;
			}
			} finally {dbg.exitDecision(420);}

			switch (alt420) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1261:66: CP_DOTS ( ws )?
					{
					dbg.location(1261,66);
					match(input,CP_DOTS,FOLLOW_CP_DOTS_in_cp_mixin_call_args8945); if (state.failed) return;dbg.location(1261,74);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1261:74: ( ws )?
					int alt419=2;
					try { dbg.enterSubRule(419);
					try { dbg.enterDecision(419, decisionCanBacktrack[419]);

					int LA419_0 = input.LA(1);
					if ( (LA419_0==COMMENT||LA419_0==NL||LA419_0==WS) ) {
						alt419=1;
					}
					} finally {dbg.exitDecision(419);}

					switch (alt419) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1261:74: ws
							{
							dbg.location(1261,74);
							pushFollow(FOLLOW_ws_in_cp_mixin_call_args8947);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(419);}

					}
					break;

			}
			} finally {dbg.exitSubRule(420);}
			dbg.location(1261,80);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1261:80: ( SEMI )?
			int alt421=2;
			try { dbg.enterSubRule(421);
			try { dbg.enterDecision(421, decisionCanBacktrack[421]);

			int LA421_0 = input.LA(1);
			if ( (LA421_0==SEMI) ) {
				alt421=1;
			}
			} finally {dbg.exitDecision(421);}

			switch (alt421) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1261:80: SEMI
					{
					dbg.location(1261,80);
					match(input,SEMI,FOLLOW_SEMI_in_cp_mixin_call_args8952); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(421);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1262, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_mixin_call_args");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_mixin_call_args"



	// $ANTLR start "cp_mixin_call_arg"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1264:1: cp_mixin_call_arg : ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )? ;
	public final void cp_mixin_call_arg() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call_arg");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1264, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1265:5: ( ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1266:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )?
			{
			dbg.location(1266,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1266:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression )
			int alt424=2;
			try { dbg.enterSubRule(424);
			try { dbg.enterDecision(424, decisionCanBacktrack[424]);

			try {
				isCyclicDecision = true;
				alt424 = dfa424.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(424);}

			switch (alt424) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1267:9: cp_variable ( ws )? COLON ( ws )? cp_expression
					{
					dbg.location(1267,9);
					pushFollow(FOLLOW_cp_variable_in_cp_mixin_call_arg8984);
					cp_variable();
					state._fsp--;
					if (state.failed) return;dbg.location(1267,21);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1267:21: ( ws )?
					int alt422=2;
					try { dbg.enterSubRule(422);
					try { dbg.enterDecision(422, decisionCanBacktrack[422]);

					int LA422_0 = input.LA(1);
					if ( (LA422_0==COMMENT||LA422_0==NL||LA422_0==WS) ) {
						alt422=1;
					}
					} finally {dbg.exitDecision(422);}

					switch (alt422) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1267:21: ws
							{
							dbg.location(1267,21);
							pushFollow(FOLLOW_ws_in_cp_mixin_call_arg8986);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(422);}
					dbg.location(1267,25);
					match(input,COLON,FOLLOW_COLON_in_cp_mixin_call_arg8989); if (state.failed) return;dbg.location(1267,31);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1267:31: ( ws )?
					int alt423=2;
					try { dbg.enterSubRule(423);
					try { dbg.enterDecision(423, decisionCanBacktrack[423]);

					int LA423_0 = input.LA(1);
					if ( (LA423_0==COMMENT||LA423_0==NL||LA423_0==WS) ) {
						alt423=1;
					}
					} finally {dbg.exitDecision(423);}

					switch (alt423) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1267:31: ws
							{
							dbg.location(1267,31);
							pushFollow(FOLLOW_ws_in_cp_mixin_call_arg8991);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(423);}
					dbg.location(1267,35);
					pushFollow(FOLLOW_cp_expression_in_cp_mixin_call_arg8994);
					cp_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1268:11: cp_expression
					{
					dbg.location(1268,11);
					pushFollow(FOLLOW_cp_expression_in_cp_mixin_call_arg9006);
					cp_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(424);}
			dbg.location(1269,7);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1269:7: ( ws )?
			int alt425=2;
			try { dbg.enterSubRule(425);
			try { dbg.enterDecision(425, decisionCanBacktrack[425]);

			int LA425_0 = input.LA(1);
			if ( (LA425_0==COMMENT||LA425_0==NL||LA425_0==WS) ) {
				alt425=1;
			}
			} finally {dbg.exitDecision(425);}

			switch (alt425) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1269:7: ws
					{
					dbg.location(1269,7);
					pushFollow(FOLLOW_ws_in_cp_mixin_call_arg9014);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(425);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1270, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_mixin_call_arg");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_mixin_call_arg"



	// $ANTLR start "cp_args_list"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1273:1: cp_args_list : ( ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? )? ( ( CP_DOTS | LESS_REST ) ( ws )? )? ) | ( CP_DOTS | LESS_REST ) ( ws )? );
	public final void cp_args_list() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_args_list");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1273, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1274:5: ( ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? )? ( ( CP_DOTS | LESS_REST ) ( ws )? )? ) | ( CP_DOTS | LESS_REST ) ( ws )? )
			int alt433=2;
			try { dbg.enterDecision(433, decisionCanBacktrack[433]);

			int LA433_0 = input.LA(1);
			if ( (LA433_0==AT_IDENT||(LA433_0 >= BOTTOMCENTER_SYM && LA433_0 <= BOTTOMRIGHT_SYM)||LA433_0==CHARSET_SYM||LA433_0==COUNTER_STYLE_SYM||LA433_0==FONT_FACE_SYM||LA433_0==IDENT||LA433_0==IMPORT_SYM||(LA433_0 >= LEFTBOTTOM_SYM && LA433_0 <= LEFTTOP_SYM)||LA433_0==MEDIA_SYM||LA433_0==MOZ_DOCUMENT_SYM||LA433_0==NAMESPACE_SYM||LA433_0==PAGE_SYM||(LA433_0 >= RIGHTBOTTOM_SYM && LA433_0 <= RIGHTTOP_SYM)||(LA433_0 >= SASS_AT_ROOT && LA433_0 <= SASS_DEBUG)||(LA433_0 >= SASS_EACH && LA433_0 <= SASS_ELSE)||LA433_0==SASS_EXTEND||(LA433_0 >= SASS_FOR && LA433_0 <= SASS_FUNCTION)||(LA433_0 >= SASS_IF && LA433_0 <= SASS_MIXIN)||(LA433_0 >= SASS_RETURN && LA433_0 <= SASS_WHILE)||(LA433_0 >= TOPCENTER_SYM && LA433_0 <= TOPRIGHT_SYM)||LA433_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt433=1;
			}
			else if ( (LA433_0==CP_DOTS||LA433_0==LESS_REST) ) {
				alt433=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 433, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(433);}

			switch (alt433) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1281:5: ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? )? ( ( CP_DOTS | LESS_REST ) ( ws )? )? )
					{
					dbg.location(1281,5);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1281:5: ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? )? ( ( CP_DOTS | LESS_REST ) ( ws )? )? )
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1281:7: cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? )? ( ( CP_DOTS | LESS_REST ) ( ws )? )?
					{
					dbg.location(1281,7);
					pushFollow(FOLLOW_cp_arg_in_cp_args_list9061);
					cp_arg();
					state._fsp--;
					if (state.failed) return;dbg.location(1281,14);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1281:14: ( ( COMMA | SEMI ) ( ws )? cp_arg )*
					try { dbg.enterSubRule(427);

					loop427:
					while (true) {
						int alt427=2;
						try { dbg.enterDecision(427, decisionCanBacktrack[427]);

						try {
							isCyclicDecision = true;
							alt427 = dfa427.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(427);}

						switch (alt427) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1281:16: ( COMMA | SEMI ) ( ws )? cp_arg
							{
							dbg.location(1281,16);
							if ( input.LA(1)==COMMA||input.LA(1)==SEMI ) {
								input.consume();
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								dbg.recognitionException(mse);
								throw mse;
							}dbg.location(1281,33);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1281:33: ( ws )?
							int alt426=2;
							try { dbg.enterSubRule(426);
							try { dbg.enterDecision(426, decisionCanBacktrack[426]);

							int LA426_0 = input.LA(1);
							if ( (LA426_0==COMMENT||LA426_0==NL||LA426_0==WS) ) {
								alt426=1;
							}
							} finally {dbg.exitDecision(426);}

							switch (alt426) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1281:33: ws
									{
									dbg.location(1281,33);
									pushFollow(FOLLOW_ws_in_cp_args_list9075);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(426);}
							dbg.location(1281,37);
							pushFollow(FOLLOW_cp_arg_in_cp_args_list9078);
							cp_arg();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop427;
						}
					}
					} finally {dbg.exitSubRule(427);}
					dbg.location(1281,47);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1281:47: ( ( COMMA | SEMI ) ( ws )? )?
					int alt429=2;
					try { dbg.enterSubRule(429);
					try { dbg.enterDecision(429, decisionCanBacktrack[429]);

					int LA429_0 = input.LA(1);
					if ( (LA429_0==COMMA||LA429_0==SEMI) ) {
						alt429=1;
					}
					} finally {dbg.exitDecision(429);}

					switch (alt429) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1281:49: ( COMMA | SEMI ) ( ws )?
							{
							dbg.location(1281,49);
							if ( input.LA(1)==COMMA||input.LA(1)==SEMI ) {
								input.consume();
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								dbg.recognitionException(mse);
								throw mse;
							}dbg.location(1281,64);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1281:64: ( ws )?
							int alt428=2;
							try { dbg.enterSubRule(428);
							try { dbg.enterDecision(428, decisionCanBacktrack[428]);

							int LA428_0 = input.LA(1);
							if ( (LA428_0==COMMENT||LA428_0==NL||LA428_0==WS) ) {
								alt428=1;
							}
							} finally {dbg.exitDecision(428);}

							switch (alt428) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1281:64: ws
									{
									dbg.location(1281,64);
									pushFollow(FOLLOW_ws_in_cp_args_list9093);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(428);}

							}
							break;

					}
					} finally {dbg.exitSubRule(429);}
					dbg.location(1281,71);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1281:71: ( ( CP_DOTS | LESS_REST ) ( ws )? )?
					int alt431=2;
					try { dbg.enterSubRule(431);
					try { dbg.enterDecision(431, decisionCanBacktrack[431]);

					int LA431_0 = input.LA(1);
					if ( (LA431_0==CP_DOTS||LA431_0==LESS_REST) ) {
						alt431=1;
					}
					} finally {dbg.exitDecision(431);}

					switch (alt431) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1281:73: ( CP_DOTS | LESS_REST ) ( ws )?
							{
							dbg.location(1281,73);
							if ( input.LA(1)==CP_DOTS||input.LA(1)==LESS_REST ) {
								input.consume();
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								dbg.recognitionException(mse);
								throw mse;
							}dbg.location(1281,95);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1281:95: ( ws )?
							int alt430=2;
							try { dbg.enterSubRule(430);
							try { dbg.enterDecision(430, decisionCanBacktrack[430]);

							int LA430_0 = input.LA(1);
							if ( (LA430_0==COMMENT||LA430_0==NL||LA430_0==WS) ) {
								alt430=1;
							}
							} finally {dbg.exitDecision(430);}

							switch (alt430) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1281:95: ws
									{
									dbg.location(1281,95);
									pushFollow(FOLLOW_ws_in_cp_args_list9109);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(430);}

							}
							break;

					}
					} finally {dbg.exitSubRule(431);}

					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1283:5: ( CP_DOTS | LESS_REST ) ( ws )?
					{
					dbg.location(1283,5);
					if ( input.LA(1)==CP_DOTS||input.LA(1)==LESS_REST ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}dbg.location(1283,27);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1283:27: ( ws )?
					int alt432=2;
					try { dbg.enterSubRule(432);
					try { dbg.enterDecision(432, decisionCanBacktrack[432]);

					int LA432_0 = input.LA(1);
					if ( (LA432_0==COMMENT||LA432_0==NL||LA432_0==WS) ) {
						alt432=1;
					}
					} finally {dbg.exitDecision(432);}

					switch (alt432) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1283:27: ws
							{
							dbg.location(1283,27);
							pushFollow(FOLLOW_ws_in_cp_args_list9134);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(432);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1284, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_args_list");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_args_list"



	// $ANTLR start "cp_arg"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1287:1: cp_arg : ( cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )? |{...}? IDENT );
	public final void cp_arg() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_arg");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1287, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1288:5: ( cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )? |{...}? IDENT )
			int alt438=2;
			try { dbg.enterDecision(438, decisionCanBacktrack[438]);

			int LA438_0 = input.LA(1);
			if ( (LA438_0==AT_IDENT||(LA438_0 >= BOTTOMCENTER_SYM && LA438_0 <= BOTTOMRIGHT_SYM)||LA438_0==CHARSET_SYM||LA438_0==COUNTER_STYLE_SYM||LA438_0==FONT_FACE_SYM||LA438_0==IMPORT_SYM||(LA438_0 >= LEFTBOTTOM_SYM && LA438_0 <= LEFTTOP_SYM)||LA438_0==MEDIA_SYM||LA438_0==MOZ_DOCUMENT_SYM||LA438_0==NAMESPACE_SYM||LA438_0==PAGE_SYM||(LA438_0 >= RIGHTBOTTOM_SYM && LA438_0 <= RIGHTTOP_SYM)||(LA438_0 >= SASS_AT_ROOT && LA438_0 <= SASS_DEBUG)||(LA438_0 >= SASS_EACH && LA438_0 <= SASS_ELSE)||LA438_0==SASS_EXTEND||(LA438_0 >= SASS_FOR && LA438_0 <= SASS_FUNCTION)||(LA438_0 >= SASS_IF && LA438_0 <= SASS_MIXIN)||(LA438_0 >= SASS_RETURN && LA438_0 <= SASS_WHILE)||(LA438_0 >= TOPCENTER_SYM && LA438_0 <= TOPRIGHT_SYM)||LA438_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt438=1;
			}
			else if ( (LA438_0==IDENT) ) {
				int LA438_2 = input.LA(2);
				if ( (LA438_2==DOT) ) {
					alt438=1;
				}
				else if ( (LA438_2==COMMA||LA438_2==CP_DOTS||LA438_2==LESS_REST||LA438_2==RPAREN||LA438_2==SEMI) ) {
					alt438=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 438, 2, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 438, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(438);}

			switch (alt438) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1289:5: cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )?
					{
					dbg.location(1289,5);
					pushFollow(FOLLOW_cp_variable_in_cp_arg9157);
					cp_variable();
					state._fsp--;
					if (state.failed) return;dbg.location(1289,17);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1289:17: ( ws )?
					int alt434=2;
					try { dbg.enterSubRule(434);
					try { dbg.enterDecision(434, decisionCanBacktrack[434]);

					int LA434_0 = input.LA(1);
					if ( (LA434_0==COMMENT||LA434_0==NL||LA434_0==WS) ) {
						alt434=1;
					}
					} finally {dbg.exitDecision(434);}

					switch (alt434) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1289:17: ws
							{
							dbg.location(1289,17);
							pushFollow(FOLLOW_ws_in_cp_arg9159);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(434);}
					dbg.location(1289,21);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1289:21: ( COLON ( ws )? cp_expression ( ws )? )?
					int alt437=2;
					try { dbg.enterSubRule(437);
					try { dbg.enterDecision(437, decisionCanBacktrack[437]);

					int LA437_0 = input.LA(1);
					if ( (LA437_0==COLON) ) {
						alt437=1;
					}
					} finally {dbg.exitDecision(437);}

					switch (alt437) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1289:23: COLON ( ws )? cp_expression ( ws )?
							{
							dbg.location(1289,23);
							match(input,COLON,FOLLOW_COLON_in_cp_arg9164); if (state.failed) return;dbg.location(1289,29);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1289:29: ( ws )?
							int alt435=2;
							try { dbg.enterSubRule(435);
							try { dbg.enterDecision(435, decisionCanBacktrack[435]);

							int LA435_0 = input.LA(1);
							if ( (LA435_0==COMMENT||LA435_0==NL||LA435_0==WS) ) {
								alt435=1;
							}
							} finally {dbg.exitDecision(435);}

							switch (alt435) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1289:29: ws
									{
									dbg.location(1289,29);
									pushFollow(FOLLOW_ws_in_cp_arg9166);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(435);}
							dbg.location(1289,33);
							pushFollow(FOLLOW_cp_expression_in_cp_arg9169);
							cp_expression();
							state._fsp--;
							if (state.failed) return;dbg.location(1289,47);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1289:47: ( ws )?
							int alt436=2;
							try { dbg.enterSubRule(436);
							try { dbg.enterDecision(436, decisionCanBacktrack[436]);

							int LA436_0 = input.LA(1);
							if ( (LA436_0==COMMENT||LA436_0==NL||LA436_0==WS) ) {
								alt436=1;
							}
							} finally {dbg.exitDecision(436);}

							switch (alt436) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1289:47: ws
									{
									dbg.location(1289,47);
									pushFollow(FOLLOW_ws_in_cp_arg9171);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(436);}

							}
							break;

					}
					} finally {dbg.exitSubRule(437);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1290:7: {...}? IDENT
					{
					dbg.location(1290,7);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_arg", "isLessSource()");
					}dbg.location(1290,25);
					match(input,IDENT,FOLLOW_IDENT_in_cp_arg9184); if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1291, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_arg");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_arg"



	// $ANTLR start "less_mixin_guarded"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1295:1: less_mixin_guarded : less_when ( ws )? less_condition ( ( ws )? ( COMMA | key_and ) ( ws )? less_condition )* ;
	public final void less_mixin_guarded() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_mixin_guarded");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1295, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1296:5: ( less_when ( ws )? less_condition ( ( ws )? ( COMMA | key_and ) ( ws )? less_condition )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1297:5: less_when ( ws )? less_condition ( ( ws )? ( COMMA | key_and ) ( ws )? less_condition )*
			{
			dbg.location(1297,5);
			pushFollow(FOLLOW_less_when_in_less_mixin_guarded9207);
			less_when();
			state._fsp--;
			if (state.failed) return;dbg.location(1297,15);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1297:15: ( ws )?
			int alt439=2;
			try { dbg.enterSubRule(439);
			try { dbg.enterDecision(439, decisionCanBacktrack[439]);

			int LA439_0 = input.LA(1);
			if ( (LA439_0==COMMENT||LA439_0==NL||LA439_0==WS) ) {
				alt439=1;
			}
			} finally {dbg.exitDecision(439);}

			switch (alt439) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1297:15: ws
					{
					dbg.location(1297,15);
					pushFollow(FOLLOW_ws_in_less_mixin_guarded9209);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(439);}
			dbg.location(1297,19);
			pushFollow(FOLLOW_less_condition_in_less_mixin_guarded9212);
			less_condition();
			state._fsp--;
			if (state.failed) return;dbg.location(1297,34);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1297:34: ( ( ws )? ( COMMA | key_and ) ( ws )? less_condition )*
			try { dbg.enterSubRule(443);

			loop443:
			while (true) {
				int alt443=2;
				try { dbg.enterDecision(443, decisionCanBacktrack[443]);

				try {
					isCyclicDecision = true;
					alt443 = dfa443.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(443);}

				switch (alt443) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1297:35: ( ws )? ( COMMA | key_and ) ( ws )? less_condition
					{
					dbg.location(1297,35);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1297:35: ( ws )?
					int alt440=2;
					try { dbg.enterSubRule(440);
					try { dbg.enterDecision(440, decisionCanBacktrack[440]);

					int LA440_0 = input.LA(1);
					if ( (LA440_0==COMMENT||LA440_0==NL||LA440_0==WS) ) {
						alt440=1;
					}
					} finally {dbg.exitDecision(440);}

					switch (alt440) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1297:35: ws
							{
							dbg.location(1297,35);
							pushFollow(FOLLOW_ws_in_less_mixin_guarded9215);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(440);}
					dbg.location(1297,39);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1297:39: ( COMMA | key_and )
					int alt441=2;
					try { dbg.enterSubRule(441);
					try { dbg.enterDecision(441, decisionCanBacktrack[441]);

					int LA441_0 = input.LA(1);
					if ( (LA441_0==COMMA) ) {
						alt441=1;
					}
					else if ( (LA441_0==IDENT) ) {
						alt441=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 441, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(441);}

					switch (alt441) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1297:40: COMMA
							{
							dbg.location(1297,40);
							match(input,COMMA,FOLLOW_COMMA_in_less_mixin_guarded9219); if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1297:48: key_and
							{
							dbg.location(1297,48);
							pushFollow(FOLLOW_key_and_in_less_mixin_guarded9223);
							key_and();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(441);}
					dbg.location(1297,57);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1297:57: ( ws )?
					int alt442=2;
					try { dbg.enterSubRule(442);
					try { dbg.enterDecision(442, decisionCanBacktrack[442]);

					int LA442_0 = input.LA(1);
					if ( (LA442_0==COMMENT||LA442_0==NL||LA442_0==WS) ) {
						alt442=1;
					}
					} finally {dbg.exitDecision(442);}

					switch (alt442) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1297:57: ws
							{
							dbg.location(1297,57);
							pushFollow(FOLLOW_ws_in_less_mixin_guarded9226);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(442);}
					dbg.location(1297,61);
					pushFollow(FOLLOW_less_condition_in_less_mixin_guarded9229);
					less_condition();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop443;
				}
			}
			} finally {dbg.exitSubRule(443);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1298, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_mixin_guarded");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_mixin_guarded"



	// $ANTLR start "less_condition"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1302:1: less_condition : ( NOT ( ws )? )? LPAREN ( ws )? ( ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )? ) RPAREN ;
	public final void less_condition() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_condition");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1302, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1303:5: ( ( NOT ( ws )? )? LPAREN ( ws )? ( ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )? ) RPAREN )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1304:5: ( NOT ( ws )? )? LPAREN ( ws )? ( ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )? ) RPAREN
			{
			dbg.location(1304,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1304:5: ( NOT ( ws )? )?
			int alt445=2;
			try { dbg.enterSubRule(445);
			try { dbg.enterDecision(445, decisionCanBacktrack[445]);

			int LA445_0 = input.LA(1);
			if ( (LA445_0==NOT) ) {
				alt445=1;
			}
			} finally {dbg.exitDecision(445);}

			switch (alt445) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1304:6: NOT ( ws )?
					{
					dbg.location(1304,6);
					match(input,NOT,FOLLOW_NOT_in_less_condition9255); if (state.failed) return;dbg.location(1304,10);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1304:10: ( ws )?
					int alt444=2;
					try { dbg.enterSubRule(444);
					try { dbg.enterDecision(444, decisionCanBacktrack[444]);

					int LA444_0 = input.LA(1);
					if ( (LA444_0==COMMENT||LA444_0==NL||LA444_0==WS) ) {
						alt444=1;
					}
					} finally {dbg.exitDecision(444);}

					switch (alt444) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1304:10: ws
							{
							dbg.location(1304,10);
							pushFollow(FOLLOW_ws_in_less_condition9257);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(444);}

					}
					break;

			}
			} finally {dbg.exitSubRule(445);}
			dbg.location(1305,5);
			match(input,LPAREN,FOLLOW_LPAREN_in_less_condition9266); if (state.failed) return;dbg.location(1305,12);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1305:12: ( ws )?
			int alt446=2;
			try { dbg.enterSubRule(446);
			try { dbg.enterDecision(446, decisionCanBacktrack[446]);

			int LA446_0 = input.LA(1);
			if ( (LA446_0==COMMENT||LA446_0==NL||LA446_0==WS) ) {
				alt446=1;
			}
			} finally {dbg.exitDecision(446);}

			switch (alt446) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1305:12: ws
					{
					dbg.location(1305,12);
					pushFollow(FOLLOW_ws_in_less_condition9268);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(446);}
			dbg.location(1306,9);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1306:9: ( ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1307:14: ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )?
			{
			dbg.location(1307,14);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1307:14: ( cp_variable | less_function_in_condition )
			int alt447=2;
			try { dbg.enterSubRule(447);
			try { dbg.enterDecision(447, decisionCanBacktrack[447]);

			int LA447_0 = input.LA(1);
			if ( (LA447_0==AT_IDENT||(LA447_0 >= BOTTOMCENTER_SYM && LA447_0 <= BOTTOMRIGHT_SYM)||LA447_0==CHARSET_SYM||LA447_0==COUNTER_STYLE_SYM||LA447_0==FONT_FACE_SYM||LA447_0==IMPORT_SYM||(LA447_0 >= LEFTBOTTOM_SYM && LA447_0 <= LEFTTOP_SYM)||LA447_0==MEDIA_SYM||LA447_0==MOZ_DOCUMENT_SYM||LA447_0==NAMESPACE_SYM||LA447_0==PAGE_SYM||(LA447_0 >= RIGHTBOTTOM_SYM && LA447_0 <= RIGHTTOP_SYM)||(LA447_0 >= SASS_AT_ROOT && LA447_0 <= SASS_DEBUG)||(LA447_0 >= SASS_EACH && LA447_0 <= SASS_ELSE)||LA447_0==SASS_EXTEND||(LA447_0 >= SASS_FOR && LA447_0 <= SASS_FUNCTION)||(LA447_0 >= SASS_IF && LA447_0 <= SASS_MIXIN)||(LA447_0 >= SASS_RETURN && LA447_0 <= SASS_WHILE)||(LA447_0 >= TOPCENTER_SYM && LA447_0 <= TOPRIGHT_SYM)||LA447_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt447=1;
			}
			else if ( (LA447_0==IDENT) ) {
				int LA447_2 = input.LA(2);
				if ( (LA447_2==DOT) ) {
					alt447=1;
				}
				else if ( (LA447_2==COMMENT||LA447_2==LPAREN||LA447_2==NL||LA447_2==WS) ) {
					alt447=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 447, 2, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 447, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(447);}

			switch (alt447) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1307:15: cp_variable
					{
					dbg.location(1307,15);
					pushFollow(FOLLOW_cp_variable_in_less_condition9295);
					cp_variable();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1307:29: less_function_in_condition
					{
					dbg.location(1307,29);
					pushFollow(FOLLOW_less_function_in_condition_in_less_condition9299);
					less_function_in_condition();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(447);}
			dbg.location(1307,57);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1307:57: ( ws )?
			int alt448=2;
			try { dbg.enterSubRule(448);
			try { dbg.enterDecision(448, decisionCanBacktrack[448]);

			int LA448_0 = input.LA(1);
			if ( (LA448_0==COMMENT||LA448_0==NL||LA448_0==WS) ) {
				alt448=1;
			}
			} finally {dbg.exitDecision(448);}

			switch (alt448) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1307:57: ws
					{
					dbg.location(1307,57);
					pushFollow(FOLLOW_ws_in_less_condition9302);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(448);}
			dbg.location(1307,61);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1307:61: ( less_condition_operator ( ws )? cp_math_expression )?
			int alt450=2;
			try { dbg.enterSubRule(450);
			try { dbg.enterDecision(450, decisionCanBacktrack[450]);

			int LA450_0 = input.LA(1);
			if ( ((LA450_0 >= GREATER && LA450_0 <= GREATER_OR_EQ)||LA450_0==LESS||LA450_0==LESS_OR_EQ||LA450_0==OPEQ) ) {
				alt450=1;
			}
			} finally {dbg.exitDecision(450);}

			switch (alt450) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1307:62: less_condition_operator ( ws )? cp_math_expression
					{
					dbg.location(1307,62);
					pushFollow(FOLLOW_less_condition_operator_in_less_condition9306);
					less_condition_operator();
					state._fsp--;
					if (state.failed) return;dbg.location(1307,86);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1307:86: ( ws )?
					int alt449=2;
					try { dbg.enterSubRule(449);
					try { dbg.enterDecision(449, decisionCanBacktrack[449]);

					int LA449_0 = input.LA(1);
					if ( (LA449_0==COMMENT||LA449_0==NL||LA449_0==WS) ) {
						alt449=1;
					}
					} finally {dbg.exitDecision(449);}

					switch (alt449) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1307:86: ws
							{
							dbg.location(1307,86);
							pushFollow(FOLLOW_ws_in_less_condition9308);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(449);}
					dbg.location(1307,90);
					pushFollow(FOLLOW_cp_math_expression_in_less_condition9311);
					cp_math_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(450);}

			}
			dbg.location(1309,5);
			match(input,RPAREN,FOLLOW_RPAREN_in_less_condition9329); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1310, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_condition");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_condition"



	// $ANTLR start "less_function_in_condition"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1313:1: less_function_in_condition : less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN ;
	public final void less_function_in_condition() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_function_in_condition");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1313, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1314:5: ( less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1315:5: less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN
			{
			dbg.location(1315,5);
			pushFollow(FOLLOW_less_fn_name_in_less_function_in_condition9351);
			less_fn_name();
			state._fsp--;
			if (state.failed) return;dbg.location(1315,18);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1315:18: ( ws )?
			int alt451=2;
			try { dbg.enterSubRule(451);
			try { dbg.enterDecision(451, decisionCanBacktrack[451]);

			int LA451_0 = input.LA(1);
			if ( (LA451_0==COMMENT||LA451_0==NL||LA451_0==WS) ) {
				alt451=1;
			}
			} finally {dbg.exitDecision(451);}

			switch (alt451) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1315:18: ws
					{
					dbg.location(1315,18);
					pushFollow(FOLLOW_ws_in_less_function_in_condition9353);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(451);}
			dbg.location(1315,22);
			match(input,LPAREN,FOLLOW_LPAREN_in_less_function_in_condition9356); if (state.failed) return;dbg.location(1315,29);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1315:29: ( ws )?
			int alt452=2;
			try { dbg.enterSubRule(452);
			try { dbg.enterDecision(452, decisionCanBacktrack[452]);

			int LA452_0 = input.LA(1);
			if ( (LA452_0==COMMENT||LA452_0==NL||LA452_0==WS) ) {
				alt452=1;
			}
			} finally {dbg.exitDecision(452);}

			switch (alt452) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1315:29: ws
					{
					dbg.location(1315,29);
					pushFollow(FOLLOW_ws_in_less_function_in_condition9358);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(452);}
			dbg.location(1315,33);
			pushFollow(FOLLOW_cp_variable_in_less_function_in_condition9361);
			cp_variable();
			state._fsp--;
			if (state.failed) return;dbg.location(1315,45);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1315:45: ( ws )?
			int alt453=2;
			try { dbg.enterSubRule(453);
			try { dbg.enterDecision(453, decisionCanBacktrack[453]);

			int LA453_0 = input.LA(1);
			if ( (LA453_0==COMMENT||LA453_0==NL||LA453_0==WS) ) {
				alt453=1;
			}
			} finally {dbg.exitDecision(453);}

			switch (alt453) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1315:45: ws
					{
					dbg.location(1315,45);
					pushFollow(FOLLOW_ws_in_less_function_in_condition9363);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(453);}
			dbg.location(1315,49);
			match(input,RPAREN,FOLLOW_RPAREN_in_less_function_in_condition9366); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1316, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_function_in_condition");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_function_in_condition"



	// $ANTLR start "less_fn_name"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1319:1: less_fn_name : IDENT ;
	public final void less_fn_name() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_fn_name");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1319, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1320:5: ( IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1321:5: IDENT
			{
			dbg.location(1321,5);
			match(input,IDENT,FOLLOW_IDENT_in_less_fn_name9388); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1322, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_fn_name");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_fn_name"



	// $ANTLR start "less_condition_operator"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1324:1: less_condition_operator : ( GREATER | GREATER_OR_EQ | OPEQ | LESS | LESS_OR_EQ );
	public final void less_condition_operator() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_condition_operator");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1324, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1325:5: ( GREATER | GREATER_OR_EQ | OPEQ | LESS | LESS_OR_EQ )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(1325,5);
			if ( (input.LA(1) >= GREATER && input.LA(1) <= GREATER_OR_EQ)||input.LA(1)==LESS||input.LA(1)==LESS_OR_EQ||input.LA(1)==OPEQ ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1327, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_condition_operator");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_condition_operator"



	// $ANTLR start "less_selector_interpolation_exp"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1329:1: less_selector_interpolation_exp : ( IDENT | MINUS )? less_selector_interpolation ( less_selector_interpolation_exp | ( IDENT | MINUS | DIMENSION | LENGTH )+ )? ;
	public final void less_selector_interpolation_exp() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_selector_interpolation_exp");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1329, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1329:33: ( ( IDENT | MINUS )? less_selector_interpolation ( less_selector_interpolation_exp | ( IDENT | MINUS | DIMENSION | LENGTH )+ )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1330:5: ( IDENT | MINUS )? less_selector_interpolation ( less_selector_interpolation_exp | ( IDENT | MINUS | DIMENSION | LENGTH )+ )?
			{
			dbg.location(1330,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1330:5: ( IDENT | MINUS )?
			int alt454=2;
			try { dbg.enterSubRule(454);
			try { dbg.enterDecision(454, decisionCanBacktrack[454]);

			int LA454_0 = input.LA(1);
			if ( (LA454_0==IDENT||LA454_0==MINUS) ) {
				alt454=1;
			}
			} finally {dbg.exitDecision(454);}

			switch (alt454) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
					{
					dbg.location(1330,5);
					if ( input.LA(1)==IDENT||input.LA(1)==MINUS ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}
					}
					break;

			}
			} finally {dbg.exitSubRule(454);}
			dbg.location(1330,22);
			pushFollow(FOLLOW_less_selector_interpolation_in_less_selector_interpolation_exp9451);
			less_selector_interpolation();
			state._fsp--;
			if (state.failed) return;dbg.location(1330,50);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1330:50: ( less_selector_interpolation_exp | ( IDENT | MINUS | DIMENSION | LENGTH )+ )?
			int alt456=3;
			try { dbg.enterSubRule(456);
			try { dbg.enterDecision(456, decisionCanBacktrack[456]);

			switch ( input.LA(1) ) {
				case IDENT:
				case MINUS:
					{
					int LA456_1 = input.LA(2);
					if ( (LA456_1==AT_SIGN) ) {
						alt456=1;
					}
					else if ( ((LA456_1 >= COLON && LA456_1 <= COMMENT)||(LA456_1 >= DCOLON && LA456_1 <= DOT)||LA456_1==GREATER||(LA456_1 >= HASH && LA456_1 <= HASH_SYMBOL)||LA456_1==IDENT||(LA456_1 >= LBRACE && LA456_1 <= LBRACKET)||LA456_1==LENGTH||LA456_1==LESS_AND||LA456_1==MINUS||LA456_1==NL||LA456_1==PLUS||LA456_1==RBRACE||LA456_1==RPAREN||LA456_1==SASS_EXTEND_ONLY_SELECTOR||LA456_1==SEMI||LA456_1==TILDE||LA456_1==WS) ) {
						alt456=2;
					}
					}
					break;
				case AT_SIGN:
					{
					alt456=1;
					}
					break;
				case DIMENSION:
					{
					int LA456_3 = input.LA(2);
					if ( (!(evalPredicate(evalPredicate(tokenNameStartsWith("."),"tokenNameStartsWith(\".\")"),""))) ) {
						alt456=2;
					}
					}
					break;
				case LENGTH:
					{
					alt456=2;
					}
					break;
			}
			} finally {dbg.exitDecision(456);}

			switch (alt456) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1330:51: less_selector_interpolation_exp
					{
					dbg.location(1330,51);
					pushFollow(FOLLOW_less_selector_interpolation_exp_in_less_selector_interpolation_exp9454);
					less_selector_interpolation_exp();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1330:85: ( IDENT | MINUS | DIMENSION | LENGTH )+
					{
					dbg.location(1330,85);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1330:85: ( IDENT | MINUS | DIMENSION | LENGTH )+
					int cnt455=0;
					try { dbg.enterSubRule(455);

					loop455:
					while (true) {
						int alt455=2;
						try { dbg.enterDecision(455, decisionCanBacktrack[455]);

						int LA455_0 = input.LA(1);
						if ( (LA455_0==DIMENSION) ) {
							int LA455_2 = input.LA(2);
							if ( (!(evalPredicate(evalPredicate(tokenNameStartsWith("."),"tokenNameStartsWith(\".\")"),""))) ) {
								alt455=1;
							}

						}
						else if ( (LA455_0==IDENT||LA455_0==LENGTH||LA455_0==MINUS) ) {
							alt455=1;
						}

						} finally {dbg.exitDecision(455);}

						switch (alt455) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
							{
							dbg.location(1330,85);
							if ( input.LA(1)==DIMENSION||input.LA(1)==IDENT||input.LA(1)==LENGTH||input.LA(1)==MINUS ) {
								input.consume();
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								dbg.recognitionException(mse);
								throw mse;
							}
							}
							break;

						default :
							if ( cnt455 >= 1 ) break loop455;
							if (state.backtracking>0) {state.failed=true; return;}
							EarlyExitException eee = new EarlyExitException(455, input);
							dbg.recognitionException(eee);

							throw eee;
						}
						cnt455++;
					}
					} finally {dbg.exitSubRule(455);}

					}
					break;

			}
			} finally {dbg.exitSubRule(456);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1331, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_selector_interpolation_exp");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_selector_interpolation_exp"



	// $ANTLR start "less_selector_interpolation"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1333:1: less_selector_interpolation : AT_SIGN LBRACE ( ws )? IDENT ( ws )? RBRACE ;
	public final void less_selector_interpolation() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_selector_interpolation");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1333, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1334:5: ( AT_SIGN LBRACE ( ws )? IDENT ( ws )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1335:5: AT_SIGN LBRACE ( ws )? IDENT ( ws )? RBRACE
			{
			dbg.location(1335,5);
			match(input,AT_SIGN,FOLLOW_AT_SIGN_in_less_selector_interpolation9497); if (state.failed) return;dbg.location(1335,13);
			match(input,LBRACE,FOLLOW_LBRACE_in_less_selector_interpolation9499); if (state.failed) return;dbg.location(1335,20);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1335:20: ( ws )?
			int alt457=2;
			try { dbg.enterSubRule(457);
			try { dbg.enterDecision(457, decisionCanBacktrack[457]);

			int LA457_0 = input.LA(1);
			if ( (LA457_0==COMMENT||LA457_0==NL||LA457_0==WS) ) {
				alt457=1;
			}
			} finally {dbg.exitDecision(457);}

			switch (alt457) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1335:20: ws
					{
					dbg.location(1335,20);
					pushFollow(FOLLOW_ws_in_less_selector_interpolation9501);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(457);}
			dbg.location(1335,24);
			match(input,IDENT,FOLLOW_IDENT_in_less_selector_interpolation9504); if (state.failed) return;dbg.location(1335,30);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1335:30: ( ws )?
			int alt458=2;
			try { dbg.enterSubRule(458);
			try { dbg.enterDecision(458, decisionCanBacktrack[458]);

			int LA458_0 = input.LA(1);
			if ( (LA458_0==COMMENT||LA458_0==NL||LA458_0==WS) ) {
				alt458=1;
			}
			} finally {dbg.exitDecision(458);}

			switch (alt458) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1335:30: ws
					{
					dbg.location(1335,30);
					pushFollow(FOLLOW_ws_in_less_selector_interpolation9506);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(458);}
			dbg.location(1335,34);
			match(input,RBRACE,FOLLOW_RBRACE_in_less_selector_interpolation9509); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1336, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_selector_interpolation");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_selector_interpolation"



	// $ANTLR start "sass_selector_interpolation_exp"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1339:1: sass_selector_interpolation_exp : ( IDENT | MINUS )? sass_interpolation_expression_var ( sass_selector_interpolation_exp | ( IDENT | MINUS | DIMENSION | LENGTH )+ )? ;
	public final void sass_selector_interpolation_exp() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_selector_interpolation_exp");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1339, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1339:33: ( ( IDENT | MINUS )? sass_interpolation_expression_var ( sass_selector_interpolation_exp | ( IDENT | MINUS | DIMENSION | LENGTH )+ )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1340:5: ( IDENT | MINUS )? sass_interpolation_expression_var ( sass_selector_interpolation_exp | ( IDENT | MINUS | DIMENSION | LENGTH )+ )?
			{
			dbg.location(1340,5);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1340:5: ( IDENT | MINUS )?
			int alt459=2;
			try { dbg.enterSubRule(459);
			try { dbg.enterDecision(459, decisionCanBacktrack[459]);

			int LA459_0 = input.LA(1);
			if ( (LA459_0==IDENT||LA459_0==MINUS) ) {
				alt459=1;
			}
			} finally {dbg.exitDecision(459);}

			switch (alt459) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
					{
					dbg.location(1340,5);
					if ( input.LA(1)==IDENT||input.LA(1)==MINUS ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}
					}
					break;

			}
			} finally {dbg.exitSubRule(459);}
			dbg.location(1340,22);
			pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_exp9536);
			sass_interpolation_expression_var();
			state._fsp--;
			if (state.failed) return;dbg.location(1340,56);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1340:56: ( sass_selector_interpolation_exp | ( IDENT | MINUS | DIMENSION | LENGTH )+ )?
			int alt461=3;
			try { dbg.enterSubRule(461);
			try { dbg.enterDecision(461, decisionCanBacktrack[461]);

			switch ( input.LA(1) ) {
				case IDENT:
				case MINUS:
					{
					int LA461_1 = input.LA(2);
					if ( (LA461_1==HASH_SYMBOL) ) {
						int LA461_6 = input.LA(3);
						if ( (LA461_6==LBRACE) ) {
							alt461=1;
						}
						else if ( (LA461_6==AT_SIGN||LA461_6==IDENT||LA461_6==MINUS||LA461_6==NAME) ) {
							alt461=2;
						}
					}
					else if ( ((LA461_1 >= COLON && LA461_1 <= COMMENT)||(LA461_1 >= DCOLON && LA461_1 <= DOT)||LA461_1==GREATER||LA461_1==HASH||LA461_1==IDENT||(LA461_1 >= LBRACE && LA461_1 <= LBRACKET)||LA461_1==LENGTH||LA461_1==LESS_AND||LA461_1==MINUS||LA461_1==NL||LA461_1==PLUS||LA461_1==RBRACE||LA461_1==RPAREN||LA461_1==SASS_EXTEND_ONLY_SELECTOR||LA461_1==SEMI||LA461_1==TILDE||LA461_1==WS) ) {
						alt461=2;
					}
					}
					break;
				case HASH_SYMBOL:
					{
					int LA461_2 = input.LA(2);
					if ( (LA461_2==LBRACE) ) {
						alt461=1;
					}
					}
					break;
				case DIMENSION:
					{
					int LA461_3 = input.LA(2);
					if ( (!(evalPredicate(evalPredicate(tokenNameStartsWith("."),"tokenNameStartsWith(\".\")"),""))) ) {
						alt461=2;
					}
					}
					break;
				case LENGTH:
					{
					alt461=2;
					}
					break;
			}
			} finally {dbg.exitDecision(461);}

			switch (alt461) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1340:57: sass_selector_interpolation_exp
					{
					dbg.location(1340,57);
					pushFollow(FOLLOW_sass_selector_interpolation_exp_in_sass_selector_interpolation_exp9539);
					sass_selector_interpolation_exp();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1340:91: ( IDENT | MINUS | DIMENSION | LENGTH )+
					{
					dbg.location(1340,91);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1340:91: ( IDENT | MINUS | DIMENSION | LENGTH )+
					int cnt460=0;
					try { dbg.enterSubRule(460);

					loop460:
					while (true) {
						int alt460=2;
						try { dbg.enterDecision(460, decisionCanBacktrack[460]);

						int LA460_0 = input.LA(1);
						if ( (LA460_0==DIMENSION) ) {
							int LA460_2 = input.LA(2);
							if ( (!(evalPredicate(evalPredicate(tokenNameStartsWith("."),"tokenNameStartsWith(\".\")"),""))) ) {
								alt460=1;
							}

						}
						else if ( (LA460_0==IDENT||LA460_0==LENGTH||LA460_0==MINUS) ) {
							alt460=1;
						}

						} finally {dbg.exitDecision(460);}

						switch (alt460) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
							{
							dbg.location(1340,91);
							if ( input.LA(1)==DIMENSION||input.LA(1)==IDENT||input.LA(1)==LENGTH||input.LA(1)==MINUS ) {
								input.consume();
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								dbg.recognitionException(mse);
								throw mse;
							}
							}
							break;

						default :
							if ( cnt460 >= 1 ) break loop460;
							if (state.backtracking>0) {state.failed=true; return;}
							EarlyExitException eee = new EarlyExitException(460, input);
							dbg.recognitionException(eee);

							throw eee;
						}
						cnt460++;
					}
					} finally {dbg.exitSubRule(460);}

					}
					break;

			}
			} finally {dbg.exitSubRule(461);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1341, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_selector_interpolation_exp");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_selector_interpolation_exp"



	// $ANTLR start "sass_interpolation_expression_var"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1343:1: sass_interpolation_expression_var : HASH_SYMBOL LBRACE ( WS )? cp_expression ( WS )? RBRACE ;
	public final void sass_interpolation_expression_var() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_interpolation_expression_var");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1343, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1344:5: ( HASH_SYMBOL LBRACE ( WS )? cp_expression ( WS )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1345:9: HASH_SYMBOL LBRACE ( WS )? cp_expression ( WS )? RBRACE
			{
			dbg.location(1345,9);
			match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_sass_interpolation_expression_var9586); if (state.failed) return;dbg.location(1345,21);
			match(input,LBRACE,FOLLOW_LBRACE_in_sass_interpolation_expression_var9588); if (state.failed) return;dbg.location(1345,28);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1345:28: ( WS )?
			int alt462=2;
			try { dbg.enterSubRule(462);
			try { dbg.enterDecision(462, decisionCanBacktrack[462]);

			int LA462_0 = input.LA(1);
			if ( (LA462_0==WS) ) {
				alt462=1;
			}
			} finally {dbg.exitDecision(462);}

			switch (alt462) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1345:28: WS
					{
					dbg.location(1345,28);
					match(input,WS,FOLLOW_WS_in_sass_interpolation_expression_var9590); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(462);}
			dbg.location(1345,32);
			pushFollow(FOLLOW_cp_expression_in_sass_interpolation_expression_var9593);
			cp_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(1345,46);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1345:46: ( WS )?
			int alt463=2;
			try { dbg.enterSubRule(463);
			try { dbg.enterDecision(463, decisionCanBacktrack[463]);

			int LA463_0 = input.LA(1);
			if ( (LA463_0==WS) ) {
				alt463=1;
			}
			} finally {dbg.exitDecision(463);}

			switch (alt463) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1345:46: WS
					{
					dbg.location(1345,46);
					match(input,WS,FOLLOW_WS_in_sass_interpolation_expression_var9595); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(463);}
			dbg.location(1345,50);
			match(input,RBRACE,FOLLOW_RBRACE_in_sass_interpolation_expression_var9598); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1346, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_interpolation_expression_var");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_interpolation_expression_var"



	// $ANTLR start "sass_nested_properties"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1366:1: sass_nested_properties : property ( ws )? COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
	public final void sass_nested_properties() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_nested_properties");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1366, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1367:5: ( property ( ws )? COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1368:5: property ( ws )? COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
			{
			dbg.location(1368,5);
			pushFollow(FOLLOW_property_in_sass_nested_properties9638);
			property();
			state._fsp--;
			if (state.failed) return;dbg.location(1368,14);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1368:14: ( ws )?
			int alt464=2;
			try { dbg.enterSubRule(464);
			try { dbg.enterDecision(464, decisionCanBacktrack[464]);

			int LA464_0 = input.LA(1);
			if ( (LA464_0==COMMENT||LA464_0==NL||LA464_0==WS) ) {
				alt464=1;
			}
			} finally {dbg.exitDecision(464);}

			switch (alt464) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1368:14: ws
					{
					dbg.location(1368,14);
					pushFollow(FOLLOW_ws_in_sass_nested_properties9640);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(464);}
			dbg.location(1368,18);
			match(input,COLON,FOLLOW_COLON_in_sass_nested_properties9643); if (state.failed) return;dbg.location(1368,24);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1368:24: ( ws )?
			int alt465=2;
			try { dbg.enterSubRule(465);
			try { dbg.enterDecision(465, decisionCanBacktrack[465]);

			int LA465_0 = input.LA(1);
			if ( (LA465_0==COMMENT||LA465_0==NL||LA465_0==WS) ) {
				alt465=1;
			}
			} finally {dbg.exitDecision(465);}

			switch (alt465) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1368:24: ws
					{
					dbg.location(1368,24);
					pushFollow(FOLLOW_ws_in_sass_nested_properties9645);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(465);}
			dbg.location(1368,28);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1368:28: ( propertyValue ( ws )? )?
			int alt467=2;
			try { dbg.enterSubRule(467);
			try { dbg.enterDecision(467, decisionCanBacktrack[467]);

			int LA467_0 = input.LA(1);
			if ( ((LA467_0 >= ANGLE && LA467_0 <= AT_SIGN)||(LA467_0 >= BOTTOMCENTER_SYM && LA467_0 <= BOTTOMRIGHT_SYM)||LA467_0==CHARSET_SYM||LA467_0==COUNTER_STYLE_SYM||LA467_0==DIMENSION||LA467_0==EMS||LA467_0==EXS||(LA467_0 >= FONT_FACE_SYM && LA467_0 <= FREQ)||LA467_0==GEN||(LA467_0 >= HASH && LA467_0 <= HASH_SYMBOL)||LA467_0==IDENT||LA467_0==IMPORT_SYM||(LA467_0 >= LBRACKET && LA467_0 <= LENGTH)||(LA467_0 >= LESS_AND && LA467_0 <= LESS_JS_STRING)||(LA467_0 >= MEDIA_SYM && LA467_0 <= MOZ_DOCUMENT_SYM)||LA467_0==NAMESPACE_SYM||LA467_0==NUMBER||(LA467_0 >= PAGE_SYM && LA467_0 <= PERCENTAGE_SYMBOL)||LA467_0==PLUS||(LA467_0 >= REM && LA467_0 <= RIGHTTOP_SYM)||(LA467_0 >= SASS_AT_ROOT && LA467_0 <= SASS_DEBUG)||(LA467_0 >= SASS_EACH && LA467_0 <= SASS_ELSE)||LA467_0==SASS_EXTEND||(LA467_0 >= SASS_FOR && LA467_0 <= SASS_FUNCTION)||(LA467_0 >= SASS_IF && LA467_0 <= SASS_MIXIN)||(LA467_0 >= SASS_RETURN && LA467_0 <= SASS_WHILE)||LA467_0==STRING||(LA467_0 >= TILDE && LA467_0 <= TOPRIGHT_SYM)||(LA467_0 >= URANGE && LA467_0 <= URI)||LA467_0==VARIABLE||LA467_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt467=1;
			}
			} finally {dbg.exitDecision(467);}

			switch (alt467) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1368:29: propertyValue ( ws )?
					{
					dbg.location(1368,29);
					pushFollow(FOLLOW_propertyValue_in_sass_nested_properties9649);
					propertyValue();
					state._fsp--;
					if (state.failed) return;dbg.location(1368,43);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1368:43: ( ws )?
					int alt466=2;
					try { dbg.enterSubRule(466);
					try { dbg.enterDecision(466, decisionCanBacktrack[466]);

					int LA466_0 = input.LA(1);
					if ( (LA466_0==COMMENT||LA466_0==NL||LA466_0==WS) ) {
						alt466=1;
					}
					} finally {dbg.exitDecision(466);}

					switch (alt466) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1368:43: ws
							{
							dbg.location(1368,43);
							pushFollow(FOLLOW_ws_in_sass_nested_properties9651);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(466);}

					}
					break;

			}
			} finally {dbg.exitSubRule(467);}
			dbg.location(1368,49);
			match(input,LBRACE,FOLLOW_LBRACE_in_sass_nested_properties9656); if (state.failed) return;dbg.location(1368,56);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1368:56: ( ws )?
			int alt468=2;
			try { dbg.enterSubRule(468);
			try { dbg.enterDecision(468, decisionCanBacktrack[468]);

			int LA468_0 = input.LA(1);
			if ( (LA468_0==COMMENT||LA468_0==NL||LA468_0==WS) ) {
				alt468=1;
			}
			} finally {dbg.exitDecision(468);}

			switch (alt468) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1368:56: ws
					{
					dbg.location(1368,56);
					pushFollow(FOLLOW_ws_in_sass_nested_properties9658);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(468);}
			dbg.location(1368,60);
			pushFollow(FOLLOW_syncToFollow_in_sass_nested_properties9661);
			syncToFollow();
			state._fsp--;
			if (state.failed) return;dbg.location(1368,73);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1368:73: ( declarations )?
			int alt469=2;
			try { dbg.enterSubRule(469);
			try { dbg.enterDecision(469, decisionCanBacktrack[469]);

			int LA469_0 = input.LA(1);
			if ( ((LA469_0 >= AT_IDENT && LA469_0 <= AT_SIGN)||(LA469_0 >= BOTTOMCENTER_SYM && LA469_0 <= BOTTOMRIGHT_SYM)||(LA469_0 >= CHARSET_SYM && LA469_0 <= COLON)||LA469_0==COUNTER_STYLE_SYM||(LA469_0 >= DCOLON && LA469_0 <= DOT)||LA469_0==FONT_FACE_SYM||(LA469_0 >= GEN && LA469_0 <= GREATER)||(LA469_0 >= HASH && LA469_0 <= HASH_SYMBOL)||LA469_0==IDENT||LA469_0==IMPORT_SYM||LA469_0==LAYER_SYM||(LA469_0 >= LBRACKET && LA469_0 <= LEFTTOP_SYM)||LA469_0==LESS_AND||(LA469_0 >= MEDIA_SYM && LA469_0 <= MOZ_DOCUMENT_SYM)||LA469_0==NAMESPACE_SYM||LA469_0==PAGE_SYM||(LA469_0 >= PIPE && LA469_0 <= PLUS)||(LA469_0 >= RIGHTBOTTOM_SYM && LA469_0 <= RIGHTTOP_SYM)||(LA469_0 >= SASS_AT_ROOT && LA469_0 <= SASS_DEBUG)||(LA469_0 >= SASS_EACH && LA469_0 <= SASS_ELSE)||(LA469_0 >= SASS_ERROR && LA469_0 <= SASS_FUNCTION)||(LA469_0 >= SASS_IF && LA469_0 <= SASS_MIXIN)||(LA469_0 >= SASS_RETURN && LA469_0 <= SEMI)||LA469_0==STAR||LA469_0==SUPPORTS_SYM||LA469_0==TILDE||(LA469_0 >= TOPCENTER_SYM && LA469_0 <= TOPRIGHT_SYM)||LA469_0==VARIABLE||LA469_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt469=1;
			}
			} finally {dbg.exitDecision(469);}

			switch (alt469) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1368:73: declarations
					{
					dbg.location(1368,73);
					pushFollow(FOLLOW_declarations_in_sass_nested_properties9663);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(469);}
			dbg.location(1368,87);
			match(input,RBRACE,FOLLOW_RBRACE_in_sass_nested_properties9666); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1369, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_nested_properties");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_nested_properties"



	// $ANTLR start "sass_extend"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1371:1: sass_extend : SASS_EXTEND ws simpleSelectorSequence ( ( ws )? COMMA ( ws )? simpleSelectorSequence )* ( ws SASS_OPTIONAL )? ;
	public final void sass_extend() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_extend");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1371, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1372:5: ( SASS_EXTEND ws simpleSelectorSequence ( ( ws )? COMMA ( ws )? simpleSelectorSequence )* ( ws SASS_OPTIONAL )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1373:5: SASS_EXTEND ws simpleSelectorSequence ( ( ws )? COMMA ( ws )? simpleSelectorSequence )* ( ws SASS_OPTIONAL )?
			{
			dbg.location(1373,5);
			match(input,SASS_EXTEND,FOLLOW_SASS_EXTEND_in_sass_extend9687); if (state.failed) return;dbg.location(1373,17);
			pushFollow(FOLLOW_ws_in_sass_extend9689);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1373,20);
			pushFollow(FOLLOW_simpleSelectorSequence_in_sass_extend9691);
			simpleSelectorSequence();
			state._fsp--;
			if (state.failed) return;dbg.location(1373,43);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1373:43: ( ( ws )? COMMA ( ws )? simpleSelectorSequence )*
			try { dbg.enterSubRule(472);

			loop472:
			while (true) {
				int alt472=2;
				try { dbg.enterDecision(472, decisionCanBacktrack[472]);

				try {
					isCyclicDecision = true;
					alt472 = dfa472.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(472);}

				switch (alt472) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1373:44: ( ws )? COMMA ( ws )? simpleSelectorSequence
					{
					dbg.location(1373,44);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1373:44: ( ws )?
					int alt470=2;
					try { dbg.enterSubRule(470);
					try { dbg.enterDecision(470, decisionCanBacktrack[470]);

					int LA470_0 = input.LA(1);
					if ( (LA470_0==COMMENT||LA470_0==NL||LA470_0==WS) ) {
						alt470=1;
					}
					} finally {dbg.exitDecision(470);}

					switch (alt470) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1373:44: ws
							{
							dbg.location(1373,44);
							pushFollow(FOLLOW_ws_in_sass_extend9694);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(470);}
					dbg.location(1373,48);
					match(input,COMMA,FOLLOW_COMMA_in_sass_extend9697); if (state.failed) return;dbg.location(1373,54);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1373:54: ( ws )?
					int alt471=2;
					try { dbg.enterSubRule(471);
					try { dbg.enterDecision(471, decisionCanBacktrack[471]);

					int LA471_0 = input.LA(1);
					if ( (LA471_0==COMMENT||LA471_0==NL||LA471_0==WS) ) {
						alt471=1;
					}
					} finally {dbg.exitDecision(471);}

					switch (alt471) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1373:54: ws
							{
							dbg.location(1373,54);
							pushFollow(FOLLOW_ws_in_sass_extend9699);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(471);}
					dbg.location(1373,58);
					pushFollow(FOLLOW_simpleSelectorSequence_in_sass_extend9702);
					simpleSelectorSequence();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop472;
				}
			}
			} finally {dbg.exitSubRule(472);}
			dbg.location(1373,83);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1373:83: ( ws SASS_OPTIONAL )?
			int alt473=2;
			try { dbg.enterSubRule(473);
			try { dbg.enterDecision(473, decisionCanBacktrack[473]);

			try {
				isCyclicDecision = true;
				alt473 = dfa473.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(473);}

			switch (alt473) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1373:84: ws SASS_OPTIONAL
					{
					dbg.location(1373,84);
					pushFollow(FOLLOW_ws_in_sass_extend9707);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(1373,87);
					match(input,SASS_OPTIONAL,FOLLOW_SASS_OPTIONAL_in_sass_extend9709); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(473);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1374, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_extend");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_extend"



	// $ANTLR start "sass_extend_only_selector"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1376:1: sass_extend_only_selector : SASS_EXTEND_ONLY_SELECTOR ( sass_selector_interpolation_exp )? ;
	public final void sass_extend_only_selector() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_extend_only_selector");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1376, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1377:5: ( SASS_EXTEND_ONLY_SELECTOR ( sass_selector_interpolation_exp )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1378:5: SASS_EXTEND_ONLY_SELECTOR ( sass_selector_interpolation_exp )?
			{
			dbg.location(1378,5);
			match(input,SASS_EXTEND_ONLY_SELECTOR,FOLLOW_SASS_EXTEND_ONLY_SELECTOR_in_sass_extend_only_selector9732); if (state.failed) return;dbg.location(1378,31);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1378:31: ( sass_selector_interpolation_exp )?
			int alt474=2;
			try { dbg.enterSubRule(474);
			try { dbg.enterDecision(474, decisionCanBacktrack[474]);

			int LA474_0 = input.LA(1);
			if ( (LA474_0==IDENT||LA474_0==MINUS) ) {
				alt474=1;
			}
			else if ( (LA474_0==HASH_SYMBOL) ) {
				int LA474_2 = input.LA(2);
				if ( (LA474_2==LBRACE) ) {
					alt474=1;
				}
			}
			} finally {dbg.exitDecision(474);}

			switch (alt474) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1378:31: sass_selector_interpolation_exp
					{
					dbg.location(1378,31);
					pushFollow(FOLLOW_sass_selector_interpolation_exp_in_sass_extend_only_selector9734);
					sass_selector_interpolation_exp();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(474);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1379, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_extend_only_selector");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_extend_only_selector"



	// $ANTLR start "sass_debug"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1381:1: sass_debug : ( SASS_DEBUG | SASS_WARN ) ws cp_expression ;
	public final void sass_debug() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_debug");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1381, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1382:5: ( ( SASS_DEBUG | SASS_WARN ) ws cp_expression )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1383:5: ( SASS_DEBUG | SASS_WARN ) ws cp_expression
			{
			dbg.location(1383,5);
			if ( input.LA(1)==SASS_DEBUG||input.LA(1)==SASS_WARN ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}dbg.location(1383,32);
			pushFollow(FOLLOW_ws_in_sass_debug9766);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1383,35);
			pushFollow(FOLLOW_cp_expression_in_sass_debug9768);
			cp_expression();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1384, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_debug");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_debug"



	// $ANTLR start "sass_error"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1386:1: sass_error : SASS_ERROR ws STRING ;
	public final void sass_error() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_error");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1386, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1387:5: ( SASS_ERROR ws STRING )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1388:5: SASS_ERROR ws STRING
			{
			dbg.location(1388,5);
			match(input,SASS_ERROR,FOLLOW_SASS_ERROR_in_sass_error9789); if (state.failed) return;dbg.location(1388,16);
			pushFollow(FOLLOW_ws_in_sass_error9791);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1388,19);
			match(input,STRING,FOLLOW_STRING_in_sass_error9793); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1389, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_error");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_error"



	// $ANTLR start "sass_control"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1391:1: sass_control : ( sass_if | sass_for | sass_each | sass_while );
	public final void sass_control() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_control");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1391, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1392:5: ( sass_if | sass_for | sass_each | sass_while )
			int alt475=4;
			try { dbg.enterDecision(475, decisionCanBacktrack[475]);

			switch ( input.LA(1) ) {
			case SASS_IF:
				{
				alt475=1;
				}
				break;
			case SASS_FOR:
				{
				alt475=2;
				}
				break;
			case SASS_EACH:
				{
				alt475=3;
				}
				break;
			case SASS_WHILE:
				{
				alt475=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 475, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(475);}

			switch (alt475) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1393:5: sass_if
					{
					dbg.location(1393,5);
					pushFollow(FOLLOW_sass_if_in_sass_control9814);
					sass_if();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1393:15: sass_for
					{
					dbg.location(1393,15);
					pushFollow(FOLLOW_sass_for_in_sass_control9818);
					sass_for();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1393:26: sass_each
					{
					dbg.location(1393,26);
					pushFollow(FOLLOW_sass_each_in_sass_control9822);
					sass_each();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1393:38: sass_while
					{
					dbg.location(1393,38);
					pushFollow(FOLLOW_sass_while_in_sass_control9826);
					sass_while();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1394, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_control");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_control"



	// $ANTLR start "sass_if"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1396:1: sass_if : SASS_IF ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? ;
	public final void sass_if() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_if");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1396, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1397:5: ( SASS_IF ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1398:5: SASS_IF ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )?
			{
			dbg.location(1398,5);
			match(input,SASS_IF,FOLLOW_SASS_IF_in_sass_if9847); if (state.failed) return;dbg.location(1398,13);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1398:13: ( ws )?
			int alt476=2;
			try { dbg.enterSubRule(476);
			try { dbg.enterDecision(476, decisionCanBacktrack[476]);

			int LA476_0 = input.LA(1);
			if ( (LA476_0==COMMENT||LA476_0==NL||LA476_0==WS) ) {
				alt476=1;
			}
			} finally {dbg.exitDecision(476);}

			switch (alt476) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1398:13: ws
					{
					dbg.location(1398,13);
					pushFollow(FOLLOW_ws_in_sass_if9849);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(476);}
			dbg.location(1398,17);
			pushFollow(FOLLOW_sass_control_expression_in_sass_if9852);
			sass_control_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(1398,41);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1398:41: ( ws )?
			int alt477=2;
			try { dbg.enterSubRule(477);
			try { dbg.enterDecision(477, decisionCanBacktrack[477]);

			int LA477_0 = input.LA(1);
			if ( (LA477_0==COMMENT||LA477_0==NL||LA477_0==WS) ) {
				alt477=1;
			}
			} finally {dbg.exitDecision(477);}

			switch (alt477) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1398:41: ws
					{
					dbg.location(1398,41);
					pushFollow(FOLLOW_ws_in_sass_if9854);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(477);}
			dbg.location(1398,45);
			pushFollow(FOLLOW_sass_control_block_in_sass_if9857);
			sass_control_block();
			state._fsp--;
			if (state.failed) return;dbg.location(1398,64);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1398:64: ( ( ws )? sass_else )?
			int alt479=2;
			try { dbg.enterSubRule(479);
			try { dbg.enterDecision(479, decisionCanBacktrack[479]);

			try {
				isCyclicDecision = true;
				alt479 = dfa479.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(479);}

			switch (alt479) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1398:65: ( ws )? sass_else
					{
					dbg.location(1398,65);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1398:65: ( ws )?
					int alt478=2;
					try { dbg.enterSubRule(478);
					try { dbg.enterDecision(478, decisionCanBacktrack[478]);

					int LA478_0 = input.LA(1);
					if ( (LA478_0==COMMENT||LA478_0==NL||LA478_0==WS) ) {
						alt478=1;
					}
					} finally {dbg.exitDecision(478);}

					switch (alt478) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1398:65: ws
							{
							dbg.location(1398,65);
							pushFollow(FOLLOW_ws_in_sass_if9860);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(478);}
					dbg.location(1398,69);
					pushFollow(FOLLOW_sass_else_in_sass_if9863);
					sass_else();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(479);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1399, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_if");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_if"



	// $ANTLR start "sass_else"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1401:1: sass_else : ( SASS_ELSE ( ws )? sass_control_block | ( ( SASS_ELSE ( ws )? {...}? IDENT ) | SASS_ELSEIF ) ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? );
	public final void sass_else() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_else");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1401, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1402:5: ( SASS_ELSE ( ws )? sass_control_block | ( ( SASS_ELSE ( ws )? {...}? IDENT ) | SASS_ELSEIF ) ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? )
			int alt487=2;
			try { dbg.enterDecision(487, decisionCanBacktrack[487]);

			try {
				isCyclicDecision = true;
				alt487 = dfa487.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(487);}

			switch (alt487) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1403:5: SASS_ELSE ( ws )? sass_control_block
					{
					dbg.location(1403,5);
					match(input,SASS_ELSE,FOLLOW_SASS_ELSE_in_sass_else9886); if (state.failed) return;dbg.location(1403,15);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1403:15: ( ws )?
					int alt480=2;
					try { dbg.enterSubRule(480);
					try { dbg.enterDecision(480, decisionCanBacktrack[480]);

					int LA480_0 = input.LA(1);
					if ( (LA480_0==COMMENT||LA480_0==NL||LA480_0==WS) ) {
						alt480=1;
					}
					} finally {dbg.exitDecision(480);}

					switch (alt480) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1403:15: ws
							{
							dbg.location(1403,15);
							pushFollow(FOLLOW_ws_in_sass_else9888);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(480);}
					dbg.location(1403,19);
					pushFollow(FOLLOW_sass_control_block_in_sass_else9891);
					sass_control_block();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1405:5: ( ( SASS_ELSE ( ws )? {...}? IDENT ) | SASS_ELSEIF ) ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )?
					{
					dbg.location(1405,5);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1405:5: ( ( SASS_ELSE ( ws )? {...}? IDENT ) | SASS_ELSEIF )
					int alt482=2;
					try { dbg.enterSubRule(482);
					try { dbg.enterDecision(482, decisionCanBacktrack[482]);

					int LA482_0 = input.LA(1);
					if ( (LA482_0==SASS_ELSE) ) {
						alt482=1;
					}
					else if ( (LA482_0==SASS_ELSEIF) ) {
						alt482=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 482, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(482);}

					switch (alt482) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1405:6: ( SASS_ELSE ( ws )? {...}? IDENT )
							{
							dbg.location(1405,6);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1405:6: ( SASS_ELSE ( ws )? {...}? IDENT )
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1405:7: SASS_ELSE ( ws )? {...}? IDENT
							{
							dbg.location(1405,7);
							match(input,SASS_ELSE,FOLLOW_SASS_ELSE_in_sass_else9905); if (state.failed) return;dbg.location(1405,17);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1405:17: ( ws )?
							int alt481=2;
							try { dbg.enterSubRule(481);
							try { dbg.enterDecision(481, decisionCanBacktrack[481]);

							int LA481_0 = input.LA(1);
							if ( (LA481_0==COMMENT||LA481_0==NL||LA481_0==WS) ) {
								alt481=1;
							}
							} finally {dbg.exitDecision(481);}

							switch (alt481) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1405:17: ws
									{
									dbg.location(1405,17);
									pushFollow(FOLLOW_ws_in_sass_else9907);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(481);}
							dbg.location(1405,21);
							if ( !(evalPredicate(tokenNameEquals("if"),"tokenNameEquals(\"if\")")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "sass_else", "tokenNameEquals(\"if\")");
							}dbg.location(1405,46);
							match(input,IDENT,FOLLOW_IDENT_in_sass_else9912); if (state.failed) return;
							}

							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1405:64: SASS_ELSEIF
							{
							dbg.location(1405,64);
							match(input,SASS_ELSEIF,FOLLOW_SASS_ELSEIF_in_sass_else9919); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(482);}
					dbg.location(1405,77);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1405:77: ( ws )?
					int alt483=2;
					try { dbg.enterSubRule(483);
					try { dbg.enterDecision(483, decisionCanBacktrack[483]);

					int LA483_0 = input.LA(1);
					if ( (LA483_0==COMMENT||LA483_0==NL||LA483_0==WS) ) {
						alt483=1;
					}
					} finally {dbg.exitDecision(483);}

					switch (alt483) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1405:77: ws
							{
							dbg.location(1405,77);
							pushFollow(FOLLOW_ws_in_sass_else9922);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(483);}
					dbg.location(1405,81);
					pushFollow(FOLLOW_sass_control_expression_in_sass_else9925);
					sass_control_expression();
					state._fsp--;
					if (state.failed) return;dbg.location(1405,105);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1405:105: ( ws )?
					int alt484=2;
					try { dbg.enterSubRule(484);
					try { dbg.enterDecision(484, decisionCanBacktrack[484]);

					int LA484_0 = input.LA(1);
					if ( (LA484_0==COMMENT||LA484_0==NL||LA484_0==WS) ) {
						alt484=1;
					}
					} finally {dbg.exitDecision(484);}

					switch (alt484) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1405:105: ws
							{
							dbg.location(1405,105);
							pushFollow(FOLLOW_ws_in_sass_else9927);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(484);}
					dbg.location(1405,109);
					pushFollow(FOLLOW_sass_control_block_in_sass_else9930);
					sass_control_block();
					state._fsp--;
					if (state.failed) return;dbg.location(1405,128);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1405:128: ( ( ws )? sass_else )?
					int alt486=2;
					try { dbg.enterSubRule(486);
					try { dbg.enterDecision(486, decisionCanBacktrack[486]);

					try {
						isCyclicDecision = true;
						alt486 = dfa486.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(486);}

					switch (alt486) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1405:129: ( ws )? sass_else
							{
							dbg.location(1405,129);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1405:129: ( ws )?
							int alt485=2;
							try { dbg.enterSubRule(485);
							try { dbg.enterDecision(485, decisionCanBacktrack[485]);

							int LA485_0 = input.LA(1);
							if ( (LA485_0==COMMENT||LA485_0==NL||LA485_0==WS) ) {
								alt485=1;
							}
							} finally {dbg.exitDecision(485);}

							switch (alt485) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1405:129: ws
									{
									dbg.location(1405,129);
									pushFollow(FOLLOW_ws_in_sass_else9933);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(485);}
							dbg.location(1405,133);
							pushFollow(FOLLOW_sass_else_in_sass_else9936);
							sass_else();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(486);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1406, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_else");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_else"



	// $ANTLR start "sass_control_expression"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1408:1: sass_control_expression : cp_expression ;
	public final void sass_control_expression() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_control_expression");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1408, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1409:5: ( cp_expression )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1410:5: cp_expression
			{
			dbg.location(1410,5);
			pushFollow(FOLLOW_cp_expression_in_sass_control_expression9959);
			cp_expression();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1411, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_control_expression");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_control_expression"



	// $ANTLR start "sass_for"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1413:1: sass_for : SASS_FOR ws cp_variable ws {...}? IDENT ws cp_math_expression ws {...}? IDENT ws cp_math_expression ( ws )? sass_control_block ;
	public final void sass_for() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_for");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1413, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1414:5: ( SASS_FOR ws cp_variable ws {...}? IDENT ws cp_math_expression ws {...}? IDENT ws cp_math_expression ( ws )? sass_control_block )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1415:5: SASS_FOR ws cp_variable ws {...}? IDENT ws cp_math_expression ws {...}? IDENT ws cp_math_expression ( ws )? sass_control_block
			{
			dbg.location(1415,5);
			match(input,SASS_FOR,FOLLOW_SASS_FOR_in_sass_for9980); if (state.failed) return;dbg.location(1415,14);
			pushFollow(FOLLOW_ws_in_sass_for9982);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1415,17);
			pushFollow(FOLLOW_cp_variable_in_sass_for9984);
			cp_variable();
			state._fsp--;
			if (state.failed) return;dbg.location(1415,29);
			pushFollow(FOLLOW_ws_in_sass_for9986);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1415,32);
			if ( !(evalPredicate(tokenNameEquals("from"),"tokenNameEquals(\"from\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "sass_for", "tokenNameEquals(\"from\")");
			}dbg.location(1415,59);
			match(input,IDENT,FOLLOW_IDENT_in_sass_for9990); if (state.failed) return;dbg.location(1415,74);
			pushFollow(FOLLOW_ws_in_sass_for9994);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1415,77);
			pushFollow(FOLLOW_cp_math_expression_in_sass_for9996);
			cp_math_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(1415,96);
			pushFollow(FOLLOW_ws_in_sass_for9998);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1415,99);
			if ( !(evalPredicate(tokenNameEquals("to")|tokenNameEquals("through"),"tokenNameEquals(\"to\")|tokenNameEquals(\"through\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "sass_for", "tokenNameEquals(\"to\")|tokenNameEquals(\"through\")");
			}dbg.location(1415,151);
			match(input,IDENT,FOLLOW_IDENT_in_sass_for10002); if (state.failed) return;dbg.location(1415,173);
			pushFollow(FOLLOW_ws_in_sass_for10006);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1415,176);
			pushFollow(FOLLOW_cp_math_expression_in_sass_for10008);
			cp_math_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(1415,195);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1415:195: ( ws )?
			int alt488=2;
			try { dbg.enterSubRule(488);
			try { dbg.enterDecision(488, decisionCanBacktrack[488]);

			int LA488_0 = input.LA(1);
			if ( (LA488_0==COMMENT||LA488_0==NL||LA488_0==WS) ) {
				alt488=1;
			}
			} finally {dbg.exitDecision(488);}

			switch (alt488) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1415:195: ws
					{
					dbg.location(1415,195);
					pushFollow(FOLLOW_ws_in_sass_for10010);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(488);}
			dbg.location(1415,199);
			pushFollow(FOLLOW_sass_control_block_in_sass_for10013);
			sass_control_block();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1416, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_for");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_for"



	// $ANTLR start "sass_each"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1418:1: sass_each : SASS_EACH ws sass_each_variables ws {...}? IDENT ws ( cp_expression_list ( ( ws )? COMMA )? ( ws )? )+ sass_control_block ;
	public final void sass_each() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_each");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1418, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1419:5: ( SASS_EACH ws sass_each_variables ws {...}? IDENT ws ( cp_expression_list ( ( ws )? COMMA )? ( ws )? )+ sass_control_block )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1420:5: SASS_EACH ws sass_each_variables ws {...}? IDENT ws ( cp_expression_list ( ( ws )? COMMA )? ( ws )? )+ sass_control_block
			{
			dbg.location(1420,5);
			match(input,SASS_EACH,FOLLOW_SASS_EACH_in_sass_each10034); if (state.failed) return;dbg.location(1420,15);
			pushFollow(FOLLOW_ws_in_sass_each10036);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1420,18);
			pushFollow(FOLLOW_sass_each_variables_in_sass_each10038);
			sass_each_variables();
			state._fsp--;
			if (state.failed) return;dbg.location(1420,38);
			pushFollow(FOLLOW_ws_in_sass_each10040);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1420,41);
			if ( !(evalPredicate(tokenNameEquals("in"),"tokenNameEquals(\"in\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "sass_each", "tokenNameEquals(\"in\")");
			}dbg.location(1420,66);
			match(input,IDENT,FOLLOW_IDENT_in_sass_each10044); if (state.failed) return;dbg.location(1420,79);
			pushFollow(FOLLOW_ws_in_sass_each10048);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1420,82);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1420:82: ( cp_expression_list ( ( ws )? COMMA )? ( ws )? )+
			int cnt492=0;
			try { dbg.enterSubRule(492);

			loop492:
			while (true) {
				int alt492=2;
				try { dbg.enterDecision(492, decisionCanBacktrack[492]);

				int LA492_0 = input.LA(1);
				if ( (LA492_0==LBRACE) ) {
					int LA492_1 = input.LA(2);
					if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
						alt492=1;
					}

				}
				else if ( ((LA492_0 >= ANGLE && LA492_0 <= AT_SIGN)||(LA492_0 >= BOTTOMCENTER_SYM && LA492_0 <= BOTTOMRIGHT_SYM)||LA492_0==CHARSET_SYM||LA492_0==COUNTER_STYLE_SYM||LA492_0==DIMENSION||LA492_0==EMS||LA492_0==EXS||(LA492_0 >= FONT_FACE_SYM && LA492_0 <= FREQ)||LA492_0==GEN||(LA492_0 >= HASH && LA492_0 <= HASH_SYMBOL)||(LA492_0 >= IDENT && LA492_0 <= IMPORT_SYM)||(LA492_0 >= LBRACKET && LA492_0 <= LENGTH)||(LA492_0 >= LESS_AND && LA492_0 <= LESS_JS_STRING)||LA492_0==LPAREN||(LA492_0 >= MEDIA_SYM && LA492_0 <= MOZ_DOCUMENT_SYM)||LA492_0==NAMESPACE_SYM||(LA492_0 >= NOT && LA492_0 <= NUMBER)||(LA492_0 >= PAGE_SYM && LA492_0 <= PERCENTAGE_SYMBOL)||LA492_0==PLUS||(LA492_0 >= REM && LA492_0 <= RIGHTTOP_SYM)||(LA492_0 >= SASS_AT_ROOT && LA492_0 <= SASS_DEBUG)||(LA492_0 >= SASS_EACH && LA492_0 <= SASS_ELSE)||LA492_0==SASS_EXTEND||(LA492_0 >= SASS_FOR && LA492_0 <= SASS_FUNCTION)||(LA492_0 >= SASS_IF && LA492_0 <= SASS_MIXIN)||(LA492_0 >= SASS_RETURN && LA492_0 <= SASS_WHILE)||LA492_0==STRING||(LA492_0 >= TILDE && LA492_0 <= TOPRIGHT_SYM)||(LA492_0 >= URANGE && LA492_0 <= URI)||LA492_0==VARIABLE||LA492_0==WEBKIT_KEYFRAMES_SYM) ) {
					alt492=1;
				}

				} finally {dbg.exitDecision(492);}

				switch (alt492) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1420:83: cp_expression_list ( ( ws )? COMMA )? ( ws )?
					{
					dbg.location(1420,83);
					pushFollow(FOLLOW_cp_expression_list_in_sass_each10051);
					cp_expression_list();
					state._fsp--;
					if (state.failed) return;dbg.location(1420,102);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1420:102: ( ( ws )? COMMA )?
					int alt490=2;
					try { dbg.enterSubRule(490);
					try { dbg.enterDecision(490, decisionCanBacktrack[490]);

					try {
						isCyclicDecision = true;
						alt490 = dfa490.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(490);}

					switch (alt490) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1420:103: ( ws )? COMMA
							{
							dbg.location(1420,103);
							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1420:103: ( ws )?
							int alt489=2;
							try { dbg.enterSubRule(489);
							try { dbg.enterDecision(489, decisionCanBacktrack[489]);

							int LA489_0 = input.LA(1);
							if ( (LA489_0==COMMENT||LA489_0==NL||LA489_0==WS) ) {
								alt489=1;
							}
							} finally {dbg.exitDecision(489);}

							switch (alt489) {
								case 1 :
									dbg.enterAlt(1);

									// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1420:103: ws
									{
									dbg.location(1420,103);
									pushFollow(FOLLOW_ws_in_sass_each10054);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(489);}
							dbg.location(1420,107);
							match(input,COMMA,FOLLOW_COMMA_in_sass_each10057); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(490);}
					dbg.location(1420,115);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1420:115: ( ws )?
					int alt491=2;
					try { dbg.enterSubRule(491);
					try { dbg.enterDecision(491, decisionCanBacktrack[491]);

					int LA491_0 = input.LA(1);
					if ( (LA491_0==COMMENT||LA491_0==NL||LA491_0==WS) ) {
						alt491=1;
					}
					} finally {dbg.exitDecision(491);}

					switch (alt491) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1420:115: ws
							{
							dbg.location(1420,115);
							pushFollow(FOLLOW_ws_in_sass_each10061);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(491);}

					}
					break;

				default :
					if ( cnt492 >= 1 ) break loop492;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(492, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt492++;
			}
			} finally {dbg.exitSubRule(492);}
			dbg.location(1420,122);
			pushFollow(FOLLOW_sass_control_block_in_sass_each10067);
			sass_control_block();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1421, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_each");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_each"



	// $ANTLR start "sass_each_variables"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1423:1: sass_each_variables : cp_variable ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? cp_variable )* ;
	public final void sass_each_variables() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_each_variables");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1423, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1424:5: ( cp_variable ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? cp_variable )* )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1425:5: cp_variable ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? cp_variable )*
			{
			dbg.location(1425,5);
			pushFollow(FOLLOW_cp_variable_in_sass_each_variables10088);
			cp_variable();
			state._fsp--;
			if (state.failed) return;dbg.location(1425,17);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1425:17: ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? cp_variable )*
			try { dbg.enterSubRule(495);

			loop495:
			while (true) {
				int alt495=2;
				try { dbg.enterDecision(495, decisionCanBacktrack[495]);

				try {
					isCyclicDecision = true;
					alt495 = dfa495.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(495);}

				switch (alt495) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1425:19: ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? cp_variable
					{
					dbg.location(1425,33);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1425:33: ( ws )?
					int alt493=2;
					try { dbg.enterSubRule(493);
					try { dbg.enterDecision(493, decisionCanBacktrack[493]);

					int LA493_0 = input.LA(1);
					if ( (LA493_0==COMMENT||LA493_0==NL||LA493_0==WS) ) {
						alt493=1;
					}
					} finally {dbg.exitDecision(493);}

					switch (alt493) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1425:33: ws
							{
							dbg.location(1425,33);
							pushFollow(FOLLOW_ws_in_sass_each_variables10100);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(493);}
					dbg.location(1425,37);
					match(input,COMMA,FOLLOW_COMMA_in_sass_each_variables10103); if (state.failed) return;dbg.location(1425,43);
					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1425:43: ( ws )?
					int alt494=2;
					try { dbg.enterSubRule(494);
					try { dbg.enterDecision(494, decisionCanBacktrack[494]);

					int LA494_0 = input.LA(1);
					if ( (LA494_0==COMMENT||LA494_0==NL||LA494_0==WS) ) {
						alt494=1;
					}
					} finally {dbg.exitDecision(494);}

					switch (alt494) {
						case 1 :
							dbg.enterAlt(1);

							// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1425:43: ws
							{
							dbg.location(1425,43);
							pushFollow(FOLLOW_ws_in_sass_each_variables10105);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(494);}
					dbg.location(1425,47);
					pushFollow(FOLLOW_cp_variable_in_sass_each_variables10108);
					cp_variable();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop495;
				}
			}
			} finally {dbg.exitSubRule(495);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1426, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_each_variables");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_each_variables"



	// $ANTLR start "sass_while"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1428:1: sass_while : SASS_WHILE ws sass_control_expression ( ws )? sass_control_block ;
	public final void sass_while() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_while");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1428, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1429:5: ( SASS_WHILE ws sass_control_expression ( ws )? sass_control_block )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1430:5: SASS_WHILE ws sass_control_expression ( ws )? sass_control_block
			{
			dbg.location(1430,5);
			match(input,SASS_WHILE,FOLLOW_SASS_WHILE_in_sass_while10133); if (state.failed) return;dbg.location(1430,16);
			pushFollow(FOLLOW_ws_in_sass_while10135);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1430,19);
			pushFollow(FOLLOW_sass_control_expression_in_sass_while10137);
			sass_control_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(1430,43);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1430:43: ( ws )?
			int alt496=2;
			try { dbg.enterSubRule(496);
			try { dbg.enterDecision(496, decisionCanBacktrack[496]);

			int LA496_0 = input.LA(1);
			if ( (LA496_0==COMMENT||LA496_0==NL||LA496_0==WS) ) {
				alt496=1;
			}
			} finally {dbg.exitDecision(496);}

			switch (alt496) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1430:43: ws
					{
					dbg.location(1430,43);
					pushFollow(FOLLOW_ws_in_sass_while10139);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(496);}
			dbg.location(1430,47);
			pushFollow(FOLLOW_sass_control_block_in_sass_while10142);
			sass_control_block();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1431, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_while");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_while"



	// $ANTLR start "sass_control_block"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1433:1: sass_control_block : LBRACE ( ws )? ( declarations )? RBRACE ;
	public final void sass_control_block() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_control_block");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1433, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1434:5: ( LBRACE ( ws )? ( declarations )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1435:5: LBRACE ( ws )? ( declarations )? RBRACE
			{
			dbg.location(1435,5);
			match(input,LBRACE,FOLLOW_LBRACE_in_sass_control_block10163); if (state.failed) return;dbg.location(1435,12);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1435:12: ( ws )?
			int alt497=2;
			try { dbg.enterSubRule(497);
			try { dbg.enterDecision(497, decisionCanBacktrack[497]);

			int LA497_0 = input.LA(1);
			if ( (LA497_0==COMMENT||LA497_0==NL||LA497_0==WS) ) {
				alt497=1;
			}
			} finally {dbg.exitDecision(497);}

			switch (alt497) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1435:12: ws
					{
					dbg.location(1435,12);
					pushFollow(FOLLOW_ws_in_sass_control_block10165);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(497);}
			dbg.location(1435,16);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1435:16: ( declarations )?
			int alt498=2;
			try { dbg.enterSubRule(498);
			try { dbg.enterDecision(498, decisionCanBacktrack[498]);

			int LA498_0 = input.LA(1);
			if ( ((LA498_0 >= AT_IDENT && LA498_0 <= AT_SIGN)||(LA498_0 >= BOTTOMCENTER_SYM && LA498_0 <= BOTTOMRIGHT_SYM)||(LA498_0 >= CHARSET_SYM && LA498_0 <= COLON)||LA498_0==COUNTER_STYLE_SYM||(LA498_0 >= DCOLON && LA498_0 <= DOT)||LA498_0==FONT_FACE_SYM||(LA498_0 >= GEN && LA498_0 <= GREATER)||(LA498_0 >= HASH && LA498_0 <= HASH_SYMBOL)||LA498_0==IDENT||LA498_0==IMPORT_SYM||LA498_0==LAYER_SYM||(LA498_0 >= LBRACKET && LA498_0 <= LEFTTOP_SYM)||LA498_0==LESS_AND||(LA498_0 >= MEDIA_SYM && LA498_0 <= MOZ_DOCUMENT_SYM)||LA498_0==NAMESPACE_SYM||LA498_0==PAGE_SYM||(LA498_0 >= PIPE && LA498_0 <= PLUS)||(LA498_0 >= RIGHTBOTTOM_SYM && LA498_0 <= RIGHTTOP_SYM)||(LA498_0 >= SASS_AT_ROOT && LA498_0 <= SASS_DEBUG)||(LA498_0 >= SASS_EACH && LA498_0 <= SASS_ELSE)||(LA498_0 >= SASS_ERROR && LA498_0 <= SASS_FUNCTION)||(LA498_0 >= SASS_IF && LA498_0 <= SASS_MIXIN)||(LA498_0 >= SASS_RETURN && LA498_0 <= SEMI)||LA498_0==STAR||LA498_0==SUPPORTS_SYM||LA498_0==TILDE||(LA498_0 >= TOPCENTER_SYM && LA498_0 <= TOPRIGHT_SYM)||LA498_0==VARIABLE||LA498_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt498=1;
			}
			} finally {dbg.exitDecision(498);}

			switch (alt498) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1435:16: declarations
					{
					dbg.location(1435,16);
					pushFollow(FOLLOW_declarations_in_sass_control_block10168);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(498);}
			dbg.location(1435,30);
			match(input,RBRACE,FOLLOW_RBRACE_in_sass_control_block10171); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1436, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_control_block");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_control_block"



	// $ANTLR start "sass_function_declaration"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1438:1: sass_function_declaration : SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? ( declarations )? RBRACE ;
	public final void sass_function_declaration() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_function_declaration");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1438, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1439:5: ( SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? ( declarations )? RBRACE )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1444:5: SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? ( declarations )? RBRACE
			{
			dbg.location(1444,5);
			match(input,SASS_FUNCTION,FOLLOW_SASS_FUNCTION_in_sass_function_declaration10213); if (state.failed) return;dbg.location(1444,19);
			pushFollow(FOLLOW_ws_in_sass_function_declaration10215);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1444,22);
			pushFollow(FOLLOW_sass_function_name_in_sass_function_declaration10217);
			sass_function_name();
			state._fsp--;
			if (state.failed) return;dbg.location(1444,41);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1444:41: ( ws )?
			int alt499=2;
			try { dbg.enterSubRule(499);
			try { dbg.enterDecision(499, decisionCanBacktrack[499]);

			int LA499_0 = input.LA(1);
			if ( (LA499_0==COMMENT||LA499_0==NL||LA499_0==WS) ) {
				alt499=1;
			}
			} finally {dbg.exitDecision(499);}

			switch (alt499) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1444:41: ws
					{
					dbg.location(1444,41);
					pushFollow(FOLLOW_ws_in_sass_function_declaration10219);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(499);}
			dbg.location(1444,45);
			match(input,LPAREN,FOLLOW_LPAREN_in_sass_function_declaration10222); if (state.failed) return;dbg.location(1444,52);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1444:52: ( ws )?
			int alt500=2;
			try { dbg.enterSubRule(500);
			try { dbg.enterDecision(500, decisionCanBacktrack[500]);

			int LA500_0 = input.LA(1);
			if ( (LA500_0==COMMENT||LA500_0==NL||LA500_0==WS) ) {
				alt500=1;
			}
			} finally {dbg.exitDecision(500);}

			switch (alt500) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1444:52: ws
					{
					dbg.location(1444,52);
					pushFollow(FOLLOW_ws_in_sass_function_declaration10224);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(500);}
			dbg.location(1444,56);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1444:56: ( cp_args_list )?
			int alt501=2;
			try { dbg.enterSubRule(501);
			try { dbg.enterDecision(501, decisionCanBacktrack[501]);

			int LA501_0 = input.LA(1);
			if ( (LA501_0==AT_IDENT||(LA501_0 >= BOTTOMCENTER_SYM && LA501_0 <= BOTTOMRIGHT_SYM)||LA501_0==CHARSET_SYM||(LA501_0 >= COUNTER_STYLE_SYM && LA501_0 <= CP_DOTS)||LA501_0==FONT_FACE_SYM||LA501_0==IDENT||LA501_0==IMPORT_SYM||(LA501_0 >= LEFTBOTTOM_SYM && LA501_0 <= LEFTTOP_SYM)||LA501_0==LESS_REST||LA501_0==MEDIA_SYM||LA501_0==MOZ_DOCUMENT_SYM||LA501_0==NAMESPACE_SYM||LA501_0==PAGE_SYM||(LA501_0 >= RIGHTBOTTOM_SYM && LA501_0 <= RIGHTTOP_SYM)||(LA501_0 >= SASS_AT_ROOT && LA501_0 <= SASS_DEBUG)||(LA501_0 >= SASS_EACH && LA501_0 <= SASS_ELSE)||LA501_0==SASS_EXTEND||(LA501_0 >= SASS_FOR && LA501_0 <= SASS_FUNCTION)||(LA501_0 >= SASS_IF && LA501_0 <= SASS_MIXIN)||(LA501_0 >= SASS_RETURN && LA501_0 <= SASS_WHILE)||(LA501_0 >= TOPCENTER_SYM && LA501_0 <= TOPRIGHT_SYM)||LA501_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt501=1;
			}
			} finally {dbg.exitDecision(501);}

			switch (alt501) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1444:56: cp_args_list
					{
					dbg.location(1444,56);
					pushFollow(FOLLOW_cp_args_list_in_sass_function_declaration10227);
					cp_args_list();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(501);}
			dbg.location(1444,70);
			match(input,RPAREN,FOLLOW_RPAREN_in_sass_function_declaration10230); if (state.failed) return;dbg.location(1444,77);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1444:77: ( ws )?
			int alt502=2;
			try { dbg.enterSubRule(502);
			try { dbg.enterDecision(502, decisionCanBacktrack[502]);

			int LA502_0 = input.LA(1);
			if ( (LA502_0==COMMENT||LA502_0==NL||LA502_0==WS) ) {
				alt502=1;
			}
			} finally {dbg.exitDecision(502);}

			switch (alt502) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1444:77: ws
					{
					dbg.location(1444,77);
					pushFollow(FOLLOW_ws_in_sass_function_declaration10232);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(502);}
			dbg.location(1444,81);
			match(input,LBRACE,FOLLOW_LBRACE_in_sass_function_declaration10235); if (state.failed) return;dbg.location(1444,88);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1444:88: ( ws )?
			int alt503=2;
			try { dbg.enterSubRule(503);
			try { dbg.enterDecision(503, decisionCanBacktrack[503]);

			int LA503_0 = input.LA(1);
			if ( (LA503_0==COMMENT||LA503_0==NL||LA503_0==WS) ) {
				alt503=1;
			}
			} finally {dbg.exitDecision(503);}

			switch (alt503) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1444:88: ws
					{
					dbg.location(1444,88);
					pushFollow(FOLLOW_ws_in_sass_function_declaration10237);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(503);}
			dbg.location(1444,92);
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1444:92: ( declarations )?
			int alt504=2;
			try { dbg.enterSubRule(504);
			try { dbg.enterDecision(504, decisionCanBacktrack[504]);

			int LA504_0 = input.LA(1);
			if ( ((LA504_0 >= AT_IDENT && LA504_0 <= AT_SIGN)||(LA504_0 >= BOTTOMCENTER_SYM && LA504_0 <= BOTTOMRIGHT_SYM)||(LA504_0 >= CHARSET_SYM && LA504_0 <= COLON)||LA504_0==COUNTER_STYLE_SYM||(LA504_0 >= DCOLON && LA504_0 <= DOT)||LA504_0==FONT_FACE_SYM||(LA504_0 >= GEN && LA504_0 <= GREATER)||(LA504_0 >= HASH && LA504_0 <= HASH_SYMBOL)||LA504_0==IDENT||LA504_0==IMPORT_SYM||LA504_0==LAYER_SYM||(LA504_0 >= LBRACKET && LA504_0 <= LEFTTOP_SYM)||LA504_0==LESS_AND||(LA504_0 >= MEDIA_SYM && LA504_0 <= MOZ_DOCUMENT_SYM)||LA504_0==NAMESPACE_SYM||LA504_0==PAGE_SYM||(LA504_0 >= PIPE && LA504_0 <= PLUS)||(LA504_0 >= RIGHTBOTTOM_SYM && LA504_0 <= RIGHTTOP_SYM)||(LA504_0 >= SASS_AT_ROOT && LA504_0 <= SASS_DEBUG)||(LA504_0 >= SASS_EACH && LA504_0 <= SASS_ELSE)||(LA504_0 >= SASS_ERROR && LA504_0 <= SASS_FUNCTION)||(LA504_0 >= SASS_IF && LA504_0 <= SASS_MIXIN)||(LA504_0 >= SASS_RETURN && LA504_0 <= SEMI)||LA504_0==STAR||LA504_0==SUPPORTS_SYM||LA504_0==TILDE||(LA504_0 >= TOPCENTER_SYM && LA504_0 <= TOPRIGHT_SYM)||LA504_0==VARIABLE||LA504_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt504=1;
			}
			} finally {dbg.exitDecision(504);}

			switch (alt504) {
				case 1 :
					dbg.enterAlt(1);

					// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1444:92: declarations
					{
					dbg.location(1444,92);
					pushFollow(FOLLOW_declarations_in_sass_function_declaration10240);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(504);}
			dbg.location(1444,106);
			match(input,RBRACE,FOLLOW_RBRACE_in_sass_function_declaration10243); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1445, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_function_declaration");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_function_declaration"



	// $ANTLR start "sass_function_name"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1447:1: sass_function_name : IDENT ;
	public final void sass_function_name() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_function_name");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1447, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1448:5: ( IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1449:5: IDENT
			{
			dbg.location(1449,5);
			match(input,IDENT,FOLLOW_IDENT_in_sass_function_name10264); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1450, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_function_name");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_function_name"



	// $ANTLR start "sass_function_return"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1452:1: sass_function_return : SASS_RETURN ws cp_expression ;
	public final void sass_function_return() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_function_return");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1452, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1453:5: ( SASS_RETURN ws cp_expression )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1454:5: SASS_RETURN ws cp_expression
			{
			dbg.location(1454,5);
			match(input,SASS_RETURN,FOLLOW_SASS_RETURN_in_sass_function_return10285); if (state.failed) return;dbg.location(1454,17);
			pushFollow(FOLLOW_ws_in_sass_function_return10287);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1454,20);
			pushFollow(FOLLOW_cp_expression_in_sass_function_return10289);
			cp_expression();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1455, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_function_return");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_function_return"



	// $ANTLR start "sass_content"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1457:1: sass_content : SASS_CONTENT ;
	public final void sass_content() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_content");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1457, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1458:5: ( SASS_CONTENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1459:5: SASS_CONTENT
			{
			dbg.location(1459,5);
			match(input,SASS_CONTENT,FOLLOW_SASS_CONTENT_in_sass_content10310); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1460, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_content");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_content"



	// $ANTLR start "less_import_types"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1462:1: less_import_types :{...}? IDENT ;
	public final void less_import_types() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_import_types");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1462, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1462:18: ({...}? IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1463:5: {...}? IDENT
			{
			dbg.location(1463,5);
			if ( !(evalPredicate(tokenNameIs(new String[]{"LESS", "CSS", "REFERENCE", "INLINE", "ONCE", "MULTIPLE"}),"tokenNameIs(new String[]{\"LESS\", \"CSS\", \"REFERENCE\", \"INLINE\", \"ONCE\", \"MULTIPLE\"})")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "less_import_types", "tokenNameIs(new String[]{\"LESS\", \"CSS\", \"REFERENCE\", \"INLINE\", \"ONCE\", \"MULTIPLE\"})");
			}dbg.location(1463,92);
			match(input,IDENT,FOLLOW_IDENT_in_less_import_types10329); if (state.failed) return;
			}

		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        input.consume();
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(1464, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_import_types");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_import_types"



	// $ANTLR start "less_when"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1469:1: less_when :{...}? IDENT ;
	public final void less_when() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_when");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1469, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1469:10: ({...}? IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1470:5: {...}? IDENT
			{
			dbg.location(1470,5);
			if ( !(evalPredicate(tokenNameEquals("when"),"tokenNameEquals(\"when\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "less_when", "tokenNameEquals(\"when\")");
			}dbg.location(1470,32);
			match(input,IDENT,FOLLOW_IDENT_in_less_when10352); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1471, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_when");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_when"



	// $ANTLR start "key_and"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1473:1: key_and :{...}? IDENT ;
	public final void key_and() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "key_and");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1473, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1473:8: ({...}? IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1474:5: {...}? IDENT
			{
			dbg.location(1474,5);
			if ( !(evalPredicate(tokenNameEquals("and"),"tokenNameEquals(\"and\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "key_and", "tokenNameEquals(\"and\")");
			}dbg.location(1474,31);
			match(input,IDENT,FOLLOW_IDENT_in_key_and10371); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1475, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "key_and");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "key_and"



	// $ANTLR start "key_or"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1477:1: key_or :{...}? IDENT ;
	public final void key_or() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "key_or");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1477, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1477:7: ({...}? IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1478:5: {...}? IDENT
			{
			dbg.location(1478,5);
			if ( !(evalPredicate(tokenNameEquals("or"),"tokenNameEquals(\"or\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "key_or", "tokenNameEquals(\"or\")");
			}dbg.location(1478,30);
			match(input,IDENT,FOLLOW_IDENT_in_key_or10389); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1479, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "key_or");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "key_or"



	// $ANTLR start "key_only"
	// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1481:1: key_only :{...}? IDENT ;
	public final void key_only() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "key_only");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1481, 0);

		try {
			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1481:9: ({...}? IDENT )
			dbg.enterAlt(1);

			// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1482:5: {...}? IDENT
			{
			dbg.location(1482,5);
			if ( !(evalPredicate(tokenNameEquals("only"),"tokenNameEquals(\"only\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "key_only", "tokenNameEquals(\"only\")");
			}dbg.location(1482,32);
			match(input,IDENT,FOLLOW_IDENT_in_key_only10407); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1483, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "key_only");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "key_only"

	// $ANTLR start synpred1_Css3
	public final void synpred1_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:61: ( ( ws )? mediaQueryList )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:62: ( ws )? mediaQueryList
		{
		dbg.location(333,62);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:62: ( ws )?
		int alt505=2;
		try { dbg.enterSubRule(505);
		try { dbg.enterDecision(505, decisionCanBacktrack[505]);

		int LA505_0 = input.LA(1);
		if ( (LA505_0==COMMENT||LA505_0==NL||LA505_0==WS) ) {
			alt505=1;
		}
		} finally {dbg.exitDecision(505);}

		switch (alt505) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:62: ws
				{
				dbg.location(333,62);
				pushFollow(FOLLOW_ws_in_synpred1_Css3470);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(505);}
		dbg.location(333,66);
		pushFollow(FOLLOW_mediaQueryList_in_synpred1_Css3473);
		mediaQueryList();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred1_Css3

	// $ANTLR start synpred2_Css3
	public final void synpred2_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:115: ( ( ws )? mediaQueryList )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:116: ( ws )? mediaQueryList
		{
		dbg.location(336,116);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:116: ( ws )?
		int alt506=2;
		try { dbg.enterSubRule(506);
		try { dbg.enterDecision(506, decisionCanBacktrack[506]);

		int LA506_0 = input.LA(1);
		if ( (LA506_0==COMMENT||LA506_0==NL||LA506_0==WS) ) {
			alt506=1;
		}
		} finally {dbg.exitDecision(506);}

		switch (alt506) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:116: ws
				{
				dbg.location(336,116);
				pushFollow(FOLLOW_ws_in_synpred2_Css3540);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(506);}
		dbg.location(336,120);
		pushFollow(FOLLOW_mediaQueryList_in_synpred2_Css3543);
		mediaQueryList();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred2_Css3

	// $ANTLR start synpred3_Css3
	public final void synpred3_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:118: ( ( ws )? mediaQueryList )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:119: ( ws )? mediaQueryList
		{
		dbg.location(338,119);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:119: ( ws )?
		int alt507=2;
		try { dbg.enterSubRule(507);
		try { dbg.enterDecision(507, decisionCanBacktrack[507]);

		int LA507_0 = input.LA(1);
		if ( (LA507_0==COMMENT||LA507_0==NL||LA507_0==WS) ) {
			alt507=1;
		}
		} finally {dbg.exitDecision(507);}

		switch (alt507) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:119: ws
				{
				dbg.location(338,119);
				pushFollow(FOLLOW_ws_in_synpred3_Css3600);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(507);}
		dbg.location(338,123);
		pushFollow(FOLLOW_mediaQueryList_in_synpred3_Css3603);
		mediaQueryList();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred3_Css3

	// $ANTLR start synpred4_Css3
	public final void synpred4_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:27: ( ( ws )? SEMI )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:28: ( ws )? SEMI
		{
		dbg.location(410,28);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:28: ( ws )?
		int alt508=2;
		try { dbg.enterSubRule(508);
		try { dbg.enterDecision(508, decisionCanBacktrack[508]);

		int LA508_0 = input.LA(1);
		if ( (LA508_0==COMMENT||LA508_0==NL||LA508_0==WS) ) {
			alt508=1;
		}
		} finally {dbg.exitDecision(508);}

		switch (alt508) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:28: ws
				{
				dbg.location(410,28);
				pushFollow(FOLLOW_ws_in_synpred4_Css31170);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(508);}
		dbg.location(410,32);
		match(input,SEMI,FOLLOW_SEMI_in_synpred4_Css31173); if (state.failed) return;
		}

	}
	// $ANTLR end synpred4_Css3

	// $ANTLR start synpred5_Css3
	public final void synpred5_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:5: ( SASS_MIXIN | ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )
		int alt513=2;
		try { dbg.enterDecision(513, decisionCanBacktrack[513]);

		int LA513_0 = input.LA(1);
		if ( (LA513_0==SASS_MIXIN) ) {
			alt513=1;
		}
		else if ( (LA513_0==DOT||LA513_0==HASH) ) {
			alt513=2;
		}

		else {
			if (state.backtracking>0) {state.failed=true; return;}
			NoViableAltException nvae =
				new NoViableAltException("", 513, 0, input);
			dbg.recognitionException(nvae);
			throw nvae;
		}

		} finally {dbg.exitDecision(513);}

		switch (alt513) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:6: SASS_MIXIN
				{
				dbg.location(419,6);
				match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_synpred5_Css31271); if (state.failed) return;
				}
				break;
			case 2 :
				dbg.enterAlt(2);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:19: ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE )
				{
				dbg.location(419,19);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:19: ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE )
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:20: ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE
				{
				dbg.location(419,20);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:20: ( ( DOT IDENT ) | HASH )
				int alt509=2;
				try { dbg.enterSubRule(509);
				try { dbg.enterDecision(509, decisionCanBacktrack[509]);

				int LA509_0 = input.LA(1);
				if ( (LA509_0==DOT) ) {
					alt509=1;
				}
				else if ( (LA509_0==HASH) ) {
					alt509=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae =
						new NoViableAltException("", 509, 0, input);
					dbg.recognitionException(nvae);
					throw nvae;
				}

				} finally {dbg.exitDecision(509);}

				switch (alt509) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:21: ( DOT IDENT )
						{
						dbg.location(419,21);
						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:21: ( DOT IDENT )
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:22: DOT IDENT
						{
						dbg.location(419,22);
						match(input,DOT,FOLLOW_DOT_in_synpred5_Css31278); if (state.failed) return;dbg.location(419,26);
						match(input,IDENT,FOLLOW_IDENT_in_synpred5_Css31280); if (state.failed) return;
						}

						}
						break;
					case 2 :
						dbg.enterAlt(2);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:35: HASH
						{
						dbg.location(419,35);
						match(input,HASH,FOLLOW_HASH_in_synpred5_Css31285); if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(509);}
				dbg.location(419,41);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:41: ( ws )?
				int alt510=2;
				try { dbg.enterSubRule(510);
				try { dbg.enterDecision(510, decisionCanBacktrack[510]);

				int LA510_0 = input.LA(1);
				if ( (LA510_0==COMMENT||LA510_0==NL||LA510_0==WS) ) {
					alt510=1;
				}
				} finally {dbg.exitDecision(510);}

				switch (alt510) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:41: ws
						{
						dbg.location(419,41);
						pushFollow(FOLLOW_ws_in_synpred5_Css31288);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(510);}
				dbg.location(419,45);
				match(input,LPAREN,FOLLOW_LPAREN_in_synpred5_Css31291); if (state.failed) return;dbg.location(419,52);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:52: (~ RPAREN )*
				try { dbg.enterSubRule(511);

				loop511:
				while (true) {
					int alt511=2;
					try { dbg.enterDecision(511, decisionCanBacktrack[511]);

					int LA511_0 = input.LA(1);
					if ( ((LA511_0 >= A && LA511_0 <= RIGHTTOP_SYM)||(LA511_0 >= S && LA511_0 <= Z)) ) {
						alt511=1;
					}

					} finally {dbg.exitDecision(511);}

					switch (alt511) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
						{
						dbg.location(419,52);
						if ( (input.LA(1) >= A && input.LA(1) <= RIGHTTOP_SYM)||(input.LA(1) >= S && input.LA(1) <= Z) ) {
							input.consume();
							state.errorRecovery=false;
							state.failed=false;
						}
						else {
							if (state.backtracking>0) {state.failed=true; return;}
							MismatchedSetException mse = new MismatchedSetException(null,input);
							dbg.recognitionException(mse);
							throw mse;
						}
						}
						break;

					default :
						break loop511;
					}
				}
				} finally {dbg.exitSubRule(511);}
				dbg.location(419,63);
				match(input,RPAREN,FOLLOW_RPAREN_in_synpred5_Css31299); if (state.failed) return;dbg.location(419,70);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:70: (~ ( LBRACE | SEMI ) )*
				try { dbg.enterSubRule(512);

				loop512:
				while (true) {
					int alt512=2;
					try { dbg.enterDecision(512, decisionCanBacktrack[512]);

					int LA512_0 = input.LA(1);
					if ( ((LA512_0 >= A && LA512_0 <= LAYER_SYM)||(LA512_0 >= LBRACKET && LA512_0 <= SASS_WHILE)||(LA512_0 >= SOLIDUS && LA512_0 <= Z)) ) {
						alt512=1;
					}

					} finally {dbg.exitDecision(512);}

					switch (alt512) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
						{
						dbg.location(419,70);
						if ( (input.LA(1) >= A && input.LA(1) <= LAYER_SYM)||(input.LA(1) >= LBRACKET && input.LA(1) <= SASS_WHILE)||(input.LA(1) >= SOLIDUS && input.LA(1) <= Z) ) {
							input.consume();
							state.errorRecovery=false;
							state.failed=false;
						}
						else {
							if (state.backtracking>0) {state.failed=true; return;}
							MismatchedSetException mse = new MismatchedSetException(null,input);
							dbg.recognitionException(mse);
							throw mse;
						}
						}
						break;

					default :
						break loop512;
					}
				}
				} finally {dbg.exitSubRule(512);}
				dbg.location(419,86);
				match(input,LBRACE,FOLLOW_LBRACE_in_synpred5_Css31309); if (state.failed) return;
				}

				}
				break;

		}
	}
	// $ANTLR end synpred5_Css3

	// $ANTLR start synpred6_Css3
	public final void synpred6_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:421:7: ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:421:8: cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI
		{
		dbg.location(421,8);
		pushFollow(FOLLOW_cp_mixin_call_in_synpred6_Css31327);
		cp_mixin_call();
		state._fsp--;
		if (state.failed) return;dbg.location(421,22);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:421:22: ( ( ws )? IMPORTANT_SYM )?
		int alt515=2;
		try { dbg.enterSubRule(515);
		try { dbg.enterDecision(515, decisionCanBacktrack[515]);

		try {
			isCyclicDecision = true;
			alt515 = dfa515.predict(input);
		}
		catch (NoViableAltException nvae) {
			dbg.recognitionException(nvae);
			throw nvae;
		}
		} finally {dbg.exitDecision(515);}

		switch (alt515) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:421:23: ( ws )? IMPORTANT_SYM
				{
				dbg.location(421,23);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:421:23: ( ws )?
				int alt514=2;
				try { dbg.enterSubRule(514);
				try { dbg.enterDecision(514, decisionCanBacktrack[514]);

				int LA514_0 = input.LA(1);
				if ( (LA514_0==COMMENT||LA514_0==NL||LA514_0==WS) ) {
					alt514=1;
				}
				} finally {dbg.exitDecision(514);}

				switch (alt514) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:421:23: ws
						{
						dbg.location(421,23);
						pushFollow(FOLLOW_ws_in_synpred6_Css31330);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(514);}
				dbg.location(421,27);
				match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_synpred6_Css31333); if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(515);}
		dbg.location(421,43);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:421:43: ( ws )?
		int alt516=2;
		try { dbg.enterSubRule(516);
		try { dbg.enterDecision(516, decisionCanBacktrack[516]);

		int LA516_0 = input.LA(1);
		if ( (LA516_0==COMMENT||LA516_0==NL||LA516_0==WS) ) {
			alt516=1;
		}
		} finally {dbg.exitDecision(516);}

		switch (alt516) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:421:43: ws
				{
				dbg.location(421,43);
				pushFollow(FOLLOW_ws_in_synpred6_Css31337);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(516);}
		dbg.location(421,47);
		match(input,SEMI,FOLLOW_SEMI_in_synpred6_Css31340); if (state.failed) return;
		}

	}
	// $ANTLR end synpred6_Css3

	// $ANTLR start synpred7_Css3
	public final void synpred7_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:422:7: ( cp_mixin_call )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:422:8: cp_mixin_call
		{
		dbg.location(422,8);
		pushFollow(FOLLOW_cp_mixin_call_in_synpred7_Css31363);
		cp_mixin_call();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred7_Css3

	// $ANTLR start synpred8_Css3
	public final void synpred8_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:7: ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:8: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE
		{
		dbg.location(423,8);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:8: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup )
		int alt522=3;
		try { dbg.enterSubRule(522);
		try { dbg.enterDecision(522, decisionCanBacktrack[522]);

		try {
			isCyclicDecision = true;
			alt522 = dfa522.predict(input);
		}
		catch (NoViableAltException nvae) {
			dbg.recognitionException(nvae);
			throw nvae;
		}
		} finally {dbg.exitDecision(522);}

		switch (alt522) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:9: ( SASS_AT_ROOT ( ws selectorsGroup )? )
				{
				dbg.location(423,9);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:9: ( SASS_AT_ROOT ( ws selectorsGroup )? )
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:10: SASS_AT_ROOT ( ws selectorsGroup )?
				{
				dbg.location(423,10);
				match(input,SASS_AT_ROOT,FOLLOW_SASS_AT_ROOT_in_synpred8_Css31388); if (state.failed) return;dbg.location(423,23);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:23: ( ws selectorsGroup )?
				int alt517=2;
				try { dbg.enterSubRule(517);
				try { dbg.enterDecision(517, decisionCanBacktrack[517]);

				try {
					isCyclicDecision = true;
					alt517 = dfa517.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(517);}

				switch (alt517) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:24: ws selectorsGroup
						{
						dbg.location(423,24);
						pushFollow(FOLLOW_ws_in_synpred8_Css31391);
						ws();
						state._fsp--;
						if (state.failed) return;dbg.location(423,27);
						pushFollow(FOLLOW_selectorsGroup_in_synpred8_Css31393);
						selectorsGroup();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(517);}

				}

				}
				break;
			case 2 :
				dbg.enterAlt(2);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:48: ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN )
				{
				dbg.location(423,48);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:48: ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN )
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:49: SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN
				{
				dbg.location(423,49);
				match(input,SASS_AT_ROOT,FOLLOW_SASS_AT_ROOT_in_synpred8_Css31402); if (state.failed) return;dbg.location(423,62);
				pushFollow(FOLLOW_ws_in_synpred8_Css31404);
				ws();
				state._fsp--;
				if (state.failed) return;dbg.location(423,65);
				match(input,LPAREN,FOLLOW_LPAREN_in_synpred8_Css31406); if (state.failed) return;dbg.location(423,72);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:72: ( ws )?
				int alt518=2;
				try { dbg.enterSubRule(518);
				try { dbg.enterDecision(518, decisionCanBacktrack[518]);

				int LA518_0 = input.LA(1);
				if ( (LA518_0==COMMENT||LA518_0==NL||LA518_0==WS) ) {
					alt518=1;
				}
				} finally {dbg.exitDecision(518);}

				switch (alt518) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:72: ws
						{
						dbg.location(423,72);
						pushFollow(FOLLOW_ws_in_synpred8_Css31408);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(518);}
				dbg.location(423,76);
				match(input,IDENT,FOLLOW_IDENT_in_synpred8_Css31411); if (state.failed) return;dbg.location(423,82);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:82: ( ws )?
				int alt519=2;
				try { dbg.enterSubRule(519);
				try { dbg.enterDecision(519, decisionCanBacktrack[519]);

				int LA519_0 = input.LA(1);
				if ( (LA519_0==COMMENT||LA519_0==NL||LA519_0==WS) ) {
					alt519=1;
				}
				} finally {dbg.exitDecision(519);}

				switch (alt519) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:82: ws
						{
						dbg.location(423,82);
						pushFollow(FOLLOW_ws_in_synpred8_Css31413);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(519);}
				dbg.location(423,86);
				match(input,COLON,FOLLOW_COLON_in_synpred8_Css31416); if (state.failed) return;dbg.location(423,92);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:92: ( ws )?
				int alt520=2;
				try { dbg.enterSubRule(520);
				try { dbg.enterDecision(520, decisionCanBacktrack[520]);

				int LA520_0 = input.LA(1);
				if ( (LA520_0==COMMENT||LA520_0==NL||LA520_0==WS) ) {
					alt520=1;
				}
				} finally {dbg.exitDecision(520);}

				switch (alt520) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:92: ws
						{
						dbg.location(423,92);
						pushFollow(FOLLOW_ws_in_synpred8_Css31418);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(520);}
				dbg.location(423,96);
				match(input,IDENT,FOLLOW_IDENT_in_synpred8_Css31421); if (state.failed) return;dbg.location(423,102);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:102: ( ws )?
				int alt521=2;
				try { dbg.enterSubRule(521);
				try { dbg.enterDecision(521, decisionCanBacktrack[521]);

				int LA521_0 = input.LA(1);
				if ( (LA521_0==COMMENT||LA521_0==NL||LA521_0==WS) ) {
					alt521=1;
				}
				} finally {dbg.exitDecision(521);}

				switch (alt521) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:102: ws
						{
						dbg.location(423,102);
						pushFollow(FOLLOW_ws_in_synpred8_Css31423);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(521);}
				dbg.location(423,106);
				match(input,RPAREN,FOLLOW_RPAREN_in_synpred8_Css31426); if (state.failed) return;
				}

				}
				break;
			case 3 :
				dbg.enterAlt(3);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:116: selectorsGroup
				{
				dbg.location(423,116);
				pushFollow(FOLLOW_selectorsGroup_in_synpred8_Css31431);
				selectorsGroup();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(522);}
		dbg.location(423,132);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:132: ( ws )?
		int alt523=2;
		try { dbg.enterSubRule(523);
		try { dbg.enterDecision(523, decisionCanBacktrack[523]);

		int LA523_0 = input.LA(1);
		if ( (LA523_0==COMMENT||LA523_0==NL||LA523_0==WS) ) {
			alt523=1;
		}
		} finally {dbg.exitDecision(523);}

		switch (alt523) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:132: ws
				{
				dbg.location(423,132);
				pushFollow(FOLLOW_ws_in_synpred8_Css31434);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(523);}
		dbg.location(423,136);
		match(input,LBRACE,FOLLOW_LBRACE_in_synpred8_Css31437); if (state.failed) return;
		}

	}
	// $ANTLR end synpred8_Css3

	// $ANTLR start synpred9_Css3
	public final void synpred9_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:424:7: ( propertyDeclaration )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:424:8: propertyDeclaration
		{
		dbg.location(424,8);
		pushFollow(FOLLOW_propertyDeclaration_in_synpred9_Css31449);
		propertyDeclaration();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred9_Css3

	// $ANTLR start synpred10_Css3
	public final void synpred10_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:439:17: ( ( ws )? COMMA )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:439:18: ( ws )? COMMA
		{
		dbg.location(439,18);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:439:18: ( ws )?
		int alt524=2;
		try { dbg.enterSubRule(524);
		try { dbg.enterDecision(524, decisionCanBacktrack[524]);

		int LA524_0 = input.LA(1);
		if ( (LA524_0==COMMENT||LA524_0==NL||LA524_0==WS) ) {
			alt524=1;
		}
		} finally {dbg.exitDecision(524);}

		switch (alt524) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:439:18: ws
				{
				dbg.location(439,18);
				pushFollow(FOLLOW_ws_in_synpred10_Css31564);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(524);}
		dbg.location(439,22);
		match(input,COMMA,FOLLOW_COMMA_in_synpred10_Css31567); if (state.failed) return;
		}

	}
	// $ANTLR end synpred10_Css3

	// $ANTLR start synpred11_Css3
	public final void synpred11_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:44: ( ( ws )? key_and )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:45: ( ws )? key_and
		{
		dbg.location(444,45);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:45: ( ws )?
		int alt525=2;
		try { dbg.enterSubRule(525);
		try { dbg.enterDecision(525, decisionCanBacktrack[525]);

		int LA525_0 = input.LA(1);
		if ( (LA525_0==COMMENT||LA525_0==NL||LA525_0==WS) ) {
			alt525=1;
		}
		} finally {dbg.exitDecision(525);}

		switch (alt525) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:45: ws
				{
				dbg.location(444,45);
				pushFollow(FOLLOW_ws_in_synpred11_Css31611);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(525);}
		dbg.location(444,49);
		pushFollow(FOLLOW_key_and_in_synpred11_Css31614);
		key_and();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred11_Css3

	// $ANTLR start synpred12_Css3
	public final void synpred12_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:24: ( ( ws )? key_and )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:25: ( ws )? key_and
		{
		dbg.location(445,25);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:25: ( ws )?
		int alt526=2;
		try { dbg.enterSubRule(526);
		try { dbg.enterDecision(526, decisionCanBacktrack[526]);

		int LA526_0 = input.LA(1);
		if ( (LA526_0==COMMENT||LA526_0==NL||LA526_0==WS) ) {
			alt526=1;
		}
		} finally {dbg.exitDecision(526);}

		switch (alt526) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:25: ws
				{
				dbg.location(445,25);
				pushFollow(FOLLOW_ws_in_synpred12_Css31641);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(526);}
		dbg.location(445,29);
		pushFollow(FOLLOW_key_and_in_synpred12_Css31644);
		key_and();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred12_Css3

	// $ANTLR start synpred13_Css3
	public final void synpred13_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:5: ( LPAREN )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:6: LPAREN
		{
		dbg.location(459,6);
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred13_Css31726); if (state.failed) return;
		}

	}
	// $ANTLR end synpred13_Css3

	// $ANTLR start synpred14_Css3
	public final void synpred14_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:460:7: ( HASH )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:460:8: HASH
		{
		dbg.location(460,8);
		match(input,HASH,FOLLOW_HASH_in_synpred14_Css31755); if (state.failed) return;
		}

	}
	// $ANTLR end synpred14_Css3

	// $ANTLR start synpred15_Css3
	public final void synpred15_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:480:22: ( ( ws )? SEMI )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:480:23: ( ws )? SEMI
		{
		dbg.location(480,23);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:480:23: ( ws )?
		int alt527=2;
		try { dbg.enterSubRule(527);
		try { dbg.enterDecision(527, decisionCanBacktrack[527]);

		int LA527_0 = input.LA(1);
		if ( (LA527_0==COMMENT||LA527_0==NL||LA527_0==WS) ) {
			alt527=1;
		}
		} finally {dbg.exitDecision(527);}

		switch (alt527) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:480:23: ws
				{
				dbg.location(480,23);
				pushFollow(FOLLOW_ws_in_synpred15_Css31901);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(527);}
		dbg.location(480,27);
		match(input,SEMI,FOLLOW_SEMI_in_synpred15_Css31904); if (state.failed) return;
		}

	}
	// $ANTLR end synpred15_Css3

	// $ANTLR start synpred16_Css3
	public final void synpred16_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:488:9: ( SASS_MIXIN | ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )
		int alt532=2;
		try { dbg.enterDecision(532, decisionCanBacktrack[532]);

		int LA532_0 = input.LA(1);
		if ( (LA532_0==SASS_MIXIN) ) {
			alt532=1;
		}
		else if ( (LA532_0==DOT||LA532_0==HASH) ) {
			alt532=2;
		}

		else {
			if (state.backtracking>0) {state.failed=true; return;}
			NoViableAltException nvae =
				new NoViableAltException("", 532, 0, input);
			dbg.recognitionException(nvae);
			throw nvae;
		}

		} finally {dbg.exitDecision(532);}

		switch (alt532) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:488:10: SASS_MIXIN
				{
				dbg.location(488,10);
				match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_synpred16_Css31979); if (state.failed) return;
				}
				break;
			case 2 :
				dbg.enterAlt(2);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:488:23: ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE )
				{
				dbg.location(488,23);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:488:23: ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE )
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:488:24: ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE
				{
				dbg.location(488,24);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:488:24: ( ( DOT IDENT ) | HASH )
				int alt528=2;
				try { dbg.enterSubRule(528);
				try { dbg.enterDecision(528, decisionCanBacktrack[528]);

				int LA528_0 = input.LA(1);
				if ( (LA528_0==DOT) ) {
					alt528=1;
				}
				else if ( (LA528_0==HASH) ) {
					alt528=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae =
						new NoViableAltException("", 528, 0, input);
					dbg.recognitionException(nvae);
					throw nvae;
				}

				} finally {dbg.exitDecision(528);}

				switch (alt528) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:488:25: ( DOT IDENT )
						{
						dbg.location(488,25);
						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:488:25: ( DOT IDENT )
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:488:26: DOT IDENT
						{
						dbg.location(488,26);
						match(input,DOT,FOLLOW_DOT_in_synpred16_Css31986); if (state.failed) return;dbg.location(488,30);
						match(input,IDENT,FOLLOW_IDENT_in_synpred16_Css31988); if (state.failed) return;
						}

						}
						break;
					case 2 :
						dbg.enterAlt(2);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:488:39: HASH
						{
						dbg.location(488,39);
						match(input,HASH,FOLLOW_HASH_in_synpred16_Css31993); if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(528);}
				dbg.location(488,45);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:488:45: ( ws )?
				int alt529=2;
				try { dbg.enterSubRule(529);
				try { dbg.enterDecision(529, decisionCanBacktrack[529]);

				int LA529_0 = input.LA(1);
				if ( (LA529_0==COMMENT||LA529_0==NL||LA529_0==WS) ) {
					alt529=1;
				}
				} finally {dbg.exitDecision(529);}

				switch (alt529) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:488:45: ws
						{
						dbg.location(488,45);
						pushFollow(FOLLOW_ws_in_synpred16_Css31996);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(529);}
				dbg.location(488,49);
				match(input,LPAREN,FOLLOW_LPAREN_in_synpred16_Css31999); if (state.failed) return;dbg.location(488,56);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:488:56: (~ RPAREN )*
				try { dbg.enterSubRule(530);

				loop530:
				while (true) {
					int alt530=2;
					try { dbg.enterDecision(530, decisionCanBacktrack[530]);

					int LA530_0 = input.LA(1);
					if ( ((LA530_0 >= A && LA530_0 <= RIGHTTOP_SYM)||(LA530_0 >= S && LA530_0 <= Z)) ) {
						alt530=1;
					}

					} finally {dbg.exitDecision(530);}

					switch (alt530) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
						{
						dbg.location(488,56);
						if ( (input.LA(1) >= A && input.LA(1) <= RIGHTTOP_SYM)||(input.LA(1) >= S && input.LA(1) <= Z) ) {
							input.consume();
							state.errorRecovery=false;
							state.failed=false;
						}
						else {
							if (state.backtracking>0) {state.failed=true; return;}
							MismatchedSetException mse = new MismatchedSetException(null,input);
							dbg.recognitionException(mse);
							throw mse;
						}
						}
						break;

					default :
						break loop530;
					}
				}
				} finally {dbg.exitSubRule(530);}
				dbg.location(488,67);
				match(input,RPAREN,FOLLOW_RPAREN_in_synpred16_Css32007); if (state.failed) return;dbg.location(488,74);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:488:74: (~ ( LBRACE | RBRACE | SEMI ) )*
				try { dbg.enterSubRule(531);

				loop531:
				while (true) {
					int alt531=2;
					try { dbg.enterDecision(531, decisionCanBacktrack[531]);

					int LA531_0 = input.LA(1);
					if ( ((LA531_0 >= A && LA531_0 <= LAYER_SYM)||(LA531_0 >= LBRACKET && LA531_0 <= R)||(LA531_0 >= RBRACKET && LA531_0 <= SASS_WHILE)||(LA531_0 >= SOLIDUS && LA531_0 <= Z)) ) {
						alt531=1;
					}

					} finally {dbg.exitDecision(531);}

					switch (alt531) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
						{
						dbg.location(488,74);
						if ( (input.LA(1) >= A && input.LA(1) <= LAYER_SYM)||(input.LA(1) >= LBRACKET && input.LA(1) <= R)||(input.LA(1) >= RBRACKET && input.LA(1) <= SASS_WHILE)||(input.LA(1) >= SOLIDUS && input.LA(1) <= Z) ) {
							input.consume();
							state.errorRecovery=false;
							state.failed=false;
						}
						else {
							if (state.backtracking>0) {state.failed=true; return;}
							MismatchedSetException mse = new MismatchedSetException(null,input);
							dbg.recognitionException(mse);
							throw mse;
						}
						}
						break;

					default :
						break loop531;
					}
				}
				} finally {dbg.exitSubRule(531);}
				dbg.location(488,97);
				match(input,LBRACE,FOLLOW_LBRACE_in_synpred16_Css32019); if (state.failed) return;
				}

				}
				break;

		}
	}
	// $ANTLR end synpred16_Css3

	// $ANTLR start synpred17_Css3
	public final void synpred17_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:490:11: ( cp_mixin_call ( ws )? SEMI )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:490:12: cp_mixin_call ( ws )? SEMI
		{
		dbg.location(490,12);
		pushFollow(FOLLOW_cp_mixin_call_in_synpred17_Css32045);
		cp_mixin_call();
		state._fsp--;
		if (state.failed) return;dbg.location(490,26);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:490:26: ( ws )?
		int alt533=2;
		try { dbg.enterSubRule(533);
		try { dbg.enterDecision(533, decisionCanBacktrack[533]);

		int LA533_0 = input.LA(1);
		if ( (LA533_0==COMMENT||LA533_0==NL||LA533_0==WS) ) {
			alt533=1;
		}
		} finally {dbg.exitDecision(533);}

		switch (alt533) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:490:26: ws
				{
				dbg.location(490,26);
				pushFollow(FOLLOW_ws_in_synpred17_Css32047);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(533);}
		dbg.location(490,30);
		match(input,SEMI,FOLLOW_SEMI_in_synpred17_Css32050); if (state.failed) return;
		}

	}
	// $ANTLR end synpred17_Css3

	// $ANTLR start synpred18_Css3
	public final void synpred18_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:491:11: ( cp_mixin_call )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:491:12: cp_mixin_call
		{
		dbg.location(491,12);
		pushFollow(FOLLOW_cp_mixin_call_in_synpred18_Css32069);
		cp_mixin_call();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred18_Css3

	// $ANTLR start synpred19_Css3
	public final void synpred19_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:493:11: ( cp_variable ( ws )? COLON )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:493:12: cp_variable ( ws )? COLON
		{
		dbg.location(493,12);
		pushFollow(FOLLOW_cp_variable_in_synpred19_Css32097);
		cp_variable();
		state._fsp--;
		if (state.failed) return;dbg.location(493,24);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:493:24: ( ws )?
		int alt534=2;
		try { dbg.enterSubRule(534);
		try { dbg.enterDecision(534, decisionCanBacktrack[534]);

		int LA534_0 = input.LA(1);
		if ( (LA534_0==COMMENT||LA534_0==NL||LA534_0==WS) ) {
			alt534=1;
		}
		} finally {dbg.exitDecision(534);}

		switch (alt534) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:493:24: ws
				{
				dbg.location(493,24);
				pushFollow(FOLLOW_ws_in_synpred19_Css32099);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(534);}
		dbg.location(493,28);
		match(input,COLON,FOLLOW_COLON_in_synpred19_Css32102); if (state.failed) return;
		}

	}
	// $ANTLR end synpred19_Css3

	// $ANTLR start synpred20_Css3
	public final void synpred20_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:494:11: ( sass_map )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:494:12: sass_map
		{
		dbg.location(494,12);
		pushFollow(FOLLOW_sass_map_in_synpred20_Css32119);
		sass_map();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred20_Css3

	// $ANTLR start synpred21_Css3
	public final void synpred21_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:734:27: ( ( ws )? COMMA )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:734:28: ( ws )? COMMA
		{
		dbg.location(734,28);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:734:28: ( ws )?
		int alt535=2;
		try { dbg.enterSubRule(535);
		try { dbg.enterDecision(535, decisionCanBacktrack[535]);

		int LA535_0 = input.LA(1);
		if ( (LA535_0==COMMENT||LA535_0==NL||LA535_0==WS) ) {
			alt535=1;
		}
		} finally {dbg.exitDecision(535);}

		switch (alt535) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:734:28: ws
				{
				dbg.location(734,28);
				pushFollow(FOLLOW_ws_in_synpred21_Css33863);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(535);}
		dbg.location(734,32);
		match(input,COMMA,FOLLOW_COMMA_in_synpred21_Css33866); if (state.failed) return;
		}

	}
	// $ANTLR end synpred21_Css3

	// $ANTLR start synpred22_Css3
	public final void synpred22_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:742:41: ( function )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:742:42: function
		{
		dbg.location(742,42);
		pushFollow(FOLLOW_function_in_synpred22_Css33957);
		function();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred22_Css3

	// $ANTLR start synpred23_Css3
	public final void synpred23_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:770:5: ( cp_variable_declaration )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:770:6: cp_variable_declaration
		{
		dbg.location(770,6);
		pushFollow(FOLLOW_cp_variable_declaration_in_synpred23_Css34257);
		cp_variable_declaration();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred23_Css3

	// $ANTLR start synpred24_Css3
	public final void synpred24_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:771:7: ( sass_map )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:771:8: sass_map
		{
		dbg.location(771,8);
		pushFollow(FOLLOW_sass_map_in_synpred24_Css34269);
		sass_map();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred24_Css3

	// $ANTLR start synpred25_Css3
	public final void synpred25_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:772:7: ( sass_nested_properties )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:772:8: sass_nested_properties
		{
		dbg.location(772,8);
		pushFollow(FOLLOW_sass_nested_properties_in_synpred25_Css34282);
		sass_nested_properties();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred25_Css3

	// $ANTLR start synpred26_Css3
	public final void synpred26_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:773:7: ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:773:8: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE
		{
		dbg.location(773,8);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:773:8: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup )
		int alt541=3;
		try { dbg.enterSubRule(541);
		try { dbg.enterDecision(541, decisionCanBacktrack[541]);

		try {
			isCyclicDecision = true;
			alt541 = dfa541.predict(input);
		}
		catch (NoViableAltException nvae) {
			dbg.recognitionException(nvae);
			throw nvae;
		}
		} finally {dbg.exitDecision(541);}

		switch (alt541) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:773:9: ( SASS_AT_ROOT ( ws selectorsGroup )? )
				{
				dbg.location(773,9);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:773:9: ( SASS_AT_ROOT ( ws selectorsGroup )? )
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:773:10: SASS_AT_ROOT ( ws selectorsGroup )?
				{
				dbg.location(773,10);
				match(input,SASS_AT_ROOT,FOLLOW_SASS_AT_ROOT_in_synpred26_Css34296); if (state.failed) return;dbg.location(773,23);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:773:23: ( ws selectorsGroup )?
				int alt536=2;
				try { dbg.enterSubRule(536);
				try { dbg.enterDecision(536, decisionCanBacktrack[536]);

				try {
					isCyclicDecision = true;
					alt536 = dfa536.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(536);}

				switch (alt536) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:773:24: ws selectorsGroup
						{
						dbg.location(773,24);
						pushFollow(FOLLOW_ws_in_synpred26_Css34299);
						ws();
						state._fsp--;
						if (state.failed) return;dbg.location(773,27);
						pushFollow(FOLLOW_selectorsGroup_in_synpred26_Css34301);
						selectorsGroup();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(536);}

				}

				}
				break;
			case 2 :
				dbg.enterAlt(2);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:773:48: ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN )
				{
				dbg.location(773,48);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:773:48: ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN )
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:773:49: SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN
				{
				dbg.location(773,49);
				match(input,SASS_AT_ROOT,FOLLOW_SASS_AT_ROOT_in_synpred26_Css34310); if (state.failed) return;dbg.location(773,62);
				pushFollow(FOLLOW_ws_in_synpred26_Css34312);
				ws();
				state._fsp--;
				if (state.failed) return;dbg.location(773,65);
				match(input,LPAREN,FOLLOW_LPAREN_in_synpred26_Css34314); if (state.failed) return;dbg.location(773,72);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:773:72: ( ws )?
				int alt537=2;
				try { dbg.enterSubRule(537);
				try { dbg.enterDecision(537, decisionCanBacktrack[537]);

				int LA537_0 = input.LA(1);
				if ( (LA537_0==COMMENT||LA537_0==NL||LA537_0==WS) ) {
					alt537=1;
				}
				} finally {dbg.exitDecision(537);}

				switch (alt537) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:773:72: ws
						{
						dbg.location(773,72);
						pushFollow(FOLLOW_ws_in_synpred26_Css34316);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(537);}
				dbg.location(773,76);
				match(input,IDENT,FOLLOW_IDENT_in_synpred26_Css34319); if (state.failed) return;dbg.location(773,82);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:773:82: ( ws )?
				int alt538=2;
				try { dbg.enterSubRule(538);
				try { dbg.enterDecision(538, decisionCanBacktrack[538]);

				int LA538_0 = input.LA(1);
				if ( (LA538_0==COMMENT||LA538_0==NL||LA538_0==WS) ) {
					alt538=1;
				}
				} finally {dbg.exitDecision(538);}

				switch (alt538) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:773:82: ws
						{
						dbg.location(773,82);
						pushFollow(FOLLOW_ws_in_synpred26_Css34321);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(538);}
				dbg.location(773,86);
				match(input,COLON,FOLLOW_COLON_in_synpred26_Css34324); if (state.failed) return;dbg.location(773,92);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:773:92: ( ws )?
				int alt539=2;
				try { dbg.enterSubRule(539);
				try { dbg.enterDecision(539, decisionCanBacktrack[539]);

				int LA539_0 = input.LA(1);
				if ( (LA539_0==COMMENT||LA539_0==NL||LA539_0==WS) ) {
					alt539=1;
				}
				} finally {dbg.exitDecision(539);}

				switch (alt539) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:773:92: ws
						{
						dbg.location(773,92);
						pushFollow(FOLLOW_ws_in_synpred26_Css34326);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(539);}
				dbg.location(773,96);
				match(input,IDENT,FOLLOW_IDENT_in_synpred26_Css34329); if (state.failed) return;dbg.location(773,102);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:773:102: ( ws )?
				int alt540=2;
				try { dbg.enterSubRule(540);
				try { dbg.enterDecision(540, decisionCanBacktrack[540]);

				int LA540_0 = input.LA(1);
				if ( (LA540_0==COMMENT||LA540_0==NL||LA540_0==WS) ) {
					alt540=1;
				}
				} finally {dbg.exitDecision(540);}

				switch (alt540) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:773:102: ws
						{
						dbg.location(773,102);
						pushFollow(FOLLOW_ws_in_synpred26_Css34331);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(540);}
				dbg.location(773,106);
				match(input,RPAREN,FOLLOW_RPAREN_in_synpred26_Css34334); if (state.failed) return;
				}

				}
				break;
			case 3 :
				dbg.enterAlt(3);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:773:116: selectorsGroup
				{
				dbg.location(773,116);
				pushFollow(FOLLOW_selectorsGroup_in_synpred26_Css34339);
				selectorsGroup();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(541);}
		dbg.location(773,132);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:773:132: ( ws )?
		int alt542=2;
		try { dbg.enterSubRule(542);
		try { dbg.enterDecision(542, decisionCanBacktrack[542]);

		int LA542_0 = input.LA(1);
		if ( (LA542_0==COMMENT||LA542_0==NL||LA542_0==WS) ) {
			alt542=1;
		}
		} finally {dbg.exitDecision(542);}

		switch (alt542) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:773:132: ws
				{
				dbg.location(773,132);
				pushFollow(FOLLOW_ws_in_synpred26_Css34342);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(542);}
		dbg.location(773,136);
		match(input,LBRACE,FOLLOW_LBRACE_in_synpred26_Css34345); if (state.failed) return;
		}

	}
	// $ANTLR end synpred26_Css3

	// $ANTLR start synpred27_Css3
	public final void synpred27_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:774:7: ( propertyDeclaration )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:774:8: propertyDeclaration
		{
		dbg.location(774,8);
		pushFollow(FOLLOW_propertyDeclaration_in_synpred27_Css34357);
		propertyDeclaration();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred27_Css3

	// $ANTLR start synpred28_Css3
	public final void synpred28_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:776:7: ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:776:8: property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI )
		{
		dbg.location(776,8);
		pushFollow(FOLLOW_property_in_synpred28_Css34374);
		property();
		state._fsp--;
		if (state.failed) return;dbg.location(776,17);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:776:17: ( ws )?
		int alt543=2;
		try { dbg.enterSubRule(543);
		try { dbg.enterDecision(543, decisionCanBacktrack[543]);

		int LA543_0 = input.LA(1);
		if ( (LA543_0==COMMENT||LA543_0==NL||LA543_0==WS) ) {
			alt543=1;
		}
		} finally {dbg.exitDecision(543);}

		switch (alt543) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:776:17: ws
				{
				dbg.location(776,17);
				pushFollow(FOLLOW_ws_in_synpred28_Css34376);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(543);}
		dbg.location(776,21);
		match(input,COLON,FOLLOW_COLON_in_synpred28_Css34379); if (state.failed) return;dbg.location(776,27);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:776:27: (~ ( LBRACE | SEMI | RBRACE ) )*
		try { dbg.enterSubRule(544);

		loop544:
		while (true) {
			int alt544=2;
			try { dbg.enterDecision(544, decisionCanBacktrack[544]);

			int LA544_0 = input.LA(1);
			if ( ((LA544_0 >= A && LA544_0 <= LAYER_SYM)||(LA544_0 >= LBRACKET && LA544_0 <= R)||(LA544_0 >= RBRACKET && LA544_0 <= SASS_WHILE)||(LA544_0 >= SOLIDUS && LA544_0 <= Z)) ) {
				alt544=1;
			}

			} finally {dbg.exitDecision(544);}

			switch (alt544) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
				{
				dbg.location(776,27);
				if ( (input.LA(1) >= A && input.LA(1) <= LAYER_SYM)||(input.LA(1) >= LBRACKET && input.LA(1) <= R)||(input.LA(1) >= RBRACKET && input.LA(1) <= SASS_WHILE)||(input.LA(1) >= SOLIDUS && input.LA(1) <= Z) ) {
					input.consume();
					state.errorRecovery=false;
					state.failed=false;
				}
				else {
					if (state.backtracking>0) {state.failed=true; return;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					dbg.recognitionException(mse);
					throw mse;
				}
				}
				break;

			default :
				break loop544;
			}
		}
		} finally {dbg.exitSubRule(544);}
		dbg.location(776,50);
		if ( input.LA(1)==RBRACE||input.LA(1)==SEMI ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			dbg.recognitionException(mse);
			throw mse;
		}
		}

	}
	// $ANTLR end synpred28_Css3

	// $ANTLR start synpred29_Css3
	public final void synpred29_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:777:7: ( cp_mixin_declaration )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:777:8: cp_mixin_declaration
		{
		dbg.location(777,8);
		pushFollow(FOLLOW_cp_mixin_declaration_in_synpred29_Css34408);
		cp_mixin_declaration();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred29_Css3

	// $ANTLR start synpred30_Css3
	public final void synpred30_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:778:7: ( cp_mixin_call )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:778:8: cp_mixin_call
		{
		dbg.location(778,8);
		pushFollow(FOLLOW_cp_mixin_call_in_synpred30_Css34420);
		cp_mixin_call();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred30_Css3

	// $ANTLR start synpred31_Css3
	public final void synpred31_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:779:7: ( cp_mixin_call )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:779:8: cp_mixin_call
		{
		dbg.location(779,8);
		pushFollow(FOLLOW_cp_mixin_call_in_synpred31_Css34441);
		cp_mixin_call();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred31_Css3

	// $ANTLR start synpred32_Css3
	public final void synpred32_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:813:65: ( ( ws )? esPred )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:813:66: ( ws )? esPred
		{
		dbg.location(813,66);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:813:66: ( ws )?
		int alt545=2;
		try { dbg.enterSubRule(545);
		try { dbg.enterDecision(545, decisionCanBacktrack[545]);

		int LA545_0 = input.LA(1);
		if ( (LA545_0==COMMENT||LA545_0==NL||LA545_0==WS) ) {
			alt545=1;
		}
		} finally {dbg.exitDecision(545);}

		switch (alt545) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:813:66: ws
				{
				dbg.location(813,66);
				pushFollow(FOLLOW_ws_in_synpred32_Css34739);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(545);}
		dbg.location(813,70);
		pushFollow(FOLLOW_esPred_in_synpred32_Css34742);
		esPred();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred32_Css3

	// $ANTLR start synpred33_Css3
	public final void synpred33_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:814:4: ( typeSelector )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:814:5: typeSelector
		{
		dbg.location(814,5);
		pushFollow(FOLLOW_typeSelector_in_synpred33_Css34777);
		typeSelector();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred33_Css3

	// $ANTLR start synpred34_Css3
	public final void synpred34_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:814:34: ( ( ws )? esPred )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:814:35: ( ws )? esPred
		{
		dbg.location(814,35);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:814:35: ( ws )?
		int alt546=2;
		try { dbg.enterSubRule(546);
		try { dbg.enterDecision(546, decisionCanBacktrack[546]);

		int LA546_0 = input.LA(1);
		if ( (LA546_0==COMMENT||LA546_0==NL||LA546_0==WS) ) {
			alt546=1;
		}
		} finally {dbg.exitDecision(546);}

		switch (alt546) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:814:35: ws
				{
				dbg.location(814,35);
				pushFollow(FOLLOW_ws_in_synpred34_Css34784);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(546);}
		dbg.location(814,39);
		pushFollow(FOLLOW_esPred_in_synpred34_Css34787);
		esPred();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred34_Css3

	// $ANTLR start synpred35_Css3
	public final void synpred35_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:828:7: ( ( IDENT | STAR )? PIPE )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:828:8: ( IDENT | STAR )? PIPE
		{
		dbg.location(828,8);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:828:8: ( IDENT | STAR )?
		int alt547=2;
		try { dbg.enterSubRule(547);
		try { dbg.enterDecision(547, decisionCanBacktrack[547]);

		int LA547_0 = input.LA(1);
		if ( (LA547_0==IDENT||LA547_0==STAR) ) {
			alt547=1;
		}
		} finally {dbg.exitDecision(547);}

		switch (alt547) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
				{
				dbg.location(828,8);
				if ( input.LA(1)==IDENT||input.LA(1)==STAR ) {
					input.consume();
					state.errorRecovery=false;
					state.failed=false;
				}
				else {
					if (state.backtracking>0) {state.failed=true; return;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					dbg.recognitionException(mse);
					throw mse;
				}
				}
				break;

		}
		} finally {dbg.exitSubRule(547);}
		dbg.location(828,24);
		match(input,PIPE,FOLLOW_PIPE_in_synpred35_Css34898); if (state.failed) return;
		}

	}
	// $ANTLR end synpred35_Css3

	// $ANTLR start synpred36_Css3
	public final void synpred36_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:983:58: ( functionName ( ws )? LPAREN )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:983:59: functionName ( ws )? LPAREN
		{
		dbg.location(983,59);
		pushFollow(FOLLOW_functionName_in_synpred36_Css36459);
		functionName();
		state._fsp--;
		if (state.failed) return;dbg.location(983,72);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:983:72: ( ws )?
		int alt548=2;
		try { dbg.enterSubRule(548);
		try { dbg.enterDecision(548, decisionCanBacktrack[548]);

		int LA548_0 = input.LA(1);
		if ( (LA548_0==COMMENT||LA548_0==NL||LA548_0==WS) ) {
			alt548=1;
		}
		} finally {dbg.exitDecision(548);}

		switch (alt548) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:983:72: ws
				{
				dbg.location(983,72);
				pushFollow(FOLLOW_ws_in_synpred36_Css36461);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(548);}
		dbg.location(983,76);
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred36_Css36464); if (state.failed) return;
		}

	}
	// $ANTLR end synpred36_Css3

	// $ANTLR start synpred37_Css3
	public final void synpred37_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:985:64: ( functionName ( ws )? LPAREN )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:985:65: functionName ( ws )? LPAREN
		{
		dbg.location(985,65);
		pushFollow(FOLLOW_functionName_in_synpred37_Css36494);
		functionName();
		state._fsp--;
		if (state.failed) return;dbg.location(985,78);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:985:78: ( ws )?
		int alt549=2;
		try { dbg.enterSubRule(549);
		try { dbg.enterDecision(549, decisionCanBacktrack[549]);

		int LA549_0 = input.LA(1);
		if ( (LA549_0==COMMENT||LA549_0==NL||LA549_0==WS) ) {
			alt549=1;
		}
		} finally {dbg.exitDecision(549);}

		switch (alt549) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:985:78: ws
				{
				dbg.location(985,78);
				pushFollow(FOLLOW_ws_in_synpred37_Css36496);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(549);}
		dbg.location(985,82);
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred37_Css36499); if (state.failed) return;
		}

	}
	// $ANTLR end synpred37_Css3

	// $ANTLR start synpred38_Css3
	public final void synpred38_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1025:14: ( ( ws | ( ( ws )? operator ( ws )? ) |) term )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1025:15: ( ws | ( ( ws )? operator ( ws )? ) |) term
		{
		dbg.location(1025,15);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1025:15: ( ws | ( ( ws )? operator ( ws )? ) |)
		int alt552=3;
		try { dbg.enterSubRule(552);
		try { dbg.enterDecision(552, decisionCanBacktrack[552]);

		try {
			isCyclicDecision = true;
			alt552 = dfa552.predict(input);
		}
		catch (NoViableAltException nvae) {
			dbg.recognitionException(nvae);
			throw nvae;
		}
		} finally {dbg.exitDecision(552);}

		switch (alt552) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1025:17: ws
				{
				dbg.location(1025,17);
				pushFollow(FOLLOW_ws_in_synpred38_Css36669);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;
			case 2 :
				dbg.enterAlt(2);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1025:22: ( ( ws )? operator ( ws )? )
				{
				dbg.location(1025,22);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1025:22: ( ( ws )? operator ( ws )? )
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1025:23: ( ws )? operator ( ws )?
				{
				dbg.location(1025,23);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1025:23: ( ws )?
				int alt550=2;
				try { dbg.enterSubRule(550);
				try { dbg.enterDecision(550, decisionCanBacktrack[550]);

				int LA550_0 = input.LA(1);
				if ( (LA550_0==COMMENT||LA550_0==NL||LA550_0==WS) ) {
					alt550=1;
				}
				} finally {dbg.exitDecision(550);}

				switch (alt550) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1025:23: ws
						{
						dbg.location(1025,23);
						pushFollow(FOLLOW_ws_in_synpred38_Css36674);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(550);}
				dbg.location(1025,27);
				pushFollow(FOLLOW_operator_in_synpred38_Css36677);
				operator();
				state._fsp--;
				if (state.failed) return;dbg.location(1025,36);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1025:36: ( ws )?
				int alt551=2;
				try { dbg.enterSubRule(551);
				try { dbg.enterDecision(551, decisionCanBacktrack[551]);

				int LA551_0 = input.LA(1);
				if ( (LA551_0==COMMENT||LA551_0==NL||LA551_0==WS) ) {
					alt551=1;
				}
				} finally {dbg.exitDecision(551);}

				switch (alt551) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1025:36: ws
						{
						dbg.location(1025,36);
						pushFollow(FOLLOW_ws_in_synpred38_Css36679);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(551);}

				}

				}
				break;
			case 3 :
				dbg.enterAlt(3);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1025:56: 
				{
				}
				break;

		}
		} finally {dbg.exitSubRule(552);}
		dbg.location(1025,58);
		pushFollow(FOLLOW_term_in_synpred38_Css36688);
		term();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred38_Css3

	// $ANTLR start synpred39_Css3
	public final void synpred39_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1032:9: ( functionName ( ws )? LPAREN )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1032:10: functionName ( ws )? LPAREN
		{
		dbg.location(1032,10);
		pushFollow(FOLLOW_functionName_in_synpred39_Css36761);
		functionName();
		state._fsp--;
		if (state.failed) return;dbg.location(1032,23);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1032:23: ( ws )?
		int alt553=2;
		try { dbg.enterSubRule(553);
		try { dbg.enterDecision(553, decisionCanBacktrack[553]);

		int LA553_0 = input.LA(1);
		if ( (LA553_0==COMMENT||LA553_0==NL||LA553_0==WS) ) {
			alt553=1;
		}
		} finally {dbg.exitDecision(553);}

		switch (alt553) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1032:23: ws
				{
				dbg.location(1032,23);
				pushFollow(FOLLOW_ws_in_synpred39_Css36763);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(553);}
		dbg.location(1032,27);
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred39_Css36766); if (state.failed) return;
		}

	}
	// $ANTLR end synpred39_Css3

	// $ANTLR start synpred40_Css3
	public final void synpred40_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1098:9: ( fnAttributeName ( ws )? ( OPEQ | COLON ) )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1098:10: fnAttributeName ( ws )? ( OPEQ | COLON )
		{
		dbg.location(1098,10);
		pushFollow(FOLLOW_fnAttributeName_in_synpred40_Css37376);
		fnAttributeName();
		state._fsp--;
		if (state.failed) return;dbg.location(1098,26);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1098:26: ( ws )?
		int alt554=2;
		try { dbg.enterSubRule(554);
		try { dbg.enterDecision(554, decisionCanBacktrack[554]);

		int LA554_0 = input.LA(1);
		if ( (LA554_0==COMMENT||LA554_0==NL||LA554_0==WS) ) {
			alt554=1;
		}
		} finally {dbg.exitDecision(554);}

		switch (alt554) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1098:26: ws
				{
				dbg.location(1098,26);
				pushFollow(FOLLOW_ws_in_synpred40_Css37378);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(554);}
		dbg.location(1098,30);
		if ( input.LA(1)==COLON||input.LA(1)==OPEQ ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			dbg.recognitionException(mse);
			throw mse;
		}
		}

	}
	// $ANTLR end synpred40_Css3

	// $ANTLR start synpred41_Css3
	public final void synpred41_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1099:11: ( cp_expression )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1099:12: cp_expression
		{
		dbg.location(1099,12);
		pushFollow(FOLLOW_cp_expression_in_synpred41_Css37416);
		cp_expression();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred41_Css3

	// $ANTLR start synpred42_Css3
	public final void synpred42_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1111:20: ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1111:21: ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term
		{
		dbg.location(1111,21);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1111:21: ( ws | ( ( ws )? SOLIDUS ( ws )? ) |)
		int alt557=3;
		try { dbg.enterSubRule(557);
		try { dbg.enterDecision(557, decisionCanBacktrack[557]);

		try {
			isCyclicDecision = true;
			alt557 = dfa557.predict(input);
		}
		catch (NoViableAltException nvae) {
			dbg.recognitionException(nvae);
			throw nvae;
		}
		} finally {dbg.exitDecision(557);}

		switch (alt557) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1111:23: ws
				{
				dbg.location(1111,23);
				pushFollow(FOLLOW_ws_in_synpred42_Css37510);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;
			case 2 :
				dbg.enterAlt(2);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1111:28: ( ( ws )? SOLIDUS ( ws )? )
				{
				dbg.location(1111,28);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1111:28: ( ( ws )? SOLIDUS ( ws )? )
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1111:29: ( ws )? SOLIDUS ( ws )?
				{
				dbg.location(1111,29);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1111:29: ( ws )?
				int alt555=2;
				try { dbg.enterSubRule(555);
				try { dbg.enterDecision(555, decisionCanBacktrack[555]);

				int LA555_0 = input.LA(1);
				if ( (LA555_0==COMMENT||LA555_0==NL||LA555_0==WS) ) {
					alt555=1;
				}
				} finally {dbg.exitDecision(555);}

				switch (alt555) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1111:29: ws
						{
						dbg.location(1111,29);
						pushFollow(FOLLOW_ws_in_synpred42_Css37515);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(555);}
				dbg.location(1111,33);
				match(input,SOLIDUS,FOLLOW_SOLIDUS_in_synpred42_Css37518); if (state.failed) return;dbg.location(1111,41);
				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1111:41: ( ws )?
				int alt556=2;
				try { dbg.enterSubRule(556);
				try { dbg.enterDecision(556, decisionCanBacktrack[556]);

				int LA556_0 = input.LA(1);
				if ( (LA556_0==COMMENT||LA556_0==NL||LA556_0==WS) ) {
					alt556=1;
				}
				} finally {dbg.exitDecision(556);}

				switch (alt556) {
					case 1 :
						dbg.enterAlt(1);

						// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1111:41: ws
						{
						dbg.location(1111,41);
						pushFollow(FOLLOW_ws_in_synpred42_Css37520);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(556);}

				}

				}
				break;
			case 3 :
				dbg.enterAlt(3);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1111:61: 
				{
				}
				break;

		}
		} finally {dbg.exitSubRule(557);}
		dbg.location(1111,63);
		pushFollow(FOLLOW_term_in_synpred42_Css37529);
		term();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred42_Css3

	// $ANTLR start synpred44_Css3
	public final void synpred44_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:6: ( ( ws )? COMMA ( ws )? cp_expression )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:7: ( ws )? COMMA ( ws )? cp_expression
		{
		dbg.location(1146,7);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:7: ( ws )?
		int alt558=2;
		try { dbg.enterSubRule(558);
		try { dbg.enterDecision(558, decisionCanBacktrack[558]);

		int LA558_0 = input.LA(1);
		if ( (LA558_0==COMMENT||LA558_0==NL||LA558_0==WS) ) {
			alt558=1;
		}
		} finally {dbg.exitDecision(558);}

		switch (alt558) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:7: ws
				{
				dbg.location(1146,7);
				pushFollow(FOLLOW_ws_in_synpred44_Css37985);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(558);}
		dbg.location(1146,11);
		match(input,COMMA,FOLLOW_COMMA_in_synpred44_Css37988); if (state.failed) return;dbg.location(1146,17);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:17: ( ws )?
		int alt559=2;
		try { dbg.enterSubRule(559);
		try { dbg.enterDecision(559, decisionCanBacktrack[559]);

		int LA559_0 = input.LA(1);
		if ( (LA559_0==COMMENT||LA559_0==NL||LA559_0==WS) ) {
			alt559=1;
		}
		} finally {dbg.exitDecision(559);}

		switch (alt559) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:17: ws
				{
				dbg.location(1146,17);
				pushFollow(FOLLOW_ws_in_synpred44_Css37990);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(559);}
		dbg.location(1146,21);
		pushFollow(FOLLOW_cp_expression_in_synpred44_Css37993);
		cp_expression();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred44_Css3

	// $ANTLR start synpred45_Css3
	public final void synpred45_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1162:7: ( cp_expression_atom )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1162:8: cp_expression_atom
		{
		dbg.location(1162,8);
		pushFollow(FOLLOW_cp_expression_atom_in_synpred45_Css38060);
		cp_expression_atom();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred45_Css3

	// $ANTLR start synpred46_Css3
	public final void synpred46_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1164:9: ( ( ws )? cp_expression_operator )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1164:10: ( ws )? cp_expression_operator
		{
		dbg.location(1164,10);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1164:10: ( ws )?
		int alt560=2;
		try { dbg.enterSubRule(560);
		try { dbg.enterDecision(560, decisionCanBacktrack[560]);

		int LA560_0 = input.LA(1);
		if ( (LA560_0==COMMENT||LA560_0==NL||LA560_0==WS) ) {
			alt560=1;
		}
		} finally {dbg.exitDecision(560);}

		switch (alt560) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1164:10: ws
				{
				dbg.location(1164,10);
				pushFollow(FOLLOW_ws_in_synpred46_Css38083);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(560);}
		dbg.location(1164,14);
		pushFollow(FOLLOW_cp_expression_operator_in_synpred46_Css38086);
		cp_expression_operator();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred46_Css3

	// $ANTLR start synpred47_Css3
	public final void synpred47_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1165:11: ( ( ws )? cp_expression_atom )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1165:12: ( ws )? cp_expression_atom
		{
		dbg.location(1165,12);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1165:12: ( ws )?
		int alt561=2;
		try { dbg.enterSubRule(561);
		try { dbg.enterDecision(561, decisionCanBacktrack[561]);

		int LA561_0 = input.LA(1);
		if ( (LA561_0==COMMENT||LA561_0==NL||LA561_0==WS) ) {
			alt561=1;
		}
		} finally {dbg.exitDecision(561);}

		switch (alt561) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1165:12: ws
				{
				dbg.location(1165,12);
				pushFollow(FOLLOW_ws_in_synpred47_Css38112);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(561);}
		dbg.location(1165,16);
		pushFollow(FOLLOW_cp_expression_atom_in_synpred47_Css38115);
		cp_expression_atom();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred47_Css3

	// $ANTLR start synpred48_Css3
	public final void synpred48_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1179:13: ( cp_math_expression )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1179:14: cp_math_expression
		{
		dbg.location(1179,14);
		pushFollow(FOLLOW_cp_math_expression_in_synpred48_Css38255);
		cp_math_expression();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred48_Css3

	// $ANTLR start synpred49_Css3
	public final void synpred49_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1206:13: ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1206:14: ( ws )? ( PLUS | MINUS | STAR | SOLIDUS )
		{
		dbg.location(1206,14);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1206:14: ( ws )?
		int alt562=2;
		try { dbg.enterSubRule(562);
		try { dbg.enterDecision(562, decisionCanBacktrack[562]);

		int LA562_0 = input.LA(1);
		if ( (LA562_0==COMMENT||LA562_0==NL||LA562_0==WS) ) {
			alt562=1;
		}
		} finally {dbg.exitDecision(562);}

		switch (alt562) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1206:14: ws
				{
				dbg.location(1206,14);
				pushFollow(FOLLOW_ws_in_synpred49_Css38388);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(562);}
		dbg.location(1206,18);
		if ( input.LA(1)==MINUS||input.LA(1)==PLUS||(input.LA(1) >= SOLIDUS && input.LA(1) <= STAR) ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			dbg.recognitionException(mse);
			throw mse;
		}
		}

	}
	// $ANTLR end synpred49_Css3

	// $ANTLR start synpred50_Css3
	public final void synpred50_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:77: ( ( ws )? combinator ( ws )? )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:78: ( ws )? combinator ( ws )?
		{
		dbg.location(1238,78);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:78: ( ws )?
		int alt563=2;
		try { dbg.enterSubRule(563);
		try { dbg.enterDecision(563, decisionCanBacktrack[563]);

		int LA563_0 = input.LA(1);
		if ( (LA563_0==COMMENT||LA563_0==NL||LA563_0==WS) ) {
			alt563=1;
		}
		} finally {dbg.exitDecision(563);}

		switch (alt563) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:78: ws
				{
				dbg.location(1238,78);
				pushFollow(FOLLOW_ws_in_synpred50_Css38680);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(563);}
		dbg.location(1238,82);
		pushFollow(FOLLOW_combinator_in_synpred50_Css38683);
		combinator();
		state._fsp--;
		if (state.failed) return;dbg.location(1238,93);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:93: ( ws )?
		int alt564=2;
		try { dbg.enterSubRule(564);
		try { dbg.enterDecision(564, decisionCanBacktrack[564]);

		int LA564_0 = input.LA(1);
		if ( (LA564_0==COMMENT||LA564_0==NL||LA564_0==WS) ) {
			alt564=1;
		}
		} finally {dbg.exitDecision(564);}

		switch (alt564) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:93: ws
				{
				dbg.location(1238,93);
				pushFollow(FOLLOW_ws_in_synpred50_Css38685);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(564);}

		}

	}
	// $ANTLR end synpred50_Css3

	// $ANTLR start synpred51_Css3
	public final void synpred51_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:172: ( pseudo )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:173: pseudo
		{
		dbg.location(1238,173);
		pushFollow(FOLLOW_pseudo_in_synpred51_Css38721);
		pseudo();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred51_Css3

	// $ANTLR start synpred52_Css3
	public final void synpred52_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:191: ( ( ws )? LPAREN )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:192: ( ws )? LPAREN
		{
		dbg.location(1238,192);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:192: ( ws )?
		int alt565=2;
		try { dbg.enterSubRule(565);
		try { dbg.enterDecision(565, decisionCanBacktrack[565]);

		int LA565_0 = input.LA(1);
		if ( (LA565_0==COMMENT||LA565_0==NL||LA565_0==WS) ) {
			alt565=1;
		}
		} finally {dbg.exitDecision(565);}

		switch (alt565) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:192: ws
				{
				dbg.location(1238,192);
				pushFollow(FOLLOW_ws_in_synpred52_Css38729);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(565);}
		dbg.location(1238,196);
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred52_Css38732); if (state.failed) return;
		}

	}
	// $ANTLR end synpred52_Css3

	// $ANTLR start synpred53_Css3
	public final void synpred53_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1247:25: ( webkitKeyframeSelectors )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1247:26: webkitKeyframeSelectors
		{
		dbg.location(1247,26);
		pushFollow(FOLLOW_webkitKeyframeSelectors_in_synpred53_Css38848);
		webkitKeyframeSelectors();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred53_Css3

	// $ANTLR start synpred54_Css3
	public final void synpred54_Css3_fragment() throws RecognitionException {
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1425:19: ( ( ws )? COMMA )
		dbg.enterAlt(1);

		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1425:20: ( ws )? COMMA
		{
		dbg.location(1425,20);
		// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1425:20: ( ws )?
		int alt566=2;
		try { dbg.enterSubRule(566);
		try { dbg.enterDecision(566, decisionCanBacktrack[566]);

		int LA566_0 = input.LA(1);
		if ( (LA566_0==COMMENT||LA566_0==NL||LA566_0==WS) ) {
			alt566=1;
		}
		} finally {dbg.exitDecision(566);}

		switch (alt566) {
			case 1 :
				dbg.enterAlt(1);

				// /home/matthias/src/netbeans/ide/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1425:20: ws
				{
				dbg.location(1425,20);
				pushFollow(FOLLOW_ws_in_synpred54_Css310093);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(566);}
		dbg.location(1425,24);
		match(input,COMMA,FOLLOW_COMMA_in_synpred54_Css310096); if (state.failed) return;
		}

	}
	// $ANTLR end synpred54_Css3

	// Delegated rules

	public final boolean synpred53_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred53_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred14_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred14_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred22_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred22_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred9_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred9_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred45_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred45_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred4_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred4_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred37_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred37_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred19_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred19_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred23_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred23_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred31_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred31_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred54_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred54_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred15_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred15_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred32_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred32_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred35_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred35_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred38_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred38_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred46_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred46_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred18_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred18_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred27_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred27_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred21_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred21_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred29_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred29_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred40_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred40_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred16_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred16_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred24_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred24_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred13_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred13_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred10_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred10_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred6_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred6_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred3_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred3_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred11_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred11_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred50_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred50_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred17_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred17_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred42_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred42_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred48_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred48_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred7_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred7_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred34_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred34_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred51_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred51_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred1_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred1_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred26_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred26_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred12_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred12_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred49_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred49_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred20_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred20_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred8_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred8_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred2_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred2_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred5_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred5_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred41_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred41_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred44_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred44_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred30_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred30_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred47_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred47_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred36_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred36_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred39_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred39_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred33_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred33_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred25_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred25_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred52_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred52_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred28_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred28_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}


	protected DFA3 dfa3 = new DFA3(this);
	protected DFA5 dfa5 = new DFA5(this);
	protected DFA7 dfa7 = new DFA7(this);
	protected DFA10 dfa10 = new DFA10(this);
	protected DFA44 dfa44 = new DFA44(this);
	protected DFA32 dfa32 = new DFA32(this);
	protected DFA47 dfa47 = new DFA47(this);
	protected DFA48 dfa48 = new DFA48(this);
	protected DFA49 dfa49 = new DFA49(this);
	protected DFA54 dfa54 = new DFA54(this);
	protected DFA59 dfa59 = new DFA59(this);
	protected DFA58 dfa58 = new DFA58(this);
	protected DFA60 dfa60 = new DFA60(this);
	protected DFA61 dfa61 = new DFA61(this);
	protected DFA66 dfa66 = new DFA66(this);
	protected DFA72 dfa72 = new DFA72(this);
	protected DFA75 dfa75 = new DFA75(this);
	protected DFA81 dfa81 = new DFA81(this);
	protected DFA87 dfa87 = new DFA87(this);
	protected DFA89 dfa89 = new DFA89(this);
	protected DFA93 dfa93 = new DFA93(this);
	protected DFA106 dfa106 = new DFA106(this);
	protected DFA115 dfa115 = new DFA115(this);
	protected DFA124 dfa124 = new DFA124(this);
	protected DFA126 dfa126 = new DFA126(this);
	protected DFA127 dfa127 = new DFA127(this);
	protected DFA132 dfa132 = new DFA132(this);
	protected DFA170 dfa170 = new DFA170(this);
	protected DFA182 dfa182 = new DFA182(this);
	protected DFA181 dfa181 = new DFA181(this);
	protected DFA201 dfa201 = new DFA201(this);
	protected DFA203 dfa203 = new DFA203(this);
	protected DFA208 dfa208 = new DFA208(this);
	protected DFA213 dfa213 = new DFA213(this);
	protected DFA219 dfa219 = new DFA219(this);
	protected DFA214 dfa214 = new DFA214(this);
	protected DFA236 dfa236 = new DFA236(this);
	protected DFA229 dfa229 = new DFA229(this);
	protected DFA228 dfa228 = new DFA228(this);
	protected DFA233 dfa233 = new DFA233(this);
	protected DFA238 dfa238 = new DFA238(this);
	protected DFA240 dfa240 = new DFA240(this);
	protected DFA244 dfa244 = new DFA244(this);
	protected DFA252 dfa252 = new DFA252(this);
	protected DFA251 dfa251 = new DFA251(this);
	protected DFA250 dfa250 = new DFA250(this);
	protected DFA256 dfa256 = new DFA256(this);
	protected DFA259 dfa259 = new DFA259(this);
	protected DFA282 dfa282 = new DFA282(this);
	protected DFA305 dfa305 = new DFA305(this);
	protected DFA318 dfa318 = new DFA318(this);
	protected DFA317 dfa317 = new DFA317(this);
	protected DFA333 dfa333 = new DFA333(this);
	protected DFA343 dfa343 = new DFA343(this);
	protected DFA342 dfa342 = new DFA342(this);
	protected DFA352 dfa352 = new DFA352(this);
	protected DFA358 dfa358 = new DFA358(this);
	protected DFA364 dfa364 = new DFA364(this);
	protected DFA378 dfa378 = new DFA378(this);
	protected DFA383 dfa383 = new DFA383(this);
	protected DFA390 dfa390 = new DFA390(this);
	protected DFA394 dfa394 = new DFA394(this);
	protected DFA409 dfa409 = new DFA409(this);
	protected DFA411 dfa411 = new DFA411(this);
	protected DFA424 dfa424 = new DFA424(this);
	protected DFA427 dfa427 = new DFA427(this);
	protected DFA443 dfa443 = new DFA443(this);
	protected DFA472 dfa472 = new DFA472(this);
	protected DFA473 dfa473 = new DFA473(this);
	protected DFA479 dfa479 = new DFA479(this);
	protected DFA487 dfa487 = new DFA487(this);
	protected DFA486 dfa486 = new DFA486(this);
	protected DFA490 dfa490 = new DFA490(this);
	protected DFA495 dfa495 = new DFA495(this);
	protected DFA515 dfa515 = new DFA515(this);
	protected DFA522 dfa522 = new DFA522(this);
	protected DFA517 dfa517 = new DFA517(this);
	protected DFA541 dfa541 = new DFA541(this);
	protected DFA536 dfa536 = new DFA536(this);
	protected DFA552 dfa552 = new DFA552(this);
	protected DFA557 dfa557 = new DFA557(this);
	static final String DFA3_eotS =
		"\5\uffff";
	static final String DFA3_eofS =
		"\1\2\4\uffff";
	static final String DFA3_minS =
		"\1\6\1\23\1\uffff\1\23\1\uffff";
	static final String DFA3_maxS =
		"\1\u0098\1\u0099\1\uffff\1\u0099\1\uffff";
	static final String DFA3_acceptS =
		"\2\uffff\1\2\1\uffff\1\1";
	static final String DFA3_specialS =
		"\5\uffff}>";
	static final String[] DFA3_transitionS = {
			"\2\2\2\uffff\5\2\3\uffff\1\1\1\2\3\uffff\1\2\5\uffff\3\2\7\uffff\1\2"+
			"\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\4\2\2\uffff\1\2\6\uffff\3\2\5\uffff\1\2\11\uffff\1\2\2\uffff\2\2\6\uffff"+
			"\3\2\2\uffff\3\2\1\uffff\2\2\2\uffff\5\2\1\uffff\3\2\1\uffff\6\2\1\uffff"+
			"\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\10\uffff\1\2",
			"\1\2\1\uffff\1\3\75\uffff\1\3\62\uffff\1\4\22\uffff\1\3",
			"",
			"\1\2\1\uffff\1\3\75\uffff\1\3\62\uffff\1\4\22\uffff\1\3",
			""
	};

	static final short[] DFA3_eot = DFA.unpackEncodedString(DFA3_eotS);
	static final short[] DFA3_eof = DFA.unpackEncodedString(DFA3_eofS);
	static final char[] DFA3_min = DFA.unpackEncodedStringToUnsignedChars(DFA3_minS);
	static final char[] DFA3_max = DFA.unpackEncodedStringToUnsignedChars(DFA3_maxS);
	static final short[] DFA3_accept = DFA.unpackEncodedString(DFA3_acceptS);
	static final short[] DFA3_special = DFA.unpackEncodedString(DFA3_specialS);
	static final short[][] DFA3_transition;

	static {
		int numStates = DFA3_transitionS.length;
		DFA3_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA3_transition[i] = DFA.unpackEncodedString(DFA3_transitionS[i]);
		}
	}

	protected class DFA3 extends DFA {

		public DFA3(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 3;
			this.eot = DFA3_eot;
			this.eof = DFA3_eof;
			this.min = DFA3_min;
			this.max = DFA3_max;
			this.accept = DFA3_accept;
			this.special = DFA3_special;
			this.transition = DFA3_transition;
		}
		@Override
		public String getDescription() {
			return "287:6: ( charSet ( ws )? )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA5_eotS =
		"\20\uffff";
	static final String DFA5_eofS =
		"\1\2\17\uffff";
	static final String DFA5_minS =
		"\1\6\1\25\1\uffff\1\25\1\24\1\25\1\63\1\24\1\25\1\uffff\1\24\1\25\1\24"+
		"\1\63\2\24";
	static final String DFA5_maxS =
		"\1\u0098\1\u0099\1\uffff\3\u0099\1\63\2\u0099\1\uffff\3\u0099\1\63\2\u0099";
	static final String DFA5_acceptS =
		"\2\uffff\1\2\6\uffff\1\1\6\uffff";
	static final String DFA5_specialS =
		"\20\uffff}>";
	static final String[] DFA5_transitionS = {
			"\2\2\2\uffff\5\2\3\uffff\2\2\3\uffff\1\2\5\uffff\3\2\7\uffff\1\2\2\uffff"+
			"\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\5\uffff\1\1\1\uffff\4\2\2\uffff"+
			"\1\2\6\uffff\3\2\5\uffff\1\2\11\uffff\1\2\2\uffff\2\2\6\uffff\3\2\2\uffff"+
			"\3\2\1\uffff\2\2\2\uffff\5\2\1\uffff\3\2\1\uffff\6\2\1\uffff\1\2\1\uffff"+
			"\1\2\1\uffff\1\2\1\uffff\5\2\10\uffff\1\2",
			"\1\3\75\uffff\1\3\105\uffff\1\3",
			"",
			"\1\5\35\uffff\1\4\10\uffff\1\2\26\uffff\1\5\105\uffff\1\5",
			"\1\10\1\7\11\uffff\1\6\34\uffff\1\2\26\uffff\1\7\57\uffff\1\11\25\uffff"+
			"\1\7",
			"\1\5\35\uffff\1\4\10\uffff\1\2\26\uffff\1\5\105\uffff\1\5",
			"\1\12",
			"\1\10\1\7\46\uffff\1\2\26\uffff\1\7\105\uffff\1\7",
			"\1\13\35\uffff\1\14\37\uffff\1\13\105\uffff\1\13",
			"",
			"\1\10\1\7\11\uffff\1\6\34\uffff\1\2\26\uffff\1\7\57\uffff\1\11\25\uffff"+
			"\1\7",
			"\1\13\35\uffff\1\14\37\uffff\1\13\105\uffff\1\13",
			"\1\10\1\16\11\uffff\1\15\63\uffff\1\16\57\uffff\1\11\25\uffff\1\16",
			"\1\17",
			"\1\10\1\16\75\uffff\1\16\105\uffff\1\16",
			"\1\10\1\16\11\uffff\1\15\63\uffff\1\16\57\uffff\1\11\25\uffff\1\16"
	};

	static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_eotS);
	static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_eofS);
	static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_minS);
	static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_maxS);
	static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_acceptS);
	static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_specialS);
	static final short[][] DFA5_transition;

	static {
		int numStates = DFA5_transitionS.length;
		DFA5_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA5_transition[i] = DFA.unpackEncodedString(DFA5_transitionS[i]);
		}
	}

	protected class DFA5 extends DFA {

		public DFA5(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 5;
			this.eot = DFA5_eot;
			this.eof = DFA5_eof;
			this.min = DFA5_min;
			this.max = DFA5_max;
			this.accept = DFA5_accept;
			this.special = DFA5_special;
			this.transition = DFA5_transition;
		}
		@Override
		public String getDescription() {
			return "288:9: ( layerStatement ( ws )? )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA7_eotS =
		"\5\uffff";
	static final String DFA7_eofS =
		"\1\2\4\uffff";
	static final String DFA7_minS =
		"\1\6\1\23\1\uffff\1\23\1\uffff";
	static final String DFA7_maxS =
		"\1\u0098\1\u0099\1\uffff\1\u0099\1\uffff";
	static final String DFA7_acceptS =
		"\2\uffff\1\2\1\uffff\1\1";
	static final String DFA7_specialS =
		"\5\uffff}>";
	static final String[] DFA7_transitionS = {
			"\2\2\2\uffff\5\2\3\uffff\2\2\3\uffff\1\2\5\uffff\3\2\7\uffff\1\2\2\uffff"+
			"\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\5\uffff\1\2\1\uffff\4\2\2\uffff"+
			"\1\2\6\uffff\3\2\5\uffff\1\1\11\uffff\1\2\2\uffff\2\2\6\uffff\3\2\2\uffff"+
			"\3\2\1\uffff\2\2\2\uffff\5\2\1\uffff\3\2\1\uffff\6\2\1\uffff\1\2\1\uffff"+
			"\1\2\1\uffff\1\2\1\uffff\5\2\10\uffff\1\2",
			"\1\2\1\uffff\1\3\35\uffff\1\4\37\uffff\1\3\62\uffff\1\4\14\uffff\1\4"+
			"\5\uffff\1\3",
			"",
			"\1\2\1\uffff\1\3\35\uffff\1\4\37\uffff\1\3\62\uffff\1\4\14\uffff\1\4"+
			"\5\uffff\1\3",
			""
	};

	static final short[] DFA7_eot = DFA.unpackEncodedString(DFA7_eotS);
	static final short[] DFA7_eof = DFA.unpackEncodedString(DFA7_eofS);
	static final char[] DFA7_min = DFA.unpackEncodedStringToUnsignedChars(DFA7_minS);
	static final char[] DFA7_max = DFA.unpackEncodedStringToUnsignedChars(DFA7_maxS);
	static final short[] DFA7_accept = DFA.unpackEncodedString(DFA7_acceptS);
	static final short[] DFA7_special = DFA.unpackEncodedString(DFA7_specialS);
	static final short[][] DFA7_transition;

	static {
		int numStates = DFA7_transitionS.length;
		DFA7_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA7_transition[i] = DFA.unpackEncodedString(DFA7_transitionS[i]);
		}
	}

	protected class DFA7 extends DFA {

		public DFA7(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 7;
			this.eot = DFA7_eot;
			this.eof = DFA7_eof;
			this.min = DFA7_min;
			this.max = DFA7_max;
			this.accept = DFA7_accept;
			this.special = DFA7_special;
			this.transition = DFA7_transition;
		}
		@Override
		public String getDescription() {
			return "290:9: ( namespaces )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA10_eotS =
		"\5\uffff";
	static final String DFA10_eofS =
		"\1\1\4\uffff";
	static final String DFA10_minS =
		"\1\6\1\uffff\2\23\1\uffff";
	static final String DFA10_maxS =
		"\1\u0098\1\uffff\2\u0099\1\uffff";
	static final String DFA10_acceptS =
		"\1\uffff\1\2\2\uffff\1\1";
	static final String DFA10_specialS =
		"\5\uffff}>";
	static final String[] DFA10_transitionS = {
			"\2\1\2\uffff\5\1\3\uffff\2\1\3\uffff\1\1\5\uffff\3\1\7\uffff\1\1\2\uffff"+
			"\2\1\2\uffff\2\1\3\uffff\1\1\1\uffff\1\1\5\uffff\1\1\1\uffff\4\1\2\uffff"+
			"\1\1\6\uffff\3\1\5\uffff\1\2\11\uffff\1\1\2\uffff\2\1\6\uffff\3\1\2\uffff"+
			"\3\1\1\uffff\2\1\2\uffff\5\1\1\uffff\3\1\1\uffff\6\1\1\uffff\1\1\1\uffff"+
			"\1\1\1\uffff\1\1\1\uffff\5\1\10\uffff\1\1",
			"",
			"\1\1\1\uffff\1\3\35\uffff\1\4\37\uffff\1\3\62\uffff\1\4\14\uffff\1\4"+
			"\5\uffff\1\3",
			"\1\1\1\uffff\1\3\35\uffff\1\4\37\uffff\1\3\62\uffff\1\4\14\uffff\1\4"+
			"\5\uffff\1\3",
			""
	};

	static final short[] DFA10_eot = DFA.unpackEncodedString(DFA10_eotS);
	static final short[] DFA10_eof = DFA.unpackEncodedString(DFA10_eofS);
	static final char[] DFA10_min = DFA.unpackEncodedStringToUnsignedChars(DFA10_minS);
	static final char[] DFA10_max = DFA.unpackEncodedStringToUnsignedChars(DFA10_maxS);
	static final short[] DFA10_accept = DFA.unpackEncodedString(DFA10_acceptS);
	static final short[] DFA10_special = DFA.unpackEncodedString(DFA10_specialS);
	static final short[][] DFA10_transition;

	static {
		int numStates = DFA10_transitionS.length;
		DFA10_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA10_transition[i] = DFA.unpackEncodedString(DFA10_transitionS[i]);
		}
	}

	protected class DFA10 extends DFA {

		public DFA10(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 10;
			this.eot = DFA10_eot;
			this.eof = DFA10_eof;
			this.min = DFA10_min;
			this.max = DFA10_max;
			this.accept = DFA10_accept;
			this.special = DFA10_special;
			this.transition = DFA10_transition;
		}
		@Override
		public String getDescription() {
			return "()+ loopback of 297:2: ( namespace ( ws )? )+";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA44_eotS =
		"\10\uffff";
	static final String DFA44_eofS =
		"\10\uffff";
	static final String DFA44_minS =
		"\1\65\2\25\1\0\1\uffff\1\0\2\uffff";
	static final String DFA44_maxS =
		"\1\65\2\u0099\1\0\1\uffff\1\0\2\uffff";
	static final String DFA44_acceptS =
		"\4\uffff\1\3\1\uffff\1\1\1\2";
	static final String DFA44_specialS =
		"\3\uffff\1\0\1\uffff\1\1\2\uffff}>";
	static final String[] DFA44_transitionS = {
			"\1\1",
			"\1\2\62\uffff\1\4\12\uffff\1\2\62\uffff\1\3\14\uffff\1\3\5\uffff\1\2",
			"\1\2\62\uffff\1\4\12\uffff\1\2\62\uffff\1\5\14\uffff\1\5\5\uffff\1\2",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			""
	};

	static final short[] DFA44_eot = DFA.unpackEncodedString(DFA44_eotS);
	static final short[] DFA44_eof = DFA.unpackEncodedString(DFA44_eofS);
	static final char[] DFA44_min = DFA.unpackEncodedStringToUnsignedChars(DFA44_minS);
	static final char[] DFA44_max = DFA.unpackEncodedStringToUnsignedChars(DFA44_maxS);
	static final short[] DFA44_accept = DFA.unpackEncodedString(DFA44_acceptS);
	static final short[] DFA44_special = DFA.unpackEncodedString(DFA44_specialS);
	static final short[][] DFA44_transition;

	static {
		int numStates = DFA44_transitionS.length;
		DFA44_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA44_transition[i] = DFA.unpackEncodedString(DFA44_transitionS[i]);
		}
	}

	protected class DFA44 extends DFA {

		public DFA44(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 44;
			this.eot = DFA44_eot;
			this.eof = DFA44_eof;
			this.min = DFA44_min;
			this.max = DFA44_max;
			this.accept = DFA44_accept;
			this.special = DFA44_special;
			this.transition = DFA44_transition;
		}
		@Override
		public String getDescription() {
			return "331:1: importItem : ( IMPORT_SYM ( ws )? resourceIdentifier ( ws )? ( importLayer )? ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? |{...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ws )? ( importLayer )? ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? |{...}? IMPORT_SYM ( ws )? ( LPAREN less_import_types RPAREN ( ws )? )? resourceIdentifier ( ws )? ( importLayer )? ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? );";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA44_3 = input.LA(1);
						 
						int index44_3 = input.index();
						input.rewind();
						s = -1;
						if ( (!(evalPredicate((evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")),""))) ) {s = 6;}
						else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 7;}
						else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 4;}
						 
						input.seek(index44_3);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA44_5 = input.LA(1);
						 
						int index44_5 = input.index();
						input.rewind();
						s = -1;
						if ( (!(evalPredicate((evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")),""))) ) {s = 6;}
						else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 7;}
						else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 4;}
						 
						input.seek(index44_5);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 44, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA32_eotS =
		"\4\uffff";
	static final String DFA32_eofS =
		"\2\2\2\uffff";
	static final String DFA32_minS =
		"\2\6\2\uffff";
	static final String DFA32_maxS =
		"\2\u0099\2\uffff";
	static final String DFA32_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA32_specialS =
		"\4\uffff}>";
	static final String[] DFA32_transitionS = {
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\3\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\4\2\2\uffff\1\2\4\uffff\1\2\1\uffff\3\2\5\uffff\1\2\1\1\3\uffff\1\2"+
			"\4\uffff\1\2\2\uffff\2\2\2\uffff\1\2\3\uffff\4\2\1\uffff\3\2\1\uffff"+
			"\2\2\2\uffff\5\2\1\uffff\3\2\1\uffff\6\2\1\uffff\1\2\1\uffff\1\2\1\uffff"+
			"\1\2\1\uffff\5\2\6\uffff\1\2\1\uffff\1\2\1\1",
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\3\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\4\2\2\uffff\1\2\4\uffff\1\2\1\uffff\3\2\5\uffff\1\2\1\1\3\uffff\1\2"+
			"\4\uffff\1\2\2\uffff\2\2\2\uffff\1\2\3\uffff\4\2\1\uffff\3\2\1\uffff"+
			"\2\2\1\uffff\6\2\1\uffff\3\2\1\uffff\6\2\1\uffff\1\2\1\uffff\1\2\1\uffff"+
			"\1\2\1\uffff\5\2\6\uffff\1\2\1\uffff\1\2\1\1",
			"",
			""
	};

	static final short[] DFA32_eot = DFA.unpackEncodedString(DFA32_eotS);
	static final short[] DFA32_eof = DFA.unpackEncodedString(DFA32_eofS);
	static final char[] DFA32_min = DFA.unpackEncodedStringToUnsignedChars(DFA32_minS);
	static final char[] DFA32_max = DFA.unpackEncodedStringToUnsignedChars(DFA32_maxS);
	static final short[] DFA32_accept = DFA.unpackEncodedString(DFA32_acceptS);
	static final short[] DFA32_special = DFA.unpackEncodedString(DFA32_specialS);
	static final short[][] DFA32_transition;

	static {
		int numStates = DFA32_transitionS.length;
		DFA32_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA32_transition[i] = DFA.unpackEncodedString(DFA32_transitionS[i]);
		}
	}

	protected class DFA32 extends DFA {

		public DFA32(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 32;
			this.eot = DFA32_eot;
			this.eof = DFA32_eof;
			this.min = DFA32_min;
			this.max = DFA32_max;
			this.accept = DFA32_accept;
			this.special = DFA32_special;
			this.transition = DFA32_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 336:61: ( ( ws )? COMMA ( ws )? resourceIdentifier )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA47_eotS =
		"\10\uffff";
	static final String DFA47_eofS =
		"\1\2\7\uffff";
	static final String DFA47_minS =
		"\2\6\1\uffff\1\6\1\23\1\63\1\23\1\uffff";
	static final String DFA47_maxS =
		"\2\u0099\1\uffff\2\u0099\1\u0080\1\u0099\1\uffff";
	static final String DFA47_acceptS =
		"\2\uffff\1\2\4\uffff\1\1";
	static final String DFA47_specialS =
		"\10\uffff}>";
	static final String[] DFA47_transitionS = {
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\uffff\1\2\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\4\2\2\uffff\1\2\4\uffff\1\1\1\uffff\3\2\5\uffff\2\2\3\uffff\1\2\4\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\1\2\3\uffff\4\2\1\uffff\3\2\1\uffff\2\2\2\uffff"+
			"\5\2\1\uffff\3\2\1\uffff\6\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff"+
			"\5\2\6\uffff\1\2\1\uffff\2\2",
			"\1\2\3\uffff\5\2\3\uffff\1\2\2\uffff\1\3\1\uffff\1\2\17\uffff\1\2\2"+
			"\uffff\1\2\4\uffff\1\2\3\uffff\1\4\1\uffff\1\2\10\uffff\3\2\11\uffff"+
			"\1\2\1\uffff\1\2\5\uffff\1\2\1\3\10\uffff\1\2\12\uffff\3\2\2\uffff\3"+
			"\2\1\uffff\2\2\2\uffff\1\2\1\uffff\3\2\1\uffff\3\2\1\uffff\5\2\10\uffff"+
			"\5\2\10\uffff\1\2\1\3",
			"",
			"\1\2\3\uffff\5\2\3\uffff\1\2\2\uffff\1\3\1\uffff\1\2\17\uffff\1\2\2"+
			"\uffff\1\2\4\uffff\1\2\3\uffff\1\4\1\uffff\1\2\10\uffff\3\2\11\uffff"+
			"\1\2\1\uffff\1\2\5\uffff\1\2\1\3\10\uffff\1\2\12\uffff\3\2\2\uffff\3"+
			"\2\1\uffff\2\2\2\uffff\1\2\1\uffff\3\2\1\uffff\3\2\1\uffff\5\2\10\uffff"+
			"\5\2\10\uffff\1\2\1\3",
			"\1\2\1\uffff\1\6\11\uffff\1\5\63\uffff\1\6\26\uffff\1\7\56\uffff\1\6",
			"\1\7\114\uffff\1\2",
			"\1\2\1\uffff\1\6\75\uffff\1\6\26\uffff\1\7\56\uffff\1\6",
			""
	};

	static final short[] DFA47_eot = DFA.unpackEncodedString(DFA47_eotS);
	static final short[] DFA47_eof = DFA.unpackEncodedString(DFA47_eofS);
	static final char[] DFA47_min = DFA.unpackEncodedStringToUnsignedChars(DFA47_minS);
	static final char[] DFA47_max = DFA.unpackEncodedStringToUnsignedChars(DFA47_maxS);
	static final short[] DFA47_accept = DFA.unpackEncodedString(DFA47_acceptS);
	static final short[] DFA47_special = DFA.unpackEncodedString(DFA47_specialS);
	static final short[][] DFA47_transition;

	static {
		int numStates = DFA47_transitionS.length;
		DFA47_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA47_transition[i] = DFA.unpackEncodedString(DFA47_transitionS[i]);
		}
	}

	protected class DFA47 extends DFA {

		public DFA47(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 47;
			this.eot = DFA47_eot;
			this.eof = DFA47_eof;
			this.min = DFA47_min;
			this.max = DFA47_max;
			this.accept = DFA47_accept;
			this.special = DFA47_special;
			this.transition = DFA47_transition;
		}
		@Override
		public String getDescription() {
			return "343:39: ( LPAREN ( ws )? layerName ( ws )? RPAREN )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA48_eotS =
		"\6\uffff";
	static final String DFA48_eofS =
		"\6\uffff";
	static final String DFA48_minS =
		"\2\25\1\uffff\2\25\1\uffff";
	static final String DFA48_maxS =
		"\2\u0099\1\uffff\2\u0099\1\uffff";
	static final String DFA48_acceptS =
		"\2\uffff\1\2\2\uffff\1\1";
	static final String DFA48_specialS =
		"\6\uffff}>";
	static final String[] DFA48_transitionS = {
			"\1\1\75\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"\1\1\35\uffff\1\3\37\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"",
			"\1\4\62\uffff\1\2\12\uffff\1\4\105\uffff\1\4",
			"\1\4\35\uffff\1\5\24\uffff\1\2\12\uffff\1\4\105\uffff\1\4",
			""
	};

	static final short[] DFA48_eot = DFA.unpackEncodedString(DFA48_eotS);
	static final short[] DFA48_eof = DFA.unpackEncodedString(DFA48_eofS);
	static final char[] DFA48_min = DFA.unpackEncodedStringToUnsignedChars(DFA48_minS);
	static final char[] DFA48_max = DFA.unpackEncodedStringToUnsignedChars(DFA48_maxS);
	static final short[] DFA48_accept = DFA.unpackEncodedString(DFA48_acceptS);
	static final short[] DFA48_special = DFA.unpackEncodedString(DFA48_specialS);
	static final short[][] DFA48_transition;

	static {
		int numStates = DFA48_transitionS.length;
		DFA48_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA48_transition[i] = DFA.unpackEncodedString(DFA48_transitionS[i]);
		}
	}

	protected class DFA48 extends DFA {

		public DFA48(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 48;
			this.eot = DFA48_eot;
			this.eof = DFA48_eof;
			this.min = DFA48_min;
			this.max = DFA48_max;
			this.accept = DFA48_accept;
			this.special = DFA48_special;
			this.transition = DFA48_transition;
		}
		@Override
		public String getDescription() {
			return "348:40: ( ws sass_use_as )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA49_eotS =
		"\4\uffff";
	static final String DFA49_eofS =
		"\4\uffff";
	static final String DFA49_minS =
		"\2\25\2\uffff";
	static final String DFA49_maxS =
		"\2\u0099\2\uffff";
	static final String DFA49_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA49_specialS =
		"\4\uffff}>";
	static final String[] DFA49_transitionS = {
			"\1\1\75\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"\1\1\35\uffff\1\3\37\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"",
			""
	};

	static final short[] DFA49_eot = DFA.unpackEncodedString(DFA49_eotS);
	static final short[] DFA49_eof = DFA.unpackEncodedString(DFA49_eofS);
	static final char[] DFA49_min = DFA.unpackEncodedStringToUnsignedChars(DFA49_minS);
	static final char[] DFA49_max = DFA.unpackEncodedStringToUnsignedChars(DFA49_maxS);
	static final short[] DFA49_accept = DFA.unpackEncodedString(DFA49_acceptS);
	static final short[] DFA49_special = DFA.unpackEncodedString(DFA49_specialS);
	static final short[][] DFA49_transition;

	static {
		int numStates = DFA49_transitionS.length;
		DFA49_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA49_transition[i] = DFA.unpackEncodedString(DFA49_transitionS[i]);
		}
	}

	protected class DFA49 extends DFA {

		public DFA49(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 49;
			this.eot = DFA49_eot;
			this.eof = DFA49_eof;
			this.min = DFA49_min;
			this.max = DFA49_max;
			this.accept = DFA49_accept;
			this.special = DFA49_special;
			this.transition = DFA49_transition;
		}
		@Override
		public String getDescription() {
			return "348:58: ( ws sass_use_with )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA54_eotS =
		"\4\uffff";
	static final String DFA54_eofS =
		"\4\uffff";
	static final String DFA54_minS =
		"\2\24\2\uffff";
	static final String DFA54_maxS =
		"\2\u0099\2\uffff";
	static final String DFA54_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA54_specialS =
		"\4\uffff}>";
	static final String[] DFA54_transitionS = {
			"\1\3\1\1\75\uffff\1\1\26\uffff\1\2\56\uffff\1\1",
			"\1\3\1\1\75\uffff\1\1\26\uffff\1\2\56\uffff\1\1",
			"",
			""
	};

	static final short[] DFA54_eot = DFA.unpackEncodedString(DFA54_eotS);
	static final short[] DFA54_eof = DFA.unpackEncodedString(DFA54_eofS);
	static final char[] DFA54_min = DFA.unpackEncodedStringToUnsignedChars(DFA54_minS);
	static final char[] DFA54_max = DFA.unpackEncodedStringToUnsignedChars(DFA54_maxS);
	static final short[] DFA54_accept = DFA.unpackEncodedString(DFA54_acceptS);
	static final short[] DFA54_special = DFA.unpackEncodedString(DFA54_specialS);
	static final short[][] DFA54_transition;

	static {
		int numStates = DFA54_transitionS.length;
		DFA54_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA54_transition[i] = DFA.unpackEncodedString(DFA54_transitionS[i]);
		}
	}

	protected class DFA54 extends DFA {

		public DFA54(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 54;
			this.eot = DFA54_eot;
			this.eof = DFA54_eof;
			this.min = DFA54_min;
			this.max = DFA54_max;
			this.accept = DFA54_accept;
			this.special = DFA54_special;
			this.transition = DFA54_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 358:80: ( ( ws )? COMMA ( ws )? sass_use_with_declaration )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA59_eotS =
		"\7\uffff";
	static final String DFA59_eofS =
		"\7\uffff";
	static final String DFA59_minS =
		"\2\25\1\uffff\2\25\1\0\1\uffff";
	static final String DFA59_maxS =
		"\2\u0099\1\uffff\2\u0099\1\0\1\uffff";
	static final String DFA59_acceptS =
		"\2\uffff\1\2\3\uffff\1\1";
	static final String DFA59_specialS =
		"\5\uffff\1\0\1\uffff}>";
	static final String[] DFA59_transitionS = {
			"\1\1\75\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"\1\1\35\uffff\1\3\37\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"",
			"\1\4\62\uffff\1\2\12\uffff\1\4\105\uffff\1\4",
			"\1\4\35\uffff\1\5\24\uffff\1\2\12\uffff\1\4\105\uffff\1\4",
			"\1\uffff",
			""
	};

	static final short[] DFA59_eot = DFA.unpackEncodedString(DFA59_eotS);
	static final short[] DFA59_eof = DFA.unpackEncodedString(DFA59_eofS);
	static final char[] DFA59_min = DFA.unpackEncodedStringToUnsignedChars(DFA59_minS);
	static final char[] DFA59_max = DFA.unpackEncodedStringToUnsignedChars(DFA59_maxS);
	static final short[] DFA59_accept = DFA.unpackEncodedString(DFA59_acceptS);
	static final short[] DFA59_special = DFA.unpackEncodedString(DFA59_specialS);
	static final short[][] DFA59_transition;

	static {
		int numStates = DFA59_transitionS.length;
		DFA59_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA59_transition[i] = DFA.unpackEncodedString(DFA59_transitionS[i]);
		}
	}

	protected class DFA59 extends DFA {

		public DFA59(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 59;
			this.eot = DFA59_eot;
			this.eof = DFA59_eof;
			this.min = DFA59_min;
			this.max = DFA59_max;
			this.accept = DFA59_accept;
			this.special = DFA59_special;
			this.transition = DFA59_transition;
		}
		@Override
		public String getDescription() {
			return "369:44: ( ws ( sass_forward_hide | sass_forward_show ) )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA59_5 = input.LA(1);
						 
						int index59_5 = input.index();
						input.rewind();
						s = -1;
						if ( (!(evalPredicate(evalPredicate(tokenNameEquals2("as"),"tokenNameEquals2(\"as\")"),""))) ) {s = 6;}
						else if ( (evalPredicate(tokenNameEquals2("as"),"tokenNameEquals2(\"as\")")) ) {s = 2;}
						 
						input.seek(index59_5);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 59, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA58_eotS =
		"\6\uffff";
	static final String DFA58_eofS =
		"\6\uffff";
	static final String DFA58_minS =
		"\1\63\2\25\1\0\2\uffff";
	static final String DFA58_maxS =
		"\1\63\2\u0099\1\0\2\uffff";
	static final String DFA58_acceptS =
		"\4\uffff\1\1\1\2";
	static final String DFA58_specialS =
		"\3\uffff\1\0\2\uffff}>";
	static final String[] DFA58_transitionS = {
			"\1\1",
			"\1\2\75\uffff\1\2\105\uffff\1\2",
			"\1\2\35\uffff\1\3\37\uffff\1\2\105\uffff\1\2",
			"\1\uffff",
			"",
			""
	};

	static final short[] DFA58_eot = DFA.unpackEncodedString(DFA58_eotS);
	static final short[] DFA58_eof = DFA.unpackEncodedString(DFA58_eofS);
	static final char[] DFA58_min = DFA.unpackEncodedStringToUnsignedChars(DFA58_minS);
	static final char[] DFA58_max = DFA.unpackEncodedStringToUnsignedChars(DFA58_maxS);
	static final short[] DFA58_accept = DFA.unpackEncodedString(DFA58_acceptS);
	static final short[] DFA58_special = DFA.unpackEncodedString(DFA58_specialS);
	static final short[][] DFA58_transition;

	static {
		int numStates = DFA58_transitionS.length;
		DFA58_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA58_transition[i] = DFA.unpackEncodedString(DFA58_transitionS[i]);
		}
	}

	protected class DFA58 extends DFA {

		public DFA58(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 58;
			this.eot = DFA58_eot;
			this.eof = DFA58_eof;
			this.min = DFA58_min;
			this.max = DFA58_max;
			this.accept = DFA58_accept;
			this.special = DFA58_special;
			this.transition = DFA58_transition;
		}
		@Override
		public String getDescription() {
			return "369:49: ( sass_forward_hide | sass_forward_show )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA58_3 = input.LA(1);
						 
						int index58_3 = input.index();
						input.rewind();
						s = -1;
						if ( (evalPredicate(tokenNameEquals("hide"),"tokenNameEquals(\"hide\")")) ) {s = 4;}
						else if ( (evalPredicate(tokenNameEquals("show"),"tokenNameEquals(\"show\")")) ) {s = 5;}
						 
						input.seek(index58_3);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 58, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA60_eotS =
		"\6\uffff";
	static final String DFA60_eofS =
		"\6\uffff";
	static final String DFA60_minS =
		"\2\25\1\uffff\2\25\1\uffff";
	static final String DFA60_maxS =
		"\2\u0099\1\uffff\2\u0099\1\uffff";
	static final String DFA60_acceptS =
		"\2\uffff\1\2\2\uffff\1\1";
	static final String DFA60_specialS =
		"\6\uffff}>";
	static final String[] DFA60_transitionS = {
			"\1\1\75\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"\1\1\35\uffff\1\3\37\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"",
			"\1\4\62\uffff\1\2\12\uffff\1\4\105\uffff\1\4",
			"\1\4\35\uffff\1\5\24\uffff\1\2\12\uffff\1\4\105\uffff\1\4",
			""
	};

	static final short[] DFA60_eot = DFA.unpackEncodedString(DFA60_eotS);
	static final short[] DFA60_eof = DFA.unpackEncodedString(DFA60_eofS);
	static final char[] DFA60_min = DFA.unpackEncodedStringToUnsignedChars(DFA60_minS);
	static final char[] DFA60_max = DFA.unpackEncodedStringToUnsignedChars(DFA60_maxS);
	static final short[] DFA60_accept = DFA.unpackEncodedString(DFA60_acceptS);
	static final short[] DFA60_special = DFA.unpackEncodedString(DFA60_specialS);
	static final short[][] DFA60_transition;

	static {
		int numStates = DFA60_transitionS.length;
		DFA60_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA60_transition[i] = DFA.unpackEncodedString(DFA60_transitionS[i]);
		}
	}

	protected class DFA60 extends DFA {

		public DFA60(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 60;
			this.eot = DFA60_eot;
			this.eof = DFA60_eof;
			this.min = DFA60_min;
			this.max = DFA60_max;
			this.accept = DFA60_accept;
			this.special = DFA60_special;
			this.transition = DFA60_transition;
		}
		@Override
		public String getDescription() {
			return "369:93: ({...}? ws sass_forward_as )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA61_eotS =
		"\4\uffff";
	static final String DFA61_eofS =
		"\4\uffff";
	static final String DFA61_minS =
		"\2\25\2\uffff";
	static final String DFA61_maxS =
		"\2\u0099\2\uffff";
	static final String DFA61_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA61_specialS =
		"\4\uffff}>";
	static final String[] DFA61_transitionS = {
			"\1\1\75\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"\1\1\35\uffff\1\3\37\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"",
			""
	};

	static final short[] DFA61_eot = DFA.unpackEncodedString(DFA61_eotS);
	static final short[] DFA61_eof = DFA.unpackEncodedString(DFA61_eofS);
	static final char[] DFA61_min = DFA.unpackEncodedStringToUnsignedChars(DFA61_minS);
	static final char[] DFA61_max = DFA.unpackEncodedStringToUnsignedChars(DFA61_maxS);
	static final short[] DFA61_accept = DFA.unpackEncodedString(DFA61_acceptS);
	static final short[] DFA61_special = DFA.unpackEncodedString(DFA61_specialS);
	static final short[][] DFA61_transition;

	static {
		int numStates = DFA61_transitionS.length;
		DFA61_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA61_transition[i] = DFA.unpackEncodedString(DFA61_transitionS[i]);
		}
	}

	protected class DFA61 extends DFA {

		public DFA61(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 61;
			this.eot = DFA61_eot;
			this.eof = DFA61_eof;
			this.min = DFA61_min;
			this.max = DFA61_max;
			this.accept = DFA61_accept;
			this.special = DFA61_special;
			this.transition = DFA61_transition;
		}
		@Override
		public String getDescription() {
			return "369:141: ({...}? ws sass_forward_with )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA66_eotS =
		"\4\uffff";
	static final String DFA66_eofS =
		"\4\uffff";
	static final String DFA66_minS =
		"\2\24\2\uffff";
	static final String DFA66_maxS =
		"\2\u0099\2\uffff";
	static final String DFA66_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA66_specialS =
		"\4\uffff}>";
	static final String[] DFA66_transitionS = {
			"\1\3\1\1\75\uffff\1\1\26\uffff\1\2\56\uffff\1\1",
			"\1\3\1\1\75\uffff\1\1\26\uffff\1\2\56\uffff\1\1",
			"",
			""
	};

	static final short[] DFA66_eot = DFA.unpackEncodedString(DFA66_eotS);
	static final short[] DFA66_eof = DFA.unpackEncodedString(DFA66_eofS);
	static final char[] DFA66_min = DFA.unpackEncodedStringToUnsignedChars(DFA66_minS);
	static final char[] DFA66_max = DFA.unpackEncodedStringToUnsignedChars(DFA66_maxS);
	static final short[] DFA66_accept = DFA.unpackEncodedString(DFA66_acceptS);
	static final short[] DFA66_special = DFA.unpackEncodedString(DFA66_specialS);
	static final short[][] DFA66_transition;

	static {
		int numStates = DFA66_transitionS.length;
		DFA66_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA66_transition[i] = DFA.unpackEncodedString(DFA66_transitionS[i]);
		}
	}

	protected class DFA66 extends DFA {

		public DFA66(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 66;
			this.eot = DFA66_eot;
			this.eof = DFA66_eof;
			this.min = DFA66_min;
			this.max = DFA66_max;
			this.accept = DFA66_accept;
			this.special = DFA66_special;
			this.transition = DFA66_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 379:84: ( ( ws )? COMMA ( ws )? sass_forward_with_declaration )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA72_eotS =
		"\4\uffff";
	static final String DFA72_eofS =
		"\4\uffff";
	static final String DFA72_minS =
		"\2\24\2\uffff";
	static final String DFA72_maxS =
		"\2\u0099\2\uffff";
	static final String DFA72_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA72_specialS =
		"\4\uffff}>";
	static final String[] DFA72_transitionS = {
			"\1\3\1\1\75\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"\1\3\1\1\35\uffff\1\2\37\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"",
			""
	};

	static final short[] DFA72_eot = DFA.unpackEncodedString(DFA72_eotS);
	static final short[] DFA72_eof = DFA.unpackEncodedString(DFA72_eofS);
	static final char[] DFA72_min = DFA.unpackEncodedStringToUnsignedChars(DFA72_minS);
	static final char[] DFA72_max = DFA.unpackEncodedStringToUnsignedChars(DFA72_maxS);
	static final short[] DFA72_accept = DFA.unpackEncodedString(DFA72_acceptS);
	static final short[] DFA72_special = DFA.unpackEncodedString(DFA72_specialS);
	static final short[][] DFA72_transition;

	static {
		int numStates = DFA72_transitionS.length;
		DFA72_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA72_transition[i] = DFA.unpackEncodedString(DFA72_transitionS[i]);
		}
	}

	protected class DFA72 extends DFA {

		public DFA72(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 72;
			this.eot = DFA72_eot;
			this.eof = DFA72_eof;
			this.min = DFA72_min;
			this.max = DFA72_max;
			this.accept = DFA72_accept;
			this.special = DFA72_special;
			this.transition = DFA72_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 389:47: ( ( ws )? COMMA ( ws )? IDENT )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA75_eotS =
		"\4\uffff";
	static final String DFA75_eofS =
		"\4\uffff";
	static final String DFA75_minS =
		"\2\24\2\uffff";
	static final String DFA75_maxS =
		"\2\u0099\2\uffff";
	static final String DFA75_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA75_specialS =
		"\4\uffff}>";
	static final String[] DFA75_transitionS = {
			"\1\3\1\1\75\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"\1\3\1\1\35\uffff\1\2\37\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"",
			""
	};

	static final short[] DFA75_eot = DFA.unpackEncodedString(DFA75_eotS);
	static final short[] DFA75_eof = DFA.unpackEncodedString(DFA75_eofS);
	static final char[] DFA75_min = DFA.unpackEncodedStringToUnsignedChars(DFA75_minS);
	static final char[] DFA75_max = DFA.unpackEncodedStringToUnsignedChars(DFA75_maxS);
	static final short[] DFA75_accept = DFA.unpackEncodedString(DFA75_acceptS);
	static final short[] DFA75_special = DFA.unpackEncodedString(DFA75_specialS);
	static final short[][] DFA75_transition;

	static {
		int numStates = DFA75_transitionS.length;
		DFA75_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA75_transition[i] = DFA.unpackEncodedString(DFA75_transitionS[i]);
		}
	}

	protected class DFA75 extends DFA {

		public DFA75(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 75;
			this.eot = DFA75_eot;
			this.eof = DFA75_eof;
			this.min = DFA75_min;
			this.max = DFA75_max;
			this.accept = DFA75_accept;
			this.special = DFA75_special;
			this.transition = DFA75_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 394:47: ( ( ws )? COMMA ( ws )? IDENT )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA81_eotS =
		"\6\uffff";
	static final String DFA81_eofS =
		"\6\uffff";
	static final String DFA81_minS =
		"\2\6\1\0\1\uffff\1\0\1\uffff";
	static final String DFA81_maxS =
		"\2\u0099\1\0\1\uffff\1\0\1\uffff";
	static final String DFA81_acceptS =
		"\3\uffff\1\2\1\uffff\1\1";
	static final String DFA81_specialS =
		"\2\uffff\1\0\1\uffff\1\1\1\uffff}>";
	static final String[] DFA81_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\uffff\1\3\7\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\3\3\2\uffff\3\3\1\uffff\2\3\2\uffff\5\3\1\uffff\3\3\1\uffff"+
			"\5\3\1\2\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3"+
			"\1\uffff\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\uffff\1\3\7\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\3\3\2\uffff\3\3\1\uffff\2\3\2\uffff\5\3\1\uffff\3\3\1\uffff"+
			"\5\3\1\4\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3"+
			"\1\uffff\1\3\1\1",
			"\1\uffff",
			"",
			"\1\uffff",
			""
	};

	static final short[] DFA81_eot = DFA.unpackEncodedString(DFA81_eotS);
	static final short[] DFA81_eof = DFA.unpackEncodedString(DFA81_eofS);
	static final char[] DFA81_min = DFA.unpackEncodedStringToUnsignedChars(DFA81_minS);
	static final char[] DFA81_max = DFA.unpackEncodedStringToUnsignedChars(DFA81_maxS);
	static final short[] DFA81_accept = DFA.unpackEncodedString(DFA81_acceptS);
	static final short[] DFA81_special = DFA.unpackEncodedString(DFA81_specialS);
	static final short[][] DFA81_transition;

	static {
		int numStates = DFA81_transitionS.length;
		DFA81_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA81_transition[i] = DFA.unpackEncodedString(DFA81_transitionS[i]);
		}
	}

	protected class DFA81 extends DFA {

		public DFA81(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 81;
			this.eot = DFA81_eot;
			this.eof = DFA81_eof;
			this.min = DFA81_min;
			this.max = DFA81_max;
			this.accept = DFA81_accept;
			this.special = DFA81_special;
			this.transition = DFA81_transition;
		}
		@Override
		public String getDescription() {
			return "410:26: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA81_2 = input.LA(1);
						 
						int index81_2 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred4_Css3()) ) {s = 5;}
						else if ( (true) ) {s = 3;}
						 
						input.seek(index81_2);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA81_4 = input.LA(1);
						 
						int index81_4 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred4_Css3()) ) {s = 5;}
						else if ( (true) ) {s = 3;}
						 
						input.seek(index81_4);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 81, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA87_eotS =
		"\4\uffff";
	static final String DFA87_eofS =
		"\4\uffff";
	static final String DFA87_minS =
		"\2\6\2\uffff";
	static final String DFA87_maxS =
		"\2\u0099\2\uffff";
	static final String DFA87_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA87_specialS =
		"\4\uffff}>";
	static final String[] DFA87_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\2\1\3\7\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\3\3\2\uffff\3\3\1\uffff\2\3\2\uffff\5\3\1\uffff\3\3\1\uffff"+
			"\6\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\2\1\3\7\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\3\3\2\uffff\3\3\1\uffff\2\3\2\uffff\5\3\1\uffff\3\3\1\uffff"+
			"\6\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"",
			""
	};

	static final short[] DFA87_eot = DFA.unpackEncodedString(DFA87_eotS);
	static final short[] DFA87_eof = DFA.unpackEncodedString(DFA87_eofS);
	static final char[] DFA87_min = DFA.unpackEncodedStringToUnsignedChars(DFA87_minS);
	static final char[] DFA87_max = DFA.unpackEncodedStringToUnsignedChars(DFA87_maxS);
	static final short[] DFA87_accept = DFA.unpackEncodedString(DFA87_acceptS);
	static final short[] DFA87_special = DFA.unpackEncodedString(DFA87_specialS);
	static final short[][] DFA87_transition;

	static {
		int numStates = DFA87_transitionS.length;
		DFA87_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA87_transition[i] = DFA.unpackEncodedString(DFA87_transitionS[i]);
		}
	}

	protected class DFA87 extends DFA {

		public DFA87(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 87;
			this.eot = DFA87_eot;
			this.eof = DFA87_eof;
			this.min = DFA87_min;
			this.max = DFA87_max;
			this.accept = DFA87_accept;
			this.special = DFA87_special;
			this.transition = DFA87_transition;
		}
		@Override
		public String getDescription() {
			return "421:87: ( ( ws )? IMPORTANT_SYM )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA89_eotS =
		"\4\uffff";
	static final String DFA89_eofS =
		"\4\uffff";
	static final String DFA89_minS =
		"\2\6\2\uffff";
	static final String DFA89_maxS =
		"\2\u0099\2\uffff";
	static final String DFA89_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA89_specialS =
		"\4\uffff}>";
	static final String[] DFA89_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\2\1\3\7\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\3\3\2\uffff\3\3\1\uffff\2\3\2\uffff\5\3\1\uffff\3\3\1\uffff"+
			"\6\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\2\1\3\7\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\3\3\2\uffff\3\3\1\uffff\2\3\2\uffff\5\3\1\uffff\3\3\1\uffff"+
			"\6\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"",
			""
	};

	static final short[] DFA89_eot = DFA.unpackEncodedString(DFA89_eotS);
	static final short[] DFA89_eof = DFA.unpackEncodedString(DFA89_eofS);
	static final char[] DFA89_min = DFA.unpackEncodedStringToUnsignedChars(DFA89_minS);
	static final char[] DFA89_max = DFA.unpackEncodedStringToUnsignedChars(DFA89_maxS);
	static final short[] DFA89_accept = DFA.unpackEncodedString(DFA89_acceptS);
	static final short[] DFA89_special = DFA.unpackEncodedString(DFA89_specialS);
	static final short[][] DFA89_transition;

	static {
		int numStates = DFA89_transitionS.length;
		DFA89_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA89_transition[i] = DFA.unpackEncodedString(DFA89_transitionS[i]);
		}
	}

	protected class DFA89 extends DFA {

		public DFA89(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 89;
			this.eot = DFA89_eot;
			this.eof = DFA89_eof;
			this.min = DFA89_min;
			this.max = DFA89_max;
			this.accept = DFA89_accept;
			this.special = DFA89_special;
			this.transition = DFA89_transition;
		}
		@Override
		public String getDescription() {
			return "422:57: ( ( ws )? IMPORTANT_SYM )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA93_eotS =
		"\4\uffff";
	static final String DFA93_eofS =
		"\2\2\2\uffff";
	static final String DFA93_minS =
		"\2\6\2\uffff";
	static final String DFA93_maxS =
		"\2\u0099\2\uffff";
	static final String DFA93_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA93_specialS =
		"\1\1\1\0\2\uffff}>";
	static final String[] DFA93_transitionS = {
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\3\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\5\uffff\6\2\2\uffff"+
			"\1\2\6\uffff\3\2\5\uffff\1\2\1\1\10\uffff\1\2\2\uffff\2\2\2\uffff\1\2"+
			"\3\uffff\4\2\1\uffff\3\2\1\uffff\2\2\2\uffff\5\2\1\uffff\3\2\1\uffff"+
			"\6\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\6\uffff\1\2\1\uffff"+
			"\1\2\1\1",
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\3\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\5\uffff\6\2\2\uffff"+
			"\1\2\6\uffff\3\2\5\uffff\1\2\1\1\10\uffff\1\2\2\uffff\2\2\2\uffff\1\2"+
			"\3\uffff\4\2\1\uffff\3\2\1\uffff\2\2\1\uffff\6\2\1\uffff\3\2\1\uffff"+
			"\6\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\6\uffff\1\2\1\uffff"+
			"\1\2\1\1",
			"",
			""
	};

	static final short[] DFA93_eot = DFA.unpackEncodedString(DFA93_eotS);
	static final short[] DFA93_eof = DFA.unpackEncodedString(DFA93_eofS);
	static final char[] DFA93_min = DFA.unpackEncodedStringToUnsignedChars(DFA93_minS);
	static final char[] DFA93_max = DFA.unpackEncodedStringToUnsignedChars(DFA93_maxS);
	static final short[] DFA93_accept = DFA.unpackEncodedString(DFA93_acceptS);
	static final short[] DFA93_special = DFA.unpackEncodedString(DFA93_specialS);
	static final short[][] DFA93_transition;

	static {
		int numStates = DFA93_transitionS.length;
		DFA93_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA93_transition[i] = DFA.unpackEncodedString(DFA93_transitionS[i]);
		}
	}

	protected class DFA93 extends DFA {

		public DFA93(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 93;
			this.eot = DFA93_eot;
			this.eof = DFA93_eof;
			this.min = DFA93_min;
			this.max = DFA93_max;
			this.accept = DFA93_accept;
			this.special = DFA93_special;
			this.transition = DFA93_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 439:15: ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA93_1 = input.LA(1);
						 
						int index93_1 = input.index();
						input.rewind();
						s = -1;
						if ( (LA93_1==EOF||(LA93_1 >= AT_IDENT && LA93_1 <= AT_SIGN)||(LA93_1 >= BOTTOMCENTER_SYM && LA93_1 <= BOTTOMRIGHT_SYM)||(LA93_1 >= CHARSET_SYM && LA93_1 <= COLON)||LA93_1==COUNTER_STYLE_SYM||(LA93_1 >= DCOLON && LA93_1 <= DOT)||LA93_1==FONT_FACE_SYM||(LA93_1 >= GEN && LA93_1 <= GREATER)||(LA93_1 >= HASH && LA93_1 <= HASH_SYMBOL)||LA93_1==IDENT||LA93_1==IMPORT_SYM||(LA93_1 >= LAYER_SYM && LA93_1 <= LEFTTOP_SYM)||LA93_1==LESS_AND||(LA93_1 >= MEDIA_SYM && LA93_1 <= MOZ_DOCUMENT_SYM)||LA93_1==NAMESPACE_SYM||LA93_1==PAGE_SYM||(LA93_1 >= PIPE && LA93_1 <= PLUS)||LA93_1==RBRACE||(LA93_1 >= RIGHTBOTTOM_SYM && LA93_1 <= RPAREN)||(LA93_1 >= SASS_AT_ROOT && LA93_1 <= SASS_DEBUG)||(LA93_1 >= SASS_EACH && LA93_1 <= SASS_ELSE)||(LA93_1 >= SASS_ERROR && LA93_1 <= SASS_FUNCTION)||(LA93_1 >= SASS_IF && LA93_1 <= SASS_MIXIN)||(LA93_1 >= SASS_RETURN && LA93_1 <= SEMI)||LA93_1==STAR||LA93_1==SUPPORTS_SYM||LA93_1==TILDE||(LA93_1 >= TOPCENTER_SYM && LA93_1 <= TOPRIGHT_SYM)||LA93_1==VARIABLE||LA93_1==WEBKIT_KEYFRAMES_SYM) ) {s = 2;}
						else if ( (LA93_1==COMMENT||LA93_1==NL||LA93_1==WS) ) {s = 1;}
						else if ( (LA93_1==COMMA) && (synpred10_Css3())) {s = 3;}
						 
						input.seek(index93_1);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA93_0 = input.LA(1);
						 
						int index93_0 = input.index();
						input.rewind();
						s = -1;
						if ( (LA93_0==COMMENT||LA93_0==NL||LA93_0==WS) ) {s = 1;}
						else if ( (LA93_0==EOF||(LA93_0 >= AT_IDENT && LA93_0 <= AT_SIGN)||(LA93_0 >= BOTTOMCENTER_SYM && LA93_0 <= BOTTOMRIGHT_SYM)||(LA93_0 >= CHARSET_SYM && LA93_0 <= COLON)||LA93_0==COUNTER_STYLE_SYM||(LA93_0 >= DCOLON && LA93_0 <= DOT)||LA93_0==FONT_FACE_SYM||(LA93_0 >= GEN && LA93_0 <= GREATER)||(LA93_0 >= HASH && LA93_0 <= HASH_SYMBOL)||LA93_0==IDENT||LA93_0==IMPORT_SYM||(LA93_0 >= LAYER_SYM && LA93_0 <= LEFTTOP_SYM)||LA93_0==LESS_AND||(LA93_0 >= MEDIA_SYM && LA93_0 <= MOZ_DOCUMENT_SYM)||LA93_0==NAMESPACE_SYM||LA93_0==PAGE_SYM||(LA93_0 >= PIPE && LA93_0 <= PLUS)||LA93_0==RBRACE||(LA93_0 >= RIGHTBOTTOM_SYM && LA93_0 <= RPAREN)||(LA93_0 >= SASS_AT_ROOT && LA93_0 <= SASS_DEBUG)||(LA93_0 >= SASS_EACH && LA93_0 <= SASS_ELSE)||(LA93_0 >= SASS_EXTEND && LA93_0 <= SASS_FUNCTION)||(LA93_0 >= SASS_IF && LA93_0 <= SASS_MIXIN)||(LA93_0 >= SASS_RETURN && LA93_0 <= SEMI)||LA93_0==STAR||LA93_0==SUPPORTS_SYM||LA93_0==TILDE||(LA93_0 >= TOPCENTER_SYM && LA93_0 <= TOPRIGHT_SYM)||LA93_0==VARIABLE||LA93_0==WEBKIT_KEYFRAMES_SYM) ) {s = 2;}
						else if ( (LA93_0==COMMA) && (synpred10_Css3())) {s = 3;}
						 
						input.seek(index93_0);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 93, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA106_eotS =
		"\4\uffff";
	static final String DFA106_eofS =
		"\4\uffff";
	static final String DFA106_minS =
		"\2\23\2\uffff";
	static final String DFA106_maxS =
		"\2\u0099\2\uffff";
	static final String DFA106_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA106_specialS =
		"\4\uffff}>";
	static final String[] DFA106_transitionS = {
			"\1\2\1\uffff\1\1\75\uffff\1\1\26\uffff\1\3\56\uffff\1\1",
			"\1\2\1\uffff\1\1\75\uffff\1\1\26\uffff\1\3\56\uffff\1\1",
			"",
			""
	};

	static final short[] DFA106_eot = DFA.unpackEncodedString(DFA106_eotS);
	static final short[] DFA106_eof = DFA.unpackEncodedString(DFA106_eofS);
	static final char[] DFA106_min = DFA.unpackEncodedStringToUnsignedChars(DFA106_minS);
	static final char[] DFA106_max = DFA.unpackEncodedStringToUnsignedChars(DFA106_maxS);
	static final short[] DFA106_accept = DFA.unpackEncodedString(DFA106_acceptS);
	static final short[] DFA106_special = DFA.unpackEncodedString(DFA106_specialS);
	static final short[][] DFA106_transition;

	static {
		int numStates = DFA106_transitionS.length;
		DFA106_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA106_transition[i] = DFA.unpackEncodedString(DFA106_transitionS[i]);
		}
	}

	protected class DFA106 extends DFA {

		public DFA106(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 106;
			this.eot = DFA106_eot;
			this.eof = DFA106_eof;
			this.min = DFA106_min;
			this.max = DFA106_max;
			this.accept = DFA106_accept;
			this.special = DFA106_special;
			this.transition = DFA106_transition;
		}
		@Override
		public String getDescription() {
			return "459:42: ( mediaFeatureValue )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA115_eotS =
		"\6\uffff";
	static final String DFA115_eofS =
		"\2\3\4\uffff";
	static final String DFA115_minS =
		"\2\6\1\0\1\uffff\1\0\1\uffff";
	static final String DFA115_maxS =
		"\2\u0099\1\0\1\uffff\1\0\1\uffff";
	static final String DFA115_acceptS =
		"\3\uffff\1\2\1\uffff\1\1";
	static final String DFA115_specialS =
		"\2\uffff\1\0\1\uffff\1\1\1\uffff}>";
	static final String[] DFA115_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\uffff\1\3\5\uffff\1\3\1\uffff"+
			"\4\3\2\uffff\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3"+
			"\2\uffff\1\3\3\uffff\3\3\2\uffff\3\3\1\uffff\2\3\2\uffff\5\3\1\uffff"+
			"\3\3\1\uffff\5\3\1\2\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3"+
			"\10\uffff\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\uffff\1\3\5\uffff\1\3\1\uffff"+
			"\4\3\2\uffff\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3"+
			"\2\uffff\1\3\3\uffff\3\3\2\uffff\3\3\1\uffff\2\3\2\uffff\5\3\1\uffff"+
			"\3\3\1\uffff\5\3\1\4\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3"+
			"\10\uffff\1\3\1\1",
			"\1\uffff",
			"",
			"\1\uffff",
			""
	};

	static final short[] DFA115_eot = DFA.unpackEncodedString(DFA115_eotS);
	static final short[] DFA115_eof = DFA.unpackEncodedString(DFA115_eofS);
	static final char[] DFA115_min = DFA.unpackEncodedStringToUnsignedChars(DFA115_minS);
	static final char[] DFA115_max = DFA.unpackEncodedStringToUnsignedChars(DFA115_maxS);
	static final short[] DFA115_accept = DFA.unpackEncodedString(DFA115_acceptS);
	static final short[] DFA115_special = DFA.unpackEncodedString(DFA115_specialS);
	static final short[][] DFA115_transition;

	static {
		int numStates = DFA115_transitionS.length;
		DFA115_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA115_transition[i] = DFA.unpackEncodedString(DFA115_transitionS[i]);
		}
	}

	protected class DFA115 extends DFA {

		public DFA115(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 115;
			this.eot = DFA115_eot;
			this.eof = DFA115_eof;
			this.min = DFA115_min;
			this.max = DFA115_max;
			this.accept = DFA115_accept;
			this.special = DFA115_special;
			this.transition = DFA115_transition;
		}
		@Override
		public String getDescription() {
			return "480:21: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA115_2 = input.LA(1);
						 
						int index115_2 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred15_Css3()) ) {s = 5;}
						else if ( (true) ) {s = 3;}
						 
						input.seek(index115_2);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA115_4 = input.LA(1);
						 
						int index115_4 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred15_Css3()) ) {s = 5;}
						else if ( (true) ) {s = 3;}
						 
						input.seek(index115_4);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 115, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA124_eotS =
		"\4\uffff";
	static final String DFA124_eofS =
		"\4\uffff";
	static final String DFA124_minS =
		"\2\25\2\uffff";
	static final String DFA124_maxS =
		"\2\u0099\2\uffff";
	static final String DFA124_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA124_specialS =
		"\4\uffff}>";
	static final String[] DFA124_transitionS = {
			"\1\1\46\uffff\1\2\26\uffff\1\1\26\uffff\1\2\56\uffff\1\1",
			"\1\1\35\uffff\1\3\10\uffff\1\2\26\uffff\1\1\26\uffff\1\2\56\uffff\1"+
			"\1",
			"",
			""
	};

	static final short[] DFA124_eot = DFA.unpackEncodedString(DFA124_eotS);
	static final short[] DFA124_eof = DFA.unpackEncodedString(DFA124_eofS);
	static final char[] DFA124_min = DFA.unpackEncodedStringToUnsignedChars(DFA124_minS);
	static final char[] DFA124_max = DFA.unpackEncodedStringToUnsignedChars(DFA124_maxS);
	static final short[] DFA124_accept = DFA.unpackEncodedString(DFA124_acceptS);
	static final short[] DFA124_special = DFA.unpackEncodedString(DFA124_specialS);
	static final short[][] DFA124_transition;

	static {
		int numStates = DFA124_transitionS.length;
		DFA124_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA124_transition[i] = DFA.unpackEncodedString(DFA124_transitionS[i]);
		}
	}

	protected class DFA124 extends DFA {

		public DFA124(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 124;
			this.eot = DFA124_eot;
			this.eof = DFA124_eof;
			this.min = DFA124_min;
			this.max = DFA124_max;
			this.accept = DFA124_accept;
			this.special = DFA124_special;
			this.transition = DFA124_transition;
		}
		@Override
		public String getDescription() {
			return "515:21: ( ws supportsWithOperator )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA126_eotS =
		"\4\uffff";
	static final String DFA126_eofS =
		"\4\uffff";
	static final String DFA126_minS =
		"\2\25\2\uffff";
	static final String DFA126_maxS =
		"\2\u0099\2\uffff";
	static final String DFA126_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA126_specialS =
		"\4\uffff}>";
	static final String[] DFA126_transitionS = {
			"\1\1\46\uffff\1\2\26\uffff\1\1\26\uffff\1\2\56\uffff\1\1",
			"\1\1\35\uffff\1\3\10\uffff\1\2\26\uffff\1\1\26\uffff\1\2\56\uffff\1"+
			"\1",
			"",
			""
	};

	static final short[] DFA126_eot = DFA.unpackEncodedString(DFA126_eotS);
	static final short[] DFA126_eof = DFA.unpackEncodedString(DFA126_eofS);
	static final char[] DFA126_min = DFA.unpackEncodedStringToUnsignedChars(DFA126_minS);
	static final char[] DFA126_max = DFA.unpackEncodedStringToUnsignedChars(DFA126_maxS);
	static final short[] DFA126_accept = DFA.unpackEncodedString(DFA126_acceptS);
	static final short[] DFA126_special = DFA.unpackEncodedString(DFA126_specialS);
	static final short[][] DFA126_transition;

	static {
		int numStates = DFA126_transitionS.length;
		DFA126_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA126_transition[i] = DFA.unpackEncodedString(DFA126_transitionS[i]);
		}
	}

	protected class DFA126 extends DFA {

		public DFA126(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 126;
			this.eot = DFA126_eot;
			this.eof = DFA126_eof;
			this.min = DFA126_min;
			this.max = DFA126_max;
			this.accept = DFA126_accept;
			this.special = DFA126_special;
			this.transition = DFA126_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 520:29: ( ws supportsConjunction )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA127_eotS =
		"\4\uffff";
	static final String DFA127_eofS =
		"\4\uffff";
	static final String DFA127_minS =
		"\2\25\2\uffff";
	static final String DFA127_maxS =
		"\2\u0099\2\uffff";
	static final String DFA127_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA127_specialS =
		"\4\uffff}>";
	static final String[] DFA127_transitionS = {
			"\1\1\46\uffff\1\2\26\uffff\1\1\26\uffff\1\2\56\uffff\1\1",
			"\1\1\35\uffff\1\3\10\uffff\1\2\26\uffff\1\1\26\uffff\1\2\56\uffff\1"+
			"\1",
			"",
			""
	};

	static final short[] DFA127_eot = DFA.unpackEncodedString(DFA127_eotS);
	static final short[] DFA127_eof = DFA.unpackEncodedString(DFA127_eofS);
	static final char[] DFA127_min = DFA.unpackEncodedStringToUnsignedChars(DFA127_minS);
	static final char[] DFA127_max = DFA.unpackEncodedStringToUnsignedChars(DFA127_maxS);
	static final short[] DFA127_accept = DFA.unpackEncodedString(DFA127_acceptS);
	static final short[] DFA127_special = DFA.unpackEncodedString(DFA127_specialS);
	static final short[][] DFA127_transition;

	static {
		int numStates = DFA127_transitionS.length;
		DFA127_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA127_transition[i] = DFA.unpackEncodedString(DFA127_transitionS[i]);
		}
	}

	protected class DFA127 extends DFA {

		public DFA127(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 127;
			this.eot = DFA127_eot;
			this.eof = DFA127_eof;
			this.min = DFA127_min;
			this.max = DFA127_max;
			this.accept = DFA127_accept;
			this.special = DFA127_special;
			this.transition = DFA127_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 521:31: ( ws supportsDisjunction )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA132_eotS =
		"\12\uffff";
	static final String DFA132_eofS =
		"\12\uffff";
	static final String DFA132_minS =
		"\1\73\2\25\1\24\1\25\1\uffff\1\63\1\24\1\uffff\1\24";
	static final String DFA132_maxS =
		"\1\73\4\u0099\1\uffff\1\63\1\u0099\1\uffff\1\u0099";
	static final String DFA132_acceptS =
		"\5\uffff\1\1\2\uffff\1\2\1\uffff";
	static final String DFA132_specialS =
		"\12\uffff}>";
	static final String[] DFA132_transitionS = {
			"\1\1",
			"\1\2\75\uffff\1\2\105\uffff\1\2",
			"\1\4\35\uffff\1\3\10\uffff\1\5\26\uffff\1\4\105\uffff\1\4",
			"\1\10\1\7\11\uffff\1\6\34\uffff\1\5\26\uffff\1\7\57\uffff\1\10\25\uffff"+
			"\1\7",
			"\1\4\35\uffff\1\3\10\uffff\1\5\26\uffff\1\4\105\uffff\1\4",
			"",
			"\1\11",
			"\1\10\1\7\46\uffff\1\5\26\uffff\1\7\105\uffff\1\7",
			"",
			"\1\10\1\7\11\uffff\1\6\34\uffff\1\5\26\uffff\1\7\57\uffff\1\10\25\uffff"+
			"\1\7"
	};

	static final short[] DFA132_eot = DFA.unpackEncodedString(DFA132_eotS);
	static final short[] DFA132_eof = DFA.unpackEncodedString(DFA132_eofS);
	static final char[] DFA132_min = DFA.unpackEncodedStringToUnsignedChars(DFA132_minS);
	static final char[] DFA132_max = DFA.unpackEncodedStringToUnsignedChars(DFA132_maxS);
	static final short[] DFA132_accept = DFA.unpackEncodedString(DFA132_acceptS);
	static final short[] DFA132_special = DFA.unpackEncodedString(DFA132_specialS);
	static final short[][] DFA132_transition;

	static {
		int numStates = DFA132_transitionS.length;
		DFA132_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA132_transition[i] = DFA.unpackEncodedString(DFA132_transitionS[i]);
		}
	}

	protected class DFA132 extends DFA {

		public DFA132(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 132;
			this.eot = DFA132_eot;
			this.eof = DFA132_eof;
			this.min = DFA132_min;
			this.max = DFA132_max;
			this.accept = DFA132_accept;
			this.special = DFA132_special;
			this.transition = DFA132_transition;
		}
		@Override
		public String getDescription() {
			return "547:1: layerAtRule : ( layerBlock | layerStatement );";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA170_eotS =
		"\4\uffff";
	static final String DFA170_eofS =
		"\1\2\3\uffff";
	static final String DFA170_minS =
		"\2\24\2\uffff";
	static final String DFA170_maxS =
		"\2\u0099\2\uffff";
	static final String DFA170_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA170_specialS =
		"\4\uffff}>";
	static final String[] DFA170_transitionS = {
			"\1\3\1\1\46\uffff\1\2\26\uffff\1\1\105\uffff\1\1",
			"\1\3\1\1\46\uffff\1\2\26\uffff\1\1\105\uffff\1\1",
			"",
			""
	};

	static final short[] DFA170_eot = DFA.unpackEncodedString(DFA170_eotS);
	static final short[] DFA170_eof = DFA.unpackEncodedString(DFA170_eofS);
	static final char[] DFA170_min = DFA.unpackEncodedStringToUnsignedChars(DFA170_minS);
	static final char[] DFA170_max = DFA.unpackEncodedStringToUnsignedChars(DFA170_maxS);
	static final short[] DFA170_accept = DFA.unpackEncodedString(DFA170_acceptS);
	static final short[] DFA170_special = DFA.unpackEncodedString(DFA170_specialS);
	static final short[][] DFA170_transition;

	static {
		int numStates = DFA170_transitionS.length;
		DFA170_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA170_transition[i] = DFA.unpackEncodedString(DFA170_transitionS[i]);
		}
	}

	protected class DFA170 extends DFA {

		public DFA170(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 170;
			this.eot = DFA170_eot;
			this.eof = DFA170_eof;
			this.min = DFA170_min;
			this.max = DFA170_max;
			this.accept = DFA170_accept;
			this.special = DFA170_special;
			this.transition = DFA170_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 632:85: ( ( ws )? COMMA ( ws )? ({...}? IDENT |{...}? IDENT | PERCENTAGE ) )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA182_eotS =
		"\6\uffff";
	static final String DFA182_eofS =
		"\6\uffff";
	static final String DFA182_minS =
		"\3\6\2\uffff\1\6";
	static final String DFA182_maxS =
		"\3\u0099\2\uffff\1\u0099";
	static final String DFA182_acceptS =
		"\3\uffff\1\2\1\1\1\uffff";
	static final String DFA182_specialS =
		"\6\uffff}>";
	static final String[] DFA182_transitionS = {
			"\2\4\2\uffff\5\4\3\uffff\1\4\2\uffff\1\2\1\uffff\1\4\17\uffff\1\4\2\uffff"+
			"\1\4\4\uffff\1\4\3\uffff\1\4\1\uffff\1\4\10\uffff\3\4\11\uffff\3\4\5"+
			"\uffff\1\4\1\2\10\uffff\1\4\6\uffff\1\3\3\uffff\3\4\2\uffff\3\4\1\uffff"+
			"\2\4\2\uffff\1\4\1\uffff\3\4\1\uffff\3\4\1\uffff\5\4\1\1\1\uffff\1\4"+
			"\5\uffff\5\4\6\uffff\1\4\1\uffff\1\4\1\2",
			"\2\4\2\uffff\5\4\3\uffff\1\4\2\uffff\1\5\1\uffff\1\4\17\uffff\1\4\2"+
			"\uffff\1\4\4\uffff\1\4\3\uffff\1\4\1\uffff\1\4\10\uffff\3\4\11\uffff"+
			"\3\4\5\uffff\1\4\1\5\10\uffff\1\4\6\uffff\1\3\3\uffff\3\4\2\uffff\3\4"+
			"\1\uffff\2\4\2\uffff\1\4\1\uffff\3\4\1\uffff\3\4\1\uffff\5\4\2\uffff"+
			"\1\4\5\uffff\5\4\6\uffff\1\4\1\uffff\1\4\1\5",
			"\2\4\2\uffff\5\4\3\uffff\1\4\2\uffff\1\2\1\uffff\1\4\17\uffff\1\4\2"+
			"\uffff\1\4\4\uffff\1\4\3\uffff\1\4\1\uffff\1\4\10\uffff\3\4\11\uffff"+
			"\3\4\5\uffff\1\4\1\2\10\uffff\1\4\6\uffff\1\3\3\uffff\3\4\2\uffff\3\4"+
			"\1\uffff\2\4\2\uffff\1\4\1\uffff\3\4\1\uffff\3\4\1\uffff\6\4\1\uffff"+
			"\1\4\5\uffff\5\4\6\uffff\1\4\1\uffff\1\4\1\2",
			"",
			"",
			"\2\4\2\uffff\5\4\3\uffff\1\4\2\uffff\1\5\1\uffff\1\4\17\uffff\1\4\2"+
			"\uffff\1\4\4\uffff\1\4\3\uffff\1\4\1\uffff\1\4\10\uffff\3\4\11\uffff"+
			"\3\4\5\uffff\1\4\1\5\10\uffff\1\4\6\uffff\1\3\3\uffff\3\4\2\uffff\3\4"+
			"\1\uffff\2\4\2\uffff\1\4\1\uffff\3\4\1\uffff\3\4\1\uffff\5\4\2\uffff"+
			"\1\4\5\uffff\5\4\6\uffff\1\4\1\uffff\1\4\1\5"
	};

	static final short[] DFA182_eot = DFA.unpackEncodedString(DFA182_eotS);
	static final short[] DFA182_eof = DFA.unpackEncodedString(DFA182_eofS);
	static final char[] DFA182_min = DFA.unpackEncodedStringToUnsignedChars(DFA182_minS);
	static final char[] DFA182_max = DFA.unpackEncodedStringToUnsignedChars(DFA182_maxS);
	static final short[] DFA182_accept = DFA.unpackEncodedString(DFA182_acceptS);
	static final short[] DFA182_special = DFA.unpackEncodedString(DFA182_specialS);
	static final short[][] DFA182_transition;

	static {
		int numStates = DFA182_transitionS.length;
		DFA182_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA182_transition[i] = DFA.unpackEncodedString(DFA182_transitionS[i]);
		}
	}

	protected class DFA182 extends DFA {

		public DFA182(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 182;
			this.eot = DFA182_eot;
			this.eof = DFA182_eof;
			this.min = DFA182_min;
			this.max = DFA182_max;
			this.accept = DFA182_accept;
			this.special = DFA182_special;
			this.transition = DFA182_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 643:13: ( ( ws )? ({...}? ( SEMI ( ws )? ) | ( SEMI ( ws )? )? ) ( propertyDeclaration | margin ) )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA181_eotS =
		"\5\uffff";
	static final String DFA181_eofS =
		"\5\uffff";
	static final String DFA181_minS =
		"\1\6\1\uffff\2\23\1\uffff";
	static final String DFA181_maxS =
		"\1\u0098\1\uffff\2\u0099\1\uffff";
	static final String DFA181_acceptS =
		"\1\uffff\1\1\2\uffff\1\2";
	static final String DFA181_specialS =
		"\5\uffff}>";
	static final String[] DFA181_transitionS = {
			"\2\1\2\uffff\5\2\3\uffff\1\1\4\uffff\1\1\17\uffff\1\1\2\uffff\1\1\4\uffff"+
			"\1\1\3\uffff\1\1\1\uffff\1\1\10\uffff\3\2\11\uffff\3\1\5\uffff\1\1\11"+
			"\uffff\1\1\12\uffff\3\2\2\uffff\3\1\1\uffff\2\1\2\uffff\1\1\1\uffff\3"+
			"\1\1\uffff\3\1\1\uffff\5\1\2\uffff\1\1\5\uffff\5\2\6\uffff\1\1\1\uffff"+
			"\1\1",
			"",
			"\1\1\1\uffff\1\3\46\uffff\1\4\26\uffff\1\3\105\uffff\1\3",
			"\1\1\1\uffff\1\3\46\uffff\1\4\26\uffff\1\3\105\uffff\1\3",
			""
	};

	static final short[] DFA181_eot = DFA.unpackEncodedString(DFA181_eotS);
	static final short[] DFA181_eof = DFA.unpackEncodedString(DFA181_eofS);
	static final char[] DFA181_min = DFA.unpackEncodedStringToUnsignedChars(DFA181_minS);
	static final char[] DFA181_max = DFA.unpackEncodedStringToUnsignedChars(DFA181_maxS);
	static final short[] DFA181_accept = DFA.unpackEncodedString(DFA181_acceptS);
	static final short[] DFA181_special = DFA.unpackEncodedString(DFA181_specialS);
	static final short[][] DFA181_transition;

	static {
		int numStates = DFA181_transitionS.length;
		DFA181_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA181_transition[i] = DFA.unpackEncodedString(DFA181_transitionS[i]);
		}
	}

	protected class DFA181 extends DFA {

		public DFA181(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 181;
			this.eot = DFA181_eot;
			this.eof = DFA181_eof;
			this.min = DFA181_min;
			this.max = DFA181_max;
			this.accept = DFA181_accept;
			this.special = DFA181_special;
			this.transition = DFA181_transition;
		}
		@Override
		public String getDescription() {
			return "643:62: ( propertyDeclaration | margin )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA201_eotS =
		"\5\uffff";
	static final String DFA201_eofS =
		"\2\2\3\uffff";
	static final String DFA201_minS =
		"\2\6\3\uffff";
	static final String DFA201_maxS =
		"\2\u0099\3\uffff";
	static final String DFA201_acceptS =
		"\2\uffff\1\3\1\1\1\2";
	static final String DFA201_specialS =
		"\5\uffff}>";
	static final String[] DFA201_transitionS = {
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\uffff\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\4\2\2\uffff\1\2\6\uffff\3\2\5\uffff\1\2\1\1\10\uffff\1\2\2\uffff\2\2"+
			"\2\uffff\1\2\3\uffff\4\2\1\uffff\3\2\1\3\2\2\2\uffff\5\2\1\4\3\2\1\uffff"+
			"\6\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\10\uffff\1\2\1\1",
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\uffff\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\4\2\2\uffff\1\2\6\uffff\3\2\5\uffff\1\2\1\1\10\uffff\1\2\2\uffff\2\2"+
			"\2\uffff\1\2\3\uffff\4\2\1\uffff\3\2\1\3\2\2\1\uffff\6\2\1\4\3\2\1\uffff"+
			"\6\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\6\uffff\1\2\1\uffff"+
			"\1\2\1\1",
			"",
			"",
			""
	};

	static final short[] DFA201_eot = DFA.unpackEncodedString(DFA201_eotS);
	static final short[] DFA201_eof = DFA.unpackEncodedString(DFA201_eofS);
	static final char[] DFA201_min = DFA.unpackEncodedStringToUnsignedChars(DFA201_minS);
	static final char[] DFA201_max = DFA.unpackEncodedStringToUnsignedChars(DFA201_maxS);
	static final short[] DFA201_accept = DFA.unpackEncodedString(DFA201_acceptS);
	static final short[] DFA201_special = DFA.unpackEncodedString(DFA201_specialS);
	static final short[][] DFA201_transition;

	static {
		int numStates = DFA201_transitionS.length;
		DFA201_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA201_transition[i] = DFA.unpackEncodedString(DFA201_transitionS[i]);
		}
	}

	protected class DFA201 extends DFA {

		public DFA201(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 201;
			this.eot = DFA201_eot;
			this.eof = DFA201_eof;
			this.min = DFA201_min;
			this.max = DFA201_max;
			this.accept = DFA201_accept;
			this.special = DFA201_special;
			this.transition = DFA201_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 723:12: ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA203_eotS =
		"\6\uffff";
	static final String DFA203_eofS =
		"\6\uffff";
	static final String DFA203_minS =
		"\2\6\1\0\1\uffff\1\0\1\uffff";
	static final String DFA203_maxS =
		"\2\u0099\1\0\1\uffff\1\0\1\uffff";
	static final String DFA203_acceptS =
		"\3\uffff\1\2\1\uffff\1\1";
	static final String DFA203_specialS =
		"\2\uffff\1\0\1\uffff\1\1\1\uffff}>";
	static final String[] DFA203_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\1\3\1\uffff\1\2\1\1\1\uffff\1\3\17\uffff\1\3"+
			"\2\uffff\1\3\4\uffff\1\3\3\uffff\1\3\1\uffff\1\3\10\uffff\3\3\11\uffff"+
			"\3\3\5\uffff\1\3\1\1\4\uffff\1\3\3\uffff\1\3\12\uffff\4\3\1\uffff\3\3"+
			"\1\uffff\2\3\2\uffff\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\5\3\3\uffff"+
			"\1\3\4\uffff\5\3\6\uffff\1\3\1\uffff\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\1\3\1\uffff\1\4\1\1\1\uffff\1\3\17\uffff\1"+
			"\3\2\uffff\1\3\4\uffff\1\3\3\uffff\1\3\1\uffff\1\3\10\uffff\3\3\11\uffff"+
			"\3\3\5\uffff\1\3\1\1\4\uffff\1\3\3\uffff\1\3\12\uffff\4\3\1\uffff\3\3"+
			"\1\uffff\2\3\2\uffff\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\5\3\3\uffff"+
			"\1\3\4\uffff\5\3\6\uffff\1\3\1\uffff\1\3\1\1",
			"\1\uffff",
			"",
			"\1\uffff",
			""
	};

	static final short[] DFA203_eot = DFA.unpackEncodedString(DFA203_eotS);
	static final short[] DFA203_eof = DFA.unpackEncodedString(DFA203_eofS);
	static final char[] DFA203_min = DFA.unpackEncodedStringToUnsignedChars(DFA203_minS);
	static final char[] DFA203_max = DFA.unpackEncodedStringToUnsignedChars(DFA203_maxS);
	static final short[] DFA203_accept = DFA.unpackEncodedString(DFA203_acceptS);
	static final short[] DFA203_special = DFA.unpackEncodedString(DFA203_specialS);
	static final short[][] DFA203_transition;

	static {
		int numStates = DFA203_transitionS.length;
		DFA203_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA203_transition[i] = DFA.unpackEncodedString(DFA203_transitionS[i]);
		}
	}

	protected class DFA203 extends DFA {

		public DFA203(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 203;
			this.eot = DFA203_eot;
			this.eof = DFA203_eof;
			this.min = DFA203_min;
			this.max = DFA203_max;
			this.accept = DFA203_accept;
			this.special = DFA203_special;
			this.transition = DFA203_transition;
		}
		@Override
		public String getDescription() {
			return "734:26: ( ( ( ws )? COMMA )=> ( ws )? COMMA )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA203_2 = input.LA(1);
						 
						int index203_2 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred21_Css3()) ) {s = 5;}
						else if ( (true) ) {s = 3;}
						 
						input.seek(index203_2);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA203_4 = input.LA(1);
						 
						int index203_4 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred21_Css3()) ) {s = 5;}
						else if ( (true) ) {s = 3;}
						 
						input.seek(index203_4);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 203, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA208_eotS =
		"\4\uffff";
	static final String DFA208_eofS =
		"\4\uffff";
	static final String DFA208_minS =
		"\2\23\2\uffff";
	static final String DFA208_maxS =
		"\2\u0099\2\uffff";
	static final String DFA208_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA208_specialS =
		"\4\uffff}>";
	static final String[] DFA208_transitionS = {
			"\1\2\1\uffff\1\1\75\uffff\1\1\62\uffff\1\3\22\uffff\1\1",
			"\1\2\1\uffff\1\1\75\uffff\1\1\62\uffff\1\3\22\uffff\1\1",
			"",
			""
	};

	static final short[] DFA208_eot = DFA.unpackEncodedString(DFA208_eotS);
	static final short[] DFA208_eof = DFA.unpackEncodedString(DFA208_eofS);
	static final char[] DFA208_min = DFA.unpackEncodedStringToUnsignedChars(DFA208_minS);
	static final char[] DFA208_max = DFA.unpackEncodedStringToUnsignedChars(DFA208_maxS);
	static final short[] DFA208_accept = DFA.unpackEncodedString(DFA208_acceptS);
	static final short[] DFA208_special = DFA.unpackEncodedString(DFA208_specialS);
	static final short[][] DFA208_transition;

	static {
		int numStates = DFA208_transitionS.length;
		DFA208_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA208_transition[i] = DFA.unpackEncodedString(DFA208_transitionS[i]);
		}
	}

	protected class DFA208 extends DFA {

		public DFA208(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 208;
			this.eot = DFA208_eot;
			this.eof = DFA208_eof;
			this.min = DFA208_min;
			this.max = DFA208_max;
			this.accept = DFA208_accept;
			this.special = DFA208_special;
			this.transition = DFA208_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 742:25: ( ( ws )? STRING )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA213_eotS =
		"\4\uffff";
	static final String DFA213_eofS =
		"\4\uffff";
	static final String DFA213_minS =
		"\2\6\2\uffff";
	static final String DFA213_maxS =
		"\2\u0099\2\uffff";
	static final String DFA213_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA213_specialS =
		"\4\uffff}>";
	static final String[] DFA213_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\1\3\1\uffff\1\3\1\1\1\uffff\1\3\17\uffff\1\3"+
			"\2\uffff\1\3\4\uffff\1\3\3\uffff\1\3\1\2\1\3\10\uffff\3\3\11\uffff\3"+
			"\3\5\uffff\1\3\1\1\4\uffff\1\3\3\uffff\1\3\12\uffff\4\3\1\uffff\3\3\1"+
			"\uffff\2\3\2\uffff\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\5\3\3\uffff\1"+
			"\3\4\uffff\5\3\6\uffff\1\3\1\uffff\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\1\3\1\uffff\1\3\1\1\1\uffff\1\3\17\uffff\1"+
			"\3\2\uffff\1\3\4\uffff\1\3\3\uffff\1\3\1\2\1\3\10\uffff\3\3\11\uffff"+
			"\3\3\5\uffff\1\3\1\1\4\uffff\1\3\3\uffff\1\3\12\uffff\4\3\1\uffff\3\3"+
			"\1\uffff\2\3\2\uffff\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\5\3\3\uffff"+
			"\1\3\4\uffff\5\3\6\uffff\1\3\1\uffff\1\3\1\1",
			"",
			""
	};

	static final short[] DFA213_eot = DFA.unpackEncodedString(DFA213_eotS);
	static final short[] DFA213_eof = DFA.unpackEncodedString(DFA213_eofS);
	static final char[] DFA213_min = DFA.unpackEncodedStringToUnsignedChars(DFA213_minS);
	static final char[] DFA213_max = DFA.unpackEncodedStringToUnsignedChars(DFA213_maxS);
	static final short[] DFA213_accept = DFA.unpackEncodedString(DFA213_acceptS);
	static final short[] DFA213_special = DFA.unpackEncodedString(DFA213_specialS);
	static final short[][] DFA213_transition;

	static {
		int numStates = DFA213_transitionS.length;
		DFA213_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA213_transition[i] = DFA.unpackEncodedString(DFA213_transitionS[i]);
		}
	}

	protected class DFA213 extends DFA {

		public DFA213(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 213;
			this.eot = DFA213_eot;
			this.eof = DFA213_eof;
			this.min = DFA213_min;
			this.max = DFA213_max;
			this.accept = DFA213_accept;
			this.special = DFA213_special;
			this.transition = DFA213_transition;
		}
		@Override
		public String getDescription() {
			return "742:110: ( ( ws )? prio )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA219_eotS =
		"\6\uffff";
	static final String DFA219_eofS =
		"\6\uffff";
	static final String DFA219_minS =
		"\1\7\1\25\1\uffff\1\7\2\uffff";
	static final String DFA219_maxS =
		"\1\u0089\1\u0099\1\uffff\1\u0099\2\uffff";
	static final String DFA219_acceptS =
		"\2\uffff\1\3\1\uffff\1\1\1\2";
	static final String DFA219_specialS =
		"\6\uffff}>";
	static final String[] DFA219_transitionS = {
			"\1\2\13\uffff\1\2\11\uffff\3\2\12\uffff\2\2\2\uffff\2\2\3\uffff\1\2\11"+
			"\uffff\1\2\5\uffff\1\2\7\uffff\1\2\23\uffff\2\2\13\uffff\1\1\10\uffff"+
			"\1\2\17\uffff\1\2\3\uffff\1\2",
			"\1\3\46\uffff\1\4\26\uffff\1\3\105\uffff\1\3",
			"",
			"\1\4\13\uffff\1\4\1\uffff\1\3\7\uffff\3\4\12\uffff\2\4\2\uffff\2\4\3"+
			"\uffff\1\4\10\uffff\2\4\5\uffff\1\4\4\uffff\1\5\2\uffff\1\4\7\uffff\1"+
			"\3\13\uffff\2\4\24\uffff\1\4\17\uffff\1\4\3\uffff\1\4\17\uffff\1\3",
			"",
			""
	};

	static final short[] DFA219_eot = DFA.unpackEncodedString(DFA219_eotS);
	static final short[] DFA219_eof = DFA.unpackEncodedString(DFA219_eofS);
	static final char[] DFA219_min = DFA.unpackEncodedStringToUnsignedChars(DFA219_minS);
	static final char[] DFA219_max = DFA.unpackEncodedStringToUnsignedChars(DFA219_maxS);
	static final short[] DFA219_accept = DFA.unpackEncodedString(DFA219_acceptS);
	static final short[] DFA219_special = DFA.unpackEncodedString(DFA219_specialS);
	static final short[][] DFA219_transition;

	static {
		int numStates = DFA219_transitionS.length;
		DFA219_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA219_transition[i] = DFA.unpackEncodedString(DFA219_transitionS[i]);
		}
	}

	protected class DFA219 extends DFA {

		public DFA219(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 219;
			this.eot = DFA219_eot;
			this.eof = DFA219_eof;
			this.min = DFA219_min;
			this.max = DFA219_max;
			this.accept = DFA219_accept;
			this.special = DFA219_special;
			this.transition = DFA219_transition;
		}
		@Override
		public String getDescription() {
			return "747:9: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? {...}? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA214_eotS =
		"\4\uffff";
	static final String DFA214_eofS =
		"\4\uffff";
	static final String DFA214_minS =
		"\1\25\1\7\2\uffff";
	static final String DFA214_maxS =
		"\2\u0099\2\uffff";
	static final String DFA214_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA214_specialS =
		"\4\uffff}>";
	static final String[] DFA214_transitionS = {
			"\1\1\46\uffff\1\2\26\uffff\1\1\105\uffff\1\1",
			"\1\3\13\uffff\1\3\1\uffff\1\1\7\uffff\3\3\12\uffff\2\3\2\uffff\2\3\3"+
			"\uffff\1\3\10\uffff\1\2\1\3\5\uffff\1\3\7\uffff\1\3\7\uffff\1\1\13\uffff"+
			"\2\3\24\uffff\1\3\17\uffff\1\3\3\uffff\1\3\17\uffff\1\1",
			"",
			""
	};

	static final short[] DFA214_eot = DFA.unpackEncodedString(DFA214_eotS);
	static final short[] DFA214_eof = DFA.unpackEncodedString(DFA214_eofS);
	static final char[] DFA214_min = DFA.unpackEncodedStringToUnsignedChars(DFA214_minS);
	static final char[] DFA214_max = DFA.unpackEncodedStringToUnsignedChars(DFA214_maxS);
	static final short[] DFA214_accept = DFA.unpackEncodedString(DFA214_acceptS);
	static final short[] DFA214_special = DFA.unpackEncodedString(DFA214_specialS);
	static final short[][] DFA214_transition;

	static {
		int numStates = DFA214_transitionS.length;
		DFA214_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA214_transition[i] = DFA.unpackEncodedString(DFA214_transitionS[i]);
		}
	}

	protected class DFA214 extends DFA {

		public DFA214(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 214;
			this.eot = DFA214_eot;
			this.eof = DFA214_eof;
			this.min = DFA214_min;
			this.max = DFA214_max;
			this.accept = DFA214_accept;
			this.special = DFA214_special;
			this.transition = DFA214_transition;
		}
		@Override
		public String getDescription() {
			return "748:27: ( ws selectorsGroup )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA236_eotS =
		"\5\uffff";
	static final String DFA236_eofS =
		"\5\uffff";
	static final String DFA236_minS =
		"\2\6\1\uffff\1\6\1\uffff";
	static final String DFA236_maxS =
		"\1\u0098\1\u0099\1\uffff\1\u0099\1\uffff";
	static final String DFA236_acceptS =
		"\2\uffff\1\1\1\uffff\1\2";
	static final String DFA236_specialS =
		"\5\uffff}>";
	static final String[] DFA236_transitionS = {
			"\2\2\2\uffff\5\2\3\uffff\2\2\3\uffff\1\2\5\uffff\3\2\7\uffff\1\2\2\uffff"+
			"\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\5\uffff\1\2\1\uffff\4\2\2\uffff"+
			"\1\2\6\uffff\3\2\5\uffff\1\2\11\uffff\1\2\2\uffff\2\2\6\uffff\3\2\2\uffff"+
			"\3\2\1\uffff\2\2\1\uffff\6\2\1\uffff\3\2\1\uffff\5\2\1\1\1\uffff\1\2"+
			"\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\6\uffff\1\2\1\uffff\1\2",
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\uffff\1\3\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\4\2\2\uffff\1\2\6\uffff\3\2\5\uffff\1\2\1\3\10\uffff\1\2\2\uffff\2\2"+
			"\2\uffff\1\4\3\uffff\3\2\2\uffff\3\2\1\uffff\2\2\1\uffff\6\2\1\uffff"+
			"\3\2\1\uffff\5\2\1\1\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2"+
			"\6\uffff\1\2\1\uffff\1\2\1\3",
			"",
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\uffff\1\3\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\4\2\2\uffff\1\2\6\uffff\3\2\5\uffff\1\2\1\3\10\uffff\1\2\2\uffff\2\2"+
			"\2\uffff\1\4\3\uffff\3\2\2\uffff\3\2\1\uffff\2\2\1\uffff\6\2\1\uffff"+
			"\3\2\1\uffff\5\2\1\1\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2"+
			"\6\uffff\1\2\1\uffff\1\2\1\3",
			""
	};

	static final short[] DFA236_eot = DFA.unpackEncodedString(DFA236_eotS);
	static final short[] DFA236_eof = DFA.unpackEncodedString(DFA236_eofS);
	static final char[] DFA236_min = DFA.unpackEncodedStringToUnsignedChars(DFA236_minS);
	static final char[] DFA236_max = DFA.unpackEncodedStringToUnsignedChars(DFA236_maxS);
	static final short[] DFA236_accept = DFA.unpackEncodedString(DFA236_acceptS);
	static final short[] DFA236_special = DFA.unpackEncodedString(DFA236_specialS);
	static final short[][] DFA236_transition;

	static {
		int numStates = DFA236_transitionS.length;
		DFA236_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA236_transition[i] = DFA.unpackEncodedString(DFA236_transitionS[i]);
		}
	}

	protected class DFA236 extends DFA {

		public DFA236(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 236;
			this.eot = DFA236_eot;
			this.eof = DFA236_eof;
			this.min = DFA236_min;
			this.max = DFA236_max;
			this.accept = DFA236_accept;
			this.special = DFA236_special;
			this.transition = DFA236_transition;
		}
		@Override
		public String getDescription() {
			return "762:1: declarations : ( ( SEMI ( ws )? )* declaration ( ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws ) declaration )* ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws )? | ( SEMI ( ws )? )+ );";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA229_eotS =
		"\6\uffff";
	static final String DFA229_eofS =
		"\6\uffff";
	static final String DFA229_minS =
		"\1\25\2\6\2\uffff\1\6";
	static final String DFA229_maxS =
		"\3\u0099\2\uffff\1\u0099";
	static final String DFA229_acceptS =
		"\3\uffff\1\2\1\1\1\uffff";
	static final String DFA229_specialS =
		"\6\uffff}>";
	static final String[] DFA229_transitionS = {
			"\1\1\75\uffff\1\1\17\uffff\1\3\37\uffff\1\2\25\uffff\1\1",
			"\2\4\2\uffff\5\4\3\uffff\2\4\1\uffff\1\1\1\uffff\1\4\5\uffff\3\4\7\uffff"+
			"\1\4\2\uffff\2\4\2\uffff\2\4\3\uffff\1\4\1\uffff\1\4\5\uffff\1\4\1\uffff"+
			"\4\4\2\uffff\1\4\6\uffff\3\4\5\uffff\1\4\1\1\10\uffff\1\4\2\uffff\2\4"+
			"\2\uffff\1\3\3\uffff\3\4\2\uffff\3\4\1\uffff\2\4\1\uffff\6\4\1\uffff"+
			"\3\4\1\uffff\5\4\1\2\1\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\5\4"+
			"\6\uffff\1\4\1\uffff\1\4\1\1",
			"\2\4\2\uffff\5\4\3\uffff\2\4\1\uffff\1\5\1\uffff\1\4\5\uffff\3\4\7\uffff"+
			"\1\4\2\uffff\2\4\2\uffff\2\4\3\uffff\1\4\1\uffff\1\4\5\uffff\1\4\1\uffff"+
			"\4\4\2\uffff\1\4\6\uffff\3\4\5\uffff\1\4\1\5\10\uffff\1\4\2\uffff\2\4"+
			"\2\uffff\1\3\3\uffff\3\4\2\uffff\3\4\1\uffff\2\4\1\uffff\6\4\1\uffff"+
			"\3\4\1\uffff\5\4\1\2\1\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\5\4"+
			"\6\uffff\1\4\1\uffff\1\4\1\5",
			"",
			"",
			"\2\4\2\uffff\5\4\3\uffff\2\4\1\uffff\1\5\1\uffff\1\4\5\uffff\3\4\7\uffff"+
			"\1\4\2\uffff\2\4\2\uffff\2\4\3\uffff\1\4\1\uffff\1\4\5\uffff\1\4\1\uffff"+
			"\4\4\2\uffff\1\4\6\uffff\3\4\5\uffff\1\4\1\5\10\uffff\1\4\2\uffff\2\4"+
			"\2\uffff\1\3\3\uffff\3\4\2\uffff\3\4\1\uffff\2\4\1\uffff\6\4\1\uffff"+
			"\3\4\1\uffff\5\4\1\2\1\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\5\4"+
			"\6\uffff\1\4\1\uffff\1\4\1\5"
	};

	static final short[] DFA229_eot = DFA.unpackEncodedString(DFA229_eotS);
	static final short[] DFA229_eof = DFA.unpackEncodedString(DFA229_eofS);
	static final char[] DFA229_min = DFA.unpackEncodedStringToUnsignedChars(DFA229_minS);
	static final char[] DFA229_max = DFA.unpackEncodedStringToUnsignedChars(DFA229_maxS);
	static final short[] DFA229_accept = DFA.unpackEncodedString(DFA229_acceptS);
	static final short[] DFA229_special = DFA.unpackEncodedString(DFA229_specialS);
	static final short[][] DFA229_transition;

	static {
		int numStates = DFA229_transitionS.length;
		DFA229_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA229_transition[i] = DFA.unpackEncodedString(DFA229_transitionS[i]);
		}
	}

	protected class DFA229 extends DFA {

		public DFA229(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 229;
			this.eot = DFA229_eot;
			this.eof = DFA229_eof;
			this.min = DFA229_min;
			this.max = DFA229_max;
			this.accept = DFA229_accept;
			this.special = DFA229_special;
			this.transition = DFA229_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 764:33: ( ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws ) declaration )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA228_eotS =
		"\4\uffff";
	static final String DFA228_eofS =
		"\4\uffff";
	static final String DFA228_minS =
		"\1\25\1\6\2\uffff";
	static final String DFA228_maxS =
		"\2\u0099\2\uffff";
	static final String DFA228_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA228_specialS =
		"\4\uffff}>";
	static final String[] DFA228_transitionS = {
			"\1\1\75\uffff\1\1\57\uffff\1\2\25\uffff\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\uffff\1\3\5\uffff\1\3\1\uffff"+
			"\4\3\2\uffff\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3"+
			"\6\uffff\3\3\2\uffff\3\3\1\uffff\2\3\1\uffff\6\3\1\uffff\3\3\1\uffff"+
			"\5\3\1\2\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3"+
			"\1\uffff\1\3\1\1",
			"",
			""
	};

	static final short[] DFA228_eot = DFA.unpackEncodedString(DFA228_eotS);
	static final short[] DFA228_eof = DFA.unpackEncodedString(DFA228_eofS);
	static final char[] DFA228_min = DFA.unpackEncodedStringToUnsignedChars(DFA228_minS);
	static final char[] DFA228_max = DFA.unpackEncodedStringToUnsignedChars(DFA228_maxS);
	static final short[] DFA228_accept = DFA.unpackEncodedString(DFA228_acceptS);
	static final short[] DFA228_special = DFA.unpackEncodedString(DFA228_specialS);
	static final short[][] DFA228_transition;

	static {
		int numStates = DFA228_transitionS.length;
		DFA228_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA228_transition[i] = DFA.unpackEncodedString(DFA228_transitionS[i]);
		}
	}

	protected class DFA228 extends DFA {

		public DFA228(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 228;
			this.eot = DFA228_eot;
			this.eof = DFA228_eof;
			this.min = DFA228_min;
			this.max = DFA228_max;
			this.accept = DFA228_accept;
			this.special = DFA228_special;
			this.transition = DFA228_transition;
		}
		@Override
		public String getDescription() {
			return "764:34: ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA233_eotS =
		"\5\uffff";
	static final String DFA233_eofS =
		"\5\uffff";
	static final String DFA233_minS =
		"\2\25\3\uffff";
	static final String DFA233_maxS =
		"\2\u0099\3\uffff";
	static final String DFA233_acceptS =
		"\2\uffff\1\1\1\3\1\2";
	static final String DFA233_specialS =
		"\5\uffff}>";
	static final String[] DFA233_transitionS = {
			"\1\1\75\uffff\1\1\17\uffff\1\3\37\uffff\1\2\25\uffff\1\1",
			"\1\1\75\uffff\1\1\17\uffff\1\4\37\uffff\1\2\25\uffff\1\1",
			"",
			"",
			""
	};

	static final short[] DFA233_eot = DFA.unpackEncodedString(DFA233_eotS);
	static final short[] DFA233_eof = DFA.unpackEncodedString(DFA233_eofS);
	static final char[] DFA233_min = DFA.unpackEncodedStringToUnsignedChars(DFA233_minS);
	static final char[] DFA233_max = DFA.unpackEncodedStringToUnsignedChars(DFA233_maxS);
	static final short[] DFA233_accept = DFA.unpackEncodedString(DFA233_acceptS);
	static final short[] DFA233_special = DFA.unpackEncodedString(DFA233_specialS);
	static final short[][] DFA233_transition;

	static {
		int numStates = DFA233_transitionS.length;
		DFA233_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA233_transition[i] = DFA.unpackEncodedString(DFA233_transitionS[i]);
		}
	}

	protected class DFA233 extends DFA {

		public DFA233(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 233;
			this.eot = DFA233_eot;
			this.eof = DFA233_eof;
			this.min = DFA233_min;
			this.max = DFA233_max;
			this.accept = DFA233_accept;
			this.special = DFA233_special;
			this.transition = DFA233_transition;
		}
		@Override
		public String getDescription() {
			return "764:71: ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA238_eotS =
		"\4\uffff";
	static final String DFA238_eofS =
		"\4\uffff";
	static final String DFA238_minS =
		"\1\25\1\6\2\uffff";
	static final String DFA238_maxS =
		"\2\u0099\2\uffff";
	static final String DFA238_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA238_specialS =
		"\4\uffff}>";
	static final String[] DFA238_transitionS = {
			"\1\1\36\uffff\1\2\36\uffff\1\1\17\uffff\1\3\6\uffff\1\3\30\uffff\1\3"+
			"\25\uffff\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\2\1\3\5\uffff\1\3\1\uffff"+
			"\4\3\2\uffff\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3"+
			"\2\uffff\1\3\3\uffff\4\3\1\uffff\3\3\1\uffff\2\3\1\uffff\6\3\1\uffff"+
			"\3\3\1\uffff\6\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff"+
			"\1\3\1\uffff\1\3\1\1",
			"",
			""
	};

	static final short[] DFA238_eot = DFA.unpackEncodedString(DFA238_eotS);
	static final short[] DFA238_eof = DFA.unpackEncodedString(DFA238_eofS);
	static final char[] DFA238_min = DFA.unpackEncodedStringToUnsignedChars(DFA238_minS);
	static final char[] DFA238_max = DFA.unpackEncodedStringToUnsignedChars(DFA238_maxS);
	static final short[] DFA238_accept = DFA.unpackEncodedString(DFA238_acceptS);
	static final short[] DFA238_special = DFA.unpackEncodedString(DFA238_specialS);
	static final short[][] DFA238_transition;

	static {
		int numStates = DFA238_transitionS.length;
		DFA238_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA238_transition[i] = DFA.unpackEncodedString(DFA238_transitionS[i]);
		}
	}

	protected class DFA238 extends DFA {

		public DFA238(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 238;
			this.eot = DFA238_eot;
			this.eof = DFA238_eof;
			this.min = DFA238_min;
			this.max = DFA238_max;
			this.accept = DFA238_accept;
			this.special = DFA238_special;
			this.transition = DFA238_transition;
		}
		@Override
		public String getDescription() {
			return "778:39: ( ( ws )? IMPORTANT_SYM )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA240_eotS =
		"\4\uffff";
	static final String DFA240_eofS =
		"\4\uffff";
	static final String DFA240_minS =
		"\1\25\1\6\2\uffff";
	static final String DFA240_maxS =
		"\2\u0099\2\uffff";
	static final String DFA240_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA240_specialS =
		"\4\uffff}>";
	static final String[] DFA240_transitionS = {
			"\1\1\36\uffff\1\2\36\uffff\1\1\17\uffff\1\3\6\uffff\1\3\30\uffff\1\3"+
			"\25\uffff\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\2\1\3\5\uffff\1\3\1\uffff"+
			"\4\3\2\uffff\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3"+
			"\2\uffff\1\3\3\uffff\4\3\1\uffff\3\3\1\uffff\2\3\1\uffff\6\3\1\uffff"+
			"\3\3\1\uffff\6\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff"+
			"\1\3\1\uffff\1\3\1\1",
			"",
			""
	};

	static final short[] DFA240_eot = DFA.unpackEncodedString(DFA240_eotS);
	static final short[] DFA240_eof = DFA.unpackEncodedString(DFA240_eofS);
	static final char[] DFA240_min = DFA.unpackEncodedStringToUnsignedChars(DFA240_minS);
	static final char[] DFA240_max = DFA.unpackEncodedStringToUnsignedChars(DFA240_maxS);
	static final short[] DFA240_accept = DFA.unpackEncodedString(DFA240_acceptS);
	static final short[] DFA240_special = DFA.unpackEncodedString(DFA240_specialS);
	static final short[][] DFA240_transition;

	static {
		int numStates = DFA240_transitionS.length;
		DFA240_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA240_transition[i] = DFA.unpackEncodedString(DFA240_transitionS[i]);
		}
	}

	protected class DFA240 extends DFA {

		public DFA240(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 240;
			this.eot = DFA240_eot;
			this.eof = DFA240_eof;
			this.min = DFA240_min;
			this.max = DFA240_max;
			this.accept = DFA240_accept;
			this.special = DFA240_special;
			this.transition = DFA240_transition;
		}
		@Override
		public String getDescription() {
			return "779:57: ( ( ws )? IMPORTANT_SYM )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA244_eotS =
		"\6\uffff";
	static final String DFA244_eofS =
		"\6\uffff";
	static final String DFA244_minS =
		"\1\24\1\7\1\24\1\uffff\1\7\1\uffff";
	static final String DFA244_maxS =
		"\3\u0099\1\uffff\1\u0099\1\uffff";
	static final String DFA244_acceptS =
		"\3\uffff\1\2\1\uffff\1\1";
	static final String DFA244_specialS =
		"\6\uffff}>";
	static final String[] DFA244_transitionS = {
			"\1\1\1\2\46\uffff\1\3\26\uffff\1\2\26\uffff\1\3\56\uffff\1\2",
			"\1\5\13\uffff\1\5\1\uffff\1\4\7\uffff\3\5\12\uffff\2\5\2\uffff\2\5\3"+
			"\uffff\1\5\10\uffff\1\3\1\5\5\uffff\1\5\7\uffff\1\5\7\uffff\1\4\13\uffff"+
			"\2\5\11\uffff\1\3\12\uffff\1\5\17\uffff\1\5\3\uffff\1\5\17\uffff\1\4",
			"\1\5\1\2\46\uffff\1\3\26\uffff\1\2\26\uffff\1\3\56\uffff\1\2",
			"",
			"\1\5\13\uffff\1\5\1\uffff\1\4\7\uffff\3\5\12\uffff\2\5\2\uffff\2\5\3"+
			"\uffff\1\5\10\uffff\1\3\1\5\5\uffff\1\5\7\uffff\1\5\7\uffff\1\4\13\uffff"+
			"\2\5\11\uffff\1\3\12\uffff\1\5\17\uffff\1\5\3\uffff\1\5\17\uffff\1\4",
			""
	};

	static final short[] DFA244_eot = DFA.unpackEncodedString(DFA244_eotS);
	static final short[] DFA244_eof = DFA.unpackEncodedString(DFA244_eofS);
	static final char[] DFA244_min = DFA.unpackEncodedStringToUnsignedChars(DFA244_minS);
	static final char[] DFA244_max = DFA.unpackEncodedStringToUnsignedChars(DFA244_maxS);
	static final short[] DFA244_accept = DFA.unpackEncodedString(DFA244_acceptS);
	static final short[] DFA244_special = DFA.unpackEncodedString(DFA244_specialS);
	static final short[][] DFA244_transition;

	static {
		int numStates = DFA244_transitionS.length;
		DFA244_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA244_transition[i] = DFA.unpackEncodedString(DFA244_transitionS[i]);
		}
	}

	protected class DFA244 extends DFA {

		public DFA244(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 244;
			this.eot = DFA244_eot;
			this.eof = DFA244_eof;
			this.min = DFA244_min;
			this.max = DFA244_max;
			this.accept = DFA244_accept;
			this.special = DFA244_special;
			this.transition = DFA244_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 797:18: ( ( ws )? COMMA ( ws )? selector )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA252_eotS =
		"\5\uffff";
	static final String DFA252_eofS =
		"\5\uffff";
	static final String DFA252_minS =
		"\2\7\1\uffff\1\7\1\uffff";
	static final String DFA252_maxS =
		"\1\u0089\1\u0099\1\uffff\1\u0099\1\uffff";
	static final String DFA252_acceptS =
		"\2\uffff\1\1\1\uffff\1\2";
	static final String DFA252_specialS =
		"\5\uffff}>";
	static final String[] DFA252_transitionS = {
			"\1\2\13\uffff\1\2\11\uffff\3\2\12\uffff\1\2\1\1\2\uffff\2\2\3\uffff\1"+
			"\2\11\uffff\1\2\5\uffff\1\2\7\uffff\1\2\23\uffff\1\2\1\1\24\uffff\1\2"+
			"\17\uffff\1\2\3\uffff\1\1",
			"\1\2\13\uffff\1\2\1\4\1\3\7\uffff\3\2\12\uffff\1\2\3\uffff\2\2\3\uffff"+
			"\1\2\10\uffff\1\4\1\2\5\uffff\1\2\7\uffff\1\2\7\uffff\1\3\13\uffff\1"+
			"\2\12\uffff\1\4\12\uffff\1\2\17\uffff\1\2\23\uffff\1\3",
			"",
			"\1\2\13\uffff\1\2\1\4\1\3\7\uffff\3\2\12\uffff\1\2\3\uffff\2\2\3\uffff"+
			"\1\2\10\uffff\1\4\1\2\5\uffff\1\2\7\uffff\1\2\7\uffff\1\3\13\uffff\1"+
			"\2\12\uffff\1\4\12\uffff\1\2\17\uffff\1\2\23\uffff\1\3",
			""
	};

	static final short[] DFA252_eot = DFA.unpackEncodedString(DFA252_eotS);
	static final short[] DFA252_eof = DFA.unpackEncodedString(DFA252_eofS);
	static final char[] DFA252_min = DFA.unpackEncodedStringToUnsignedChars(DFA252_minS);
	static final char[] DFA252_max = DFA.unpackEncodedStringToUnsignedChars(DFA252_maxS);
	static final short[] DFA252_accept = DFA.unpackEncodedString(DFA252_acceptS);
	static final short[] DFA252_special = DFA.unpackEncodedString(DFA252_specialS);
	static final short[][] DFA252_transition;

	static {
		int numStates = DFA252_transitionS.length;
		DFA252_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA252_transition[i] = DFA.unpackEncodedString(DFA252_transitionS[i]);
		}
	}

	protected class DFA252 extends DFA {

		public DFA252(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 252;
			this.eot = DFA252_eot;
			this.eof = DFA252_eof;
			this.min = DFA252_min;
			this.max = DFA252_max;
			this.accept = DFA252_accept;
			this.special = DFA252_special;
			this.transition = DFA252_transition;
		}
		@Override
		public String getDescription() {
			return "800:1: selector : ( ( combinator ( ws )? )? simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence )* |{...}? combinator );";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA251_eotS =
		"\4\uffff";
	static final String DFA251_eofS =
		"\4\uffff";
	static final String DFA251_minS =
		"\1\24\1\7\2\uffff";
	static final String DFA251_maxS =
		"\2\u0099\2\uffff";
	static final String DFA251_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA251_specialS =
		"\4\uffff}>";
	static final String[] DFA251_transitionS = {
			"\1\2\1\1\25\uffff\1\3\20\uffff\1\2\26\uffff\1\1\14\uffff\1\3\11\uffff"+
			"\1\2\36\uffff\1\3\17\uffff\1\1",
			"\1\3\13\uffff\1\3\1\2\1\1\7\uffff\3\3\12\uffff\2\3\2\uffff\2\3\3\uffff"+
			"\1\3\10\uffff\1\2\1\3\5\uffff\1\3\7\uffff\1\3\7\uffff\1\1\13\uffff\2"+
			"\3\11\uffff\1\2\12\uffff\1\3\17\uffff\1\3\3\uffff\1\3\17\uffff\1\1",
			"",
			""
	};

	static final short[] DFA251_eot = DFA.unpackEncodedString(DFA251_eotS);
	static final short[] DFA251_eof = DFA.unpackEncodedString(DFA251_eofS);
	static final char[] DFA251_min = DFA.unpackEncodedStringToUnsignedChars(DFA251_minS);
	static final char[] DFA251_max = DFA.unpackEncodedStringToUnsignedChars(DFA251_maxS);
	static final short[] DFA251_accept = DFA.unpackEncodedString(DFA251_acceptS);
	static final short[] DFA251_special = DFA.unpackEncodedString(DFA251_specialS);
	static final short[][] DFA251_transition;

	static {
		int numStates = DFA251_transitionS.length;
		DFA251_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA251_transition[i] = DFA.unpackEncodedString(DFA251_transitionS[i]);
		}
	}

	protected class DFA251 extends DFA {

		public DFA251(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 251;
			this.eot = DFA251_eot;
			this.eof = DFA251_eof;
			this.min = DFA251_min;
			this.max = DFA251_max;
			this.accept = DFA251_accept;
			this.special = DFA251_special;
			this.transition = DFA251_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 801:49: ( ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA250_eotS =
		"\4\uffff";
	static final String DFA250_eofS =
		"\4\uffff";
	static final String DFA250_minS =
		"\1\25\1\7\2\uffff";
	static final String DFA250_maxS =
		"\2\u0099\2\uffff";
	static final String DFA250_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA250_specialS =
		"\4\uffff}>";
	static final String[] DFA250_transitionS = {
			"\1\1\25\uffff\1\2\47\uffff\1\1\14\uffff\1\2\50\uffff\1\2\17\uffff\1\1",
			"\1\3\13\uffff\1\3\1\uffff\1\1\7\uffff\3\3\12\uffff\1\3\1\2\2\uffff\2"+
			"\3\3\uffff\1\3\11\uffff\1\3\5\uffff\1\3\7\uffff\1\3\7\uffff\1\1\13\uffff"+
			"\1\3\1\2\24\uffff\1\3\17\uffff\1\3\3\uffff\1\2\17\uffff\1\1",
			"",
			""
	};

	static final short[] DFA250_eot = DFA.unpackEncodedString(DFA250_eotS);
	static final short[] DFA250_eof = DFA.unpackEncodedString(DFA250_eofS);
	static final char[] DFA250_min = DFA.unpackEncodedStringToUnsignedChars(DFA250_minS);
	static final char[] DFA250_max = DFA.unpackEncodedStringToUnsignedChars(DFA250_maxS);
	static final short[] DFA250_accept = DFA.unpackEncodedString(DFA250_acceptS);
	static final short[] DFA250_special = DFA.unpackEncodedString(DFA250_specialS);
	static final short[][] DFA250_transition;

	static {
		int numStates = DFA250_transitionS.length;
		DFA250_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA250_transition[i] = DFA.unpackEncodedString(DFA250_transitionS[i]);
		}
	}

	protected class DFA250 extends DFA {

		public DFA250(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 250;
			this.eot = DFA250_eot;
			this.eof = DFA250_eof;
			this.min = DFA250_min;
			this.max = DFA250_max;
			this.accept = DFA250_accept;
			this.special = DFA250_special;
			this.transition = DFA250_transition;
		}
		@Override
		public String getDescription() {
			return "801:51: ( ( ( ws )? combinator ( ws )? ) | ws )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA256_eotS =
		"\5\uffff";
	static final String DFA256_eofS =
		"\5\uffff";
	static final String DFA256_minS =
		"\1\23\1\7\1\uffff\1\7\1\uffff";
	static final String DFA256_maxS =
		"\2\u0099\1\uffff\1\121\1\uffff";
	static final String DFA256_acceptS =
		"\2\uffff\1\1\1\uffff\1\2";
	static final String DFA256_specialS =
		"\5\uffff}>";
	static final String[] DFA256_transitionS = {
			"\1\2\1\uffff\1\1\7\uffff\3\2\16\uffff\2\2\15\uffff\1\2\5\uffff\1\2\17"+
			"\uffff\1\1\41\uffff\1\2\43\uffff\1\1",
			"\1\4\13\uffff\1\2\1\uffff\1\1\7\uffff\3\2\16\uffff\1\2\1\3\3\uffff\1"+
			"\4\11\uffff\1\2\5\uffff\1\2\7\uffff\1\4\7\uffff\1\1\41\uffff\1\2\43\uffff"+
			"\1\1",
			"",
			"\1\2\53\uffff\1\2\10\uffff\1\4\16\uffff\1\2\5\uffff\1\2",
			""
	};

	static final short[] DFA256_eot = DFA.unpackEncodedString(DFA256_eotS);
	static final short[] DFA256_eof = DFA.unpackEncodedString(DFA256_eofS);
	static final char[] DFA256_min = DFA.unpackEncodedStringToUnsignedChars(DFA256_minS);
	static final char[] DFA256_max = DFA.unpackEncodedStringToUnsignedChars(DFA256_maxS);
	static final short[] DFA256_accept = DFA.unpackEncodedString(DFA256_acceptS);
	static final short[] DFA256_special = DFA.unpackEncodedString(DFA256_specialS);
	static final short[][] DFA256_transition;

	static {
		int numStates = DFA256_transitionS.length;
		DFA256_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA256_transition[i] = DFA.unpackEncodedString(DFA256_transitionS[i]);
		}
	}

	protected class DFA256 extends DFA {

		public DFA256(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 256;
			this.eot = DFA256_eot;
			this.eof = DFA256_eof;
			this.min = DFA256_min;
			this.max = DFA256_max;
			this.accept = DFA256_accept;
			this.special = DFA256_special;
			this.transition = DFA256_transition;
		}
		@Override
		public String getDescription() {
			return "813:79: ( ( ( ws )? elementSubsequent ) | ( ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ) )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA259_eotS =
		"\5\uffff";
	static final String DFA259_eofS =
		"\5\uffff";
	static final String DFA259_minS =
		"\2\23\1\uffff\1\7\1\uffff";
	static final String DFA259_maxS =
		"\2\u0099\1\uffff\1\121\1\uffff";
	static final String DFA259_acceptS =
		"\2\uffff\1\1\1\uffff\1\2";
	static final String DFA259_specialS =
		"\5\uffff}>";
	static final String[] DFA259_transitionS = {
			"\1\2\1\uffff\1\1\7\uffff\3\2\16\uffff\2\2\15\uffff\1\2\5\uffff\1\2\17"+
			"\uffff\1\1\41\uffff\1\2\43\uffff\1\1",
			"\1\2\1\uffff\1\1\7\uffff\3\2\16\uffff\1\2\1\3\3\uffff\1\4\11\uffff\1"+
			"\2\5\uffff\1\2\7\uffff\1\4\7\uffff\1\1\41\uffff\1\2\43\uffff\1\1",
			"",
			"\1\2\53\uffff\1\2\10\uffff\1\4\16\uffff\1\2\5\uffff\1\2",
			""
	};

	static final short[] DFA259_eot = DFA.unpackEncodedString(DFA259_eotS);
	static final short[] DFA259_eof = DFA.unpackEncodedString(DFA259_eofS);
	static final char[] DFA259_min = DFA.unpackEncodedStringToUnsignedChars(DFA259_minS);
	static final char[] DFA259_max = DFA.unpackEncodedStringToUnsignedChars(DFA259_maxS);
	static final short[] DFA259_accept = DFA.unpackEncodedString(DFA259_acceptS);
	static final short[] DFA259_special = DFA.unpackEncodedString(DFA259_specialS);
	static final short[][] DFA259_transition;

	static {
		int numStates = DFA259_transitionS.length;
		DFA259_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA259_transition[i] = DFA.unpackEncodedString(DFA259_transitionS[i]);
		}
	}

	protected class DFA259 extends DFA {

		public DFA259(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 259;
			this.eot = DFA259_eot;
			this.eof = DFA259_eof;
			this.min = DFA259_min;
			this.max = DFA259_max;
			this.accept = DFA259_accept;
			this.special = DFA259_special;
			this.transition = DFA259_transition;
		}
		@Override
		public String getDescription() {
			return "814:48: ( ( ( ws )? elementSubsequent ) |{...}? ws sass_selector_interpolation_exp )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA282_eotS =
		"\4\uffff";
	static final String DFA282_eofS =
		"\2\3\2\uffff";
	static final String DFA282_minS =
		"\2\6\2\uffff";
	static final String DFA282_maxS =
		"\2\u0099\2\uffff";
	static final String DFA282_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA282_specialS =
		"\4\uffff}>";
	static final String[] DFA282_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff\1\3"+
			"\2\uffff\2\3\2\uffff\2\3\3\uffff\3\3\5\uffff\6\3\2\uffff\1\3\4\uffff"+
			"\1\2\1\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\4\3\1\uffff\3\3\1\uffff\2\3\2\uffff\5\3\1\uffff\3\3\1\uffff"+
			"\6\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff\1\3"+
			"\2\uffff\2\3\2\uffff\2\3\3\uffff\3\3\5\uffff\6\3\2\uffff\1\3\4\uffff"+
			"\1\2\1\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\4\3\1\uffff\3\3\1\uffff\2\3\1\uffff\6\3\1\uffff\12\3\1\uffff"+
			"\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\uffff\1\3\1\1",
			"",
			""
	};

	static final short[] DFA282_eot = DFA.unpackEncodedString(DFA282_eotS);
	static final short[] DFA282_eof = DFA.unpackEncodedString(DFA282_eofS);
	static final char[] DFA282_min = DFA.unpackEncodedStringToUnsignedChars(DFA282_minS);
	static final char[] DFA282_max = DFA.unpackEncodedStringToUnsignedChars(DFA282_maxS);
	static final short[] DFA282_accept = DFA.unpackEncodedString(DFA282_acceptS);
	static final short[] DFA282_special = DFA.unpackEncodedString(DFA282_specialS);
	static final short[][] DFA282_transition;

	static {
		int numStates = DFA282_transitionS.length;
		DFA282_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA282_transition[i] = DFA.unpackEncodedString(DFA282_transitionS[i]);
		}
	}

	protected class DFA282 extends DFA {

		public DFA282(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 282;
			this.eot = DFA282_eot;
			this.eof = DFA282_eof;
			this.min = DFA282_min;
			this.max = DFA282_max;
			this.accept = DFA282_accept;
			this.special = DFA282_special;
			this.transition = DFA282_transition;
		}
		@Override
		public String getDescription() {
			return "929:21: ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA305_eotS =
		"\4\uffff";
	static final String DFA305_eofS =
		"\1\3\3\uffff";
	static final String DFA305_minS =
		"\2\6\2\uffff";
	static final String DFA305_maxS =
		"\2\u0099\2\uffff";
	static final String DFA305_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA305_specialS =
		"\4\uffff}>";
	static final String[] DFA305_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\2\1\3\7\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\4\3\1\uffff\3\3\1\uffff\2\3\2\uffff\5\3\1\uffff\3\3\1\uffff"+
			"\6\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\1\3\1\2\1\3\5\uffff\1\3\1\uffff"+
			"\4\3\2\uffff\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3"+
			"\2\uffff\1\3\3\uffff\4\3\1\uffff\3\3\1\uffff\2\3\1\uffff\6\3\1\uffff"+
			"\3\3\1\uffff\6\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff"+
			"\1\3\1\uffff\1\3\1\1",
			"",
			""
	};

	static final short[] DFA305_eot = DFA.unpackEncodedString(DFA305_eotS);
	static final short[] DFA305_eof = DFA.unpackEncodedString(DFA305_eofS);
	static final char[] DFA305_min = DFA.unpackEncodedStringToUnsignedChars(DFA305_minS);
	static final char[] DFA305_max = DFA.unpackEncodedStringToUnsignedChars(DFA305_maxS);
	static final short[] DFA305_accept = DFA.unpackEncodedString(DFA305_acceptS);
	static final short[] DFA305_special = DFA.unpackEncodedString(DFA305_specialS);
	static final short[][] DFA305_transition;

	static {
		int numStates = DFA305_transitionS.length;
		DFA305_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA305_transition[i] = DFA.unpackEncodedString(DFA305_transitionS[i]);
		}
	}

	protected class DFA305 extends DFA {

		public DFA305(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 305;
			this.eot = DFA305_eot;
			this.eof = DFA305_eof;
			this.min = DFA305_min;
			this.max = DFA305_max;
			this.accept = DFA305_accept;
			this.special = DFA305_special;
			this.transition = DFA305_transition;
		}
		@Override
		public String getDescription() {
			return "944:50: ( ( ws )? prio )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA318_eotS =
		"\100\uffff";
	static final String DFA318_eofS =
		"\1\2\77\uffff";
	static final String DFA318_minS =
		"\1\5\1\0\4\uffff\1\0\1\uffff\6\0\1\uffff\3\0\1\uffff\3\0\2\uffff\20\0"+
		"\1\uffff\2\0\2\uffff\1\0\1\uffff\1\0\20\uffff";
	static final String DFA318_maxS =
		"\1\u0099\1\0\4\uffff\1\0\1\uffff\6\0\1\uffff\3\0\1\uffff\3\0\2\uffff\20"+
		"\0\1\uffff\2\0\2\uffff\1\0\1\uffff\1\0\20\uffff";
	static final String DFA318_acceptS =
		"\2\uffff\1\2\53\uffff\1\1\1\uffff\14\1\1\uffff\3\1";
	static final String DFA318_specialS =
		"\1\0\1\1\4\uffff\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\uffff\1\11\1\12"+
		"\1\13\1\uffff\1\14\1\15\1\16\2\uffff\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
		"\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\uffff\1\37\1\40\2\uffff"+
		"\1\41\1\uffff\1\42\20\uffff}>";
	static final String[] DFA318_transitionS = {
			"\1\67\1\12\1\24\2\uffff\5\51\3\uffff\1\52\1\2\1\55\1\1\1\uffff\1\52\5"+
			"\uffff\1\2\1\20\1\2\1\uffff\1\64\3\uffff\1\66\1\uffff\1\43\1\71\1\uffff"+
			"\1\30\1\2\2\uffff\1\10\1\17\3\uffff\1\23\1\2\1\41\6\uffff\1\2\1\21\3"+
			"\51\1\63\1\uffff\1\6\1\75\5\uffff\1\46\1\25\1\44\5\uffff\1\52\1\1\4\uffff"+
			"\1\60\3\uffff\1\42\1\62\1\77\1\2\1\15\2\uffff\1\2\1\uffff\1\65\1\72\3"+
			"\51\1\2\1\uffff\1\14\1\40\1\32\1\uffff\1\36\1\52\2\uffff\1\47\1\2\1\35"+
			"\2\52\1\uffff\1\34\1\13\1\11\1\uffff\2\52\1\33\1\32\1\37\1\2\1\56\1\2"+
			"\1\73\1\2\1\uffff\1\57\1\70\5\51\2\uffff\1\61\1\76\2\uffff\1\31\1\uffff"+
			"\1\45\1\1",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA318_eot = DFA.unpackEncodedString(DFA318_eotS);
	static final short[] DFA318_eof = DFA.unpackEncodedString(DFA318_eofS);
	static final char[] DFA318_min = DFA.unpackEncodedStringToUnsignedChars(DFA318_minS);
	static final char[] DFA318_max = DFA.unpackEncodedStringToUnsignedChars(DFA318_maxS);
	static final short[] DFA318_accept = DFA.unpackEncodedString(DFA318_acceptS);
	static final short[] DFA318_special = DFA.unpackEncodedString(DFA318_specialS);
	static final short[][] DFA318_transition;

	static {
		int numStates = DFA318_transitionS.length;
		DFA318_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA318_transition[i] = DFA.unpackEncodedString(DFA318_transitionS[i]);
		}
	}

	protected class DFA318 extends DFA {

		public DFA318(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 318;
			this.eot = DFA318_eot;
			this.eof = DFA318_eof;
			this.min = DFA318_min;
			this.max = DFA318_max;
			this.accept = DFA318_accept;
			this.special = DFA318_special;
			this.transition = DFA318_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1025:12: ( ( ( ws | ( ( ws )? operator ( ws )? ) |) term )=> ( ws | ( ( ws )? operator ( ws )? ) |) term )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA318_0 = input.LA(1);
						 
						int index318_0 = input.index();
						input.rewind();
						s = -1;
						if ( (LA318_0==COMMENT||LA318_0==NL||LA318_0==WS) ) {s = 1;}
						else if ( (LA318_0==EOF||LA318_0==COLON||LA318_0==DCOLON||LA318_0==DOT||LA318_0==GREATER||LA318_0==IMPORTANT_SYM||LA318_0==LBRACE||LA318_0==PIPE||LA318_0==RBRACE||LA318_0==RPAREN||LA318_0==SASS_EXTEND_ONLY_SELECTOR||LA318_0==SEMI||LA318_0==STAR||LA318_0==SUPPORTS_SYM) ) {s = 2;}
						else if ( (LA318_0==LESS_AND) ) {s = 6;}
						else if ( (LA318_0==HASH) ) {s = 8;}
						else if ( (LA318_0==SASS_MIXIN) ) {s = 9;}
						else if ( (LA318_0==AT_IDENT) ) {s = 10;}
						else if ( (LA318_0==SASS_INCLUDE) ) {s = 11;}
						else if ( (LA318_0==SASS_AT_ROOT) ) {s = 12;}
						else if ( (LA318_0==PLUS) ) {s = 13;}
						else if ( (LA318_0==HASH_SYMBOL) ) {s = 15;}
						else if ( (LA318_0==DIMENSION) ) {s = 16;}
						else if ( (LA318_0==LBRACKET) ) {s = 17;}
						else if ( (LA318_0==IDENT) ) {s = 19;}
						else if ( (LA318_0==AT_SIGN) ) {s = 20;}
						else if ( (LA318_0==MINUS) ) {s = 21;}
						else if ( (LA318_0==GEN) ) {s = 24;}
						else if ( (LA318_0==VARIABLE) ) {s = 25;}
						else if ( (LA318_0==SASS_DEBUG||LA318_0==SASS_WARN) ) {s = 26;}
						else if ( (LA318_0==SASS_VAR) ) {s = 27;}
						else if ( (LA318_0==SASS_IF) ) {s = 28;}
						else if ( (LA318_0==SASS_FOR) ) {s = 29;}
						else if ( (LA318_0==SASS_EACH) ) {s = 30;}
						else if ( (LA318_0==SASS_WHILE) ) {s = 31;}
						else if ( (LA318_0==SASS_CONTENT) ) {s = 32;}
						else if ( (LA318_0==IMPORT_SYM) ) {s = 33;}
						else if ( (LA318_0==PAGE_SYM) ) {s = 34;}
						else if ( (LA318_0==FONT_FACE_SYM) ) {s = 35;}
						else if ( (LA318_0==MOZ_DOCUMENT_SYM) ) {s = 36;}
						else if ( (LA318_0==WEBKIT_KEYFRAMES_SYM) ) {s = 37;}
						else if ( (LA318_0==MEDIA_SYM) ) {s = 38;}
						else if ( (LA318_0==SASS_EXTEND) ) {s = 39;}
						else if ( ((LA318_0 >= BOTTOMCENTER_SYM && LA318_0 <= BOTTOMRIGHT_SYM)||(LA318_0 >= LEFTBOTTOM_SYM && LA318_0 <= LEFTTOP_SYM)||(LA318_0 >= RIGHTBOTTOM_SYM && LA318_0 <= RIGHTTOP_SYM)||(LA318_0 >= TOPCENTER_SYM && LA318_0 <= TOPRIGHT_SYM)) ) {s = 41;}
						else if ( (LA318_0==CHARSET_SYM||LA318_0==COUNTER_STYLE_SYM||LA318_0==NAMESPACE_SYM||LA318_0==SASS_ELSE||(LA318_0 >= SASS_FORWARD && LA318_0 <= SASS_FUNCTION)||(LA318_0 >= SASS_RETURN && LA318_0 <= SASS_USE)) ) {s = 42;}
						else if ( (LA318_0==COMMA) ) {s = 45;}
						else if ( (LA318_0==SOLIDUS) && (synpred38_Css3())) {s = 46;}
						else if ( (LA318_0==TILDE) ) {s = 47;}
						else if ( (LA318_0==NUMBER) && (synpred38_Css3())) {s = 48;}
						else if ( (LA318_0==URANGE) && (synpred38_Css3())) {s = 49;}
						else if ( (LA318_0==PERCENTAGE) && (synpred38_Css3())) {s = 50;}
						else if ( (LA318_0==LENGTH) && (synpred38_Css3())) {s = 51;}
						else if ( (LA318_0==EMS) && (synpred38_Css3())) {s = 52;}
						else if ( (LA318_0==REM) && (synpred38_Css3())) {s = 53;}
						else if ( (LA318_0==EXS) && (synpred38_Css3())) {s = 54;}
						else if ( (LA318_0==ANGLE) && (synpred38_Css3())) {s = 55;}
						else if ( (LA318_0==TIME) && (synpred38_Css3())) {s = 56;}
						else if ( (LA318_0==FREQ) && (synpred38_Css3())) {s = 57;}
						else if ( (LA318_0==RESOLUTION) && (synpred38_Css3())) {s = 58;}
						else if ( (LA318_0==STRING) && (synpred38_Css3())) {s = 59;}
						else if ( (LA318_0==LESS_JS_STRING) && (synpred38_Css3())) {s = 61;}
						else if ( (LA318_0==URI) && (synpred38_Css3())) {s = 62;}
						else if ( (LA318_0==PERCENTAGE_SYMBOL) && (synpred38_Css3())) {s = 63;}
						 
						input.seek(index318_0);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA318_1 = input.LA(1);
						 
						int index318_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred38_Css3()) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index318_1);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA318_6 = input.LA(1);
						 
						int index318_6 = input.index();
						input.rewind();
						s = -1;
						if ( ((synpred38_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index318_6);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA318_8 = input.LA(1);
						 
						int index318_8 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred38_Css3()) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index318_8);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA318_9 = input.LA(1);
						 
						int index318_9 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index318_9);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA318_10 = input.LA(1);
						 
						int index318_10 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index318_10);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA318_11 = input.LA(1);
						 
						int index318_11 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index318_11);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA318_12 = input.LA(1);
						 
						int index318_12 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index318_12);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA318_13 = input.LA(1);
						 
						int index318_13 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred38_Css3()) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index318_13);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA318_15 = input.LA(1);
						 
						int index318_15 = input.index();
						input.rewind();
						s = -1;
						if ( ((synpred38_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index318_15);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA318_16 = input.LA(1);
						 
						int index318_16 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred38_Css3()) ) {s = 63;}
						else if ( (evalPredicate(tokenNameStartsWith("."),"tokenNameStartsWith(\".\")")) ) {s = 2;}
						 
						input.seek(index318_16);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA318_17 = input.LA(1);
						 
						int index318_17 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred38_Css3()) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index318_17);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA318_19 = input.LA(1);
						 
						int index318_19 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred38_Css3()) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index318_19);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA318_20 = input.LA(1);
						 
						int index318_20 = input.index();
						input.rewind();
						s = -1;
						if ( ((synpred38_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index318_20);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA318_21 = input.LA(1);
						 
						int index318_21 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred38_Css3()) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index318_21);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA318_24 = input.LA(1);
						 
						int index318_24 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred38_Css3()) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index318_24);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA318_25 = input.LA(1);
						 
						int index318_25 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred38_Css3()) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index318_25);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA318_26 = input.LA(1);
						 
						int index318_26 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index318_26);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA318_27 = input.LA(1);
						 
						int index318_27 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index318_27);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA318_28 = input.LA(1);
						 
						int index318_28 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index318_28);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA318_29 = input.LA(1);
						 
						int index318_29 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index318_29);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA318_30 = input.LA(1);
						 
						int index318_30 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index318_30);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA318_31 = input.LA(1);
						 
						int index318_31 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index318_31);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA318_32 = input.LA(1);
						 
						int index318_32 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index318_32);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA318_33 = input.LA(1);
						 
						int index318_33 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index318_33);
						if ( s>=0 ) return s;
						break;

					case 25 : 
						int LA318_34 = input.LA(1);
						 
						int index318_34 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index318_34);
						if ( s>=0 ) return s;
						break;

					case 26 : 
						int LA318_35 = input.LA(1);
						 
						int index318_35 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index318_35);
						if ( s>=0 ) return s;
						break;

					case 27 : 
						int LA318_36 = input.LA(1);
						 
						int index318_36 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index318_36);
						if ( s>=0 ) return s;
						break;

					case 28 : 
						int LA318_37 = input.LA(1);
						 
						int index318_37 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index318_37);
						if ( s>=0 ) return s;
						break;

					case 29 : 
						int LA318_38 = input.LA(1);
						 
						int index318_38 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index318_38);
						if ( s>=0 ) return s;
						break;

					case 30 : 
						int LA318_39 = input.LA(1);
						 
						int index318_39 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index318_39);
						if ( s>=0 ) return s;
						break;

					case 31 : 
						int LA318_41 = input.LA(1);
						 
						int index318_41 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index318_41);
						if ( s>=0 ) return s;
						break;

					case 32 : 
						int LA318_42 = input.LA(1);
						 
						int index318_42 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index318_42);
						if ( s>=0 ) return s;
						break;

					case 33 : 
						int LA318_45 = input.LA(1);
						 
						int index318_45 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred38_Css3()) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index318_45);
						if ( s>=0 ) return s;
						break;

					case 34 : 
						int LA318_47 = input.LA(1);
						 
						int index318_47 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred38_Css3()) ) {s = 63;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index318_47);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 318, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA317_eotS =
		"\5\uffff";
	static final String DFA317_eofS =
		"\5\uffff";
	static final String DFA317_minS =
		"\2\5\3\uffff";
	static final String DFA317_maxS =
		"\2\u0099\3\uffff";
	static final String DFA317_acceptS =
		"\2\uffff\1\2\1\3\1\1";
	static final String DFA317_specialS =
		"\5\uffff}>";
	static final String[] DFA317_transitionS = {
			"\3\3\2\uffff\5\3\3\uffff\1\3\1\uffff\1\2\1\1\1\uffff\1\3\6\uffff\1\3"+
			"\2\uffff\1\3\3\uffff\1\3\1\uffff\2\3\1\uffff\1\3\3\uffff\2\3\3\uffff"+
			"\1\3\1\uffff\1\3\7\uffff\5\3\1\uffff\2\3\5\uffff\3\3\5\uffff\1\3\1\1"+
			"\4\uffff\1\3\3\uffff\3\3\1\uffff\1\3\4\uffff\5\3\2\uffff\3\3\1\uffff"+
			"\2\3\2\uffff\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\5\3\1\uffff\1\2\1\uffff"+
			"\1\3\2\uffff\7\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\1\1",
			"\3\4\2\uffff\5\4\3\uffff\1\4\1\uffff\1\2\1\1\1\uffff\1\4\6\uffff\1\4"+
			"\2\uffff\1\4\3\uffff\1\4\1\uffff\2\4\1\uffff\1\4\3\uffff\2\4\3\uffff"+
			"\1\4\1\uffff\1\4\7\uffff\5\4\1\uffff\2\4\5\uffff\3\4\5\uffff\1\4\1\1"+
			"\4\uffff\1\4\3\uffff\3\4\1\uffff\1\4\4\uffff\5\4\2\uffff\3\4\1\uffff"+
			"\2\4\2\uffff\1\4\1\uffff\3\4\1\uffff\3\4\1\uffff\5\4\1\uffff\1\2\1\uffff"+
			"\1\4\2\uffff\7\4\2\uffff\2\4\2\uffff\1\4\1\uffff\1\4\1\1",
			"",
			"",
			""
	};

	static final short[] DFA317_eot = DFA.unpackEncodedString(DFA317_eotS);
	static final short[] DFA317_eof = DFA.unpackEncodedString(DFA317_eofS);
	static final char[] DFA317_min = DFA.unpackEncodedStringToUnsignedChars(DFA317_minS);
	static final char[] DFA317_max = DFA.unpackEncodedStringToUnsignedChars(DFA317_maxS);
	static final short[] DFA317_accept = DFA.unpackEncodedString(DFA317_acceptS);
	static final short[] DFA317_special = DFA.unpackEncodedString(DFA317_specialS);
	static final short[][] DFA317_transition;

	static {
		int numStates = DFA317_transitionS.length;
		DFA317_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA317_transition[i] = DFA.unpackEncodedString(DFA317_transitionS[i]);
		}
	}

	protected class DFA317 extends DFA {

		public DFA317(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 317;
			this.eot = DFA317_eot;
			this.eof = DFA317_eof;
			this.min = DFA317_min;
			this.max = DFA317_max;
			this.accept = DFA317_accept;
			this.special = DFA317_special;
			this.transition = DFA317_transition;
		}
		@Override
		public String getDescription() {
			return "1025:66: ( ws | ( ( ws )? operator ( ws )? ) |)";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA333_eotS =
		"\4\uffff";
	static final String DFA333_eofS =
		"\4\uffff";
	static final String DFA333_minS =
		"\2\24\2\uffff";
	static final String DFA333_maxS =
		"\2\u0099\2\uffff";
	static final String DFA333_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA333_specialS =
		"\4\uffff}>";
	static final String[] DFA333_transitionS = {
			"\1\3\1\1\75\uffff\1\1\26\uffff\1\2\30\uffff\1\3\25\uffff\1\1",
			"\1\3\1\1\75\uffff\1\1\26\uffff\1\2\30\uffff\1\3\25\uffff\1\1",
			"",
			""
	};

	static final short[] DFA333_eot = DFA.unpackEncodedString(DFA333_eotS);
	static final short[] DFA333_eof = DFA.unpackEncodedString(DFA333_eofS);
	static final char[] DFA333_min = DFA.unpackEncodedStringToUnsignedChars(DFA333_minS);
	static final char[] DFA333_max = DFA.unpackEncodedStringToUnsignedChars(DFA333_maxS);
	static final short[] DFA333_accept = DFA.unpackEncodedString(DFA333_acceptS);
	static final short[] DFA333_special = DFA.unpackEncodedString(DFA333_specialS);
	static final short[][] DFA333_transition;

	static {
		int numStates = DFA333_transitionS.length;
		DFA333_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA333_transition[i] = DFA.unpackEncodedString(DFA333_transitionS[i]);
		}
	}

	protected class DFA333 extends DFA {

		public DFA333(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 333;
			this.eot = DFA333_eot;
			this.eof = DFA333_eof;
			this.min = DFA333_min;
			this.max = DFA333_max;
			this.accept = DFA333_accept;
			this.special = DFA333_special;
			this.transition = DFA333_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1093:17: ( ( ws )? ( COMMA |{...}? SEMI ) ( ws )? fnAttribute )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA343_eotS =
		"\47\uffff";
	static final String DFA343_eofS =
		"\47\uffff";
	static final String DFA343_minS =
		"\2\5\45\uffff";
	static final String DFA343_maxS =
		"\2\u0099\45\uffff";
	static final String DFA343_acceptS =
		"\2\uffff\1\2\44\1";
	static final String DFA343_specialS =
		"\1\1\1\0\45\uffff}>";
	static final String[] DFA343_transitionS = {
			"\1\17\1\32\1\36\2\uffff\5\32\3\uffff\1\32\1\uffff\1\2\1\1\1\uffff\1\32"+
			"\6\uffff\1\23\2\uffff\1\14\3\uffff\1\16\1\uffff\1\32\1\21\1\uffff\1\27"+
			"\3\uffff\1\31\1\35\3\uffff\1\5\1\uffff\1\32\7\uffff\1\7\3\32\1\13\1\uffff"+
			"\1\34\1\26\5\uffff\1\32\1\4\1\32\5\uffff\1\32\1\1\4\uffff\1\10\3\uffff"+
			"\1\32\1\12\1\37\1\uffff\1\4\4\uffff\1\15\1\22\3\32\1\2\1\uffff\3\32\1"+
			"\uffff\2\32\2\uffff\1\32\1\uffff\3\32\1\uffff\3\32\1\uffff\2\32\1\33"+
			"\2\32\1\2\1\3\1\uffff\1\24\2\uffff\1\25\1\20\5\32\2\uffff\1\11\1\30\2"+
			"\uffff\1\6\1\uffff\1\32\1\1",
			"\1\17\1\41\1\45\2\uffff\5\41\3\uffff\1\41\1\uffff\1\2\1\1\1\uffff\1"+
			"\41\6\uffff\1\23\2\uffff\1\14\3\uffff\1\16\1\uffff\1\41\1\21\1\uffff"+
			"\1\27\3\uffff\1\31\1\44\3\uffff\1\40\1\uffff\1\41\7\uffff\1\7\3\41\1"+
			"\13\1\uffff\1\43\1\26\5\uffff\1\41\1\4\1\41\5\uffff\1\41\1\1\4\uffff"+
			"\1\10\3\uffff\1\41\1\12\1\46\1\uffff\1\4\4\uffff\1\15\1\22\3\41\1\2\1"+
			"\uffff\3\41\1\uffff\2\41\2\uffff\1\41\1\uffff\3\41\1\uffff\3\41\1\uffff"+
			"\2\41\1\42\2\41\1\2\1\3\1\uffff\1\24\2\uffff\1\25\1\20\5\41\2\uffff\1"+
			"\11\1\30\2\uffff\1\6\1\uffff\1\41\1\1",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA343_eot = DFA.unpackEncodedString(DFA343_eotS);
	static final short[] DFA343_eof = DFA.unpackEncodedString(DFA343_eofS);
	static final char[] DFA343_min = DFA.unpackEncodedStringToUnsignedChars(DFA343_minS);
	static final char[] DFA343_max = DFA.unpackEncodedStringToUnsignedChars(DFA343_maxS);
	static final short[] DFA343_accept = DFA.unpackEncodedString(DFA343_acceptS);
	static final short[] DFA343_special = DFA.unpackEncodedString(DFA343_specialS);
	static final short[][] DFA343_transition;

	static {
		int numStates = DFA343_transitionS.length;
		DFA343_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA343_transition[i] = DFA.unpackEncodedString(DFA343_transitionS[i]);
		}
	}

	protected class DFA343 extends DFA {

		public DFA343(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 343;
			this.eot = DFA343_eot;
			this.eof = DFA343_eof;
			this.min = DFA343_min;
			this.max = DFA343_max;
			this.accept = DFA343_accept;
			this.special = DFA343_special;
			this.transition = DFA343_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1111:18: ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA343_1 = input.LA(1);
						 
						int index343_1 = input.index();
						input.rewind();
						s = -1;
						if ( (LA343_1==COMMA||LA343_1==RPAREN||LA343_1==SEMI) ) {s = 2;}
						else if ( (LA343_1==COMMENT||LA343_1==NL||LA343_1==WS) ) {s = 1;}
						else if ( (LA343_1==MINUS||LA343_1==PLUS) && (synpred42_Css3())) {s = 4;}
						else if ( (LA343_1==IDENT) && (synpred42_Css3())) {s = 32;}
						else if ( (LA343_1==VARIABLE) && (synpred42_Css3())) {s = 6;}
						else if ( (LA343_1==LBRACKET) && (synpred42_Css3())) {s = 7;}
						else if ( (LA343_1==NUMBER) && (synpred42_Css3())) {s = 8;}
						else if ( (LA343_1==URANGE) && (synpred42_Css3())) {s = 9;}
						else if ( (LA343_1==PERCENTAGE) && (synpred42_Css3())) {s = 10;}
						else if ( (LA343_1==LENGTH) && (synpred42_Css3())) {s = 11;}
						else if ( (LA343_1==EMS) && (synpred42_Css3())) {s = 12;}
						else if ( (LA343_1==REM) && (synpred42_Css3())) {s = 13;}
						else if ( (LA343_1==EXS) && (synpred42_Css3())) {s = 14;}
						else if ( (LA343_1==ANGLE) && (synpred42_Css3())) {s = 15;}
						else if ( (LA343_1==TIME) && (synpred42_Css3())) {s = 16;}
						else if ( (LA343_1==FREQ) && (synpred42_Css3())) {s = 17;}
						else if ( (LA343_1==RESOLUTION) && (synpred42_Css3())) {s = 18;}
						else if ( (LA343_1==DIMENSION) && (synpred42_Css3())) {s = 19;}
						else if ( (LA343_1==STRING) && (synpred42_Css3())) {s = 20;}
						else if ( (LA343_1==TILDE) && (synpred42_Css3())) {s = 21;}
						else if ( (LA343_1==LESS_JS_STRING) && (synpred42_Css3())) {s = 22;}
						else if ( (LA343_1==GEN) && (synpred42_Css3())) {s = 23;}
						else if ( (LA343_1==URI) && (synpred42_Css3())) {s = 24;}
						else if ( (LA343_1==HASH) && (synpred42_Css3())) {s = 25;}
						else if ( (LA343_1==AT_IDENT||(LA343_1 >= BOTTOMCENTER_SYM && LA343_1 <= BOTTOMRIGHT_SYM)||LA343_1==CHARSET_SYM||LA343_1==COUNTER_STYLE_SYM||LA343_1==FONT_FACE_SYM||LA343_1==IMPORT_SYM||(LA343_1 >= LEFTBOTTOM_SYM && LA343_1 <= LEFTTOP_SYM)||LA343_1==MEDIA_SYM||LA343_1==MOZ_DOCUMENT_SYM||LA343_1==NAMESPACE_SYM||LA343_1==PAGE_SYM||(LA343_1 >= RIGHTBOTTOM_SYM && LA343_1 <= RIGHTTOP_SYM)||(LA343_1 >= SASS_AT_ROOT && LA343_1 <= SASS_DEBUG)||(LA343_1 >= SASS_EACH && LA343_1 <= SASS_ELSE)||LA343_1==SASS_EXTEND||(LA343_1 >= SASS_FOR && LA343_1 <= SASS_FUNCTION)||(LA343_1 >= SASS_IF && LA343_1 <= SASS_MIXIN)||(LA343_1 >= SASS_RETURN && LA343_1 <= SASS_USE)||(LA343_1 >= SASS_WARN && LA343_1 <= SASS_WHILE)||(LA343_1 >= TOPCENTER_SYM && LA343_1 <= TOPRIGHT_SYM)||LA343_1==WEBKIT_KEYFRAMES_SYM) && (synpred42_Css3())) {s = 33;}
						else if ( (LA343_1==SASS_VAR) && (synpred42_Css3())) {s = 34;}
						else if ( (LA343_1==LESS_AND) && (synpred42_Css3())) {s = 35;}
						else if ( (LA343_1==HASH_SYMBOL) && (synpred42_Css3())) {s = 36;}
						else if ( (LA343_1==AT_SIGN) && (synpred42_Css3())) {s = 37;}
						else if ( (LA343_1==PERCENTAGE_SYMBOL) && (synpred42_Css3())) {s = 38;}
						else if ( (LA343_1==SOLIDUS) && (synpred42_Css3())) {s = 3;}
						 
						input.seek(index343_1);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA343_0 = input.LA(1);
						 
						int index343_0 = input.index();
						input.rewind();
						s = -1;
						if ( (LA343_0==COMMENT||LA343_0==NL||LA343_0==WS) ) {s = 1;}
						else if ( (LA343_0==COMMA||LA343_0==RPAREN||LA343_0==SEMI) ) {s = 2;}
						else if ( (LA343_0==SOLIDUS) && (synpred42_Css3())) {s = 3;}
						else if ( (LA343_0==MINUS||LA343_0==PLUS) && (synpred42_Css3())) {s = 4;}
						else if ( (LA343_0==IDENT) && (synpred42_Css3())) {s = 5;}
						else if ( (LA343_0==VARIABLE) && (synpred42_Css3())) {s = 6;}
						else if ( (LA343_0==LBRACKET) && (synpred42_Css3())) {s = 7;}
						else if ( (LA343_0==NUMBER) && (synpred42_Css3())) {s = 8;}
						else if ( (LA343_0==URANGE) && (synpred42_Css3())) {s = 9;}
						else if ( (LA343_0==PERCENTAGE) && (synpred42_Css3())) {s = 10;}
						else if ( (LA343_0==LENGTH) && (synpred42_Css3())) {s = 11;}
						else if ( (LA343_0==EMS) && (synpred42_Css3())) {s = 12;}
						else if ( (LA343_0==REM) && (synpred42_Css3())) {s = 13;}
						else if ( (LA343_0==EXS) && (synpred42_Css3())) {s = 14;}
						else if ( (LA343_0==ANGLE) && (synpred42_Css3())) {s = 15;}
						else if ( (LA343_0==TIME) && (synpred42_Css3())) {s = 16;}
						else if ( (LA343_0==FREQ) && (synpred42_Css3())) {s = 17;}
						else if ( (LA343_0==RESOLUTION) && (synpred42_Css3())) {s = 18;}
						else if ( (LA343_0==DIMENSION) && (synpred42_Css3())) {s = 19;}
						else if ( (LA343_0==STRING) && (synpred42_Css3())) {s = 20;}
						else if ( (LA343_0==TILDE) && (synpred42_Css3())) {s = 21;}
						else if ( (LA343_0==LESS_JS_STRING) && (synpred42_Css3())) {s = 22;}
						else if ( (LA343_0==GEN) && (synpred42_Css3())) {s = 23;}
						else if ( (LA343_0==URI) && (synpred42_Css3())) {s = 24;}
						else if ( (LA343_0==HASH) && (synpred42_Css3())) {s = 25;}
						else if ( (LA343_0==AT_IDENT||(LA343_0 >= BOTTOMCENTER_SYM && LA343_0 <= BOTTOMRIGHT_SYM)||LA343_0==CHARSET_SYM||LA343_0==COUNTER_STYLE_SYM||LA343_0==FONT_FACE_SYM||LA343_0==IMPORT_SYM||(LA343_0 >= LEFTBOTTOM_SYM && LA343_0 <= LEFTTOP_SYM)||LA343_0==MEDIA_SYM||LA343_0==MOZ_DOCUMENT_SYM||LA343_0==NAMESPACE_SYM||LA343_0==PAGE_SYM||(LA343_0 >= RIGHTBOTTOM_SYM && LA343_0 <= RIGHTTOP_SYM)||(LA343_0 >= SASS_AT_ROOT && LA343_0 <= SASS_DEBUG)||(LA343_0 >= SASS_EACH && LA343_0 <= SASS_ELSE)||LA343_0==SASS_EXTEND||(LA343_0 >= SASS_FOR && LA343_0 <= SASS_FUNCTION)||(LA343_0 >= SASS_IF && LA343_0 <= SASS_MIXIN)||(LA343_0 >= SASS_RETURN && LA343_0 <= SASS_USE)||(LA343_0 >= SASS_WARN && LA343_0 <= SASS_WHILE)||(LA343_0 >= TOPCENTER_SYM && LA343_0 <= TOPRIGHT_SYM)||LA343_0==WEBKIT_KEYFRAMES_SYM) && (synpred42_Css3())) {s = 26;}
						else if ( (LA343_0==SASS_VAR) && (synpred42_Css3())) {s = 27;}
						else if ( (LA343_0==LESS_AND) && (synpred42_Css3())) {s = 28;}
						else if ( (LA343_0==HASH_SYMBOL) && (synpred42_Css3())) {s = 29;}
						else if ( (LA343_0==AT_SIGN) && (synpred42_Css3())) {s = 30;}
						else if ( (LA343_0==PERCENTAGE_SYMBOL) && (synpred42_Css3())) {s = 31;}
						 
						input.seek(index343_0);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 343, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA342_eotS =
		"\5\uffff";
	static final String DFA342_eofS =
		"\5\uffff";
	static final String DFA342_minS =
		"\2\5\3\uffff";
	static final String DFA342_maxS =
		"\2\u0099\3\uffff";
	static final String DFA342_acceptS =
		"\2\uffff\1\2\1\3\1\1";
	static final String DFA342_specialS =
		"\5\uffff}>";
	static final String[] DFA342_transitionS = {
			"\3\3\2\uffff\5\3\3\uffff\1\3\2\uffff\1\1\1\uffff\1\3\6\uffff\1\3\2\uffff"+
			"\1\3\3\uffff\1\3\1\uffff\2\3\1\uffff\1\3\3\uffff\2\3\3\uffff\1\3\1\uffff"+
			"\1\3\7\uffff\5\3\1\uffff\2\3\5\uffff\3\3\5\uffff\1\3\1\1\4\uffff\1\3"+
			"\3\uffff\3\3\1\uffff\1\3\4\uffff\5\3\2\uffff\3\3\1\uffff\2\3\2\uffff"+
			"\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\5\3\1\uffff\1\2\1\uffff\1\3\2\uffff"+
			"\7\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\1\1",
			"\3\4\2\uffff\5\4\3\uffff\1\4\2\uffff\1\1\1\uffff\1\4\6\uffff\1\4\2\uffff"+
			"\1\4\3\uffff\1\4\1\uffff\2\4\1\uffff\1\4\3\uffff\2\4\3\uffff\1\4\1\uffff"+
			"\1\4\7\uffff\5\4\1\uffff\2\4\5\uffff\3\4\5\uffff\1\4\1\1\4\uffff\1\4"+
			"\3\uffff\3\4\1\uffff\1\4\4\uffff\5\4\2\uffff\3\4\1\uffff\2\4\2\uffff"+
			"\1\4\1\uffff\3\4\1\uffff\3\4\1\uffff\5\4\1\uffff\1\2\1\uffff\1\4\2\uffff"+
			"\7\4\2\uffff\2\4\2\uffff\1\4\1\uffff\1\4\1\1",
			"",
			"",
			""
	};

	static final short[] DFA342_eot = DFA.unpackEncodedString(DFA342_eotS);
	static final short[] DFA342_eof = DFA.unpackEncodedString(DFA342_eofS);
	static final char[] DFA342_min = DFA.unpackEncodedStringToUnsignedChars(DFA342_minS);
	static final char[] DFA342_max = DFA.unpackEncodedStringToUnsignedChars(DFA342_maxS);
	static final short[] DFA342_accept = DFA.unpackEncodedString(DFA342_acceptS);
	static final short[] DFA342_special = DFA.unpackEncodedString(DFA342_specialS);
	static final short[][] DFA342_transition;

	static {
		int numStates = DFA342_transitionS.length;
		DFA342_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA342_transition[i] = DFA.unpackEncodedString(DFA342_transitionS[i]);
		}
	}

	protected class DFA342 extends DFA {

		public DFA342(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 342;
			this.eot = DFA342_eot;
			this.eof = DFA342_eof;
			this.min = DFA342_min;
			this.max = DFA342_max;
			this.accept = DFA342_accept;
			this.special = DFA342_special;
			this.transition = DFA342_transition;
		}
		@Override
		public String getDescription() {
			return "1111:71: ( ws | ( ( ws )? SOLIDUS ( ws )? ) |)";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA352_eotS =
		"\5\uffff";
	static final String DFA352_eofS =
		"\2\2\3\uffff";
	static final String DFA352_minS =
		"\2\6\3\uffff";
	static final String DFA352_maxS =
		"\2\u0099\3\uffff";
	static final String DFA352_acceptS =
		"\2\uffff\1\3\1\1\1\2";
	static final String DFA352_specialS =
		"\5\uffff}>";
	static final String[] DFA352_transitionS = {
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\uffff\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\4\2\2\uffff\1\2\6\uffff\3\2\5\uffff\1\2\1\1\10\uffff\1\2\2\uffff\2\2"+
			"\2\uffff\1\2\3\uffff\4\2\1\uffff\3\2\1\3\2\2\2\uffff\5\2\1\4\3\2\1\uffff"+
			"\6\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\10\uffff\1\2\1\1",
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\uffff\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\4\2\2\uffff\1\2\6\uffff\3\2\5\uffff\1\2\1\1\10\uffff\1\2\2\uffff\2\2"+
			"\2\uffff\1\2\3\uffff\4\2\1\uffff\3\2\1\3\2\2\1\uffff\6\2\1\4\3\2\1\uffff"+
			"\6\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\6\uffff\1\2\1\uffff"+
			"\1\2\1\1",
			"",
			"",
			""
	};

	static final short[] DFA352_eot = DFA.unpackEncodedString(DFA352_eotS);
	static final short[] DFA352_eof = DFA.unpackEncodedString(DFA352_eofS);
	static final char[] DFA352_min = DFA.unpackEncodedStringToUnsignedChars(DFA352_minS);
	static final char[] DFA352_max = DFA.unpackEncodedStringToUnsignedChars(DFA352_maxS);
	static final short[] DFA352_accept = DFA.unpackEncodedString(DFA352_acceptS);
	static final short[] DFA352_special = DFA.unpackEncodedString(DFA352_specialS);
	static final short[][] DFA352_transition;

	static {
		int numStates = DFA352_transitionS.length;
		DFA352_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA352_transition[i] = DFA.unpackEncodedString(DFA352_transitionS[i]);
		}
	}

	protected class DFA352 extends DFA {

		public DFA352(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 352;
			this.eot = DFA352_eot;
			this.eof = DFA352_eof;
			this.min = DFA352_min;
			this.max = DFA352_max;
			this.accept = DFA352_accept;
			this.special = DFA352_special;
			this.transition = DFA352_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1130:72: ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA358_eotS =
		"\107\uffff";
	static final String DFA358_eofS =
		"\1\2\106\uffff";
	static final String DFA358_minS =
		"\1\5\1\0\56\uffff\1\0\26\uffff";
	static final String DFA358_maxS =
		"\1\u0099\1\0\56\uffff\1\0\26\uffff";
	static final String DFA358_acceptS =
		"\2\uffff\1\2\103\uffff\1\1";
	static final String DFA358_specialS =
		"\1\uffff\1\0\56\uffff\1\1\26\uffff}>";
	static final String[] DFA358_transitionS = {
			"\3\2\2\uffff\5\2\3\uffff\2\2\1\60\1\1\1\uffff\1\2\5\uffff\3\2\1\uffff"+
			"\1\2\3\uffff\1\2\1\uffff\2\2\1\uffff\2\2\2\uffff\2\2\3\uffff\3\2\5\uffff"+
			"\7\2\1\uffff\2\2\3\uffff\1\2\1\uffff\3\2\5\uffff\1\2\1\1\3\uffff\2\2"+
			"\3\uffff\5\2\2\uffff\1\2\1\uffff\6\2\1\uffff\6\2\2\uffff\11\2\1\uffff"+
			"\6\2\1\uffff\3\2\1\uffff\7\2\2\uffff\2\2\2\uffff\1\2\1\uffff\1\2\1\1",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA358_eot = DFA.unpackEncodedString(DFA358_eotS);
	static final short[] DFA358_eof = DFA.unpackEncodedString(DFA358_eofS);
	static final char[] DFA358_min = DFA.unpackEncodedStringToUnsignedChars(DFA358_minS);
	static final char[] DFA358_max = DFA.unpackEncodedStringToUnsignedChars(DFA358_maxS);
	static final short[] DFA358_accept = DFA.unpackEncodedString(DFA358_acceptS);
	static final short[] DFA358_special = DFA.unpackEncodedString(DFA358_specialS);
	static final short[][] DFA358_transition;

	static {
		int numStates = DFA358_transitionS.length;
		DFA358_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA358_transition[i] = DFA.unpackEncodedString(DFA358_transitionS[i]);
		}
	}

	protected class DFA358 extends DFA {

		public DFA358(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 358;
			this.eot = DFA358_eot;
			this.eof = DFA358_eof;
			this.min = DFA358_min;
			this.max = DFA358_max;
			this.accept = DFA358_accept;
			this.special = DFA358_special;
			this.transition = DFA358_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1146:5: ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA358_1 = input.LA(1);
						 
						int index358_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Css3()) ) {s = 70;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index358_1);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA358_48 = input.LA(1);
						 
						int index358_48 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Css3()) ) {s = 70;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index358_48);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 358, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA364_eotS =
		"\117\uffff";
	static final String DFA364_eofS =
		"\1\2\116\uffff";
	static final String DFA364_minS =
		"\1\5\1\0\2\uffff\13\0\2\uffff\1\0\1\uffff\6\0\1\uffff\2\0\3\uffff\14\0"+
		"\1\uffff\2\0\1\uffff\1\0\1\uffff\1\0\3\uffff\21\0\2\uffff\1\0\6\uffff";
	static final String DFA364_maxS =
		"\1\u0099\1\0\2\uffff\13\0\2\uffff\1\0\1\uffff\6\0\1\uffff\2\0\3\uffff"+
		"\14\0\1\uffff\2\0\1\uffff\1\0\1\uffff\1\0\3\uffff\21\0\2\uffff\1\0\6\uffff";
	static final String DFA364_acceptS =
		"\2\uffff\1\3\106\uffff\5\1\1\2";
	static final String DFA364_specialS =
		"\1\0\1\1\2\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\2\uffff"+
		"\1\15\1\uffff\1\16\1\17\1\20\1\21\1\22\1\23\1\uffff\1\24\1\25\3\uffff"+
		"\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\uffff\1"+
		"\42\1\43\1\uffff\1\44\1\uffff\1\45\3\uffff\1\46\1\47\1\50\1\51\1\52\1"+
		"\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\2\uffff\1\67"+
		"\6\uffff}>";
	static final String[] DFA364_transitionS = {
			"\1\75\1\24\1\12\2\uffff\5\54\3\uffff\1\61\2\2\1\110\1\uffff\1\55\1\2"+
			"\1\111\1\112\2\uffff\1\2\1\32\1\2\1\uffff\1\72\3\uffff\1\74\1\uffff\1"+
			"\46\1\77\1\uffff\1\14\1\101\1\115\1\uffff\1\23\1\11\3\uffff\1\7\1\4\1"+
			"\44\5\uffff\2\2\1\33\3\54\1\71\1\113\1\21\1\102\1\114\1\2\1\uffff\1\105"+
			"\1\uffff\1\51\1\10\1\47\5\uffff\1\61\1\110\3\uffff\1\65\1\5\3\uffff\1"+
			"\45\1\70\1\104\1\2\1\30\2\uffff\1\2\1\uffff\1\73\1\100\3\54\1\2\1\uffff"+
			"\1\26\1\43\1\27\1\2\1\41\1\61\2\uffff\1\52\1\2\1\40\1\61\1\57\1\2\1\37"+
			"\1\25\1\15\1\uffff\2\61\1\16\1\27\1\42\1\2\1\uffff\1\2\1\6\1\2\1\uffff"+
			"\1\66\1\76\5\54\2\uffff\1\67\1\103\2\uffff\1\13\1\uffff\1\50\1\1",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA364_eot = DFA.unpackEncodedString(DFA364_eotS);
	static final short[] DFA364_eof = DFA.unpackEncodedString(DFA364_eofS);
	static final char[] DFA364_min = DFA.unpackEncodedStringToUnsignedChars(DFA364_minS);
	static final char[] DFA364_max = DFA.unpackEncodedStringToUnsignedChars(DFA364_maxS);
	static final short[] DFA364_accept = DFA.unpackEncodedString(DFA364_acceptS);
	static final short[] DFA364_special = DFA.unpackEncodedString(DFA364_specialS);
	static final short[][] DFA364_transition;

	static {
		int numStates = DFA364_transitionS.length;
		DFA364_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA364_transition[i] = DFA.unpackEncodedString(DFA364_transitionS[i]);
		}
	}

	protected class DFA364 extends DFA {

		public DFA364(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 364;
			this.eot = DFA364_eot;
			this.eof = DFA364_eof;
			this.min = DFA364_min;
			this.max = DFA364_max;
			this.accept = DFA364_accept;
			this.special = DFA364_special;
			this.transition = DFA364_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1163:5: ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA364_0 = input.LA(1);
						 
						int index364_0 = input.index();
						input.rewind();
						s = -1;
						if ( (LA364_0==WS) ) {s = 1;}
						else if ( (LA364_0==EOF||(LA364_0 >= COLON && LA364_0 <= COMMA)||LA364_0==CP_DOTS||LA364_0==DCOLON||LA364_0==DOT||(LA364_0 >= LAYER_SYM && LA364_0 <= LBRACE)||LA364_0==LESS_REST||LA364_0==PIPE||LA364_0==RBRACE||LA364_0==RPAREN||LA364_0==SASS_DEFAULT||LA364_0==SASS_EXTEND_ONLY_SELECTOR||LA364_0==SASS_GLOBAL||LA364_0==SEMI||LA364_0==STAR||LA364_0==SUPPORTS_SYM) ) {s = 2;}
						else if ( (LA364_0==IMPORTANT_SYM) ) {s = 4;}
						else if ( (LA364_0==NUMBER) ) {s = 5;}
						else if ( (LA364_0==STRING) ) {s = 6;}
						else if ( (LA364_0==IDENT) ) {s = 7;}
						else if ( (LA364_0==MINUS) ) {s = 8;}
						else if ( (LA364_0==HASH_SYMBOL) ) {s = 9;}
						else if ( (LA364_0==AT_SIGN) ) {s = 10;}
						else if ( (LA364_0==VARIABLE) ) {s = 11;}
						else if ( (LA364_0==GEN) ) {s = 12;}
						else if ( (LA364_0==SASS_MIXIN) ) {s = 13;}
						else if ( (LA364_0==SASS_VAR) ) {s = 14;}
						else if ( (LA364_0==LESS_AND) ) {s = 17;}
						else if ( (LA364_0==HASH) ) {s = 19;}
						else if ( (LA364_0==AT_IDENT) ) {s = 20;}
						else if ( (LA364_0==SASS_INCLUDE) ) {s = 21;}
						else if ( (LA364_0==SASS_AT_ROOT) ) {s = 22;}
						else if ( (LA364_0==SASS_DEBUG||LA364_0==SASS_WARN) ) {s = 23;}
						else if ( (LA364_0==PLUS) ) {s = 24;}
						else if ( (LA364_0==DIMENSION) ) {s = 26;}
						else if ( (LA364_0==LBRACKET) ) {s = 27;}
						else if ( (LA364_0==SASS_IF) ) {s = 31;}
						else if ( (LA364_0==SASS_FOR) ) {s = 32;}
						else if ( (LA364_0==SASS_EACH) ) {s = 33;}
						else if ( (LA364_0==SASS_WHILE) ) {s = 34;}
						else if ( (LA364_0==SASS_CONTENT) ) {s = 35;}
						else if ( (LA364_0==IMPORT_SYM) ) {s = 36;}
						else if ( (LA364_0==PAGE_SYM) ) {s = 37;}
						else if ( (LA364_0==FONT_FACE_SYM) ) {s = 38;}
						else if ( (LA364_0==MOZ_DOCUMENT_SYM) ) {s = 39;}
						else if ( (LA364_0==WEBKIT_KEYFRAMES_SYM) ) {s = 40;}
						else if ( (LA364_0==MEDIA_SYM) ) {s = 41;}
						else if ( (LA364_0==SASS_EXTEND) ) {s = 42;}
						else if ( ((LA364_0 >= BOTTOMCENTER_SYM && LA364_0 <= BOTTOMRIGHT_SYM)||(LA364_0 >= LEFTBOTTOM_SYM && LA364_0 <= LEFTTOP_SYM)||(LA364_0 >= RIGHTBOTTOM_SYM && LA364_0 <= RIGHTTOP_SYM)||(LA364_0 >= TOPCENTER_SYM && LA364_0 <= TOPRIGHT_SYM)) ) {s = 44;}
						else if ( (LA364_0==COUNTER_STYLE_SYM) ) {s = 45;}
						else if ( (LA364_0==SASS_FUNCTION) ) {s = 47;}
						else if ( (LA364_0==CHARSET_SYM||LA364_0==NAMESPACE_SYM||LA364_0==SASS_ELSE||LA364_0==SASS_FORWARD||(LA364_0 >= SASS_RETURN && LA364_0 <= SASS_USE)) ) {s = 49;}
						else if ( (LA364_0==NOT) ) {s = 53;}
						else if ( (LA364_0==TILDE) ) {s = 54;}
						else if ( (LA364_0==URANGE) ) {s = 55;}
						else if ( (LA364_0==PERCENTAGE) ) {s = 56;}
						else if ( (LA364_0==LENGTH) ) {s = 57;}
						else if ( (LA364_0==EMS) ) {s = 58;}
						else if ( (LA364_0==REM) ) {s = 59;}
						else if ( (LA364_0==EXS) ) {s = 60;}
						else if ( (LA364_0==ANGLE) ) {s = 61;}
						else if ( (LA364_0==TIME) ) {s = 62;}
						else if ( (LA364_0==FREQ) ) {s = 63;}
						else if ( (LA364_0==RESOLUTION) ) {s = 64;}
						else if ( (LA364_0==GREATER) ) {s = 65;}
						else if ( (LA364_0==LESS_JS_STRING) ) {s = 66;}
						else if ( (LA364_0==URI) ) {s = 67;}
						else if ( (LA364_0==PERCENTAGE_SYMBOL) ) {s = 68;}
						else if ( (LA364_0==LPAREN) ) {s = 69;}
						else if ( (LA364_0==COMMENT||LA364_0==NL) ) {s = 72;}
						else if ( (LA364_0==CP_EQ) && (synpred46_Css3())) {s = 73;}
						else if ( (LA364_0==CP_NOT_EQ) && (synpred46_Css3())) {s = 74;}
						else if ( (LA364_0==LESS) && (synpred46_Css3())) {s = 75;}
						else if ( (LA364_0==LESS_OR_EQ) && (synpred46_Css3())) {s = 76;}
						else if ( (LA364_0==GREATER_OR_EQ) && (synpred46_Css3())) {s = 77;}
						 
						input.seek(index364_0);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA364_1 = input.LA(1);
						 
						int index364_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred46_Css3()) ) {s = 77;}
						else if ( (synpred47_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_1);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA364_4 = input.LA(1);
						 
						int index364_4 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_4);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA364_5 = input.LA(1);
						 
						int index364_5 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_5);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA364_6 = input.LA(1);
						 
						int index364_6 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_6);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA364_7 = input.LA(1);
						 
						int index364_7 = input.index();
						input.rewind();
						s = -1;
						if ( ((synpred46_Css3()&&(evalPredicate(tokenNameEquals("or"),"tokenNameEquals(\"or\")")||evalPredicate(tokenNameEquals("and"),"tokenNameEquals(\"and\")")))) ) {s = 77;}
						else if ( (synpred47_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_7);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA364_8 = input.LA(1);
						 
						int index364_8 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_8);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA364_9 = input.LA(1);
						 
						int index364_9 = input.index();
						input.rewind();
						s = -1;
						if ( ((synpred47_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_9);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA364_10 = input.LA(1);
						 
						int index364_10 = input.index();
						input.rewind();
						s = -1;
						if ( ((synpred47_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_10);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA364_11 = input.LA(1);
						 
						int index364_11 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_11);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA364_12 = input.LA(1);
						 
						int index364_12 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_12);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA364_13 = input.LA(1);
						 
						int index364_13 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_13);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA364_14 = input.LA(1);
						 
						int index364_14 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_14);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA364_17 = input.LA(1);
						 
						int index364_17 = input.index();
						input.rewind();
						s = -1;
						if ( ((synpred47_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_17);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA364_19 = input.LA(1);
						 
						int index364_19 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_19);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA364_20 = input.LA(1);
						 
						int index364_20 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_20);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA364_21 = input.LA(1);
						 
						int index364_21 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_21);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA364_22 = input.LA(1);
						 
						int index364_22 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_22);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA364_23 = input.LA(1);
						 
						int index364_23 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_23);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA364_24 = input.LA(1);
						 
						int index364_24 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_24);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA364_26 = input.LA(1);
						 
						int index364_26 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_26);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA364_27 = input.LA(1);
						 
						int index364_27 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_27);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA364_31 = input.LA(1);
						 
						int index364_31 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_31);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA364_32 = input.LA(1);
						 
						int index364_32 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_32);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA364_33 = input.LA(1);
						 
						int index364_33 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_33);
						if ( s>=0 ) return s;
						break;

					case 25 : 
						int LA364_34 = input.LA(1);
						 
						int index364_34 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_34);
						if ( s>=0 ) return s;
						break;

					case 26 : 
						int LA364_35 = input.LA(1);
						 
						int index364_35 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_35);
						if ( s>=0 ) return s;
						break;

					case 27 : 
						int LA364_36 = input.LA(1);
						 
						int index364_36 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_36);
						if ( s>=0 ) return s;
						break;

					case 28 : 
						int LA364_37 = input.LA(1);
						 
						int index364_37 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_37);
						if ( s>=0 ) return s;
						break;

					case 29 : 
						int LA364_38 = input.LA(1);
						 
						int index364_38 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_38);
						if ( s>=0 ) return s;
						break;

					case 30 : 
						int LA364_39 = input.LA(1);
						 
						int index364_39 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_39);
						if ( s>=0 ) return s;
						break;

					case 31 : 
						int LA364_40 = input.LA(1);
						 
						int index364_40 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_40);
						if ( s>=0 ) return s;
						break;

					case 32 : 
						int LA364_41 = input.LA(1);
						 
						int index364_41 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_41);
						if ( s>=0 ) return s;
						break;

					case 33 : 
						int LA364_42 = input.LA(1);
						 
						int index364_42 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_42);
						if ( s>=0 ) return s;
						break;

					case 34 : 
						int LA364_44 = input.LA(1);
						 
						int index364_44 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_44);
						if ( s>=0 ) return s;
						break;

					case 35 : 
						int LA364_45 = input.LA(1);
						 
						int index364_45 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_45);
						if ( s>=0 ) return s;
						break;

					case 36 : 
						int LA364_47 = input.LA(1);
						 
						int index364_47 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_47);
						if ( s>=0 ) return s;
						break;

					case 37 : 
						int LA364_49 = input.LA(1);
						 
						int index364_49 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_49);
						if ( s>=0 ) return s;
						break;

					case 38 : 
						int LA364_53 = input.LA(1);
						 
						int index364_53 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_53);
						if ( s>=0 ) return s;
						break;

					case 39 : 
						int LA364_54 = input.LA(1);
						 
						int index364_54 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_54);
						if ( s>=0 ) return s;
						break;

					case 40 : 
						int LA364_55 = input.LA(1);
						 
						int index364_55 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_55);
						if ( s>=0 ) return s;
						break;

					case 41 : 
						int LA364_56 = input.LA(1);
						 
						int index364_56 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_56);
						if ( s>=0 ) return s;
						break;

					case 42 : 
						int LA364_57 = input.LA(1);
						 
						int index364_57 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_57);
						if ( s>=0 ) return s;
						break;

					case 43 : 
						int LA364_58 = input.LA(1);
						 
						int index364_58 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_58);
						if ( s>=0 ) return s;
						break;

					case 44 : 
						int LA364_59 = input.LA(1);
						 
						int index364_59 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_59);
						if ( s>=0 ) return s;
						break;

					case 45 : 
						int LA364_60 = input.LA(1);
						 
						int index364_60 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_60);
						if ( s>=0 ) return s;
						break;

					case 46 : 
						int LA364_61 = input.LA(1);
						 
						int index364_61 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_61);
						if ( s>=0 ) return s;
						break;

					case 47 : 
						int LA364_62 = input.LA(1);
						 
						int index364_62 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_62);
						if ( s>=0 ) return s;
						break;

					case 48 : 
						int LA364_63 = input.LA(1);
						 
						int index364_63 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_63);
						if ( s>=0 ) return s;
						break;

					case 49 : 
						int LA364_64 = input.LA(1);
						 
						int index364_64 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_64);
						if ( s>=0 ) return s;
						break;

					case 50 : 
						int LA364_65 = input.LA(1);
						 
						int index364_65 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred46_Css3()) ) {s = 77;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_65);
						if ( s>=0 ) return s;
						break;

					case 51 : 
						int LA364_66 = input.LA(1);
						 
						int index364_66 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_66);
						if ( s>=0 ) return s;
						break;

					case 52 : 
						int LA364_67 = input.LA(1);
						 
						int index364_67 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_67);
						if ( s>=0 ) return s;
						break;

					case 53 : 
						int LA364_68 = input.LA(1);
						 
						int index364_68 = input.index();
						input.rewind();
						s = -1;
						if ( ((synpred47_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {s = 78;}
						else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 2;}
						 
						input.seek(index364_68);
						if ( s>=0 ) return s;
						break;

					case 54 : 
						int LA364_69 = input.LA(1);
						 
						int index364_69 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_69);
						if ( s>=0 ) return s;
						break;

					case 55 : 
						int LA364_72 = input.LA(1);
						 
						int index364_72 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred46_Css3()) ) {s = 77;}
						else if ( (synpred47_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index364_72);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 364, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA378_eotS =
		"\117\uffff";
	static final String DFA378_eofS =
		"\1\2\116\uffff";
	static final String DFA378_minS =
		"\1\5\1\0\13\uffff\1\0\34\uffff\1\0\10\uffff\1\0\31\uffff\1\0\1\uffff";
	static final String DFA378_maxS =
		"\1\u0099\1\0\13\uffff\1\0\34\uffff\1\0\10\uffff\1\0\31\uffff\1\0\1\uffff";
	static final String DFA378_acceptS =
		"\2\uffff\1\2\113\uffff\1\1";
	static final String DFA378_specialS =
		"\1\0\1\1\13\uffff\1\2\34\uffff\1\3\10\uffff\1\4\31\uffff\1\5\1\uffff}>";
	static final String[] DFA378_transitionS = {
			"\3\2\2\uffff\5\2\3\uffff\3\2\1\115\1\uffff\4\2\2\uffff\3\2\1\uffff\1"+
			"\2\3\uffff\1\2\1\uffff\2\2\1\uffff\3\2\1\uffff\2\2\3\uffff\3\2\5\uffff"+
			"\14\2\1\uffff\1\2\1\uffff\1\2\1\15\1\2\5\uffff\1\2\1\115\3\uffff\2\2"+
			"\3\uffff\4\2\1\52\2\uffff\1\2\1\uffff\6\2\1\uffff\6\2\2\uffff\11\2\1"+
			"\uffff\6\2\1\116\1\63\2\2\1\uffff\7\2\2\uffff\2\2\2\uffff\1\2\1\uffff"+
			"\1\2\1\1",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			""
	};

	static final short[] DFA378_eot = DFA.unpackEncodedString(DFA378_eotS);
	static final short[] DFA378_eof = DFA.unpackEncodedString(DFA378_eofS);
	static final char[] DFA378_min = DFA.unpackEncodedStringToUnsignedChars(DFA378_minS);
	static final char[] DFA378_max = DFA.unpackEncodedStringToUnsignedChars(DFA378_maxS);
	static final short[] DFA378_accept = DFA.unpackEncodedString(DFA378_acceptS);
	static final short[] DFA378_special = DFA.unpackEncodedString(DFA378_specialS);
	static final short[][] DFA378_transition;

	static {
		int numStates = DFA378_transitionS.length;
		DFA378_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA378_transition[i] = DFA.unpackEncodedString(DFA378_transitionS[i]);
		}
	}

	protected class DFA378 extends DFA {

		public DFA378(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 378;
			this.eot = DFA378_eot;
			this.eof = DFA378_eof;
			this.min = DFA378_min;
			this.max = DFA378_max;
			this.accept = DFA378_accept;
			this.special = DFA378_special;
			this.transition = DFA378_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1205:10: ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA378_0 = input.LA(1);
						 
						int index378_0 = input.index();
						input.rewind();
						s = -1;
						if ( (LA378_0==WS) ) {s = 1;}
						else if ( (LA378_0==EOF||(LA378_0 >= ANGLE && LA378_0 <= AT_SIGN)||(LA378_0 >= BOTTOMCENTER_SYM && LA378_0 <= BOTTOMRIGHT_SYM)||(LA378_0 >= CHARSET_SYM && LA378_0 <= COMMA)||(LA378_0 >= COUNTER_STYLE_SYM && LA378_0 <= CP_NOT_EQ)||(LA378_0 >= DCOLON && LA378_0 <= DOT)||LA378_0==EMS||LA378_0==EXS||(LA378_0 >= FONT_FACE_SYM && LA378_0 <= FREQ)||(LA378_0 >= GEN && LA378_0 <= GREATER_OR_EQ)||(LA378_0 >= HASH && LA378_0 <= HASH_SYMBOL)||(LA378_0 >= IDENT && LA378_0 <= IMPORT_SYM)||(LA378_0 >= LAYER_SYM && LA378_0 <= LESS_REST)||LA378_0==LPAREN||LA378_0==MEDIA_SYM||LA378_0==MOZ_DOCUMENT_SYM||LA378_0==NAMESPACE_SYM||(LA378_0 >= NOT && LA378_0 <= NUMBER)||(LA378_0 >= PAGE_SYM && LA378_0 <= PIPE)||LA378_0==RBRACE||(LA378_0 >= REM && LA378_0 <= RPAREN)||(LA378_0 >= SASS_AT_ROOT && LA378_0 <= SASS_ELSE)||(LA378_0 >= SASS_EXTEND && LA378_0 <= SASS_MIXIN)||(LA378_0 >= SASS_RETURN && LA378_0 <= SEMI)||(LA378_0 >= STRING && LA378_0 <= SUPPORTS_SYM)||(LA378_0 >= TILDE && LA378_0 <= TOPRIGHT_SYM)||(LA378_0 >= URANGE && LA378_0 <= URI)||LA378_0==VARIABLE||LA378_0==WEBKIT_KEYFRAMES_SYM) ) {s = 2;}
						else if ( (LA378_0==MINUS) ) {s = 13;}
						else if ( (LA378_0==PLUS) ) {s = 42;}
						else if ( (LA378_0==STAR) ) {s = 51;}
						else if ( (LA378_0==COMMENT||LA378_0==NL) ) {s = 77;}
						else if ( (LA378_0==SOLIDUS) && (synpred49_Css3())) {s = 78;}
						 
						input.seek(index378_0);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA378_1 = input.LA(1);
						 
						int index378_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index378_1);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA378_13 = input.LA(1);
						 
						int index378_13 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index378_13);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA378_42 = input.LA(1);
						 
						int index378_42 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index378_42);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA378_51 = input.LA(1);
						 
						int index378_51 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index378_51);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA378_77 = input.LA(1);
						 
						int index378_77 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Css3()) ) {s = 78;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index378_77);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 378, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA383_eotS =
		"\6\uffff";
	static final String DFA383_eofS =
		"\6\uffff";
	static final String DFA383_minS =
		"\2\5\3\uffff\1\5";
	static final String DFA383_maxS =
		"\1\u0098\1\u0099\3\uffff\1\u0099";
	static final String DFA383_acceptS =
		"\2\uffff\1\1\1\2\1\3\1\uffff";
	static final String DFA383_specialS =
		"\6\uffff}>";
	static final String[] DFA383_transitionS = {
			"\3\2\2\uffff\5\2\3\uffff\1\2\4\uffff\1\2\6\uffff\1\2\2\uffff\1\2\3\uffff"+
			"\1\2\1\uffff\2\2\1\uffff\1\2\3\uffff\2\2\3\uffff\1\2\1\3\1\2\7\uffff"+
			"\5\2\1\uffff\2\2\3\uffff\1\4\1\uffff\1\2\1\1\1\2\5\uffff\1\2\5\uffff"+
			"\1\2\3\uffff\3\2\1\uffff\1\1\4\uffff\5\2\2\uffff\3\2\1\uffff\2\2\2\uffff"+
			"\1\2\1\uffff\3\2\1\uffff\3\2\1\uffff\5\2\3\uffff\1\2\2\uffff\7\2\2\uffff"+
			"\2\2\2\uffff\1\2\1\uffff\1\2",
			"\3\2\2\uffff\5\2\3\uffff\1\2\2\uffff\1\5\1\uffff\1\2\6\uffff\1\2\2\uffff"+
			"\1\2\3\uffff\1\2\1\uffff\2\2\1\uffff\1\2\3\uffff\2\2\3\uffff\1\2\1\uffff"+
			"\1\2\7\uffff\5\2\1\uffff\2\2\3\uffff\1\4\1\uffff\1\2\1\uffff\1\2\5\uffff"+
			"\1\2\1\5\4\uffff\1\2\3\uffff\3\2\6\uffff\5\2\2\uffff\3\2\1\uffff\2\2"+
			"\2\uffff\1\2\1\uffff\3\2\1\uffff\3\2\1\uffff\5\2\3\uffff\1\2\2\uffff"+
			"\7\2\2\uffff\2\2\2\uffff\1\2\1\uffff\1\2\1\5",
			"",
			"",
			"",
			"\3\2\2\uffff\5\2\3\uffff\1\2\2\uffff\1\5\1\uffff\1\2\6\uffff\1\2\2\uffff"+
			"\1\2\3\uffff\1\2\1\uffff\2\2\1\uffff\1\2\3\uffff\2\2\3\uffff\1\2\1\uffff"+
			"\1\2\7\uffff\5\2\1\uffff\2\2\3\uffff\1\4\1\uffff\1\2\1\uffff\1\2\5\uffff"+
			"\1\2\1\5\4\uffff\1\2\3\uffff\3\2\6\uffff\5\2\2\uffff\3\2\1\uffff\2\2"+
			"\2\uffff\1\2\1\uffff\3\2\1\uffff\3\2\1\uffff\5\2\3\uffff\1\2\2\uffff"+
			"\7\2\2\uffff\2\2\2\uffff\1\2\1\uffff\1\2\1\5"
	};

	static final short[] DFA383_eot = DFA.unpackEncodedString(DFA383_eotS);
	static final short[] DFA383_eof = DFA.unpackEncodedString(DFA383_eofS);
	static final char[] DFA383_min = DFA.unpackEncodedStringToUnsignedChars(DFA383_minS);
	static final char[] DFA383_max = DFA.unpackEncodedStringToUnsignedChars(DFA383_maxS);
	static final short[] DFA383_accept = DFA.unpackEncodedString(DFA383_acceptS);
	static final short[] DFA383_special = DFA.unpackEncodedString(DFA383_specialS);
	static final short[][] DFA383_transition;

	static {
		int numStates = DFA383_transitionS.length;
		DFA383_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA383_transition[i] = DFA.unpackEncodedString(DFA383_transitionS[i]);
		}
	}

	protected class DFA383 extends DFA {

		public DFA383(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 383;
			this.eot = DFA383_eot;
			this.eof = DFA383_eof;
			this.min = DFA383_min;
			this.max = DFA383_max;
			this.accept = DFA383_accept;
			this.special = DFA383_special;
			this.transition = DFA383_transition;
		}
		@Override
		public String getDescription() {
			return "1210:1: cp_math_expression_atom : ( term | IMPORTANT_SYM | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN );";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA390_eotS =
		"\4\uffff";
	static final String DFA390_eofS =
		"\4\uffff";
	static final String DFA390_minS =
		"\2\25\2\uffff";
	static final String DFA390_maxS =
		"\2\u0099\2\uffff";
	static final String DFA390_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA390_specialS =
		"\4\uffff}>";
	static final String[] DFA390_transitionS = {
			"\1\1\35\uffff\1\2\10\uffff\1\3\26\uffff\1\1\105\uffff\1\1",
			"\1\1\35\uffff\1\2\10\uffff\1\3\26\uffff\1\1\105\uffff\1\1",
			"",
			""
	};

	static final short[] DFA390_eot = DFA.unpackEncodedString(DFA390_eotS);
	static final short[] DFA390_eof = DFA.unpackEncodedString(DFA390_eofS);
	static final char[] DFA390_min = DFA.unpackEncodedStringToUnsignedChars(DFA390_minS);
	static final char[] DFA390_max = DFA.unpackEncodedStringToUnsignedChars(DFA390_maxS);
	static final short[] DFA390_accept = DFA.unpackEncodedString(DFA390_acceptS);
	static final short[] DFA390_special = DFA.unpackEncodedString(DFA390_specialS);
	static final short[][] DFA390_transition;

	static {
		int numStates = DFA390_transitionS.length;
		DFA390_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA390_transition[i] = DFA.unpackEncodedString(DFA390_transitionS[i]);
		}
	}

	protected class DFA390 extends DFA {

		public DFA390(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 390;
			this.eot = DFA390_eot;
			this.eof = DFA390_eof;
			this.min = DFA390_min;
			this.max = DFA390_max;
			this.accept = DFA390_accept;
			this.special = DFA390_special;
			this.transition = DFA390_transition;
		}
		@Override
		public String getDescription() {
			return "1226:107: ( ( ws )? less_mixin_guarded )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA394_eotS =
		"\4\uffff";
	static final String DFA394_eofS =
		"\4\uffff";
	static final String DFA394_minS =
		"\2\25\2\uffff";
	static final String DFA394_maxS =
		"\2\u0099\2\uffff";
	static final String DFA394_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA394_specialS =
		"\4\uffff}>";
	static final String[] DFA394_transitionS = {
			"\1\1\46\uffff\1\3\13\uffff\1\2\12\uffff\1\1\105\uffff\1\1",
			"\1\1\46\uffff\1\3\13\uffff\1\2\12\uffff\1\1\105\uffff\1\1",
			"",
			""
	};

	static final short[] DFA394_eot = DFA.unpackEncodedString(DFA394_eotS);
	static final short[] DFA394_eof = DFA.unpackEncodedString(DFA394_eofS);
	static final char[] DFA394_min = DFA.unpackEncodedStringToUnsignedChars(DFA394_minS);
	static final char[] DFA394_max = DFA.unpackEncodedStringToUnsignedChars(DFA394_maxS);
	static final short[] DFA394_accept = DFA.unpackEncodedString(DFA394_acceptS);
	static final short[] DFA394_special = DFA.unpackEncodedString(DFA394_specialS);
	static final short[][] DFA394_transition;

	static {
		int numStates = DFA394_transitionS.length;
		DFA394_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA394_transition[i] = DFA.unpackEncodedString(DFA394_transitionS[i]);
		}
	}

	protected class DFA394 extends DFA {

		public DFA394(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 394;
			this.eot = DFA394_eot;
			this.eof = DFA394_eof;
			this.min = DFA394_min;
			this.max = DFA394_max;
			this.accept = DFA394_accept;
			this.special = DFA394_special;
			this.transition = DFA394_transition;
		}
		@Override
		public String getDescription() {
			return "1228:55: ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA409_eotS =
		"\4\uffff";
	static final String DFA409_eofS =
		"\2\3\2\uffff";
	static final String DFA409_minS =
		"\2\6\2\uffff";
	static final String DFA409_maxS =
		"\2\u0099\2\uffff";
	static final String DFA409_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA409_specialS =
		"\4\uffff}>";
	static final String[] DFA409_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\3\3\5\uffff\6\3\2\uffff\1\3\4\uffff"+
			"\1\2\1\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\4\3\1\uffff\3\3\1\uffff\2\3\2\uffff\5\3\1\uffff\3\3\1\uffff"+
			"\6\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\3\3\5\uffff\6\3\2\uffff\1\3\4\uffff"+
			"\1\2\1\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\4\3\1\uffff\3\3\1\uffff\2\3\1\uffff\6\3\1\uffff\3\3\1\uffff"+
			"\6\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"",
			""
	};

	static final short[] DFA409_eot = DFA.unpackEncodedString(DFA409_eotS);
	static final short[] DFA409_eof = DFA.unpackEncodedString(DFA409_eofS);
	static final char[] DFA409_min = DFA.unpackEncodedStringToUnsignedChars(DFA409_minS);
	static final char[] DFA409_max = DFA.unpackEncodedStringToUnsignedChars(DFA409_maxS);
	static final short[] DFA409_accept = DFA.unpackEncodedString(DFA409_acceptS);
	static final short[] DFA409_special = DFA.unpackEncodedString(DFA409_specialS);
	static final short[][] DFA409_transition;

	static {
		int numStates = DFA409_transitionS.length;
		DFA409_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA409_transition[i] = DFA.unpackEncodedString(DFA409_transitionS[i]);
		}
	}

	protected class DFA409 extends DFA {

		public DFA409(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 409;
			this.eot = DFA409_eot;
			this.eof = DFA409_eof;
			this.min = DFA409_min;
			this.max = DFA409_max;
			this.accept = DFA409_accept;
			this.special = DFA409_special;
			this.transition = DFA409_transition;
		}
		@Override
		public String getDescription() {
			return "1240:57: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA411_eotS =
		"\4\uffff";
	static final String DFA411_eofS =
		"\2\3\2\uffff";
	static final String DFA411_minS =
		"\2\6\2\uffff";
	static final String DFA411_maxS =
		"\2\u0099\2\uffff";
	static final String DFA411_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA411_specialS =
		"\4\uffff}>";
	static final String[] DFA411_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\3\3\5\uffff\1\3\1\2\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\4\3\1\uffff\3\3\1\uffff\2\3\2\uffff\5\3\1\uffff\3\3\1\uffff"+
			"\6\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\3\uffff\3\3\5\uffff\1\3\1\2\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\4\3\1\uffff\3\3\1\uffff\2\3\1\uffff\6\3\1\uffff\3\3\1\uffff"+
			"\6\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"",
			""
	};

	static final short[] DFA411_eot = DFA.unpackEncodedString(DFA411_eotS);
	static final short[] DFA411_eof = DFA.unpackEncodedString(DFA411_eofS);
	static final char[] DFA411_min = DFA.unpackEncodedStringToUnsignedChars(DFA411_minS);
	static final char[] DFA411_max = DFA.unpackEncodedStringToUnsignedChars(DFA411_maxS);
	static final short[] DFA411_accept = DFA.unpackEncodedString(DFA411_acceptS);
	static final short[] DFA411_special = DFA.unpackEncodedString(DFA411_specialS);
	static final short[][] DFA411_transition;

	static {
		int numStates = DFA411_transitionS.length;
		DFA411_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA411_transition[i] = DFA.unpackEncodedString(DFA411_transitionS[i]);
		}
	}

	protected class DFA411 extends DFA {

		public DFA411(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 411;
			this.eot = DFA411_eot;
			this.eof = DFA411_eof;
			this.min = DFA411_min;
			this.max = DFA411_max;
			this.accept = DFA411_accept;
			this.special = DFA411_special;
			this.transition = DFA411_transition;
		}
		@Override
		public String getDescription() {
			return "1240:102: ( ( ws )? cp_mixin_block )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA424_eotS =
		"\12\uffff";
	static final String DFA424_eofS =
		"\12\uffff";
	static final String DFA424_minS =
		"\4\5\1\uffff\1\5\1\uffff\1\5\1\63\1\5";
	static final String DFA424_maxS =
		"\1\u0098\3\u0099\1\uffff\1\u0099\1\uffff\1\u0099\1\u0080\1\u0099";
	static final String DFA424_acceptS =
		"\4\uffff\1\2\1\uffff\1\1\3\uffff";
	static final String DFA424_specialS =
		"\12\uffff}>";
	static final String[] DFA424_transitionS = {
			"\1\4\1\1\1\4\2\uffff\5\1\3\uffff\1\1\4\uffff\1\1\6\uffff\1\4\2\uffff"+
			"\1\4\3\uffff\1\4\1\uffff\1\1\1\4\1\uffff\1\4\3\uffff\2\4\3\uffff\1\3"+
			"\1\4\1\1\6\uffff\2\4\3\1\1\4\1\uffff\2\4\3\uffff\1\4\1\uffff\1\1\1\4"+
			"\1\1\5\uffff\1\1\4\uffff\2\4\3\uffff\1\1\2\4\1\uffff\1\4\4\uffff\2\4"+
			"\3\1\2\uffff\3\1\1\uffff\2\1\2\uffff\1\1\1\uffff\3\1\1\uffff\3\1\1\uffff"+
			"\2\1\1\2\2\1\3\uffff\1\4\2\uffff\2\4\5\1\2\uffff\2\4\2\uffff\1\4\1\uffff"+
			"\1\1",
			"\3\4\2\uffff\5\4\3\uffff\1\4\1\6\1\4\1\5\1\uffff\4\4\3\uffff\1\4\2\uffff"+
			"\1\4\3\uffff\1\4\1\uffff\2\4\1\uffff\3\4\1\uffff\2\4\3\uffff\3\4\7\uffff"+
			"\11\4\2\uffff\1\4\1\uffff\3\4\5\uffff\1\4\1\5\3\uffff\2\4\3\uffff\3\4"+
			"\1\uffff\1\4\4\uffff\6\4\1\uffff\3\4\1\uffff\2\4\2\uffff\1\4\1\uffff"+
			"\3\4\1\uffff\3\4\1\uffff\11\4\2\uffff\7\4\2\uffff\2\4\2\uffff\1\4\1\uffff"+
			"\1\4\1\5",
			"\3\4\2\uffff\5\4\3\uffff\1\4\1\6\1\4\1\7\1\uffff\4\4\3\uffff\1\4\2\uffff"+
			"\1\4\3\uffff\1\4\1\uffff\2\4\1\uffff\3\4\1\uffff\2\4\3\uffff\3\4\7\uffff"+
			"\11\4\2\uffff\1\4\1\uffff\3\4\5\uffff\1\4\1\7\3\uffff\2\4\3\uffff\3\4"+
			"\1\uffff\1\4\4\uffff\6\4\1\uffff\3\4\1\uffff\2\4\2\uffff\1\4\1\uffff"+
			"\3\4\1\uffff\3\4\1\uffff\11\4\2\uffff\7\4\2\uffff\2\4\2\uffff\1\4\1\uffff"+
			"\1\4\1\7",
			"\3\4\2\uffff\5\4\3\uffff\4\4\1\uffff\4\4\3\uffff\1\4\1\10\1\uffff\1"+
			"\4\3\uffff\1\4\1\uffff\2\4\1\uffff\3\4\1\uffff\2\4\3\uffff\3\4\7\uffff"+
			"\11\4\2\uffff\1\4\1\uffff\3\4\5\uffff\2\4\3\uffff\2\4\3\uffff\3\4\1\uffff"+
			"\1\4\4\uffff\6\4\1\uffff\3\4\1\uffff\2\4\2\uffff\1\4\1\uffff\3\4\1\uffff"+
			"\3\4\1\uffff\11\4\2\uffff\7\4\2\uffff\2\4\2\uffff\1\4\1\uffff\2\4",
			"",
			"\3\4\2\uffff\5\4\3\uffff\1\4\1\6\1\4\1\5\1\uffff\4\4\3\uffff\1\4\2\uffff"+
			"\1\4\3\uffff\1\4\1\uffff\2\4\1\uffff\3\4\1\uffff\2\4\3\uffff\3\4\7\uffff"+
			"\11\4\2\uffff\1\4\1\uffff\3\4\5\uffff\1\4\1\5\3\uffff\2\4\3\uffff\3\4"+
			"\1\uffff\1\4\4\uffff\6\4\1\uffff\3\4\1\uffff\2\4\2\uffff\1\4\1\uffff"+
			"\3\4\1\uffff\3\4\1\uffff\11\4\2\uffff\7\4\2\uffff\2\4\2\uffff\1\4\1\uffff"+
			"\1\4\1\5",
			"",
			"\3\4\2\uffff\5\4\3\uffff\1\4\1\6\1\4\1\7\1\uffff\4\4\3\uffff\1\4\2\uffff"+
			"\1\4\3\uffff\1\4\1\uffff\2\4\1\uffff\3\4\1\uffff\2\4\3\uffff\3\4\7\uffff"+
			"\11\4\2\uffff\1\4\1\uffff\3\4\5\uffff\1\4\1\7\3\uffff\2\4\3\uffff\3\4"+
			"\1\uffff\1\4\4\uffff\6\4\1\uffff\3\4\1\uffff\2\4\2\uffff\1\4\1\uffff"+
			"\3\4\1\uffff\3\4\1\uffff\11\4\2\uffff\7\4\2\uffff\2\4\2\uffff\1\4\1\uffff"+
			"\1\4\1\7",
			"\1\4\114\uffff\1\11",
			"\3\4\2\uffff\5\4\3\uffff\1\4\1\6\1\4\1\7\1\uffff\4\4\3\uffff\1\4\2\uffff"+
			"\1\4\3\uffff\1\4\1\uffff\2\4\1\uffff\3\4\1\uffff\2\4\3\uffff\3\4\7\uffff"+
			"\11\4\2\uffff\1\4\1\uffff\3\4\5\uffff\1\4\1\7\3\uffff\2\4\3\uffff\3\4"+
			"\1\uffff\1\4\4\uffff\6\4\1\uffff\3\4\1\uffff\2\4\2\uffff\1\4\1\uffff"+
			"\3\4\1\uffff\3\4\1\uffff\11\4\2\uffff\7\4\2\uffff\2\4\2\uffff\1\4\1\uffff"+
			"\1\4\1\7"
	};

	static final short[] DFA424_eot = DFA.unpackEncodedString(DFA424_eotS);
	static final short[] DFA424_eof = DFA.unpackEncodedString(DFA424_eofS);
	static final char[] DFA424_min = DFA.unpackEncodedStringToUnsignedChars(DFA424_minS);
	static final char[] DFA424_max = DFA.unpackEncodedStringToUnsignedChars(DFA424_maxS);
	static final short[] DFA424_accept = DFA.unpackEncodedString(DFA424_acceptS);
	static final short[] DFA424_special = DFA.unpackEncodedString(DFA424_specialS);
	static final short[][] DFA424_transition;

	static {
		int numStates = DFA424_transitionS.length;
		DFA424_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA424_transition[i] = DFA.unpackEncodedString(DFA424_transitionS[i]);
		}
	}

	protected class DFA424 extends DFA {

		public DFA424(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 424;
			this.eot = DFA424_eot;
			this.eof = DFA424_eof;
			this.min = DFA424_min;
			this.max = DFA424_max;
			this.accept = DFA424_accept;
			this.special = DFA424_special;
			this.transition = DFA424_transition;
		}
		@Override
		public String getDescription() {
			return "1266:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA427_eotS =
		"\5\uffff";
	static final String DFA427_eofS =
		"\5\uffff";
	static final String DFA427_minS =
		"\1\24\1\6\1\uffff\1\6\1\uffff";
	static final String DFA427_maxS =
		"\1\u0083\1\u0099\1\uffff\1\u0099\1\uffff";
	static final String DFA427_acceptS =
		"\2\uffff\1\2\1\uffff\1\1";
	static final String DFA427_specialS =
		"\5\uffff}>";
	static final String[] DFA427_transitionS = {
			"\1\1\3\uffff\1\2\55\uffff\1\2\43\uffff\1\2\30\uffff\1\1",
			"\1\4\3\uffff\5\4\3\uffff\1\4\2\uffff\1\3\1\uffff\1\4\1\2\16\uffff\1"+
			"\4\13\uffff\1\4\1\uffff\1\4\10\uffff\3\4\5\uffff\1\2\3\uffff\1\4\1\uffff"+
			"\1\4\5\uffff\1\4\1\3\10\uffff\1\4\12\uffff\3\4\1\2\1\uffff\3\4\1\uffff"+
			"\2\4\2\uffff\1\4\1\uffff\3\4\1\uffff\3\4\1\uffff\5\4\10\uffff\5\4\10"+
			"\uffff\1\4\1\3",
			"",
			"\1\4\3\uffff\5\4\3\uffff\1\4\2\uffff\1\3\1\uffff\1\4\1\2\16\uffff\1"+
			"\4\13\uffff\1\4\1\uffff\1\4\10\uffff\3\4\5\uffff\1\2\3\uffff\1\4\1\uffff"+
			"\1\4\5\uffff\1\4\1\3\10\uffff\1\4\12\uffff\3\4\1\2\1\uffff\3\4\1\uffff"+
			"\2\4\2\uffff\1\4\1\uffff\3\4\1\uffff\3\4\1\uffff\5\4\10\uffff\5\4\10"+
			"\uffff\1\4\1\3",
			""
	};

	static final short[] DFA427_eot = DFA.unpackEncodedString(DFA427_eotS);
	static final short[] DFA427_eof = DFA.unpackEncodedString(DFA427_eofS);
	static final char[] DFA427_min = DFA.unpackEncodedStringToUnsignedChars(DFA427_minS);
	static final char[] DFA427_max = DFA.unpackEncodedStringToUnsignedChars(DFA427_maxS);
	static final short[] DFA427_accept = DFA.unpackEncodedString(DFA427_acceptS);
	static final short[] DFA427_special = DFA.unpackEncodedString(DFA427_specialS);
	static final short[][] DFA427_transition;

	static {
		int numStates = DFA427_transitionS.length;
		DFA427_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA427_transition[i] = DFA.unpackEncodedString(DFA427_transitionS[i]);
		}
	}

	protected class DFA427 extends DFA {

		public DFA427(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 427;
			this.eot = DFA427_eot;
			this.eof = DFA427_eof;
			this.min = DFA427_min;
			this.max = DFA427_max;
			this.accept = DFA427_accept;
			this.special = DFA427_special;
			this.transition = DFA427_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1281:14: ( ( COMMA | SEMI ) ( ws )? cp_arg )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA443_eotS =
		"\4\uffff";
	static final String DFA443_eofS =
		"\4\uffff";
	static final String DFA443_minS =
		"\2\24\2\uffff";
	static final String DFA443_maxS =
		"\2\u0099\2\uffff";
	static final String DFA443_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA443_specialS =
		"\4\uffff}>";
	static final String[] DFA443_transitionS = {
			"\1\3\1\1\35\uffff\1\3\10\uffff\1\2\26\uffff\1\1\105\uffff\1\1",
			"\1\3\1\1\35\uffff\1\3\10\uffff\1\2\26\uffff\1\1\105\uffff\1\1",
			"",
			""
	};

	static final short[] DFA443_eot = DFA.unpackEncodedString(DFA443_eotS);
	static final short[] DFA443_eof = DFA.unpackEncodedString(DFA443_eofS);
	static final char[] DFA443_min = DFA.unpackEncodedStringToUnsignedChars(DFA443_minS);
	static final char[] DFA443_max = DFA.unpackEncodedStringToUnsignedChars(DFA443_maxS);
	static final short[] DFA443_accept = DFA.unpackEncodedString(DFA443_acceptS);
	static final short[] DFA443_special = DFA.unpackEncodedString(DFA443_specialS);
	static final short[][] DFA443_transition;

	static {
		int numStates = DFA443_transitionS.length;
		DFA443_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA443_transition[i] = DFA.unpackEncodedString(DFA443_transitionS[i]);
		}
	}

	protected class DFA443 extends DFA {

		public DFA443(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 443;
			this.eot = DFA443_eot;
			this.eof = DFA443_eof;
			this.min = DFA443_min;
			this.max = DFA443_max;
			this.accept = DFA443_accept;
			this.special = DFA443_special;
			this.transition = DFA443_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1297:34: ( ( ws )? ( COMMA | key_and ) ( ws )? less_condition )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA472_eotS =
		"\4\uffff";
	static final String DFA472_eofS =
		"\4\uffff";
	static final String DFA472_minS =
		"\1\24\1\6\2\uffff";
	static final String DFA472_maxS =
		"\2\u0099\2\uffff";
	static final String DFA472_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA472_specialS =
		"\4\uffff}>";
	static final String[] DFA472_transitionS = {
			"\1\3\1\1\75\uffff\1\1\17\uffff\1\2\6\uffff\1\2\30\uffff\1\2\25\uffff"+
			"\1\1",
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\3\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\4\2\2\uffff\1\2\6\uffff\3\2\5\uffff\1\2\1\1\10\uffff\1\2\2\uffff\2\2"+
			"\2\uffff\1\2\3\uffff\4\2\1\uffff\3\2\1\uffff\2\2\1\uffff\6\2\1\uffff"+
			"\12\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\6\uffff\1\2\1\uffff"+
			"\1\2\1\1",
			"",
			""
	};

	static final short[] DFA472_eot = DFA.unpackEncodedString(DFA472_eotS);
	static final short[] DFA472_eof = DFA.unpackEncodedString(DFA472_eofS);
	static final char[] DFA472_min = DFA.unpackEncodedStringToUnsignedChars(DFA472_minS);
	static final char[] DFA472_max = DFA.unpackEncodedStringToUnsignedChars(DFA472_maxS);
	static final short[] DFA472_accept = DFA.unpackEncodedString(DFA472_acceptS);
	static final short[] DFA472_special = DFA.unpackEncodedString(DFA472_specialS);
	static final short[][] DFA472_transition;

	static {
		int numStates = DFA472_transitionS.length;
		DFA472_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA472_transition[i] = DFA.unpackEncodedString(DFA472_transitionS[i]);
		}
	}

	protected class DFA472 extends DFA {

		public DFA472(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 472;
			this.eot = DFA472_eot;
			this.eof = DFA472_eof;
			this.min = DFA472_min;
			this.max = DFA472_max;
			this.accept = DFA472_accept;
			this.special = DFA472_special;
			this.transition = DFA472_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1373:43: ( ( ws )? COMMA ( ws )? simpleSelectorSequence )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA473_eotS =
		"\4\uffff";
	static final String DFA473_eofS =
		"\4\uffff";
	static final String DFA473_minS =
		"\1\25\1\6\2\uffff";
	static final String DFA473_maxS =
		"\2\u0099\2\uffff";
	static final String DFA473_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA473_specialS =
		"\4\uffff}>";
	static final String[] DFA473_transitionS = {
			"\1\1\75\uffff\1\1\17\uffff\1\2\6\uffff\1\2\30\uffff\1\2\25\uffff\1\1",
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\uffff\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\3\uffff\1\2\1\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\4\2\2\uffff\1\2\6\uffff\3\2\5\uffff\1\2\1\1\10\uffff\1\2\2\uffff\2\2"+
			"\2\uffff\1\2\3\uffff\4\2\1\uffff\3\2\1\uffff\2\2\1\uffff\6\2\1\uffff"+
			"\3\2\1\3\6\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\6\uffff"+
			"\1\2\1\uffff\1\2\1\1",
			"",
			""
	};

	static final short[] DFA473_eot = DFA.unpackEncodedString(DFA473_eotS);
	static final short[] DFA473_eof = DFA.unpackEncodedString(DFA473_eofS);
	static final char[] DFA473_min = DFA.unpackEncodedStringToUnsignedChars(DFA473_minS);
	static final char[] DFA473_max = DFA.unpackEncodedStringToUnsignedChars(DFA473_maxS);
	static final short[] DFA473_accept = DFA.unpackEncodedString(DFA473_acceptS);
	static final short[] DFA473_special = DFA.unpackEncodedString(DFA473_specialS);
	static final short[][] DFA473_transition;

	static {
		int numStates = DFA473_transitionS.length;
		DFA473_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA473_transition[i] = DFA.unpackEncodedString(DFA473_transitionS[i]);
		}
	}

	protected class DFA473 extends DFA {

		public DFA473(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 473;
			this.eot = DFA473_eot;
			this.eof = DFA473_eof;
			this.min = DFA473_min;
			this.max = DFA473_max;
			this.accept = DFA473_accept;
			this.special = DFA473_special;
			this.transition = DFA473_transition;
		}
		@Override
		public String getDescription() {
			return "1373:83: ( ws SASS_OPTIONAL )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA479_eotS =
		"\10\uffff";
	static final String DFA479_eofS =
		"\2\4\6\uffff";
	static final String DFA479_minS =
		"\2\6\1\23\2\uffff\3\23";
	static final String DFA479_maxS =
		"\3\u0099\2\uffff\3\u0099";
	static final String DFA479_acceptS =
		"\3\uffff\1\1\1\2\3\uffff";
	static final String DFA479_specialS =
		"\10\uffff}>";
	static final String[] DFA479_transitionS = {
			"\2\4\2\uffff\5\4\3\uffff\2\4\1\uffff\1\1\1\uffff\1\4\5\uffff\3\4\7\uffff"+
			"\1\4\2\uffff\2\4\2\uffff\2\4\3\uffff\1\4\1\uffff\1\4\5\uffff\1\4\1\uffff"+
			"\4\4\2\uffff\1\4\6\uffff\3\4\5\uffff\1\4\1\1\10\uffff\1\4\2\uffff\2\4"+
			"\2\uffff\1\4\3\uffff\4\4\1\uffff\3\4\1\uffff\1\4\1\2\1\3\1\uffff\5\4"+
			"\1\uffff\3\4\1\uffff\6\4\1\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff"+
			"\5\4\6\uffff\1\4\1\uffff\1\4\1\1",
			"\2\4\2\uffff\5\4\3\uffff\2\4\1\uffff\1\1\1\uffff\1\4\5\uffff\3\4\7\uffff"+
			"\1\4\2\uffff\2\4\2\uffff\2\4\3\uffff\1\4\1\uffff\1\4\5\uffff\1\4\1\uffff"+
			"\4\4\2\uffff\1\4\6\uffff\3\4\5\uffff\1\4\1\1\10\uffff\1\4\2\uffff\2\4"+
			"\2\uffff\1\4\3\uffff\4\4\1\uffff\3\4\1\uffff\1\4\1\5\1\3\6\4\1\uffff"+
			"\3\4\1\uffff\6\4\1\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\5\4\6\uffff"+
			"\1\4\1\uffff\1\4\1\1",
			"\1\4\1\uffff\1\6\35\uffff\1\3\10\uffff\1\3\26\uffff\1\6\105\uffff\1"+
			"\6",
			"",
			"",
			"\1\4\1\uffff\1\7\35\uffff\1\3\10\uffff\1\3\26\uffff\1\7\105\uffff\1"+
			"\7",
			"\1\4\1\uffff\1\6\35\uffff\1\3\10\uffff\1\3\26\uffff\1\6\105\uffff\1"+
			"\6",
			"\1\4\1\uffff\1\7\35\uffff\1\3\10\uffff\1\3\26\uffff\1\7\105\uffff\1"+
			"\7"
	};

	static final short[] DFA479_eot = DFA.unpackEncodedString(DFA479_eotS);
	static final short[] DFA479_eof = DFA.unpackEncodedString(DFA479_eofS);
	static final char[] DFA479_min = DFA.unpackEncodedStringToUnsignedChars(DFA479_minS);
	static final char[] DFA479_max = DFA.unpackEncodedStringToUnsignedChars(DFA479_maxS);
	static final short[] DFA479_accept = DFA.unpackEncodedString(DFA479_acceptS);
	static final short[] DFA479_special = DFA.unpackEncodedString(DFA479_specialS);
	static final short[][] DFA479_transition;

	static {
		int numStates = DFA479_transitionS.length;
		DFA479_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA479_transition[i] = DFA.unpackEncodedString(DFA479_transitionS[i]);
		}
	}

	protected class DFA479 extends DFA {

		public DFA479(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 479;
			this.eot = DFA479_eot;
			this.eof = DFA479_eof;
			this.min = DFA479_min;
			this.max = DFA479_max;
			this.accept = DFA479_accept;
			this.special = DFA479_special;
			this.transition = DFA479_transition;
		}
		@Override
		public String getDescription() {
			return "1398:64: ( ( ws )? sass_else )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA487_eotS =
		"\5\uffff";
	static final String DFA487_eofS =
		"\5\uffff";
	static final String DFA487_minS =
		"\1\161\1\25\1\uffff\1\25\1\uffff";
	static final String DFA487_maxS =
		"\1\162\1\u0099\1\uffff\1\u0099\1\uffff";
	static final String DFA487_acceptS =
		"\2\uffff\1\2\1\uffff\1\1";
	static final String DFA487_specialS =
		"\5\uffff}>";
	static final String[] DFA487_transitionS = {
			"\1\1\1\2",
			"\1\3\35\uffff\1\2\10\uffff\1\4\26\uffff\1\3\105\uffff\1\3",
			"",
			"\1\3\35\uffff\1\2\10\uffff\1\4\26\uffff\1\3\105\uffff\1\3",
			""
	};

	static final short[] DFA487_eot = DFA.unpackEncodedString(DFA487_eotS);
	static final short[] DFA487_eof = DFA.unpackEncodedString(DFA487_eofS);
	static final char[] DFA487_min = DFA.unpackEncodedStringToUnsignedChars(DFA487_minS);
	static final char[] DFA487_max = DFA.unpackEncodedStringToUnsignedChars(DFA487_maxS);
	static final short[] DFA487_accept = DFA.unpackEncodedString(DFA487_acceptS);
	static final short[] DFA487_special = DFA.unpackEncodedString(DFA487_specialS);
	static final short[][] DFA487_transition;

	static {
		int numStates = DFA487_transitionS.length;
		DFA487_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA487_transition[i] = DFA.unpackEncodedString(DFA487_transitionS[i]);
		}
	}

	protected class DFA487 extends DFA {

		public DFA487(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 487;
			this.eot = DFA487_eot;
			this.eof = DFA487_eof;
			this.min = DFA487_min;
			this.max = DFA487_max;
			this.accept = DFA487_accept;
			this.special = DFA487_special;
			this.transition = DFA487_transition;
		}
		@Override
		public String getDescription() {
			return "1401:1: sass_else : ( SASS_ELSE ( ws )? sass_control_block | ( ( SASS_ELSE ( ws )? {...}? IDENT ) | SASS_ELSEIF ) ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? );";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA486_eotS =
		"\10\uffff";
	static final String DFA486_eofS =
		"\2\4\6\uffff";
	static final String DFA486_minS =
		"\2\6\1\23\2\uffff\3\23";
	static final String DFA486_maxS =
		"\3\u0099\2\uffff\3\u0099";
	static final String DFA486_acceptS =
		"\3\uffff\1\1\1\2\3\uffff";
	static final String DFA486_specialS =
		"\10\uffff}>";
	static final String[] DFA486_transitionS = {
			"\2\4\2\uffff\5\4\3\uffff\2\4\1\uffff\1\1\1\uffff\1\4\5\uffff\3\4\7\uffff"+
			"\1\4\2\uffff\2\4\2\uffff\2\4\3\uffff\1\4\1\uffff\1\4\5\uffff\1\4\1\uffff"+
			"\4\4\2\uffff\1\4\6\uffff\3\4\5\uffff\1\4\1\1\10\uffff\1\4\2\uffff\2\4"+
			"\2\uffff\1\4\3\uffff\4\4\1\uffff\3\4\1\uffff\1\4\1\2\1\3\1\uffff\5\4"+
			"\1\uffff\3\4\1\uffff\6\4\1\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff"+
			"\5\4\6\uffff\1\4\1\uffff\1\4\1\1",
			"\2\4\2\uffff\5\4\3\uffff\2\4\1\uffff\1\1\1\uffff\1\4\5\uffff\3\4\7\uffff"+
			"\1\4\2\uffff\2\4\2\uffff\2\4\3\uffff\1\4\1\uffff\1\4\5\uffff\1\4\1\uffff"+
			"\4\4\2\uffff\1\4\6\uffff\3\4\5\uffff\1\4\1\1\10\uffff\1\4\2\uffff\2\4"+
			"\2\uffff\1\4\3\uffff\4\4\1\uffff\3\4\1\uffff\1\4\1\5\1\3\6\4\1\uffff"+
			"\3\4\1\uffff\6\4\1\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\5\4\6\uffff"+
			"\1\4\1\uffff\1\4\1\1",
			"\1\4\1\uffff\1\6\35\uffff\1\3\10\uffff\1\3\26\uffff\1\6\105\uffff\1"+
			"\6",
			"",
			"",
			"\1\4\1\uffff\1\7\35\uffff\1\3\10\uffff\1\3\26\uffff\1\7\105\uffff\1"+
			"\7",
			"\1\4\1\uffff\1\6\35\uffff\1\3\10\uffff\1\3\26\uffff\1\6\105\uffff\1"+
			"\6",
			"\1\4\1\uffff\1\7\35\uffff\1\3\10\uffff\1\3\26\uffff\1\7\105\uffff\1"+
			"\7"
	};

	static final short[] DFA486_eot = DFA.unpackEncodedString(DFA486_eotS);
	static final short[] DFA486_eof = DFA.unpackEncodedString(DFA486_eofS);
	static final char[] DFA486_min = DFA.unpackEncodedStringToUnsignedChars(DFA486_minS);
	static final char[] DFA486_max = DFA.unpackEncodedStringToUnsignedChars(DFA486_maxS);
	static final short[] DFA486_accept = DFA.unpackEncodedString(DFA486_acceptS);
	static final short[] DFA486_special = DFA.unpackEncodedString(DFA486_specialS);
	static final short[][] DFA486_transition;

	static {
		int numStates = DFA486_transitionS.length;
		DFA486_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA486_transition[i] = DFA.unpackEncodedString(DFA486_transitionS[i]);
		}
	}

	protected class DFA486 extends DFA {

		public DFA486(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 486;
			this.eot = DFA486_eot;
			this.eof = DFA486_eof;
			this.min = DFA486_min;
			this.max = DFA486_max;
			this.accept = DFA486_accept;
			this.special = DFA486_special;
			this.transition = DFA486_transition;
		}
		@Override
		public String getDescription() {
			return "1405:128: ( ( ws )? sass_else )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA490_eotS =
		"\4\uffff";
	static final String DFA490_eofS =
		"\4\uffff";
	static final String DFA490_minS =
		"\2\5\2\uffff";
	static final String DFA490_maxS =
		"\2\u0099\2\uffff";
	static final String DFA490_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA490_specialS =
		"\4\uffff}>";
	static final String[] DFA490_transitionS = {
			"\3\3\2\uffff\5\3\3\uffff\1\3\1\uffff\1\2\1\1\1\uffff\1\3\6\uffff\1\3"+
			"\2\uffff\1\3\3\uffff\1\3\1\uffff\2\3\1\uffff\1\3\3\uffff\2\3\3\uffff"+
			"\3\3\6\uffff\6\3\1\uffff\2\3\3\uffff\1\3\1\uffff\3\3\5\uffff\1\3\1\1"+
			"\3\uffff\2\3\3\uffff\3\3\1\uffff\1\3\4\uffff\5\3\2\uffff\3\3\1\uffff"+
			"\2\3\2\uffff\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\5\3\3\uffff\1\3\2\uffff"+
			"\7\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\1\1",
			"\3\3\2\uffff\5\3\3\uffff\1\3\1\uffff\1\2\1\1\1\uffff\1\3\6\uffff\1\3"+
			"\2\uffff\1\3\3\uffff\1\3\1\uffff\2\3\1\uffff\1\3\3\uffff\2\3\3\uffff"+
			"\3\3\6\uffff\6\3\1\uffff\2\3\3\uffff\1\3\1\uffff\3\3\5\uffff\1\3\1\1"+
			"\3\uffff\2\3\3\uffff\3\3\1\uffff\1\3\4\uffff\5\3\2\uffff\3\3\1\uffff"+
			"\2\3\2\uffff\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\5\3\3\uffff\1\3\2\uffff"+
			"\7\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\1\1",
			"",
			""
	};

	static final short[] DFA490_eot = DFA.unpackEncodedString(DFA490_eotS);
	static final short[] DFA490_eof = DFA.unpackEncodedString(DFA490_eofS);
	static final char[] DFA490_min = DFA.unpackEncodedStringToUnsignedChars(DFA490_minS);
	static final char[] DFA490_max = DFA.unpackEncodedStringToUnsignedChars(DFA490_maxS);
	static final short[] DFA490_accept = DFA.unpackEncodedString(DFA490_acceptS);
	static final short[] DFA490_special = DFA.unpackEncodedString(DFA490_specialS);
	static final short[][] DFA490_transition;

	static {
		int numStates = DFA490_transitionS.length;
		DFA490_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA490_transition[i] = DFA.unpackEncodedString(DFA490_transitionS[i]);
		}
	}

	protected class DFA490 extends DFA {

		public DFA490(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 490;
			this.eot = DFA490_eot;
			this.eof = DFA490_eof;
			this.min = DFA490_min;
			this.max = DFA490_max;
			this.accept = DFA490_accept;
			this.special = DFA490_special;
			this.transition = DFA490_transition;
		}
		@Override
		public String getDescription() {
			return "1420:102: ( ( ws )? COMMA )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA495_eotS =
		"\4\uffff";
	static final String DFA495_eofS =
		"\4\uffff";
	static final String DFA495_minS =
		"\2\24\2\uffff";
	static final String DFA495_maxS =
		"\2\u0099\2\uffff";
	static final String DFA495_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA495_specialS =
		"\1\0\1\1\2\uffff}>";
	static final String[] DFA495_transitionS = {
			"\1\2\1\1\75\uffff\1\1\105\uffff\1\1",
			"\1\2\1\1\35\uffff\1\3\37\uffff\1\1\105\uffff\1\1",
			"",
			""
	};

	static final short[] DFA495_eot = DFA.unpackEncodedString(DFA495_eotS);
	static final short[] DFA495_eof = DFA.unpackEncodedString(DFA495_eofS);
	static final char[] DFA495_min = DFA.unpackEncodedStringToUnsignedChars(DFA495_minS);
	static final char[] DFA495_max = DFA.unpackEncodedStringToUnsignedChars(DFA495_maxS);
	static final short[] DFA495_accept = DFA.unpackEncodedString(DFA495_acceptS);
	static final short[] DFA495_special = DFA.unpackEncodedString(DFA495_specialS);
	static final short[][] DFA495_transition;

	static {
		int numStates = DFA495_transitionS.length;
		DFA495_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA495_transition[i] = DFA.unpackEncodedString(DFA495_transitionS[i]);
		}
	}

	protected class DFA495 extends DFA {

		public DFA495(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 495;
			this.eot = DFA495_eot;
			this.eof = DFA495_eof;
			this.min = DFA495_min;
			this.max = DFA495_max;
			this.accept = DFA495_accept;
			this.special = DFA495_special;
			this.transition = DFA495_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1425:17: ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? cp_variable )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA495_0 = input.LA(1);
						 
						int index495_0 = input.index();
						input.rewind();
						s = -1;
						if ( (LA495_0==COMMENT||LA495_0==NL||LA495_0==WS) ) {s = 1;}
						else if ( (LA495_0==COMMA) && (synpred54_Css3())) {s = 2;}
						 
						input.seek(index495_0);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA495_1 = input.LA(1);
						 
						int index495_1 = input.index();
						input.rewind();
						s = -1;
						if ( (LA495_1==IDENT) ) {s = 3;}
						else if ( (LA495_1==COMMENT||LA495_1==NL||LA495_1==WS) ) {s = 1;}
						else if ( (LA495_1==COMMA) && (synpred54_Css3())) {s = 2;}
						 
						input.seek(index495_1);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 495, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA515_eotS =
		"\4\uffff";
	static final String DFA515_eofS =
		"\4\uffff";
	static final String DFA515_minS =
		"\2\25\2\uffff";
	static final String DFA515_maxS =
		"\2\u0099\2\uffff";
	static final String DFA515_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA515_specialS =
		"\4\uffff}>";
	static final String[] DFA515_transitionS = {
			"\1\1\36\uffff\1\2\36\uffff\1\1\57\uffff\1\3\25\uffff\1\1",
			"\1\1\36\uffff\1\2\36\uffff\1\1\57\uffff\1\3\25\uffff\1\1",
			"",
			""
	};

	static final short[] DFA515_eot = DFA.unpackEncodedString(DFA515_eotS);
	static final short[] DFA515_eof = DFA.unpackEncodedString(DFA515_eofS);
	static final char[] DFA515_min = DFA.unpackEncodedStringToUnsignedChars(DFA515_minS);
	static final char[] DFA515_max = DFA.unpackEncodedStringToUnsignedChars(DFA515_maxS);
	static final short[] DFA515_accept = DFA.unpackEncodedString(DFA515_acceptS);
	static final short[] DFA515_special = DFA.unpackEncodedString(DFA515_specialS);
	static final short[][] DFA515_transition;

	static {
		int numStates = DFA515_transitionS.length;
		DFA515_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA515_transition[i] = DFA.unpackEncodedString(DFA515_transitionS[i]);
		}
	}

	protected class DFA515 extends DFA {

		public DFA515(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 515;
			this.eot = DFA515_eot;
			this.eof = DFA515_eof;
			this.min = DFA515_min;
			this.max = DFA515_max;
			this.accept = DFA515_accept;
			this.special = DFA515_special;
			this.transition = DFA515_transition;
		}
		@Override
		public String getDescription() {
			return "421:22: ( ( ws )? IMPORTANT_SYM )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA522_eotS =
		"\6\uffff";
	static final String DFA522_eofS =
		"\6\uffff";
	static final String DFA522_minS =
		"\1\7\1\25\1\uffff\1\7\2\uffff";
	static final String DFA522_maxS =
		"\1\u0089\1\u0099\1\uffff\1\u0099\2\uffff";
	static final String DFA522_acceptS =
		"\2\uffff\1\3\1\uffff\1\1\1\2";
	static final String DFA522_specialS =
		"\6\uffff}>";
	static final String[] DFA522_transitionS = {
			"\1\2\13\uffff\1\2\11\uffff\3\2\12\uffff\2\2\2\uffff\2\2\3\uffff\1\2\11"+
			"\uffff\1\2\5\uffff\1\2\7\uffff\1\2\23\uffff\2\2\13\uffff\1\1\10\uffff"+
			"\1\2\17\uffff\1\2\3\uffff\1\2",
			"\1\3\46\uffff\1\4\26\uffff\1\3\105\uffff\1\3",
			"",
			"\1\4\13\uffff\1\4\1\uffff\1\3\7\uffff\3\4\12\uffff\2\4\2\uffff\2\4\3"+
			"\uffff\1\4\10\uffff\2\4\5\uffff\1\4\4\uffff\1\5\2\uffff\1\4\7\uffff\1"+
			"\3\13\uffff\2\4\24\uffff\1\4\17\uffff\1\4\3\uffff\1\4\17\uffff\1\3",
			"",
			""
	};

	static final short[] DFA522_eot = DFA.unpackEncodedString(DFA522_eotS);
	static final short[] DFA522_eof = DFA.unpackEncodedString(DFA522_eofS);
	static final char[] DFA522_min = DFA.unpackEncodedStringToUnsignedChars(DFA522_minS);
	static final char[] DFA522_max = DFA.unpackEncodedStringToUnsignedChars(DFA522_maxS);
	static final short[] DFA522_accept = DFA.unpackEncodedString(DFA522_acceptS);
	static final short[] DFA522_special = DFA.unpackEncodedString(DFA522_specialS);
	static final short[][] DFA522_transition;

	static {
		int numStates = DFA522_transitionS.length;
		DFA522_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA522_transition[i] = DFA.unpackEncodedString(DFA522_transitionS[i]);
		}
	}

	protected class DFA522 extends DFA {

		public DFA522(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 522;
			this.eot = DFA522_eot;
			this.eof = DFA522_eof;
			this.min = DFA522_min;
			this.max = DFA522_max;
			this.accept = DFA522_accept;
			this.special = DFA522_special;
			this.transition = DFA522_transition;
		}
		@Override
		public String getDescription() {
			return "423:8: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA517_eotS =
		"\4\uffff";
	static final String DFA517_eofS =
		"\4\uffff";
	static final String DFA517_minS =
		"\1\25\1\7\2\uffff";
	static final String DFA517_maxS =
		"\2\u0099\2\uffff";
	static final String DFA517_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA517_specialS =
		"\4\uffff}>";
	static final String[] DFA517_transitionS = {
			"\1\1\46\uffff\1\2\26\uffff\1\1\105\uffff\1\1",
			"\1\3\13\uffff\1\3\1\uffff\1\1\7\uffff\3\3\12\uffff\2\3\2\uffff\2\3\3"+
			"\uffff\1\3\10\uffff\1\2\1\3\5\uffff\1\3\7\uffff\1\3\7\uffff\1\1\13\uffff"+
			"\2\3\24\uffff\1\3\17\uffff\1\3\3\uffff\1\3\17\uffff\1\1",
			"",
			""
	};

	static final short[] DFA517_eot = DFA.unpackEncodedString(DFA517_eotS);
	static final short[] DFA517_eof = DFA.unpackEncodedString(DFA517_eofS);
	static final char[] DFA517_min = DFA.unpackEncodedStringToUnsignedChars(DFA517_minS);
	static final char[] DFA517_max = DFA.unpackEncodedStringToUnsignedChars(DFA517_maxS);
	static final short[] DFA517_accept = DFA.unpackEncodedString(DFA517_acceptS);
	static final short[] DFA517_special = DFA.unpackEncodedString(DFA517_specialS);
	static final short[][] DFA517_transition;

	static {
		int numStates = DFA517_transitionS.length;
		DFA517_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA517_transition[i] = DFA.unpackEncodedString(DFA517_transitionS[i]);
		}
	}

	protected class DFA517 extends DFA {

		public DFA517(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 517;
			this.eot = DFA517_eot;
			this.eof = DFA517_eof;
			this.min = DFA517_min;
			this.max = DFA517_max;
			this.accept = DFA517_accept;
			this.special = DFA517_special;
			this.transition = DFA517_transition;
		}
		@Override
		public String getDescription() {
			return "423:23: ( ws selectorsGroup )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA541_eotS =
		"\6\uffff";
	static final String DFA541_eofS =
		"\6\uffff";
	static final String DFA541_minS =
		"\1\7\1\25\1\uffff\1\7\2\uffff";
	static final String DFA541_maxS =
		"\1\u0089\1\u0099\1\uffff\1\u0099\2\uffff";
	static final String DFA541_acceptS =
		"\2\uffff\1\3\1\uffff\1\1\1\2";
	static final String DFA541_specialS =
		"\6\uffff}>";
	static final String[] DFA541_transitionS = {
			"\1\2\13\uffff\1\2\11\uffff\3\2\12\uffff\2\2\2\uffff\2\2\3\uffff\1\2\11"+
			"\uffff\1\2\5\uffff\1\2\7\uffff\1\2\23\uffff\2\2\13\uffff\1\1\10\uffff"+
			"\1\2\17\uffff\1\2\3\uffff\1\2",
			"\1\3\46\uffff\1\4\26\uffff\1\3\105\uffff\1\3",
			"",
			"\1\4\13\uffff\1\4\1\uffff\1\3\7\uffff\3\4\12\uffff\2\4\2\uffff\2\4\3"+
			"\uffff\1\4\10\uffff\2\4\5\uffff\1\4\4\uffff\1\5\2\uffff\1\4\7\uffff\1"+
			"\3\13\uffff\2\4\24\uffff\1\4\17\uffff\1\4\3\uffff\1\4\17\uffff\1\3",
			"",
			""
	};

	static final short[] DFA541_eot = DFA.unpackEncodedString(DFA541_eotS);
	static final short[] DFA541_eof = DFA.unpackEncodedString(DFA541_eofS);
	static final char[] DFA541_min = DFA.unpackEncodedStringToUnsignedChars(DFA541_minS);
	static final char[] DFA541_max = DFA.unpackEncodedStringToUnsignedChars(DFA541_maxS);
	static final short[] DFA541_accept = DFA.unpackEncodedString(DFA541_acceptS);
	static final short[] DFA541_special = DFA.unpackEncodedString(DFA541_specialS);
	static final short[][] DFA541_transition;

	static {
		int numStates = DFA541_transitionS.length;
		DFA541_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA541_transition[i] = DFA.unpackEncodedString(DFA541_transitionS[i]);
		}
	}

	protected class DFA541 extends DFA {

		public DFA541(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 541;
			this.eot = DFA541_eot;
			this.eof = DFA541_eof;
			this.min = DFA541_min;
			this.max = DFA541_max;
			this.accept = DFA541_accept;
			this.special = DFA541_special;
			this.transition = DFA541_transition;
		}
		@Override
		public String getDescription() {
			return "773:8: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA536_eotS =
		"\4\uffff";
	static final String DFA536_eofS =
		"\4\uffff";
	static final String DFA536_minS =
		"\1\25\1\7\2\uffff";
	static final String DFA536_maxS =
		"\2\u0099\2\uffff";
	static final String DFA536_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA536_specialS =
		"\4\uffff}>";
	static final String[] DFA536_transitionS = {
			"\1\1\46\uffff\1\2\26\uffff\1\1\105\uffff\1\1",
			"\1\3\13\uffff\1\3\1\uffff\1\1\7\uffff\3\3\12\uffff\2\3\2\uffff\2\3\3"+
			"\uffff\1\3\10\uffff\1\2\1\3\5\uffff\1\3\7\uffff\1\3\7\uffff\1\1\13\uffff"+
			"\2\3\24\uffff\1\3\17\uffff\1\3\3\uffff\1\3\17\uffff\1\1",
			"",
			""
	};

	static final short[] DFA536_eot = DFA.unpackEncodedString(DFA536_eotS);
	static final short[] DFA536_eof = DFA.unpackEncodedString(DFA536_eofS);
	static final char[] DFA536_min = DFA.unpackEncodedStringToUnsignedChars(DFA536_minS);
	static final char[] DFA536_max = DFA.unpackEncodedStringToUnsignedChars(DFA536_maxS);
	static final short[] DFA536_accept = DFA.unpackEncodedString(DFA536_acceptS);
	static final short[] DFA536_special = DFA.unpackEncodedString(DFA536_specialS);
	static final short[][] DFA536_transition;

	static {
		int numStates = DFA536_transitionS.length;
		DFA536_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA536_transition[i] = DFA.unpackEncodedString(DFA536_transitionS[i]);
		}
	}

	protected class DFA536 extends DFA {

		public DFA536(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 536;
			this.eot = DFA536_eot;
			this.eof = DFA536_eof;
			this.min = DFA536_min;
			this.max = DFA536_max;
			this.accept = DFA536_accept;
			this.special = DFA536_special;
			this.transition = DFA536_transition;
		}
		@Override
		public String getDescription() {
			return "773:23: ( ws selectorsGroup )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA552_eotS =
		"\5\uffff";
	static final String DFA552_eofS =
		"\5\uffff";
	static final String DFA552_minS =
		"\2\5\3\uffff";
	static final String DFA552_maxS =
		"\2\u0099\3\uffff";
	static final String DFA552_acceptS =
		"\2\uffff\1\2\1\3\1\1";
	static final String DFA552_specialS =
		"\5\uffff}>";
	static final String[] DFA552_transitionS = {
			"\3\3\2\uffff\5\3\3\uffff\1\3\1\uffff\1\2\1\1\1\uffff\1\3\6\uffff\1\3"+
			"\2\uffff\1\3\3\uffff\1\3\1\uffff\2\3\1\uffff\1\3\3\uffff\2\3\3\uffff"+
			"\1\3\1\uffff\1\3\7\uffff\5\3\1\uffff\2\3\5\uffff\3\3\5\uffff\1\3\1\1"+
			"\4\uffff\1\3\3\uffff\3\3\1\uffff\1\3\4\uffff\5\3\2\uffff\3\3\1\uffff"+
			"\2\3\2\uffff\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\5\3\1\uffff\1\2\1\uffff"+
			"\1\3\2\uffff\7\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\1\1",
			"\3\4\2\uffff\5\4\3\uffff\1\4\1\uffff\1\2\1\1\1\uffff\1\4\6\uffff\1\4"+
			"\2\uffff\1\4\3\uffff\1\4\1\uffff\2\4\1\uffff\1\4\3\uffff\2\4\3\uffff"+
			"\1\4\1\uffff\1\4\7\uffff\5\4\1\uffff\2\4\5\uffff\3\4\5\uffff\1\4\1\1"+
			"\4\uffff\1\4\3\uffff\3\4\1\uffff\1\4\4\uffff\5\4\2\uffff\3\4\1\uffff"+
			"\2\4\2\uffff\1\4\1\uffff\3\4\1\uffff\3\4\1\uffff\5\4\1\uffff\1\2\1\uffff"+
			"\1\4\2\uffff\7\4\2\uffff\2\4\2\uffff\1\4\1\uffff\1\4\1\1",
			"",
			"",
			""
	};

	static final short[] DFA552_eot = DFA.unpackEncodedString(DFA552_eotS);
	static final short[] DFA552_eof = DFA.unpackEncodedString(DFA552_eofS);
	static final char[] DFA552_min = DFA.unpackEncodedStringToUnsignedChars(DFA552_minS);
	static final char[] DFA552_max = DFA.unpackEncodedStringToUnsignedChars(DFA552_maxS);
	static final short[] DFA552_accept = DFA.unpackEncodedString(DFA552_acceptS);
	static final short[] DFA552_special = DFA.unpackEncodedString(DFA552_specialS);
	static final short[][] DFA552_transition;

	static {
		int numStates = DFA552_transitionS.length;
		DFA552_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA552_transition[i] = DFA.unpackEncodedString(DFA552_transitionS[i]);
		}
	}

	protected class DFA552 extends DFA {

		public DFA552(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 552;
			this.eot = DFA552_eot;
			this.eof = DFA552_eof;
			this.min = DFA552_min;
			this.max = DFA552_max;
			this.accept = DFA552_accept;
			this.special = DFA552_special;
			this.transition = DFA552_transition;
		}
		@Override
		public String getDescription() {
			return "1025:15: ( ws | ( ( ws )? operator ( ws )? ) |)";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA557_eotS =
		"\5\uffff";
	static final String DFA557_eofS =
		"\5\uffff";
	static final String DFA557_minS =
		"\2\5\3\uffff";
	static final String DFA557_maxS =
		"\2\u0099\3\uffff";
	static final String DFA557_acceptS =
		"\2\uffff\1\2\1\3\1\1";
	static final String DFA557_specialS =
		"\5\uffff}>";
	static final String[] DFA557_transitionS = {
			"\3\3\2\uffff\5\3\3\uffff\1\3\2\uffff\1\1\1\uffff\1\3\6\uffff\1\3\2\uffff"+
			"\1\3\3\uffff\1\3\1\uffff\2\3\1\uffff\1\3\3\uffff\2\3\3\uffff\1\3\1\uffff"+
			"\1\3\7\uffff\5\3\1\uffff\2\3\5\uffff\3\3\5\uffff\1\3\1\1\4\uffff\1\3"+
			"\3\uffff\3\3\1\uffff\1\3\4\uffff\5\3\2\uffff\3\3\1\uffff\2\3\2\uffff"+
			"\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\5\3\1\uffff\1\2\1\uffff\1\3\2\uffff"+
			"\7\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\1\1",
			"\3\4\2\uffff\5\4\3\uffff\1\4\2\uffff\1\1\1\uffff\1\4\6\uffff\1\4\2\uffff"+
			"\1\4\3\uffff\1\4\1\uffff\2\4\1\uffff\1\4\3\uffff\2\4\3\uffff\1\4\1\uffff"+
			"\1\4\7\uffff\5\4\1\uffff\2\4\5\uffff\3\4\5\uffff\1\4\1\1\4\uffff\1\4"+
			"\3\uffff\3\4\1\uffff\1\4\4\uffff\5\4\2\uffff\3\4\1\uffff\2\4\2\uffff"+
			"\1\4\1\uffff\3\4\1\uffff\3\4\1\uffff\5\4\1\uffff\1\2\1\uffff\1\4\2\uffff"+
			"\7\4\2\uffff\2\4\2\uffff\1\4\1\uffff\1\4\1\1",
			"",
			"",
			""
	};

	static final short[] DFA557_eot = DFA.unpackEncodedString(DFA557_eotS);
	static final short[] DFA557_eof = DFA.unpackEncodedString(DFA557_eofS);
	static final char[] DFA557_min = DFA.unpackEncodedStringToUnsignedChars(DFA557_minS);
	static final char[] DFA557_max = DFA.unpackEncodedStringToUnsignedChars(DFA557_maxS);
	static final short[] DFA557_accept = DFA.unpackEncodedString(DFA557_acceptS);
	static final short[] DFA557_special = DFA.unpackEncodedString(DFA557_specialS);
	static final short[][] DFA557_transition;

	static {
		int numStates = DFA557_transitionS.length;
		DFA557_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA557_transition[i] = DFA.unpackEncodedString(DFA557_transitionS[i]);
		}
	}

	protected class DFA557 extends DFA {

		public DFA557(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 557;
			this.eot = DFA557_eot;
			this.eof = DFA557_eof;
			this.min = DFA557_min;
			this.max = DFA557_max;
			this.accept = DFA557_accept;
			this.special = DFA557_special;
			this.transition = DFA557_transition;
		}
		@Override
		public String getDescription() {
			return "1111:21: ( ws | ( ( ws )? SOLIDUS ( ws )? ) |)";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	public static final BitSet FOLLOW_ws_in_styleSheet102 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDF3738190041C09L,0x000000000100FAAFL});
	public static final BitSet FOLLOW_charSet_in_styleSheet112 = new BitSet(new long[]{0xE828CC80E0AC7CC0L,0xDDF37381900C1C09L,0x000000000300FAAFL});
	public static final BitSet FOLLOW_ws_in_styleSheet114 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDF3738190041C09L,0x000000000100FAAFL});
	public static final BitSet FOLLOW_layerStatement_in_styleSheet130 = new BitSet(new long[]{0xE828CC80E0AC7CC0L,0xDDF37381900C1C09L,0x000000000300FAAFL});
	public static final BitSet FOLLOW_ws_in_styleSheet132 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDF3738190041C09L,0x000000000100FAAFL});
	public static final BitSet FOLLOW_imports_in_styleSheet146 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDF3738190041C09L,0x000000000100FAAFL});
	public static final BitSet FOLLOW_namespaces_in_styleSheet157 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDF3738190041C09L,0x000000000100FAAFL});
	public static final BitSet FOLLOW_body_in_styleSheet168 = new BitSet(new long[]{0x0000000000000000L});
	public static final BitSet FOLLOW_EOF_in_styleSheet176 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespace_in_namespaces193 = new BitSet(new long[]{0x0000000000200002L,0x00000000000C0000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_namespaces195 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
	public static final BitSet FOLLOW_NAMESPACE_SYM_in_namespace211 = new BitSet(new long[]{0x0008000000200000L,0x0000000000080000L,0x0000000002080040L});
	public static final BitSet FOLLOW_ws_in_namespace213 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0000000000080040L});
	public static final BitSet FOLLOW_namespacePrefixName_in_namespace217 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002080040L});
	public static final BitSet FOLLOW_ws_in_namespace219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080040L});
	public static final BitSet FOLLOW_resourceIdentifier_in_namespace224 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000008L});
	public static final BitSet FOLLOW_ws_in_namespace226 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SEMI_in_namespace229 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_namespacePrefixName242 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CHARSET_SYM_in_charSet276 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000040L});
	public static final BitSet FOLLOW_ws_in_charSet278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_charSetValue_in_charSet281 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000008L});
	public static final BitSet FOLLOW_ws_in_charSet283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SEMI_in_charSet286 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STRING_in_charSetValue300 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_importItem_in_imports328 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000008L});
	public static final BitSet FOLLOW_ws_in_imports330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SEMI_in_imports333 = new BitSet(new long[]{0x0020000000200002L,0x8080000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_imports335 = new BitSet(new long[]{0x0020000000000002L,0x8080000000000000L});
	public static final BitSet FOLLOW_sass_use_in_imports370 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000008L});
	public static final BitSet FOLLOW_ws_in_imports372 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SEMI_in_imports375 = new BitSet(new long[]{0x0020000000200002L,0x8080000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_imports377 = new BitSet(new long[]{0x0020000000000002L,0x8080000000000000L});
	public static final BitSet FOLLOW_sass_forward_in_imports412 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000008L});
	public static final BitSet FOLLOW_ws_in_imports414 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SEMI_in_imports417 = new BitSet(new long[]{0x0020000000200002L,0x8080000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_imports419 = new BitSet(new long[]{0x0020000000000002L,0x8080000000000000L});
	public static final BitSet FOLLOW_IMPORT_SYM_in_importItem455 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002080040L});
	public static final BitSet FOLLOW_ws_in_importItem457 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080040L});
	public static final BitSet FOLLOW_resourceIdentifier_in_importItem460 = new BitSet(new long[]{0xC028848000A47C42L,0xDDD37380108C1501L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_importItem462 = new BitSet(new long[]{0xC028848000A47C42L,0xDDD37380108C1501L,0x000000000300F807L});
	public static final BitSet FOLLOW_importLayer_in_importItem465 = new BitSet(new long[]{0xC028848000A47C42L,0xDDD37380108C1501L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_importItem476 = new BitSet(new long[]{0xC028848000847C40L,0xDDD3738010841501L,0x000000000100F807L});
	public static final BitSet FOLLOW_mediaQueryList_in_importItem479 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IMPORT_SYM_in_importItem512 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002080040L});
	public static final BitSet FOLLOW_ws_in_importItem514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080040L});
	public static final BitSet FOLLOW_resourceIdentifier_in_importItem517 = new BitSet(new long[]{0xC028848000B47C42L,0xDDD37380108C1501L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_importItem520 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_importItem523 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002080040L});
	public static final BitSet FOLLOW_ws_in_importItem525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080040L});
	public static final BitSet FOLLOW_resourceIdentifier_in_importItem528 = new BitSet(new long[]{0xC028848000B47C42L,0xDDD37380108C1501L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_importItem532 = new BitSet(new long[]{0xC028848000A47C42L,0xDDD37380108C1501L,0x000000000300F807L});
	public static final BitSet FOLLOW_importLayer_in_importItem535 = new BitSet(new long[]{0xC028848000A47C42L,0xDDD37380108C1501L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_importItem546 = new BitSet(new long[]{0xC028848000847C40L,0xDDD3738010841501L,0x000000000100F807L});
	public static final BitSet FOLLOW_mediaQueryList_in_importItem549 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IMPORT_SYM_in_importItem573 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002080040L});
	public static final BitSet FOLLOW_ws_in_importItem575 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L,0x0000000000080040L});
	public static final BitSet FOLLOW_LPAREN_in_importItem579 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_less_import_types_in_importItem581 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_importItem583 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002080040L});
	public static final BitSet FOLLOW_ws_in_importItem585 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080040L});
	public static final BitSet FOLLOW_resourceIdentifier_in_importItem590 = new BitSet(new long[]{0xC028848000A47C42L,0xDDD37380108C1501L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_importItem592 = new BitSet(new long[]{0xC028848000A47C42L,0xDDD37380108C1501L,0x000000000300F807L});
	public static final BitSet FOLLOW_importLayer_in_importItem595 = new BitSet(new long[]{0xC028848000A47C42L,0xDDD37380108C1501L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_importItem606 = new BitSet(new long[]{0xC028848000847C40L,0xDDD3738010841501L,0x000000000100F807L});
	public static final BitSet FOLLOW_mediaQueryList_in_importItem609 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_importLayer634 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_importLayer637 = new BitSet(new long[]{0x0008000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_importLayer639 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_layerName_in_importLayer642 = new BitSet(new long[]{0x0000000000200000L,0x0000040000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_importLayer644 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_importLayer647 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_USE_in_sass_use674 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_use676 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080040L});
	public static final BitSet FOLLOW_resourceIdentifier_in_sass_use678 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_use681 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_sass_use_as_in_sass_use683 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_use688 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_sass_use_with_in_sass_use690 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_sass_use_as715 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_use_as717 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_use_as719 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_sass_use_with742 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_use_with744 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_sass_use_with747 = new BitSet(new long[]{0xC028008000A47C40L,0xDDD37380100C1401L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_sass_use_with749 = new BitSet(new long[]{0xC028008000847C40L,0xDDD3738010041401L,0x000000000100F807L});
	public static final BitSet FOLLOW_sass_use_with_declaration_in_sass_use_with752 = new BitSet(new long[]{0x0000000000300000L,0x0000040000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_use_with756 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_sass_use_with759 = new BitSet(new long[]{0xC028008000A47C40L,0xDDD37380100C1401L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_sass_use_with761 = new BitSet(new long[]{0xC028008000847C40L,0xDDD3738010041401L,0x000000000100F807L});
	public static final BitSet FOLLOW_sass_use_with_declaration_in_sass_use_with764 = new BitSet(new long[]{0x0000000000300000L,0x0000040000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_use_with769 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_sass_use_with772 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_sass_use_with_declaration793 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_use_with_declaration795 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_sass_use_with_declaration798 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_sass_use_with_declaration800 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_expression_in_sass_use_with_declaration803 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_FORWARD_in_sass_forward829 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080040L});
	public static final BitSet FOLLOW_resourceIdentifier_in_sass_forward833 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward837 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_sass_forward_hide_in_sass_forward841 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_sass_forward_show_in_sass_forward846 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward854 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_sass_forward_as_in_sass_forward856 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward863 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_sass_forward_with_in_sass_forward865 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_sass_forward_as890 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward_as892 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_forward_as894 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_sass_forward_with917 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward_with919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_sass_forward_with922 = new BitSet(new long[]{0xC028008000A47C40L,0xDDD37380100C1401L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_sass_forward_with924 = new BitSet(new long[]{0xC028008000847C40L,0xDDD3738010041401L,0x000000000100F807L});
	public static final BitSet FOLLOW_sass_forward_with_declaration_in_sass_forward_with927 = new BitSet(new long[]{0x0000000000300000L,0x0000040000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward_with931 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_sass_forward_with934 = new BitSet(new long[]{0xC028008000A47C40L,0xDDD37380100C1401L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_sass_forward_with936 = new BitSet(new long[]{0xC028008000847C40L,0xDDD3738010041401L,0x000000000100F807L});
	public static final BitSet FOLLOW_sass_forward_with_declaration_in_sass_forward_with939 = new BitSet(new long[]{0x0000000000300000L,0x0000040000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward_with944 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_sass_forward_with947 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_sass_forward_with_declaration968 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward_with_declaration970 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_sass_forward_with_declaration973 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_sass_forward_with_declaration975 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_expression_in_sass_forward_with_declaration978 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_sass_forward_hide1001 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward_hide1003 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_forward_hide1005 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward_hide1008 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_sass_forward_hide1011 = new BitSet(new long[]{0x0008000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward_hide1013 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_forward_hide1016 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_forward_show1041 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward_show1043 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_forward_show1045 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward_show1048 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_sass_forward_show1051 = new BitSet(new long[]{0x0008000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_forward_show1053 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_forward_show1056 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_MEDIA_SYM_in_media1075 = new BitSet(new long[]{0xC028848000A47C40L,0xDDD37380108C1501L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_media1077 = new BitSet(new long[]{0xC028848000847C40L,0xDDD3738010841501L,0x000000000100F807L});
	public static final BitSet FOLLOW_mediaQueryList_in_media1095 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_media1103 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_media1110 = new BitSet(new long[]{0xE028CC80E0AC7CC0L,0xDDF37389900C1C09L,0x000000000340FAAFL});
	public static final BitSet FOLLOW_ws_in_media1112 = new BitSet(new long[]{0xE028CC80E08C7CC0L,0xDDF3738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_syncToFollow_in_media1115 = new BitSet(new long[]{0xE028CC80E08C7CC0L,0xDDF3738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_mediaBody_in_media1125 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_RBRACE_in_media1132 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_mediaBodyItem_in_mediaBody1166 = new BitSet(new long[]{0xE028CC80E0AC7CC2L,0xDDF37381900C1C09L,0x000000000340FAAFL});
	public static final BitSet FOLLOW_ws_in_mediaBody1176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SEMI_in_mediaBody1179 = new BitSet(new long[]{0xE028CC80E0AC7CC2L,0xDDF37381900C1C09L,0x000000000340FAAFL});
	public static final BitSet FOLLOW_ws_in_mediaBody1183 = new BitSet(new long[]{0xE028CC80E08C7CC2L,0xDDF3738190041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_SEMI_in_mediaBody1210 = new BitSet(new long[]{0xE028CC80E0AC7CC2L,0xDDF37381900C1C09L,0x000000000340FAAFL});
	public static final BitSet FOLLOW_ws_in_mediaBody1212 = new BitSet(new long[]{0xE028CC80E08C7CC2L,0xDDF3738190041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_sass_extend_in_mediaBody1231 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000008L});
	public static final BitSet FOLLOW_ws_in_mediaBody1234 = new BitSet(new long[]{0xE028CC80E08C7CC2L,0xDDF3738190041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_SEMI_in_mediaBody1239 = new BitSet(new long[]{0xE028CC80E08C7CC2L,0xDDF3738190041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_cp_mixin_declaration_in_mediaBodyItem1313 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_mediaBodyItem1346 = new BitSet(new long[]{0x0010000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_mediaBodyItem1349 = new BitSet(new long[]{0x0010000000000000L});
	public static final BitSet FOLLOW_IMPORTANT_SYM_in_mediaBodyItem1352 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_mediaBodyItem1369 = new BitSet(new long[]{0x0010000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_mediaBodyItem1372 = new BitSet(new long[]{0x0010000000000000L});
	public static final BitSet FOLLOW_IMPORTANT_SYM_in_mediaBodyItem1375 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rule_in_mediaBodyItem1440 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_propertyDeclaration_in_mediaBodyItem1452 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_debug_in_mediaBodyItem1462 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_control_in_mediaBodyItem1472 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_content_in_mediaBodyItem1482 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_importItem_in_mediaBodyItem1492 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rule_in_mediaBodyItem1500 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_page_in_mediaBodyItem1508 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fontFace_in_mediaBodyItem1516 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_vendorAtRule_in_mediaBodyItem1524 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_media_in_mediaBodyItem1537 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_supportsAtRule_in_mediaBodyItem1545 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_mediaQuery_in_mediaQueryList1559 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_mediaQueryList1571 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_mediaQueryList1574 = new BitSet(new long[]{0xC028848000A47C40L,0xDDD37380108C1501L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_mediaQueryList1576 = new BitSet(new long[]{0xC028848000847C40L,0xDDD3738010841501L,0x000000000100F807L});
	public static final BitSet FOLLOW_mediaQuery_in_mediaQueryList1579 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_mediaQueryOperator_in_mediaQuery1598 = new BitSet(new long[]{0x0008840000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_mediaQuery1600 = new BitSet(new long[]{0x0008840000000000L});
	public static final BitSet FOLLOW_mediaType_in_mediaQuery1607 = new BitSet(new long[]{0x0008000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_mediaQuery1618 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_key_and_in_mediaQuery1621 = new BitSet(new long[]{0x0000800000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_mediaQuery1623 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_mediaExpression_in_mediaQuery1626 = new BitSet(new long[]{0x0008000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_mediaExpression_in_mediaQuery1637 = new BitSet(new long[]{0x0008000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_mediaQuery1648 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_key_and_in_mediaQuery1651 = new BitSet(new long[]{0x0000800000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_mediaQuery1653 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_mediaExpression_in_mediaQuery1656 = new BitSet(new long[]{0x0008000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_cp_variable_in_mediaQuery1669 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_key_only_in_mediaQueryOperator1681 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_in_mediaQueryOperator1685 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_mediaType1697 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GEN_in_mediaType1701 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_mediaType1707 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_mediaExpression1732 = new BitSet(new long[]{0xC028848000A47C40L,0xDDD37380100C1401L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_mediaExpression1734 = new BitSet(new long[]{0xC028848000847C40L,0xDDD3738010041401L,0x000000000100F807L});
	public static final BitSet FOLLOW_mediaFeature_in_mediaExpression1737 = new BitSet(new long[]{0x0000000000280000L,0x0000040000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_mediaFeatureValue_in_mediaExpression1739 = new BitSet(new long[]{0x0000000000200000L,0x0000040000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_mediaExpression1742 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_mediaExpression1745 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_mediaExpression1762 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_mediaFeatureValue1783 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_mediaFeatureValue1786 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_mediaFeatureValue1788 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_expression_in_mediaFeatureValue1807 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_mediaFeatureValue1827 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_mediaFeature1847 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GEN_in_mediaFeature1851 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_mediaFeature1859 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_mediaFeature1863 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bodyItem_in_body1897 = new BitSet(new long[]{0xE828CC80E0AC7CC2L,0xDDF37381900C1C09L,0x000000000300FAAFL});
	public static final BitSet FOLLOW_ws_in_body1907 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SEMI_in_body1910 = new BitSet(new long[]{0xE828CC80E0AC7CC2L,0xDDF37381900C1C09L,0x000000000300FAAFL});
	public static final BitSet FOLLOW_ws_in_body1914 = new BitSet(new long[]{0xE828CC80E08C7CC2L,0xDDF3738190041C09L,0x000000000100FAAFL});
	public static final BitSet FOLLOW_SEMI_in_body1941 = new BitSet(new long[]{0xE828CC80E0AC7CC2L,0xDDF37381900C1C09L,0x000000000300FAAFL});
	public static final BitSet FOLLOW_ws_in_body1943 = new BitSet(new long[]{0xE828CC80E08C7CC2L,0xDDF3738190041C09L,0x000000000100FAAFL});
	public static final BitSet FOLLOW_cp_mixin_declaration_in_bodyItem2023 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_bodyItem2056 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_bodyItem2075 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rule_in_bodyItem2084 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_declaration_in_bodyItem2106 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_map_in_bodyItem2123 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_at_rule_in_bodyItem2135 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_importItem_in_bodyItem2158 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_debug_in_bodyItem2172 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_control_in_bodyItem2186 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_function_declaration_in_bodyItem2200 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SUPPORTS_SYM_in_supportsAtRule2220 = new BitSet(new long[]{0x0000000000200000L,0x0000000000880100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_supportsAtRule2222 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800100L});
	public static final BitSet FOLLOW_supportsCondition_in_supportsAtRule2225 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_supportsAtRule2227 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_supportsAtRule2230 = new BitSet(new long[]{0xE028CC80E0AC7CC0L,0xDDF37389900C1C09L,0x000000000340FAAFL});
	public static final BitSet FOLLOW_ws_in_supportsAtRule2232 = new BitSet(new long[]{0xE028CC80E08C7CC0L,0xDDF3738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_syncToFollow_in_supportsAtRule2235 = new BitSet(new long[]{0xE028CC80E08C7CC0L,0xDDF3738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_mediaBody_in_supportsAtRule2237 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_RBRACE_in_supportsAtRule2240 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_in_supportsCondition2253 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_supportsCondition2255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_supportsInParens_in_supportsCondition2257 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_supportsInParens_in_supportsCondition2262 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_supportsCondition2265 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_supportsWithOperator_in_supportsCondition2267 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_supportsConjunction_in_supportsWithOperator2295 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_supportsWithOperator2298 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_supportsConjunction_in_supportsWithOperator2300 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_supportsDisjunction_in_supportsWithOperator2314 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_supportsWithOperator2317 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_supportsDisjunction_in_supportsWithOperator2319 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_key_and_in_supportsConjunction2347 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_supportsConjunction2349 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_supportsInParens_in_supportsConjunction2351 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_key_or_in_supportsDisjunction2378 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_supportsDisjunction2380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_supportsInParens_in_supportsDisjunction2382 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_supportsInParens2402 = new BitSet(new long[]{0xE828CC80E0AC7CC0L,0xDDFB7381908C1D09L,0x000000000340FAA7L});
	public static final BitSet FOLLOW_ws_in_supportsInParens2404 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738190841D09L,0x000000000140FAA7L});
	public static final BitSet FOLLOW_supportsCondition_in_supportsInParens2408 = new BitSet(new long[]{0x0000000000200000L,0x0000040000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_supportsFeature_in_supportsInParens2412 = new BitSet(new long[]{0x0000000000200000L,0x0000040000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_supportsInParens2415 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_supportsInParens2418 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_supportsDecl_in_supportsFeature2431 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_declaration_in_supportsDecl2444 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_layerBlock_in_layerAtRule2470 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_layerStatement_in_layerAtRule2490 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LAYER_SYM_in_layerBlock2524 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_layerBlock2526 = new BitSet(new long[]{0x1008000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_layerName_in_layerBlock2528 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_layerBlock2531 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_layerBody_in_layerBlock2534 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LAYER_SYM_in_layerStatement2569 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_layerStatement2571 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_layerName_in_layerStatement2573 = new BitSet(new long[]{0x0000000000300000L,0x0000000000080000L,0x0000000002000008L});
	public static final BitSet FOLLOW_ws_in_layerStatement2577 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_layerStatement2580 = new BitSet(new long[]{0x0008000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_layerStatement2582 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_layerName_in_layerStatement2585 = new BitSet(new long[]{0x0000000000300000L,0x0000000000080000L,0x0000000002000008L});
	public static final BitSet FOLLOW_SEMI_in_layerStatement2589 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_layerName2623 = new BitSet(new long[]{0x0000000080000002L});
	public static final BitSet FOLLOW_DOT_in_layerName2626 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_layerName2628 = new BitSet(new long[]{0x0000000080000002L});
	public static final BitSet FOLLOW_LBRACE_in_layerBody2663 = new BitSet(new long[]{0xE828CC80E0AC7CC0L,0xDDF37389900C1C09L,0x000000000300FAAFL});
	public static final BitSet FOLLOW_ws_in_layerBody2665 = new BitSet(new long[]{0xE828CC80E0AC7CC0L,0xDDF37389900C1C09L,0x000000000300FAAFL});
	public static final BitSet FOLLOW_body_in_layerBody2668 = new BitSet(new long[]{0x0000000000200000L,0x0000000800080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_layerBody2671 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_RBRACE_in_layerBody2674 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_media_in_at_rule2699 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_page_in_at_rule2707 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_counterStyle_in_at_rule2715 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fontFace_in_at_rule2723 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_supportsAtRule_in_at_rule2731 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_vendorAtRule_in_at_rule2739 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_layerAtRule_in_at_rule2747 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_moz_document_in_vendorAtRule2760 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_webkitKeyframes_in_vendorAtRule2764 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_generic_at_rule_in_vendorAtRule2768 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_atRuleId2778 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STRING_in_atRuleId2782 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_atRuleId2790 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_atRuleId2794 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT_IDENT_in_generic_at_rule2810 = new BitSet(new long[]{0xD028808000A47C40L,0xDDD37380100C1401L,0x000000000300F847L});
	public static final BitSet FOLLOW_ws_in_generic_at_rule2812 = new BitSet(new long[]{0xD028808000847C40L,0xDDD3738010041401L,0x000000000100F847L});
	public static final BitSet FOLLOW_atRuleId_in_generic_at_rule2817 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_generic_at_rule2819 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_generic_at_rule2833 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_syncTo_RBRACE_in_generic_at_rule2844 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_RBRACE_in_generic_at_rule2854 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MOZ_DOCUMENT_SYM_in_moz_document2865 = new BitSet(new long[]{0x0000000000200000L,0x000000000008E000L,0x0000000002080000L});
	public static final BitSet FOLLOW_ws_in_moz_document2867 = new BitSet(new long[]{0x0000000000000000L,0x000000000000E000L,0x0000000000080000L});
	public static final BitSet FOLLOW_moz_document_function_in_moz_document2872 = new BitSet(new long[]{0x1000000000300000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_moz_document2874 = new BitSet(new long[]{0x1000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_moz_document2880 = new BitSet(new long[]{0x0000000000200000L,0x000000000008E000L,0x0000000002080000L});
	public static final BitSet FOLLOW_ws_in_moz_document2882 = new BitSet(new long[]{0x0000000000000000L,0x000000000000E000L,0x0000000000080000L});
	public static final BitSet FOLLOW_moz_document_function_in_moz_document2885 = new BitSet(new long[]{0x1000000000300000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_moz_document2887 = new BitSet(new long[]{0x1000000000100000L});
	public static final BitSet FOLLOW_LBRACE_in_moz_document2894 = new BitSet(new long[]{0xE828CC80E0AC7CC0L,0xDDF37389900C1C09L,0x000000000300FAAFL});
	public static final BitSet FOLLOW_ws_in_moz_document2896 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDF3738990041C09L,0x000000000100FAAFL});
	public static final BitSet FOLLOW_body_in_moz_document2901 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_RBRACE_in_moz_document2906 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WEBKIT_KEYFRAMES_SYM_in_webkitKeyframes2943 = new BitSet(new long[]{0xC028808000A47C40L,0xDDD37380100C1401L,0x000000000300F847L});
	public static final BitSet FOLLOW_ws_in_webkitKeyframes2945 = new BitSet(new long[]{0xC028808000847C40L,0xDDD3738010041401L,0x000000000100F847L});
	public static final BitSet FOLLOW_atRuleId_in_webkitKeyframes2948 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_webkitKeyframes2950 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_webkitKeyframes2954 = new BitSet(new long[]{0x0008000000200000L,0x0000200820080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_webkitKeyframes2956 = new BitSet(new long[]{0x0008000000000000L,0x0000200820000000L});
	public static final BitSet FOLLOW_webkitKeyframesBlock_in_webkitKeyframes2963 = new BitSet(new long[]{0x0008000000200000L,0x0000200820080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_webkitKeyframes2965 = new BitSet(new long[]{0x0008000000000000L,0x0000200820000000L});
	public static final BitSet FOLLOW_RBRACE_in_webkitKeyframes2972 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_webkitKeyframeSelectors_in_webkitKeyframesBlock2984 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_webkitKeyframesBlock2986 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_webkitKeyframesBlock2990 = new BitSet(new long[]{0xE828CC80E0AC7CC0L,0xDDFB7389900C1C09L,0x000000000340FAAFL});
	public static final BitSet FOLLOW_ws_in_webkitKeyframesBlock2993 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_syncToFollow_in_webkitKeyframesBlock2996 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_declarations_in_webkitKeyframesBlock3000 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_RBRACE_in_webkitKeyframesBlock3004 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_content_in_webkitKeyframesBlock3021 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SEMI_in_webkitKeyframesBlock3023 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_webkitKeyframeSelectors3040 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_IDENT_in_webkitKeyframeSelectors3046 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_PERCENTAGE_in_webkitKeyframeSelectors3050 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_webkitKeyframeSelectors3056 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_webkitKeyframeSelectors3059 = new BitSet(new long[]{0x0008000000200000L,0x0000000020080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_webkitKeyframeSelectors3061 = new BitSet(new long[]{0x0008000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_IDENT_in_webkitKeyframeSelectors3068 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_IDENT_in_webkitKeyframeSelectors3074 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_PERCENTAGE_in_webkitKeyframeSelectors3078 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_PAGE_SYM_in_page3102 = new BitSet(new long[]{0x1008000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_page3104 = new BitSet(new long[]{0x1008000000080000L});
	public static final BitSet FOLLOW_IDENT_in_page3109 = new BitSet(new long[]{0x1000000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_page3111 = new BitSet(new long[]{0x1000000000080000L});
	public static final BitSet FOLLOW_pseudoPage_in_page3118 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_page3120 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_page3133 = new BitSet(new long[]{0xC028848000A47CC0L,0xDDD37388100C1C01L,0x000000000340F82FL});
	public static final BitSet FOLLOW_ws_in_page3175 = new BitSet(new long[]{0xC028848000847CC0L,0xDDD3738010041C01L,0x000000000140F82FL});
	public static final BitSet FOLLOW_SEMI_in_page3182 = new BitSet(new long[]{0xC028848000A47CC0L,0xDDD37380100C1C01L,0x000000000340F827L});
	public static final BitSet FOLLOW_ws_in_page3184 = new BitSet(new long[]{0xC028848000847CC0L,0xDDD3738010041C01L,0x000000000140F827L});
	public static final BitSet FOLLOW_SEMI_in_page3191 = new BitSet(new long[]{0xC028848000A47CC0L,0xDDD37380100C1C01L,0x000000000340F827L});
	public static final BitSet FOLLOW_ws_in_page3193 = new BitSet(new long[]{0xC028848000847CC0L,0xDDD3738010041C01L,0x000000000140F827L});
	public static final BitSet FOLLOW_propertyDeclaration_in_page3200 = new BitSet(new long[]{0xC028848000A47CC0L,0xDDD37388100C1C01L,0x000000000340F82FL});
	public static final BitSet FOLLOW_margin_in_page3203 = new BitSet(new long[]{0xC028848000A47CC0L,0xDDD37388100C1C01L,0x000000000340F82FL});
	public static final BitSet FOLLOW_SEMI_in_page3221 = new BitSet(new long[]{0x0000000000200000L,0x0000000800080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_page3236 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_RBRACE_in_page3247 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COUNTER_STYLE_SYM_in_counterStyle3264 = new BitSet(new long[]{0x0008000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_counterStyle3266 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_counterStyle3269 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_counterStyle3271 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_counterStyle3282 = new BitSet(new long[]{0xE828CC80E0AC7CC0L,0xDDFB7389900C1C09L,0x000000000340FAAFL});
	public static final BitSet FOLLOW_ws_in_counterStyle3284 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_syncToDeclarationsRule_in_counterStyle3287 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_declarations_in_counterStyle3291 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_RBRACE_in_counterStyle3302 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FONT_FACE_SYM_in_fontFace3319 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_fontFace3321 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_fontFace3332 = new BitSet(new long[]{0xE828CC80E0AC7CC0L,0xDDFB7389900C1C09L,0x000000000340FAAFL});
	public static final BitSet FOLLOW_ws_in_fontFace3334 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_syncToDeclarationsRule_in_fontFace3337 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_declarations_in_fontFace3341 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_RBRACE_in_fontFace3352 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_margin_sym_in_margin3366 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_margin3368 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_margin3371 = new BitSet(new long[]{0xE828CC80E0AC7CC0L,0xDDFB7389900C1C09L,0x000000000340FAAFL});
	public static final BitSet FOLLOW_ws_in_margin3373 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_syncToDeclarationsRule_in_margin3376 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_declarations_in_margin3378 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_RBRACE_in_margin3381 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COLON_in_pseudoPage3590 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_pseudoPage3592 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_selector_interpolation_exp_in_property3676 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_less_selector_interpolation_exp_in_property3686 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VARIABLE_in_property3694 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_property3702 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GEN_in_property3710 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_property3720 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_map_name_in_sass_map3747 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_sass_map3749 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_map3751 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_sass_map3754 = new BitSet(new long[]{0xC028848000B47CC0L,0xDDD37780110C1C01L,0x000000000340F847L});
	public static final BitSet FOLLOW_ws_in_sass_map3756 = new BitSet(new long[]{0xC028848000947CC0L,0xDDD3778011041C01L,0x000000000140F847L});
	public static final BitSet FOLLOW_syncToFollow_in_sass_map3759 = new BitSet(new long[]{0xC028848000947CC0L,0xDDD3778011041C01L,0x000000000140F847L});
	public static final BitSet FOLLOW_sass_map_pairs_in_sass_map3778 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_sass_map3785 = new BitSet(new long[]{0x0000000000200002L,0x0200800000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_map3789 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_SASS_DEFAULT_in_sass_map3792 = new BitSet(new long[]{0x0000000000200002L,0x0200800000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_map3798 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_SASS_GLOBAL_in_sass_map3801 = new BitSet(new long[]{0x0000000000200002L,0x0200800000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_cp_variable_in_sass_map_name3825 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_map_pair_in_sass_map_pairs3859 = new BitSet(new long[]{0xC028848000B47CC2L,0xDDD37380110C1C01L,0x000000000340F847L});
	public static final BitSet FOLLOW_ws_in_sass_map_pairs3869 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_sass_map_pairs3872 = new BitSet(new long[]{0xC028848000B47CC2L,0xDDD37380110C1C01L,0x000000000340F847L});
	public static final BitSet FOLLOW_ws_in_sass_map_pairs3876 = new BitSet(new long[]{0xC028848000947CC2L,0xDDD3738011041C01L,0x000000000140F847L});
	public static final BitSet FOLLOW_COMMA_in_sass_map_pairs3903 = new BitSet(new long[]{0xC028848000B47CC2L,0xDDD37380110C1C01L,0x000000000340F847L});
	public static final BitSet FOLLOW_ws_in_sass_map_pairs3905 = new BitSet(new long[]{0xC028848000947CC2L,0xDDD3738011041C01L,0x000000000140F847L});
	public static final BitSet FOLLOW_NUMBER_in_sass_map_pair3941 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_STRING_in_sass_map_pair3944 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000040L});
	public static final BitSet FOLLOW_ws_in_sass_map_pair3947 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_STRING_in_sass_map_pair3950 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000040L});
	public static final BitSet FOLLOW_function_in_sass_map_pair3960 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_property_in_sass_map_pair3963 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_sass_map_in_sass_map_pair3965 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_map_pair3968 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_sass_map_pair3971 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_sass_map_pair3973 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_expression_in_sass_map_pair3976 = new BitSet(new long[]{0x0010000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_map_pair3979 = new BitSet(new long[]{0x0010000000000000L});
	public static final BitSet FOLLOW_prio_in_sass_map_pair3982 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_AT_ROOT_in_rule4024 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_rule4027 = new BitSet(new long[]{0x2008CC00E0080080L,0x0020000180000808L,0x0000000000000220L});
	public static final BitSet FOLLOW_selectorsGroup_in_rule4029 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_SASS_AT_ROOT_in_rule4050 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_rule4052 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_rule4054 = new BitSet(new long[]{0x0008000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_rule4056 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_rule4061 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_rule4065 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_rule4068 = new BitSet(new long[]{0x0008000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_rule4070 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_rule4073 = new BitSet(new long[]{0x0000000000200000L,0x0000040000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_rule4075 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_rule4078 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_selectorsGroup_in_rule4096 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_rule4108 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_rule4115 = new BitSet(new long[]{0xE828CC80E0AC7CC0L,0xDDFB7389900C1C09L,0x000000000340FAAFL});
	public static final BitSet FOLLOW_ws_in_rule4117 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_syncToFollow_in_rule4120 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_declarations_in_rule4130 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_RBRACE_in_rule4137 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_declarations4171 = new BitSet(new long[]{0xE828CC80E0AC7CC0L,0xDDFB7381900C1C09L,0x000000000340FAAFL});
	public static final BitSet FOLLOW_ws_in_declarations4173 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738190041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_declaration_in_declarations4179 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000008L});
	public static final BitSet FOLLOW_ws_in_declarations4184 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SEMI_in_declarations4188 = new BitSet(new long[]{0xE828CC80E0AC7CC0L,0xDDFB7381900C1C09L,0x000000000340FAAFL});
	public static final BitSet FOLLOW_ws_in_declarations4190 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738190041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_ws_in_declarations4196 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738190041C09L,0x000000000140FAA7L});
	public static final BitSet FOLLOW_declaration_in_declarations4199 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000008L});
	public static final BitSet FOLLOW_ws_in_declarations4205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SEMI_in_declarations4209 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000008L});
	public static final BitSet FOLLOW_ws_in_declarations4211 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_ws_in_declarations4217 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_declarations4229 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000008L});
	public static final BitSet FOLLOW_ws_in_declarations4231 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_cp_variable_declaration_in_declaration4260 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_map_in_declaration4273 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_nested_properties_in_declaration4285 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rule_in_declaration4348 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_propertyDeclaration_in_declaration4360 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_propertyDeclaration_in_declaration4399 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_declaration_in_declaration4411 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_declaration4424 = new BitSet(new long[]{0x0010000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_declaration4427 = new BitSet(new long[]{0x0010000000000000L});
	public static final BitSet FOLLOW_IMPORTANT_SYM_in_declaration4430 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_declaration4447 = new BitSet(new long[]{0x0010000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_declaration4450 = new BitSet(new long[]{0x0010000000000000L});
	public static final BitSet FOLLOW_IMPORTANT_SYM_in_declaration4453 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_at_rule_in_declaration4469 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_control_in_declaration4479 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_extend_in_declaration4489 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_debug_in_declaration4499 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_content_in_declaration4509 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_function_return_in_declaration4519 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_error_in_declaration4529 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_importItem_in_declaration4539 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GEN_in_declaration4547 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_selector_in_selectorsGroup4581 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_selectorsGroup4584 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_selectorsGroup4587 = new BitSet(new long[]{0x2008CC00E0280080L,0x0020000180080808L,0x0000000002000220L});
	public static final BitSet FOLLOW_ws_in_selectorsGroup4589 = new BitSet(new long[]{0x2008CC00E0080080L,0x0020000180000808L,0x0000000000000220L});
	public static final BitSet FOLLOW_selector_in_selectorsGroup4592 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_COMMA_in_selectorsGroup4599 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_combinator_in_selector4620 = new BitSet(new long[]{0x2008C400E0280080L,0x0020000080080808L,0x0000000002000020L});
	public static final BitSet FOLLOW_ws_in_selector4622 = new BitSet(new long[]{0x2008C400E0080080L,0x0020000080000808L,0x0000000000000020L});
	public static final BitSet FOLLOW_simpleSelectorSequence_in_selector4627 = new BitSet(new long[]{0x0000080000200002L,0x0000000100080000L,0x0000000002000200L});
	public static final BitSet FOLLOW_ws_in_selector4633 = new BitSet(new long[]{0x0000080000000000L,0x0000000100000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_combinator_in_selector4636 = new BitSet(new long[]{0x2008C400E0280080L,0x0020000080080808L,0x0000000002000020L});
	public static final BitSet FOLLOW_ws_in_selector4638 = new BitSet(new long[]{0x2008C400E0080080L,0x0020000080000808L,0x0000000000000020L});
	public static final BitSet FOLLOW_ws_in_selector4642 = new BitSet(new long[]{0x2008C400E0080080L,0x0020000080000808L,0x0000000000000020L});
	public static final BitSet FOLLOW_simpleSelectorSequence_in_selector4645 = new BitSet(new long[]{0x0000080000200002L,0x0000000100080000L,0x0000000002000200L});
	public static final BitSet FOLLOW_combinator_in_selector4660 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_elementSubsequent_in_simpleSelectorSequence4712 = new BitSet(new long[]{0x2000C000E0280002L,0x0020000000080008L,0x0000000002000000L});
	public static final BitSet FOLLOW_sass_selector_interpolation_exp_in_simpleSelectorSequence4718 = new BitSet(new long[]{0x2000C000E0280002L,0x0020000000080008L,0x0000000002000000L});
	public static final BitSet FOLLOW_less_selector_interpolation_exp_in_simpleSelectorSequence4732 = new BitSet(new long[]{0x2000C000E0280002L,0x0020000000080008L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_simpleSelectorSequence4747 = new BitSet(new long[]{0x2000C000E0080000L,0x0020000000000008L});
	public static final BitSet FOLLOW_elementSubsequent_in_simpleSelectorSequence4750 = new BitSet(new long[]{0x2000C000E0280002L,0x0020000000080008L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_simpleSelectorSequence4755 = new BitSet(new long[]{0x0008800000000080L,0x0000000000000800L});
	public static final BitSet FOLLOW_sass_selector_interpolation_exp_in_simpleSelectorSequence4760 = new BitSet(new long[]{0x2000C000E0280002L,0x0020000000080008L,0x0000000002000000L});
	public static final BitSet FOLLOW_less_selector_interpolation_exp_in_simpleSelectorSequence4766 = new BitSet(new long[]{0x2000C000E0280002L,0x0020000000080008L,0x0000000002000000L});
	public static final BitSet FOLLOW_typeSelector_in_simpleSelectorSequence4780 = new BitSet(new long[]{0x2000C000E0280002L,0x0020000000080008L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_simpleSelectorSequence4792 = new BitSet(new long[]{0x2000C000E0080000L,0x0020000000000008L});
	public static final BitSet FOLLOW_elementSubsequent_in_simpleSelectorSequence4795 = new BitSet(new long[]{0x2000C000E0280002L,0x0020000000080008L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_simpleSelectorSequence4802 = new BitSet(new long[]{0x0008800000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_sass_selector_interpolation_exp_in_simpleSelectorSequence4804 = new BitSet(new long[]{0x2000C000E0280002L,0x0020000000080008L,0x0000000002000000L});
	public static final BitSet FOLLOW_HASH_SYMBOL_in_esPred4829 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HASH_in_esPred4833 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_esPred4837 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACKET_in_esPred4841 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COLON_in_esPred4845 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DCOLON_in_esPred4849 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_EXTEND_ONLY_SELECTOR_in_esPred4853 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LESS_AND_in_esPred4859 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespacePrefix_in_typeSelector4901 = new BitSet(new long[]{0x0008040000000000L,0x0000000000000008L,0x0000000000000020L});
	public static final BitSet FOLLOW_elementName_in_typeSelector4905 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespacePrefixName_in_namespacePrefix4920 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_STAR_in_namespacePrefix4924 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_PIPE_in_namespacePrefix4928 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_extend_only_selector_in_elementSubsequent4960 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LESS_AND_in_elementSubsequent4974 = new BitSet(new long[]{0x0008800000000002L,0x0000000001000000L});
	public static final BitSet FOLLOW_IDENT_in_elementSubsequent4977 = new BitSet(new long[]{0x0008800000000002L,0x0000000001000000L});
	public static final BitSet FOLLOW_NUMBER_in_elementSubsequent4981 = new BitSet(new long[]{0x0008800000000002L,0x0000000001000000L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_elementSubsequent4987 = new BitSet(new long[]{0x0008800000000002L,0x0000000001000000L});
	public static final BitSet FOLLOW_LESS_AND_in_elementSubsequent5003 = new BitSet(new long[]{0x0008000000000080L,0x0000000000000800L});
	public static final BitSet FOLLOW_less_selector_interpolation_exp_in_elementSubsequent5005 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cssId_in_elementSubsequent5014 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cssClass_in_elementSubsequent5023 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_slAttribute_in_elementSubsequent5035 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pseudo_in_elementSubsequent5047 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HASH_in_cssId5071 = new BitSet(new long[]{0x0008800000000002L,0x0000000000000800L});
	public static final BitSet FOLLOW_sass_selector_interpolation_exp_in_cssId5076 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HASH_SYMBOL_in_cssId5098 = new BitSet(new long[]{0x0008000000000080L,0x0000000000020800L});
	public static final BitSet FOLLOW_NAME_in_cssId5114 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_less_selector_interpolation_exp_in_cssId5134 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_cssClass5186 = new BitSet(new long[]{0x0008840000000080L,0x0000000000800800L});
	public static final BitSet FOLLOW_sass_selector_interpolation_exp_in_cssClass5214 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_less_selector_interpolation_exp_in_cssClass5232 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_cssClass5248 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_in_cssClass5264 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GEN_in_cssClass5280 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DIMENSION_in_cssClass5304 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACKET_in_slAttribute5360 = new BitSet(new long[]{0x0008000000200000L,0x0000000080080000L,0x0000000002000020L});
	public static final BitSet FOLLOW_namespacePrefix_in_slAttribute5367 = new BitSet(new long[]{0x0008000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_slAttribute5370 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_slAttributeName_in_slAttribute5381 = new BitSet(new long[]{0x0040000410600200L,0x0000001004080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_slAttribute5383 = new BitSet(new long[]{0x0040000410400200L,0x0000001004000000L});
	public static final BitSet FOLLOW_set_in_slAttribute5417 = new BitSet(new long[]{0x0008000000200000L,0x0000000000080000L,0x0000000002000040L});
	public static final BitSet FOLLOW_ws_in_slAttribute5597 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_slAttributeValue_in_slAttribute5616 = new BitSet(new long[]{0x0000000000200000L,0x0000001000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_slAttribute5634 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_RBRACKET_in_slAttribute5659 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_slAttributeName5675 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_pseudo5747 = new BitSet(new long[]{0x0008840000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_set_in_pseudo5810 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_pseudo5867 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_pseudo5870 = new BitSet(new long[]{0xE028C5A240A47CE0L,0xDDD377E1710C1C1BL,0x00000000034CFE67L});
	public static final BitSet FOLLOW_ws_in_pseudo5872 = new BitSet(new long[]{0xE028C5A240847CE0L,0xDDD377E171041C1BL,0x00000000014CFE67L});
	public static final BitSet FOLLOW_expression_in_pseudo5878 = new BitSet(new long[]{0x0000000000200000L,0x0000040000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_pseudo5880 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_STAR_in_pseudo5886 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_pseudo5891 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_pseudo5954 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_in_pseudo5976 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_pseudo5978 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_pseudo5981 = new BitSet(new long[]{0x2008CC00E0280080L,0x0020040180080808L,0x0000000002000220L});
	public static final BitSet FOLLOW_ws_in_pseudo5983 = new BitSet(new long[]{0x2008CC00E0080080L,0x0020040180000808L,0x0000000000000220L});
	public static final BitSet FOLLOW_selectorsGroup_in_pseudo5988 = new BitSet(new long[]{0x0000000000200000L,0x0000040000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_pseudo5990 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_pseudo5995 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_pseudo6021 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_pseudo6023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_pseudo6026 = new BitSet(new long[]{0x2008CC00E0280080L,0x0020040180080808L,0x0000000002000220L});
	public static final BitSet FOLLOW_ws_in_pseudo6028 = new BitSet(new long[]{0x2008CC00E0080080L,0x0020040180000808L,0x0000000000000220L});
	public static final BitSet FOLLOW_selectorsGroup_in_pseudo6033 = new BitSet(new long[]{0x0000000000200000L,0x0000040000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_pseudo6035 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_pseudo6040 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_pseudo6067 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_pseudo6069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_pseudo6072 = new BitSet(new long[]{0x2008CC00E0280080L,0x0020040180080808L,0x0000000002000220L});
	public static final BitSet FOLLOW_ws_in_pseudo6074 = new BitSet(new long[]{0x2008CC00E0080080L,0x0020040180000808L,0x0000000000000220L});
	public static final BitSet FOLLOW_selectorsGroup_in_pseudo6077 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_pseudo6080 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STAR_in_propertyDeclaration6122 = new BitSet(new long[]{0xC028848000847CC0L,0xDDD3738010041C01L,0x000000000140F807L});
	public static final BitSet FOLLOW_property_in_propertyDeclaration6125 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_propertyDeclaration6127 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_propertyDeclaration6130 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_propertyDeclaration6132 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_propertyValue_in_propertyDeclaration6135 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_property_in_propertyDeclaration6146 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_propertyDeclaration6148 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_propertyDeclaration6151 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFBE7FFFFFFFFL,0x000000001FFFFFF7L});
	public static final BitSet FOLLOW_ws_in_propertyDeclaration6153 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFBE7FFFFFFFFL,0x000000001FFFFFF7L});
	public static final BitSet FOLLOW_componentValueOuter_in_propertyDeclaration6156 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STAR_in_propertyDeclaration6165 = new BitSet(new long[]{0xC028848000847CC0L,0xDDD3738010041C01L,0x000000000140F807L});
	public static final BitSet FOLLOW_property_in_propertyDeclaration6168 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_propertyDeclaration6170 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_propertyDeclaration6173 = new BitSet(new long[]{0xE028C5A240A47CE0L,0xDDD373E1710C1C1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_propertyDeclaration6175 = new BitSet(new long[]{0xE028C5A240847CE0L,0xDDD373E171041C1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_propertyValue_in_propertyDeclaration6178 = new BitSet(new long[]{0x0010000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_propertyDeclaration6181 = new BitSet(new long[]{0x0010000000000000L});
	public static final BitSet FOLLOW_prio_in_propertyDeclaration6184 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_expression_list_in_cp_propertyValue6224 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_propertyValue_in_cp_propertyValue6232 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_propertyValue6254 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_expressionPredicate6323 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACE_in_braceBlock6410 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFBE7FFFFFFFFL,0x000000001FFFFFFFL});
	public static final BitSet FOLLOW_componentValue_in_braceBlock6412 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFBEFFFFFFFFFL,0x000000001FFFFFFFL});
	public static final BitSet FOLLOW_RBRACE_in_braceBlock6415 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACKET_in_bracketBlock6422 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFBE7FFFFFFFFL,0x000000001FFFFFFFL});
	public static final BitSet FOLLOW_componentValue_in_bracketBlock6424 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFBF7FFFFFFFFL,0x000000001FFFFFFFL});
	public static final BitSet FOLLOW_RBRACKET_in_bracketBlock6427 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_parenBlock6434 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFBE7FFFFFFFFL,0x000000001FFFFFFFL});
	public static final BitSet FOLLOW_componentValue_in_parenBlock6436 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFE7FFFFFFFFL,0x000000001FFFFFFFL});
	public static final BitSet FOLLOW_RPAREN_in_parenBlock6439 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_parenBlock_in_componentValue6446 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_braceBlock_in_componentValue6450 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bracketBlock_in_componentValue6454 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_function_in_componentValue6469 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_preservedToken_in_componentValue6473 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_parenBlock_in_componentValueOuter6481 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFBE7FFFFFFFFL,0x000000001FFFFFF7L});
	public static final BitSet FOLLOW_braceBlock_in_componentValueOuter6485 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFBE7FFFFFFFFL,0x000000001FFFFFF7L});
	public static final BitSet FOLLOW_bracketBlock_in_componentValueOuter6489 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFBE7FFFFFFFFL,0x000000001FFFFFF7L});
	public static final BitSet FOLLOW_function_in_componentValueOuter6504 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFBE7FFFFFFFFL,0x000000001FFFFFF7L});
	public static final BitSet FOLLOW_preservedTokenTopLevel_in_componentValueOuter6508 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFBE7FFFFFFFFL,0x000000001FFFFFF7L});
	public static final BitSet FOLLOW_componentValueOuter_in_componentValueOuter6511 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFBE7FFFFFFFFL,0x000000001FFFFFF7L});
	public static final BitSet FOLLOW_SEMI_in_syncTo_SEMI6600 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IMPORTANT_SYM_in_prio6645 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_term_in_expression6662 = new BitSet(new long[]{0xE028C5A240B47CE2L,0xDDD373E1710C1C1BL,0x00000000034CFE57L});
	public static final BitSet FOLLOW_ws_in_expression6694 = new BitSet(new long[]{0xE028C5A240847CE0L,0xDDD373E171041C1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_ws_in_expression6699 = new BitSet(new long[]{0x0000000000100000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_operator_in_expression6702 = new BitSet(new long[]{0xE028C5A240A47CE0L,0xDDD373E1710C1C1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_expression6704 = new BitSet(new long[]{0xE028C5A240847CE0L,0xDDD373E171041C1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_term_in_expression6713 = new BitSet(new long[]{0xE028C5A240B47CE2L,0xDDD373E1710C1C1BL,0x00000000034CFE57L});
	public static final BitSet FOLLOW_unaryOperator_in_term6738 = new BitSet(new long[]{0xE028C5A240A47CE0L,0xDDD373E0710C141BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_term6740 = new BitSet(new long[]{0xE028C5A240847CE0L,0xDDD373E07104141BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_function_in_term6769 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VARIABLE_in_term6782 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_term6796 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACKET_in_term6809 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_WS_in_term6811 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_term6814 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_WS_in_term6817 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_term6819 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_WS_in_term6823 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_RBRACKET_in_term6826 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NUMBER_in_term6839 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_URANGE_in_term6851 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PERCENTAGE_in_term6863 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LENGTH_in_term6875 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EMS_in_term6887 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REM_in_term6899 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXS_in_term6911 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ANGLE_in_term6923 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIME_in_term6935 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FREQ_in_term6947 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RESOLUTION_in_term6959 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DIMENSION_in_term6971 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STRING_in_term6988 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TILDE_in_term7000 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000040L});
	public static final BitSet FOLLOW_set_in_term7002 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LESS_JS_STRING_in_term7023 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GEN_in_term7038 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_URI_in_term7050 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_hexColor_in_term7062 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_term7076 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LESS_AND_in_term7090 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_term7104 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_less_selector_interpolation_in_term7118 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_term_symbol_in_term7132 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PERCENTAGE_SYMBOL_in_cp_term_symbol7159 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionName_in_function7175 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_function7177 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_function7182 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD377E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_function7184 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD377E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_fnAttributes_in_function7211 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_function7242 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_functionName7294 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_functionName7296 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_functionName7300 = new BitSet(new long[]{0x0000000080000002L});
	public static final BitSet FOLLOW_DOT_in_functionName7303 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_functionName7305 = new BitSet(new long[]{0x0000000080000002L});
	public static final BitSet FOLLOW_fnAttribute_in_fnAttributes7329 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000008L});
	public static final BitSet FOLLOW_ws_in_fnAttributes7332 = new BitSet(new long[]{0x0000000000100000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_COMMA_in_fnAttributes7336 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_SEMI_in_fnAttributes7342 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_fnAttributes7345 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_fnAttribute_in_fnAttributes7348 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000008L});
	public static final BitSet FOLLOW_ws_in_fnAttributes7352 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fnAttributeName_in_fnAttribute7389 = new BitSet(new long[]{0x0000000000280000L,0x0000000004080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_fnAttribute7391 = new BitSet(new long[]{0x0000000000080000L,0x0000000004000000L});
	public static final BitSet FOLLOW_set_in_fnAttribute7394 = new BitSet(new long[]{0xE038C5A240A47CE0L,0xDDD373E1710C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_fnAttribute7400 = new BitSet(new long[]{0xE038C5A240847CE0L,0xDDD373E171041D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_fnAttributeValue_in_fnAttribute7403 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_expression_in_fnAttribute7420 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_fnAttribute7432 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_fnAttributeName7455 = new BitSet(new long[]{0x0000000080000002L});
	public static final BitSet FOLLOW_DOT_in_fnAttributeName7458 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_fnAttributeName7460 = new BitSet(new long[]{0x0000000080000002L});
	public static final BitSet FOLLOW_cp_variable_in_fnAttributeName7480 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_term_in_fnAttributeValue7503 = new BitSet(new long[]{0xE028C5A240A47CE2L,0xDDD373E1710C1C1BL,0x00000000034CFE57L});
	public static final BitSet FOLLOW_ws_in_fnAttributeValue7535 = new BitSet(new long[]{0xE028C5A240847CE0L,0xDDD373E171041C1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_ws_in_fnAttributeValue7540 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_SOLIDUS_in_fnAttributeValue7543 = new BitSet(new long[]{0xE028C5A240A47CE0L,0xDDD373E1710C1C1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_fnAttributeValue7545 = new BitSet(new long[]{0xE028C5A240847CE0L,0xDDD373E171041C1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_term_in_fnAttributeValue7554 = new BitSet(new long[]{0xE028C5A240A47CE2L,0xDDD373E1710C1C1BL,0x00000000034CFE57L});
	public static final BitSet FOLLOW_cp_math_expression_in_fnAttributeValue7575 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HASH_in_hexColor7589 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_cp_variable_declaration7649 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_variable_declaration7651 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_cp_variable_declaration7654 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_cp_variable_declaration7656 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_expression_list_in_cp_variable_declaration7659 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_cp_variable_declaration7681 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_variable_declaration7683 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_cp_variable_declaration7686 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_cp_variable_declaration7688 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_expression_list_in_cp_variable_declaration7691 = new BitSet(new long[]{0x0000000000200002L,0x0200800000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_variable_declaration7695 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_SASS_DEFAULT_in_cp_variable_declaration7698 = new BitSet(new long[]{0x0000000000200002L,0x0200800000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_variable_declaration7704 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_SASS_GLOBAL_in_cp_variable_declaration7707 = new BitSet(new long[]{0x0000000000200002L,0x0200800000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_set_in_cp_variable7747 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_VAR_in_cp_variable7939 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_cp_variable7943 = new BitSet(new long[]{0x0000000080000000L});
	public static final BitSet FOLLOW_DOT_in_cp_variable7945 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_SASS_VAR_in_cp_variable7947 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_expression_in_cp_expression_list7977 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_expression_list7996 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_cp_expression_list7999 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_cp_expression_list8001 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_expression_in_cp_expression_list8004 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_LBRACE_in_cp_expression8040 = new BitSet(new long[]{0xE828CC80E0AC7CC0L,0xDDFB7389900C1C09L,0x000000000340FAAFL});
	public static final BitSet FOLLOW_ws_in_cp_expression8042 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_syncToFollow_in_cp_expression8045 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_declarations_in_cp_expression8047 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_RBRACE_in_cp_expression8050 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_expression_atom_in_cp_expression8066 = new BitSet(new long[]{0xE038DDA246A47CE2L,0xDDD373E1718C1D3FL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_cp_expression8090 = new BitSet(new long[]{0x0008180006000000L,0x0000000000000024L});
	public static final BitSet FOLLOW_cp_expression_operator_in_cp_expression8093 = new BitSet(new long[]{0xE038C5A240A47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_cp_expression8095 = new BitSet(new long[]{0xE038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_expression_atom_in_cp_expression8099 = new BitSet(new long[]{0xE038DDA246A47CE2L,0xDDD373E1718C1D3FL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_cp_expression8118 = new BitSet(new long[]{0xE038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_expression_atom_in_cp_expression8121 = new BitSet(new long[]{0xE038DDA246A47CE2L,0xDDD373E1718C1D3FL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_LPAREN_in_cp_expression8139 = new BitSet(new long[]{0xC028848000B47CC0L,0xDDD37780110C1C01L,0x000000000340F847L});
	public static final BitSet FOLLOW_ws_in_cp_expression8141 = new BitSet(new long[]{0xC028848000947CC0L,0xDDD3778011041C01L,0x000000000140F847L});
	public static final BitSet FOLLOW_syncToFollow_in_cp_expression8144 = new BitSet(new long[]{0xC028848000947CC0L,0xDDD3778011041C01L,0x000000000140F847L});
	public static final BitSet FOLLOW_sass_map_pairs_in_cp_expression8146 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_cp_expression8149 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_key_or_in_cp_expression_operator8170 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_key_and_in_cp_expression_operator8174 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CP_EQ_in_cp_expression_operator8179 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CP_NOT_EQ_in_cp_expression_operator8183 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LESS_in_cp_expression_operator8187 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LESS_OR_EQ_in_cp_expression_operator8191 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GREATER_in_cp_expression_operator8195 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GREATER_OR_EQ_in_cp_expression_operator8199 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_in_cp_expression_atom8225 = new BitSet(new long[]{0xE038C5A240A47CE0L,0xDDD373E1710C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_cp_expression_atom8227 = new BitSet(new long[]{0xE038C5A240847CE0L,0xDDD373E171041D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_math_expression_in_cp_expression_atom8258 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_cp_expression_atom8274 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD377E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_cp_expression_atom8276 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD377E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_expression_list_in_cp_expression_atom8280 = new BitSet(new long[]{0x0000000000200000L,0x0000040000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_expression_atom8282 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_cp_expression_atom8287 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_math_expression_in_cp_math_expressions8319 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_math_expressions8326 = new BitSet(new long[]{0xE038C5A240847CE0L,0xDDD373E171041D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_math_expression_in_cp_math_expressions8328 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_cp_math_expression_atom_in_cp_math_expression8362 = new BitSet(new long[]{0x0000000000200002L,0x0000000100080800L,0x0000000002000030L});
	public static final BitSet FOLLOW_ws_in_cp_math_expression8404 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000800L,0x0000000000000030L});
	public static final BitSet FOLLOW_set_in_cp_math_expression8407 = new BitSet(new long[]{0xE038C5A240A47CE0L,0xDDD373E1710C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_cp_math_expression8417 = new BitSet(new long[]{0xE038C5A240847CE0L,0xDDD373E171041D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_math_expression_atom_in_cp_math_expression8420 = new BitSet(new long[]{0x0000000000200002L,0x0000000100080800L,0x0000000002000030L});
	public static final BitSet FOLLOW_term_in_cp_math_expression_atom8453 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IMPORTANT_SYM_in_cp_math_expression_atom8461 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unaryOperator_in_cp_math_expression_atom8472 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_math_expression_atom8474 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_cp_math_expression_atom8480 = new BitSet(new long[]{0xE038C5A240A47CE0L,0xDDD373E1710C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_cp_math_expression_atom8482 = new BitSet(new long[]{0xE038C5A240847CE0L,0xDDD373E171041D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_math_expression_in_cp_math_expression_atom8485 = new BitSet(new long[]{0x0000000000200000L,0x0000040000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_math_expression_atom8487 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_cp_math_expression_atom8490 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LESS_AND_in_cp_mixin_declaration8530 = new BitSet(new long[]{0x1008000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_DOT_in_cp_mixin_declaration8537 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_declaration8539 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_HASH_in_cp_mixin_declaration8544 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_declaration8547 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_cp_mixin_declaration8550 = new BitSet(new long[]{0xC028008001A47C40L,0xDDD37780100C1441L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_declaration8552 = new BitSet(new long[]{0xC028008001847C40L,0xDDD3778010041441L,0x000000000100F807L});
	public static final BitSet FOLLOW_cp_args_list_in_cp_mixin_declaration8555 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_cp_mixin_declaration8558 = new BitSet(new long[]{0x1008000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_declaration8563 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_less_mixin_guarded_in_cp_mixin_declaration8566 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_SASS_MIXIN_in_cp_mixin_declaration8590 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_declaration8592 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_declaration8594 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_declaration8597 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_cp_mixin_declaration8600 = new BitSet(new long[]{0xC028008001A47C40L,0xDDD37780100C1441L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_declaration8602 = new BitSet(new long[]{0xC028008001847C40L,0xDDD3778010041441L,0x000000000100F807L});
	public static final BitSet FOLLOW_cp_args_list_in_cp_mixin_declaration8605 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_cp_mixin_declaration8608 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_declaration8622 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_cp_mixin_block_in_cp_mixin_declaration8625 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_cp_mixin_call8661 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_call8663 = new BitSet(new long[]{0x0000080020280002L,0x0000000100080100L,0x0000000002000200L});
	public static final BitSet FOLLOW_HASH_in_cp_mixin_call8667 = new BitSet(new long[]{0x0000080020280002L,0x0000000100080100L,0x0000000002000200L});
	public static final BitSet FOLLOW_AT_IDENT_in_cp_mixin_call8671 = new BitSet(new long[]{0x0000080020280002L,0x0000000100080100L,0x0000000002000200L});
	public static final BitSet FOLLOW_LESS_AND_in_cp_mixin_call8675 = new BitSet(new long[]{0x0000080020280002L,0x0000000100080100L,0x0000000002000200L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call8691 = new BitSet(new long[]{0x0000080000000000L,0x0000000100000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_combinator_in_cp_mixin_call8694 = new BitSet(new long[]{0x0000400080200040L,0x0000000000080008L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call8696 = new BitSet(new long[]{0x0000400080000040L,0x0000000000000008L});
	public static final BitSet FOLLOW_DOT_in_cp_mixin_call8700 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_call8702 = new BitSet(new long[]{0x0000080020280002L,0x0000000100080100L,0x0000000002000200L});
	public static final BitSet FOLLOW_HASH_in_cp_mixin_call8706 = new BitSet(new long[]{0x0000080020280002L,0x0000000100080100L,0x0000000002000200L});
	public static final BitSet FOLLOW_AT_IDENT_in_cp_mixin_call8710 = new BitSet(new long[]{0x0000080020280002L,0x0000000100080100L,0x0000000002000200L});
	public static final BitSet FOLLOW_LESS_AND_in_cp_mixin_call8714 = new BitSet(new long[]{0x0000080020280002L,0x0000000100080100L,0x0000000002000200L});
	public static final BitSet FOLLOW_pseudo_in_cp_mixin_call8724 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call8736 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_cp_mixin_call8739 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD377E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call8741 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD377E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_mixin_call_args_in_cp_mixin_call8744 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_cp_mixin_call8747 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_INCLUDE_in_cp_mixin_call8772 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call8774 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_call8776 = new BitSet(new long[]{0x1000000000200002L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call8779 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_cp_mixin_call8782 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD377E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call8784 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD377E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_mixin_call_args_in_cp_mixin_call8787 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_cp_mixin_call8790 = new BitSet(new long[]{0x1000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call8795 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_cp_mixin_block_in_cp_mixin_call8798 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACE_in_cp_mixin_block8827 = new BitSet(new long[]{0xE828CC80E0AC7CC0L,0xDDFB7389B00C1C09L,0x000000000340FAAFL});
	public static final BitSet FOLLOW_ws_in_cp_mixin_block8829 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB7389B0041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_syncToFollow_in_cp_mixin_block8832 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB7389B0041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_declarations_in_cp_mixin_block8843 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_webkitKeyframesBlock_in_cp_mixin_block8858 = new BitSet(new long[]{0x0008000000200000L,0x0000200820080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_block8860 = new BitSet(new long[]{0x0008000000000000L,0x0000200820000000L});
	public static final BitSet FOLLOW_RBRACE_in_cp_mixin_block8872 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_cp_mixin_name8893 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args8924 = new BitSet(new long[]{0x0000000001100002L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_cp_mixin_call_args8928 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call_args8936 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args8939 = new BitSet(new long[]{0x0000000001100002L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_CP_DOTS_in_cp_mixin_call_args8945 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000008L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call_args8947 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SEMI_in_cp_mixin_call_args8952 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_cp_mixin_call_arg8984 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg8986 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_cp_mixin_call_arg8989 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg8991 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_expression_in_cp_mixin_call_arg8994 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_cp_expression_in_cp_mixin_call_arg9006 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg9014 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_arg_in_cp_args_list9061 = new BitSet(new long[]{0x0000000001100002L,0x0000000000000040L,0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_cp_args_list9065 = new BitSet(new long[]{0xC028008000A47C40L,0xDDD37380100C1401L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_cp_args_list9075 = new BitSet(new long[]{0xC028008000847C40L,0xDDD3738010041401L,0x000000000100F807L});
	public static final BitSet FOLLOW_cp_arg_in_cp_args_list9078 = new BitSet(new long[]{0x0000000001100002L,0x0000000000000040L,0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_cp_args_list9085 = new BitSet(new long[]{0x0000000001200002L,0x0000000000080040L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_args_list9093 = new BitSet(new long[]{0x0000000001000002L,0x0000000000000040L});
	public static final BitSet FOLLOW_set_in_cp_args_list9101 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_args_list9109 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_cp_args_list9126 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_args_list9134 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_cp_arg9157 = new BitSet(new long[]{0x0000000000280002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_arg9159 = new BitSet(new long[]{0x0000000000080002L});
	public static final BitSet FOLLOW_COLON_in_cp_arg9164 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_cp_arg9166 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_expression_in_cp_arg9169 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_cp_arg9171 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_cp_arg9184 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_less_when_in_less_mixin_guarded9207 = new BitSet(new long[]{0x0000000000200000L,0x0000000000880100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_less_mixin_guarded9209 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800100L});
	public static final BitSet FOLLOW_less_condition_in_less_mixin_guarded9212 = new BitSet(new long[]{0x0008000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_less_mixin_guarded9215 = new BitSet(new long[]{0x0008000000100000L});
	public static final BitSet FOLLOW_COMMA_in_less_mixin_guarded9219 = new BitSet(new long[]{0x0000000000200000L,0x0000000000880100L,0x0000000002000000L});
	public static final BitSet FOLLOW_key_and_in_less_mixin_guarded9223 = new BitSet(new long[]{0x0000000000200000L,0x0000000000880100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_less_mixin_guarded9226 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800100L});
	public static final BitSet FOLLOW_less_condition_in_less_mixin_guarded9229 = new BitSet(new long[]{0x0008000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_NOT_in_less_condition9255 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_less_condition9257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_less_condition9266 = new BitSet(new long[]{0xC028008000A47C40L,0xDDD37380100C1401L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_less_condition9268 = new BitSet(new long[]{0xC028008000847C40L,0xDDD3738010041401L,0x000000000100F807L});
	public static final BitSet FOLLOW_cp_variable_in_less_condition9295 = new BitSet(new long[]{0x0000180000200000L,0x0000040004080024L,0x0000000002000000L});
	public static final BitSet FOLLOW_less_function_in_condition_in_less_condition9299 = new BitSet(new long[]{0x0000180000200000L,0x0000040004080024L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_less_condition9302 = new BitSet(new long[]{0x0000180000000000L,0x0000040004000024L});
	public static final BitSet FOLLOW_less_condition_operator_in_less_condition9306 = new BitSet(new long[]{0xE038C5A240A47CE0L,0xDDD373E1710C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_less_condition9308 = new BitSet(new long[]{0xE038C5A240847CE0L,0xDDD373E171041D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_math_expression_in_less_condition9311 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_less_condition9329 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_less_fn_name_in_less_function_in_condition9351 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_less_function_in_condition9353 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_less_function_in_condition9356 = new BitSet(new long[]{0xC028008000A47C40L,0xDDD37380100C1401L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_less_function_in_condition9358 = new BitSet(new long[]{0xC028008000847C40L,0xDDD3738010041401L,0x000000000100F807L});
	public static final BitSet FOLLOW_cp_variable_in_less_function_in_condition9361 = new BitSet(new long[]{0x0000000000200000L,0x0000040000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_less_function_in_condition9363 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_less_function_in_condition9366 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_less_fn_name9388 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_less_selector_interpolation_in_less_selector_interpolation_exp9451 = new BitSet(new long[]{0x0008000040000082L,0x0000000000000802L});
	public static final BitSet FOLLOW_less_selector_interpolation_exp_in_less_selector_interpolation_exp9454 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT_SIGN_in_less_selector_interpolation9497 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_less_selector_interpolation9499 = new BitSet(new long[]{0x0008000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_less_selector_interpolation9501 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_less_selector_interpolation9504 = new BitSet(new long[]{0x0000000000200000L,0x0000000800080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_less_selector_interpolation9506 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_RBRACE_in_less_selector_interpolation9509 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_exp9536 = new BitSet(new long[]{0x0008800040000002L,0x0000000000000802L});
	public static final BitSet FOLLOW_sass_selector_interpolation_exp_in_sass_selector_interpolation_exp9539 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HASH_SYMBOL_in_sass_interpolation_expression_var9586 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_sass_interpolation_expression_var9588 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_WS_in_sass_interpolation_expression_var9590 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_expression_in_sass_interpolation_expression_var9593 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_WS_in_sass_interpolation_expression_var9595 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_RBRACE_in_sass_interpolation_expression_var9598 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_property_in_sass_nested_properties9638 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_nested_properties9640 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_sass_nested_properties9643 = new BitSet(new long[]{0xF028C5A240A47CE0L,0xDDD373E1710C1C1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_sass_nested_properties9645 = new BitSet(new long[]{0xF028C5A240847CE0L,0xDDD373E171041C1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_propertyValue_in_sass_nested_properties9649 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_nested_properties9651 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_sass_nested_properties9656 = new BitSet(new long[]{0xE828CC80E0AC7CC0L,0xDDFB7389900C1C09L,0x000000000340FAAFL});
	public static final BitSet FOLLOW_ws_in_sass_nested_properties9658 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_syncToFollow_in_sass_nested_properties9661 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_declarations_in_sass_nested_properties9663 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_RBRACE_in_sass_nested_properties9666 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_EXTEND_in_sass_extend9687 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_extend9689 = new BitSet(new long[]{0x2008C400E0080080L,0x0020000080000808L,0x0000000000000020L});
	public static final BitSet FOLLOW_simpleSelectorSequence_in_sass_extend9691 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_extend9694 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_sass_extend9697 = new BitSet(new long[]{0x2008C400E0280080L,0x0020000080080808L,0x0000000002000020L});
	public static final BitSet FOLLOW_ws_in_sass_extend9699 = new BitSet(new long[]{0x2008C400E0080080L,0x0020000080000808L,0x0000000000000020L});
	public static final BitSet FOLLOW_simpleSelectorSequence_in_sass_extend9702 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_extend9707 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_SASS_OPTIONAL_in_sass_extend9709 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_EXTEND_ONLY_SELECTOR_in_sass_extend_only_selector9732 = new BitSet(new long[]{0x0008800000000002L,0x0000000000000800L});
	public static final BitSet FOLLOW_sass_selector_interpolation_exp_in_sass_extend_only_selector9734 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_sass_debug9756 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_debug9766 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_expression_in_sass_debug9768 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_ERROR_in_sass_error9789 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_error9791 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_STRING_in_sass_error9793 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_if_in_sass_control9814 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_for_in_sass_control9818 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_each_in_sass_control9822 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_while_in_sass_control9826 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_IF_in_sass_if9847 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_sass_if9849 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_sass_control_expression_in_sass_if9852 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_if9854 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_sass_control_block_in_sass_if9857 = new BitSet(new long[]{0x0000000000200002L,0x0006000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_if9860 = new BitSet(new long[]{0x0000000000000000L,0x0006000000000000L});
	public static final BitSet FOLLOW_sass_else_in_sass_if9863 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_ELSE_in_sass_else9886 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_else9888 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_sass_control_block_in_sass_else9891 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_ELSE_in_sass_else9905 = new BitSet(new long[]{0x0008000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_else9907 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_else9912 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_SASS_ELSEIF_in_sass_else9919 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_sass_else9922 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_sass_control_expression_in_sass_else9925 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_else9927 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_sass_control_block_in_sass_else9930 = new BitSet(new long[]{0x0000000000200002L,0x0006000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_else9933 = new BitSet(new long[]{0x0000000000000000L,0x0006000000000000L});
	public static final BitSet FOLLOW_sass_else_in_sass_else9936 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_expression_in_sass_control_expression9959 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_FOR_in_sass_for9980 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_for9982 = new BitSet(new long[]{0xC028008000847C40L,0xDDD3738010041401L,0x000000000100F807L});
	public static final BitSet FOLLOW_cp_variable_in_sass_for9984 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_for9986 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_for9990 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_for9994 = new BitSet(new long[]{0xE038C5A240847CE0L,0xDDD373E171041D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_math_expression_in_sass_for9996 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_for9998 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_for10002 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_for10006 = new BitSet(new long[]{0xE038C5A240847CE0L,0xDDD373E171041D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_math_expression_in_sass_for10008 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_for10010 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_sass_control_block_in_sass_for10013 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_EACH_in_sass_each10034 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_each10036 = new BitSet(new long[]{0xC028008000847C40L,0xDDD3738010041401L,0x000000000100F807L});
	public static final BitSet FOLLOW_sass_each_variables_in_sass_each10038 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_each10040 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_each10044 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_each10048 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_expression_list_in_sass_each10051 = new BitSet(new long[]{0xF038C5A240B47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_sass_each10054 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_sass_each10057 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_sass_each10061 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_sass_control_block_in_sass_each10067 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_sass_each_variables10088 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_each_variables10100 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_sass_each_variables10103 = new BitSet(new long[]{0xC028008000A47C40L,0xDDD37380100C1401L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_sass_each_variables10105 = new BitSet(new long[]{0xC028008000847C40L,0xDDD3738010041401L,0x000000000100F807L});
	public static final BitSet FOLLOW_cp_variable_in_sass_each_variables10108 = new BitSet(new long[]{0x0000000000300002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_SASS_WHILE_in_sass_while10133 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_while10135 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_sass_control_expression_in_sass_while10137 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_while10139 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_sass_control_block_in_sass_while10142 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACE_in_sass_control_block10163 = new BitSet(new long[]{0xE828CC80E0AC7CC0L,0xDDFB7389900C1C09L,0x000000000340FAAFL});
	public static final BitSet FOLLOW_ws_in_sass_control_block10165 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_declarations_in_sass_control_block10168 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_RBRACE_in_sass_control_block10171 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_FUNCTION_in_sass_function_declaration10213 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_function_declaration10215 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_sass_function_name_in_sass_function_declaration10217 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_function_declaration10219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_sass_function_declaration10222 = new BitSet(new long[]{0xC028008001A47C40L,0xDDD37780100C1441L,0x000000000300F807L});
	public static final BitSet FOLLOW_ws_in_sass_function_declaration10224 = new BitSet(new long[]{0xC028008001847C40L,0xDDD3778010041441L,0x000000000100F807L});
	public static final BitSet FOLLOW_cp_args_list_in_sass_function_declaration10227 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_sass_function_declaration10230 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_function_declaration10232 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_sass_function_declaration10235 = new BitSet(new long[]{0xE828CC80E0AC7CC0L,0xDDFB7389900C1C09L,0x000000000340FAAFL});
	public static final BitSet FOLLOW_ws_in_sass_function_declaration10237 = new BitSet(new long[]{0xE828CC80E08C7CC0L,0xDDFB738990041C09L,0x000000000140FAAFL});
	public static final BitSet FOLLOW_declarations_in_sass_function_declaration10240 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_RBRACE_in_sass_function_declaration10243 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_sass_function_name10264 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_RETURN_in_sass_function_return10285 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_sass_function_return10287 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_expression_in_sass_function_return10289 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_CONTENT_in_sass_content10310 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_less_import_types10329 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_less_when10352 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_key_and10371 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_key_or10389 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_key_only10407 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred1_Css3470 = new BitSet(new long[]{0xC028848000847C40L,0xDDD3738010841501L,0x000000000100F807L});
	public static final BitSet FOLLOW_mediaQueryList_in_synpred1_Css3473 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred2_Css3540 = new BitSet(new long[]{0xC028848000847C40L,0xDDD3738010841501L,0x000000000100F807L});
	public static final BitSet FOLLOW_mediaQueryList_in_synpred2_Css3543 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred3_Css3600 = new BitSet(new long[]{0xC028848000847C40L,0xDDD3738010841501L,0x000000000100F807L});
	public static final BitSet FOLLOW_mediaQueryList_in_synpred3_Css3603 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred4_Css31170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SEMI_in_synpred4_Css31173 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_MIXIN_in_synpred5_Css31271 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_synpred5_Css31278 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_synpred5_Css31280 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_HASH_in_synpred5_Css31285 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred5_Css31288 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_synpred5_Css31291 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x000000001FFFFFFFL});
	public static final BitSet FOLLOW_RPAREN_in_synpred5_Css31299 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x000000001FFFFFF7L});
	public static final BitSet FOLLOW_LBRACE_in_synpred5_Css31309 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_synpred6_Css31327 = new BitSet(new long[]{0x0010000000200000L,0x0000000000080000L,0x0000000002000008L});
	public static final BitSet FOLLOW_ws_in_synpred6_Css31330 = new BitSet(new long[]{0x0010000000000000L});
	public static final BitSet FOLLOW_IMPORTANT_SYM_in_synpred6_Css31333 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000008L});
	public static final BitSet FOLLOW_ws_in_synpred6_Css31337 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SEMI_in_synpred6_Css31340 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_synpred7_Css31363 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_AT_ROOT_in_synpred8_Css31388 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred8_Css31391 = new BitSet(new long[]{0x2008CC00E0080080L,0x0020000180000808L,0x0000000000000220L});
	public static final BitSet FOLLOW_selectorsGroup_in_synpred8_Css31393 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_SASS_AT_ROOT_in_synpred8_Css31402 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred8_Css31404 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_synpred8_Css31406 = new BitSet(new long[]{0x0008000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred8_Css31408 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_synpred8_Css31411 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred8_Css31413 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_synpred8_Css31416 = new BitSet(new long[]{0x0008000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred8_Css31418 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_synpred8_Css31421 = new BitSet(new long[]{0x0000000000200000L,0x0000040000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred8_Css31423 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_synpred8_Css31426 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_selectorsGroup_in_synpred8_Css31431 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred8_Css31434 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_synpred8_Css31437 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_propertyDeclaration_in_synpred9_Css31449 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred10_Css31564 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_synpred10_Css31567 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred11_Css31611 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_key_and_in_synpred11_Css31614 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred12_Css31641 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_key_and_in_synpred12_Css31644 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_synpred13_Css31726 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HASH_in_synpred14_Css31755 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred15_Css31901 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SEMI_in_synpred15_Css31904 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_MIXIN_in_synpred16_Css31979 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_synpred16_Css31986 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_synpred16_Css31988 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_HASH_in_synpred16_Css31993 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred16_Css31996 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_synpred16_Css31999 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x000000001FFFFFFFL});
	public static final BitSet FOLLOW_RPAREN_in_synpred16_Css32007 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFF7FFFFFFFFL,0x000000001FFFFFF7L});
	public static final BitSet FOLLOW_LBRACE_in_synpred16_Css32019 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_synpred17_Css32045 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000008L});
	public static final BitSet FOLLOW_ws_in_synpred17_Css32047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SEMI_in_synpred17_Css32050 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_synpred18_Css32069 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_synpred19_Css32097 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred19_Css32099 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_synpred19_Css32102 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_map_in_synpred20_Css32119 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred21_Css33863 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_synpred21_Css33866 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_function_in_synpred22_Css33957 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_declaration_in_synpred23_Css34257 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_map_in_synpred24_Css34269 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_nested_properties_in_synpred25_Css34282 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_AT_ROOT_in_synpred26_Css34296 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred26_Css34299 = new BitSet(new long[]{0x2008CC00E0080080L,0x0020000180000808L,0x0000000000000220L});
	public static final BitSet FOLLOW_selectorsGroup_in_synpred26_Css34301 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_SASS_AT_ROOT_in_synpred26_Css34310 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred26_Css34312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_synpred26_Css34314 = new BitSet(new long[]{0x0008000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred26_Css34316 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_synpred26_Css34319 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred26_Css34321 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_synpred26_Css34324 = new BitSet(new long[]{0x0008000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred26_Css34326 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_synpred26_Css34329 = new BitSet(new long[]{0x0000000000200000L,0x0000040000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred26_Css34331 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_RPAREN_in_synpred26_Css34334 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_selectorsGroup_in_synpred26_Css34339 = new BitSet(new long[]{0x1000000000200000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred26_Css34342 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_synpred26_Css34345 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_propertyDeclaration_in_synpred27_Css34357 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_property_in_synpred28_Css34374 = new BitSet(new long[]{0x0000000000280000L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred28_Css34376 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_synpred28_Css34379 = new BitSet(new long[]{0xEFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x000000001FFFFFFFL});
	public static final BitSet FOLLOW_set_in_synpred28_Css34391 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_declaration_in_synpred29_Css34408 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_synpred30_Css34420 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_synpred31_Css34441 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred32_Css34739 = new BitSet(new long[]{0x2000C000A0080000L,0x0020000000000008L});
	public static final BitSet FOLLOW_esPred_in_synpred32_Css34742 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeSelector_in_synpred33_Css34777 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred34_Css34784 = new BitSet(new long[]{0x2000C000A0080000L,0x0020000000000008L});
	public static final BitSet FOLLOW_esPred_in_synpred34_Css34787 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PIPE_in_synpred35_Css34898 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionName_in_synpred36_Css36459 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred36_Css36461 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_synpred36_Css36464 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionName_in_synpred37_Css36494 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred37_Css36496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_synpred37_Css36499 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred38_Css36669 = new BitSet(new long[]{0xE028C5A240847CE0L,0xDDD373E171041C1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_ws_in_synpred38_Css36674 = new BitSet(new long[]{0x0000000000100000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_operator_in_synpred38_Css36677 = new BitSet(new long[]{0xE028C5A240A47CE0L,0xDDD373E1710C1C1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_synpred38_Css36679 = new BitSet(new long[]{0xE028C5A240847CE0L,0xDDD373E171041C1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_term_in_synpred38_Css36688 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionName_in_synpred39_Css36761 = new BitSet(new long[]{0x0000000000200000L,0x0000000000080100L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred39_Css36763 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_synpred39_Css36766 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fnAttributeName_in_synpred40_Css37376 = new BitSet(new long[]{0x0000000000280000L,0x0000000004080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred40_Css37378 = new BitSet(new long[]{0x0000000000080000L,0x0000000004000000L});
	public static final BitSet FOLLOW_set_in_synpred40_Css37381 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_expression_in_synpred41_Css37416 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred42_Css37510 = new BitSet(new long[]{0xE028C5A240847CE0L,0xDDD373E171041C1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_ws_in_synpred42_Css37515 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_SOLIDUS_in_synpred42_Css37518 = new BitSet(new long[]{0xE028C5A240A47CE0L,0xDDD373E1710C1C1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_synpred42_Css37520 = new BitSet(new long[]{0xE028C5A240847CE0L,0xDDD373E171041C1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_term_in_synpred42_Css37529 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred44_Css37985 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_synpred44_Css37988 = new BitSet(new long[]{0xF038C5A240A47CE0L,0xDDD373E1718C1D1BL,0x00000000034CFE47L});
	public static final BitSet FOLLOW_ws_in_synpred44_Css37990 = new BitSet(new long[]{0xF038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_expression_in_synpred44_Css37993 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_expression_atom_in_synpred45_Css38060 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred46_Css38083 = new BitSet(new long[]{0x0008180006000000L,0x0000000000000024L});
	public static final BitSet FOLLOW_cp_expression_operator_in_synpred46_Css38086 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred47_Css38112 = new BitSet(new long[]{0xE038C5A240847CE0L,0xDDD373E171841D1BL,0x00000000014CFE47L});
	public static final BitSet FOLLOW_cp_expression_atom_in_synpred47_Css38115 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_math_expression_in_synpred48_Css38255 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred49_Css38388 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000800L,0x0000000000000030L});
	public static final BitSet FOLLOW_set_in_synpred49_Css38391 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred50_Css38680 = new BitSet(new long[]{0x0000080000000000L,0x0000000100000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_combinator_in_synpred50_Css38683 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ws_in_synpred50_Css38685 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pseudo_in_synpred51_Css38721 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred52_Css38729 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_synpred52_Css38732 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_webkitKeyframeSelectors_in_synpred53_Css38848 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred54_Css310093 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_synpred54_Css310096 = new BitSet(new long[]{0x0000000000000002L});
}
